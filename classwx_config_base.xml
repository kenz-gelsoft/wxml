<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="classwx_config_base" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>wxConfigBase</compoundname>
    <basecompoundref refid="classwx_object" prot="public" virt="non-virtual">wxObject</basecompoundref>
    <derivedcompoundref refid="classwx_file_config" prot="public" virt="non-virtual">wxFileConfig</derivedcompoundref>
    <derivedcompoundref refid="classwx_reg_config" prot="public" virt="non-virtual">wxRegConfig</derivedcompoundref>
    <includes local="no">wx/config.h</includes>
      <sectiondef kind="user-defined">
      <header>Enumeration</header>
      <description><para>See <ref refid="classwx_config_base_1configbase_enumeration" kindref="member">Enumeration</ref> </para>
</description>
      <memberdef kind="enum" id="classwx_config_base_1a499282208b4b9e90cbfe60de25745bc4" prot="public" static="no" strong="no">
        <type></type>
        <name>EntryType</name>
        <enumvalue id="classwx_config_base_1a499282208b4b9e90cbfe60de25745bc4a186e69ade61db5ba7e5fc2366d2388fc" prot="public">
          <name>Type_Unknown</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_config_base_1a499282208b4b9e90cbfe60de25745bc4afeb4cd8ae582520fd2d45ec35b316d0a" prot="public">
          <name>Type_String</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_config_base_1a499282208b4b9e90cbfe60de25745bc4a5338e90a8c51020109928f3177c06caf" prot="public">
          <name>Type_Boolean</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_config_base_1a499282208b4b9e90cbfe60de25745bc4abf7985582695bbed6da7d2de5b22b6e8" prot="public">
          <name>Type_Integer</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_config_base_1a499282208b4b9e90cbfe60de25745bc4af1cafe0a03c8c929511258c31ea138cb" prot="public">
          <name>Type_Float</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Gets the first entry. </para>
        </briefdescription>
        <detaileddescription>
<para><bold>wxPerl Note:</bold> In wxPerl this method takes no parameters and returns a 3-element list (continue_flag, string, index_for_getnextentry).  </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/config.h" line="427" column="5" bodyfile="interface/wx/config.h" bodystart="428" bodyend="434"/>
      </memberdef>
      <memberdef kind="function" id="classwx_config_base_1a1f8338dd47972d196c6475e7e1140ae7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool wxConfigBase::GetFirstEntry</definition>
        <argsstring>(wxString &amp;str, long &amp;index) const =0</argsstring>
        <name>GetFirstEntry</name>
        <reimplementedby refid="classwx_file_config_1a731918aafd6b8f2552900aa79c60b48b">GetFirstEntry</reimplementedby>
        <param>
          <type><ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>long &amp;</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Gets the first entry. </para>
        </briefdescription>
        <detaileddescription>
<para><bold>wxPerl Note:</bold> In wxPerl this method takes no parameters and returns a 3-element list (continue_flag, string, index_for_getnextentry).  </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/config.h" line="379" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classwx_config_base_1af111cb376665bd1b7fc77ae20d985a6d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool wxConfigBase::GetFirstGroup</definition>
        <argsstring>(wxString &amp;str, long &amp;index) const =0</argsstring>
        <name>GetFirstGroup</name>
        <reimplementedby refid="classwx_file_config_1aa0a82bdc1a523b9324a2233a8ac42c86">GetFirstGroup</reimplementedby>
        <param>
          <type><ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>long &amp;</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Gets the first group. </para>
        </briefdescription>
        <detaileddescription>
<para><bold>wxPerl Note:</bold> In wxPerl this method takes no parameters and returns a 3-element list (continue_flag, string, index_for_getnextentry).  </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/config.h" line="389" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classwx_config_base_1a0c99d5eb83f8ebad82e1a13d1295f644" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool wxConfigBase::GetNextEntry</definition>
        <argsstring>(wxString &amp;str, long &amp;index) const =0</argsstring>
        <name>GetNextEntry</name>
        <reimplementedby refid="classwx_file_config_1a2e28f5f742466f9f6a77cd8c8e4f5d62">GetNextEntry</reimplementedby>
        <param>
          <type><ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>long &amp;</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Gets the next entry. </para>
        </briefdescription>
        <detaileddescription>
<para><bold>wxPerl Note:</bold> In wxPerl this method only takes the <emphasis>index</emphasis> parameter and returns a 3-element list (continue_flag, string, index_for_getnextentry).  </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/config.h" line="400" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classwx_config_base_1a491e0d51c86d4facd8184969ea6d341c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool wxConfigBase::GetNextGroup</definition>
        <argsstring>(wxString &amp;str, long &amp;index) const =0</argsstring>
        <name>GetNextGroup</name>
        <reimplementedby refid="classwx_file_config_1a1f8fd10b6f7ad744da343ee0af5b603a">GetNextGroup</reimplementedby>
        <param>
          <type><ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>long &amp;</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Gets the next group. </para>
        </briefdescription>
        <detaileddescription>
<para><bold>wxPerl Note:</bold> In wxPerl this method only takes the <emphasis>index</emphasis> parameter and returns a 3-element list (continue_flag, string, index_for_getnextentry).  </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/config.h" line="411" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classwx_config_base_1a993bdb14c4115ddc1458fb8bdc9de604" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>size_t</type>
        <definition>virtual size_t wxConfigBase::GetNumberOfEntries</definition>
        <argsstring>(bool bRecursive=false) const =0</argsstring>
        <name>GetNumberOfEntries</name>
        <reimplementedby refid="classwx_file_config_1a11c6187c8a07a6e722dbb4b135d7eb51">GetNumberOfEntries</reimplementedby>
        <param>
          <type>bool</type>
          <declname>bRecursive</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Get number of entries in the current group. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/config.h" line="416" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classwx_config_base_1ad695ef5dd7dee1b24c7813aa08599eb9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>size_t</type>
        <definition>virtual size_t wxConfigBase::GetNumberOfGroups</definition>
        <argsstring>(bool bRecursive=false) const =0</argsstring>
        <name>GetNumberOfGroups</name>
        <reimplementedby refid="classwx_file_config_1a132f34eca0d959b05e00477e983a045c">GetNumberOfGroups</reimplementedby>
        <param>
          <type>bool</type>
          <declname>bRecursive</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Get number of entries/subgroups in the current group, with or without its subgroups. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/config.h" line="422" column="20"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Path Management</header>
      <description><para>See <ref refid="classwx_config_base_1configbase_paths" kindref="member">Path Management</ref> </para>
</description>
      <memberdef kind="function" id="classwx_config_base_1a36e42b9ffada7c3e86466b2b4e57f8bc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
        <definition>virtual const wxString &amp; wxConfigBase::GetPath</definition>
        <argsstring>() const =0</argsstring>
        <name>GetPath</name>
        <reimplementedby refid="classwx_file_config_1a75c6a1cf08cddd3376dc62610c279400">GetPath</reimplementedby>
        <briefdescription>
<para>Retrieve the current path (always as absolute path). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/config.h" line="350" column="28"/>
      </memberdef>
      <memberdef kind="function" id="classwx_config_base_1ad290d3fe7fad4f39a4bb2959db89b379" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void wxConfigBase::SetPath</definition>
        <argsstring>(const wxString &amp;strPath)=0</argsstring>
        <name>SetPath</name>
        <reimplementedby refid="classwx_file_config_1ac2b05e8f651d7390e3c340e5c7feea0e">SetPath</reimplementedby>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>strPath</declname>
        </param>
        <briefdescription>
<para>Set current path: if the first character is &apos;/&apos;, it is the absolute path, otherwise it is a relative path. </para>
        </briefdescription>
        <detaileddescription>
<para>&apos;..&apos; is supported. If <emphasis>strPath</emphasis> doesn&apos;t exist, it is created.</para>
<para><simplesect kind="see"><para><ref refid="classwx_config_path_changer" kindref="compound">wxConfigPathChanger</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/config.h" line="359" column="18"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Tests of Existence</header>
      <memberdef kind="function" id="classwx_config_base_1adf827c37b0872f16ccc286c8678718b6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxConfigBase::Exists</definition>
        <argsstring>(const wxString &amp;strName) const</argsstring>
        <name>Exists</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>strName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if either a group or an entry with a given name exists. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/config.h" line="444" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_config_base_1a2fd2205a9bbcd9fe248dc43174117d59" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classwx_config_base_1a499282208b4b9e90cbfe60de25745bc4" kindref="member">wxConfigBase::EntryType</ref></type>
        <definition>virtual wxConfigBase::EntryType wxConfigBase::GetEntryType</definition>
        <argsstring>(const wxString &amp;name) const</argsstring>
        <name>GetEntryType</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Returns the type of the given entry or <emphasis>Unknown</emphasis> if the entry doesn&apos;t exist. </para>
        </briefdescription>
        <detaileddescription>
<para>This function should be used to decide which version of <ref refid="classwx_config_base_1a0fe9238f38e565f3218563c674e66161" kindref="member">Read()</ref> should be used because some of wxConfig implementations will complain about type mismatch otherwise: e.g., an attempt to read a string value from an integer key with <ref refid="classwx_reg_config" kindref="compound">wxRegConfig</ref> will fail. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/config.h" line="453" column="37"/>
      </memberdef>
      <memberdef kind="function" id="classwx_config_base_1aaca0748de0e2e2841aaec85f63403d3b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool wxConfigBase::HasEntry</definition>
        <argsstring>(const wxString &amp;strName) const =0</argsstring>
        <name>HasEntry</name>
        <reimplementedby refid="classwx_file_config_1a58afc69f93a1e7fa440a0b7fbdd2ad46">HasEntry</reimplementedby>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>strName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if the entry by this name exists. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/config.h" line="458" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classwx_config_base_1a27472b872af09e73597735d0938b007d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool wxConfigBase::HasGroup</definition>
        <argsstring>(const wxString &amp;strName) const =0</argsstring>
        <name>HasGroup</name>
        <reimplementedby refid="classwx_file_config_1a0d3f43185ea086a7d17be0be2135efbb">HasGroup</reimplementedby>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>strName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if the group by this name exists. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/config.h" line="463" column="18"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Miscellaneous Functions</header>
      <memberdef kind="function" id="classwx_config_base_1ac5b951ebb367a4bbc2ccebc045cb1591" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>wxString wxConfigBase::GetAppName</definition>
        <argsstring>() const</argsstring>
        <name>GetAppName</name>
        <briefdescription>
<para>Returns the application name. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/config.h" line="476" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_config_base_1affb49e611d184a7c0d4a2ccde9452026" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>wxString wxConfigBase::GetVendorName</definition>
        <argsstring>() const</argsstring>
        <name>GetVendorName</name>
        <briefdescription>
<para>Returns the vendor name. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/config.h" line="481" column="14"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Key Access</header>
      <description><para>See <ref refid="classwx_config_base_1configbase_keyaccess" kindref="member">Key Access</ref> </para>
</description>
      <memberdef kind="function" id="classwx_config_base_1a0b8cfc81de4d2534e8ab980b0fc6b9b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool wxConfigBase::Flush</definition>
        <argsstring>(bool bCurrentOnly=false)=0</argsstring>
        <name>Flush</name>
        <reimplementedby refid="classwx_file_config_1a237986fb7e05f7e5404dec1941da308d">Flush</reimplementedby>
        <param>
          <type>bool</type>
          <declname>bCurrentOnly</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Permanently writes all changes (otherwise, they&apos;re only written from object&apos;s destructor). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/config.h" line="497" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classwx_config_base_1a0fe9238f38e565f3218563c674e66161" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxConfigBase::Read</definition>
        <argsstring>(const wxString &amp;key, wxString *str) const</argsstring>
        <name>Read</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="classwx_string" kindref="compound">wxString</ref> *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Read a string from the key, returning true if the value was read. </para>
        </briefdescription>
        <detaileddescription>
<para>If the key was not found, <emphasis>str</emphasis> is not changed.</para>
<para><bold>wxPerl Note:</bold> Not supported by wxPerl.  </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/config.h" line="507" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_config_base_1aa664f00931a8cbf4990c3aa4b6b1098c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxConfigBase::Read</definition>
        <argsstring>(const wxString &amp;key, wxString *str, const wxString &amp;defaultVal) const</argsstring>
        <name>Read</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="classwx_string" kindref="compound">wxString</ref> *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>defaultVal</declname>
        </param>
        <briefdescription>
<para>Read a string from the key. </para>
        </briefdescription>
        <detaileddescription>
<para>The default value is returned if the key was not found.</para>
<para><simplesect kind="return"><para>true if value was really read, false if the default was used.</para>
</simplesect>
<bold>wxPerl Note:</bold> Not supported by wxPerl.  </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/config.h" line="518" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_config_base_1a1a593fc959d10854daa9dba04b6747ba" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>const wxString wxConfigBase::Read</definition>
        <argsstring>(const wxString &amp;key, const wxString &amp;defaultVal) const</argsstring>
        <name>Read</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>defaultVal</declname>
        </param>
        <briefdescription>
<para>Another version of <ref refid="classwx_config_base_1a0fe9238f38e565f3218563c674e66161" kindref="member">Read()</ref>, returning the string value directly. </para>
        </briefdescription>
        <detaileddescription>
<para><bold>wxPerl Note:</bold> In wxPerl, this can be called as:<itemizedlist>
<listitem><para>Read(key): returns the empty string if no key is found</para>
</listitem><listitem><para>Read(key, default): returns the default value if no key is found  </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/config.h" line="529" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classwx_config_base_1a8655c70b311edf7d808e5babb565ab77" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxConfigBase::Read</definition>
        <argsstring>(const wxString &amp;key, long *l) const</argsstring>
        <name>Read</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>long *</type>
          <declname>l</declname>
        </param>
        <briefdescription>
<para>Reads a long value, returning true if the value was found. </para>
        </briefdescription>
        <detaileddescription>
<para>If the value was not found, <emphasis>l</emphasis> is not changed.</para>
<para><bold>wxPerl Note:</bold> Not supported by wxPerl.  </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/config.h" line="539" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_config_base_1a06fafffd5e7ac33927ba38cec18e30f0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxConfigBase::Read</definition>
        <argsstring>(const wxString &amp;key, long *l, long defaultVal) const</argsstring>
        <name>Read</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>long *</type>
          <declname>l</declname>
        </param>
        <param>
          <type>long</type>
          <declname>defaultVal</declname>
        </param>
        <briefdescription>
<para>Reads a long value, returning true if the value was found. </para>
        </briefdescription>
        <detaileddescription>
<para>If the value was not found, <emphasis>defaultVal</emphasis> is used instead.</para>
<para><bold>wxPerl Note:</bold> In wxPerl, this can be called as:<itemizedlist>
<listitem><para>ReadInt(key): returns the 0 if no key is found</para>
</listitem><listitem><para>ReadInt(key, default): returns the default value if no key is found  </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/config.h" line="550" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_config_base_1a44b631c8f1e598b4d31d1cafe5fb3090" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxConfigBase::Read</definition>
        <argsstring>(const wxString &amp;key, wxLongLong_t *ll) const</argsstring>
        <name>Read</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>wxLongLong_t *</type>
          <declname>ll</declname>
        </param>
        <briefdescription>
<para>Reads a 64-bit long long value, returning true if the value was found. </para>
        </briefdescription>
        <detaileddescription>
<para>If the value was not found, <emphasis>ll</emphasis> is not changed.</para>
<para><simplesect kind="since"><para>3.1.5</para>
</simplesect>
<bold>wxPerl Note:</bold> Not supported by wxPerl.  </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/config.h" line="562" column="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classwx_config_base_1a7c3ce1f79df2837bc532c0ff551e7bac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxConfigBase::wxConfigBase</definition>
        <argsstring>(const wxString &amp;appName=wxEmptyString, const wxString &amp;vendorName=wxEmptyString, const wxString &amp;localFilename=wxEmptyString, const wxString &amp;globalFilename=wxEmptyString, long style=0, const wxMBConv &amp;conv=wxConvAuto())</argsstring>
        <name>wxConfigBase</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>appName</declname>
          <defval><ref refid="interface_2wx_2string_8h_1a9a321d587166a30017b608dd2d234033" kindref="member">wxEmptyString</ref></defval>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>vendorName</declname>
          <defval><ref refid="interface_2wx_2string_8h_1a9a321d587166a30017b608dd2d234033" kindref="member">wxEmptyString</ref></defval>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>localFilename</declname>
          <defval><ref refid="interface_2wx_2string_8h_1a9a321d587166a30017b608dd2d234033" kindref="member">wxEmptyString</ref></defval>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>globalFilename</declname>
          <defval><ref refid="interface_2wx_2string_8h_1a9a321d587166a30017b608dd2d234033" kindref="member">wxEmptyString</ref></defval>
        </param>
        <param>
          <type>long</type>
          <declname>style</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const <ref refid="classwx_m_b_conv" kindref="compound">wxMBConv</ref> &amp;</type>
          <declname>conv</declname>
          <defval><ref refid="classwx_conv_auto" kindref="compound">wxConvAuto</ref>()</defval>
        </param>
        <briefdescription>
<para>This is the default and only constructor of the <ref refid="classwx_config_base" kindref="compound">wxConfigBase</ref> class, and derived classes. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>appName</parametername>
</parameternamelist>
<parameterdescription>
<para>The application name. If this is empty, the class will normally use <ref refid="classwx_app_console_1a228d7699a00845219744c08e8c78b889" kindref="member">wxApp::GetAppName()</ref> to set it. The application name is used in the registry key on Windows, and can be used to deduce the local filename parameter if that is missing. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vendorName</parametername>
</parameternamelist>
<parameterdescription>
<para>The vendor name. If this is empty, it is assumed that no vendor name is wanted, if this is optional for the current config class. The vendor name is appended to the application name for <ref refid="classwx_reg_config" kindref="compound">wxRegConfig</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>localFilename</parametername>
</parameternamelist>
<parameterdescription>
<para>Some config classes require a local filename. If this is not present, but required, the application name will be used instead. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>globalFilename</parametername>
</parameternamelist>
<parameterdescription>
<para>Some config classes require a global filename. If this is not present, but required, the application name will be used instead. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>style</parametername>
</parameternamelist>
<parameterdescription>
<para>Can be one of <computeroutput>wxCONFIG_USE_LOCAL_FILE</computeroutput> and <computeroutput>wxCONFIG_USE_GLOBAL_FILE</computeroutput>. <linebreak/>
 The style interpretation depends on the config class and is ignored by some implementations. For <ref refid="classwx_file_config" kindref="compound">wxFileConfig</ref>, these styles determine whether a local or global config file is created or used: if <computeroutput>wxCONFIG_USE_GLOBAL_FILE</computeroutput> is used, then settings are read from the global config file and if <computeroutput>wxCONFIG_USE_LOCAL_FILE</computeroutput> is used, settings are read from and written to local config file (if they are both set, global file is read first, then local file, overwriting global settings). If the flag is present but the parameter is empty, the parameter will be set to a default. If the parameter is present but the style flag not, the relevant flag will be added to the style. For <ref refid="classwx_reg_config" kindref="compound">wxRegConfig</ref>, the GLOBAL flag refers to the <computeroutput>HKLM</computeroutput> key while LOCAL one is for the usual <computeroutput>HKCU</computeroutput> one. <linebreak/>
 For <ref refid="classwx_file_config" kindref="compound">wxFileConfig</ref> you can also add <computeroutput>wxCONFIG_USE_RELATIVE_PATH</computeroutput> by logically or&apos;ing it to either of the _FILE options to tell <ref refid="classwx_file_config" kindref="compound">wxFileConfig</ref> to use relative instead of absolute paths. <linebreak/>
 On non-VMS Unix systems, the default local configuration file is &quot;~/.appname&quot;. However, this path may be also used as user data directory (see <ref refid="classwx_standard_paths_1a5b9d1b1addc3e4ce30ccb3817cbbe19b" kindref="member">wxStandardPaths::GetUserDataDir()</ref>) if the application has several data files. In this case <computeroutput>wxCONFIG_USE_SUBDIR</computeroutput> flag, which changes the default local configuration file to &quot;~/.appname/appname&quot; should be used. Notice that this flag is ignored if <emphasis>localFilename</emphasis> is provided. <computeroutput>wxCONFIG_USE_SUBDIR</computeroutput> is new since wxWidgets version 2.8.2. <linebreak/>
 For <ref refid="classwx_file_config" kindref="compound">wxFileConfig</ref>, you can also add <computeroutput>wxCONFIG_USE_NO_ESCAPE_CHARACTERS</computeroutput> which will turn off character escaping for the values of entries stored in the config file: for example a foo key with some backslash characters will be stored as &quot;foo=C:\mydir&quot; instead of the usual storage of &quot;foo=C:\\mydir&quot;. <linebreak/>
 The <computeroutput>wxCONFIG_USE_NO_ESCAPE_CHARACTERS</computeroutput> style can be helpful if your config file must be read or written to by a non-wxWidgets program (which might not understand the escape characters). Note, however, that if <computeroutput>wxCONFIG_USE_NO_ESCAPE_CHARACTERS</computeroutput> style is used, it is now your application&apos;s responsibility to ensure that there is no newline or other illegal characters in a value, before writing that value to the file. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>conv</parametername>
</parameternamelist>
<parameterdescription>
<para>This parameter is only used by <ref refid="classwx_file_config" kindref="compound">wxFileConfig</ref> when compiled in Unicode mode. It specifies the encoding in which the configuration file is written.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>By default, environment variable expansion is on and recording defaults is off. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/config.h" line="327" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classwx_config_base_1a43a12ede8b28e1a62820101105f380d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual wxConfigBase::~wxConfigBase</definition>
        <argsstring>()</argsstring>
        <name>~wxConfigBase</name>
        <briefdescription>
<para>Empty but ensures that dtor of all derived classes is virtual. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/config.h" line="337" column="13"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="classwx_config_base" kindref="compound">wxConfigBase</ref> defines the basic interface of all config classes. </para>
    </briefdescription>
    <detaileddescription>
<para>It cannot be used by itself (it is an abstract base class) and you will always use one of its derivations: <ref refid="classwx_file_config" kindref="compound">wxFileConfig</ref>, <ref refid="classwx_reg_config" kindref="compound">wxRegConfig</ref> or any other.</para>
<para>However, usually you don&apos;t even need to know the precise nature of the class you&apos;re working with but you would just use the <ref refid="classwx_config_base" kindref="compound">wxConfigBase</ref> methods. This allows you to write the same code regardless of whether you&apos;re working with the registry under Windows or text-based config files under Unix. To make writing the portable code even easier, wxWidgets provides a typedef wxConfig which is mapped onto the native <ref refid="classwx_config_base" kindref="compound">wxConfigBase</ref> implementation on the given platform: i.e. <ref refid="classwx_reg_config" kindref="compound">wxRegConfig</ref> under Windows and <ref refid="classwx_file_config" kindref="compound">wxFileConfig</ref> otherwise.</para>
<para>See <ref refid="overview_config" kindref="compound">wxConfig Overview</ref> for a description of all features of this class.</para>
<para>It is highly recommended to use static functions Get() and/or Set(), so please have a look at them.</para>
<para>Related Include Files:</para>
<para><itemizedlist>
<listitem><para><computeroutput>&lt;<ref refid="interface_2wx_2config_8h" kindref="compound">wx/config.h</ref>&gt;</computeroutput> - Let wxWidgets choose a wxConfig class for your platform. </para>
</listitem>
<listitem><para><computeroutput>&lt;wx/confbase.h&gt;</computeroutput> - Base config class. </para>
</listitem>
<listitem><para><computeroutput>&lt;<ref refid="fileconf_8h" kindref="compound">wx/fileconf.h</ref>&gt;</computeroutput> - <ref refid="classwx_file_config" kindref="compound">wxFileConfig</ref> class. </para>
</listitem>
<listitem><para><computeroutput>&lt;<ref refid="regconf_8h" kindref="compound">wx/msw/regconf.h</ref>&gt;</computeroutput> - <ref refid="classwx_reg_config" kindref="compound">wxRegConfig</ref> class, see also <ref refid="classwx_reg_key" kindref="compound">wxRegKey</ref>.</para>
</listitem>
</itemizedlist>
</para>
<sect1 id="classwx_config_base_1configbase_example">
<title>Example</title>
<para>Here is how you would typically use this class:</para>
<para><programlisting><codeline><highlight class="comment">//<sp/>using<sp/>wxConfig<sp/>instead<sp/>of<sp/>writing<sp/>wxFileConfig<sp/>or<sp/>wxRegConfig<sp/>enhances</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>portability<sp/>of<sp/>the<sp/>code</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">wxConfig<sp/>*config<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>wxConfig(</highlight><highlight class="stringliteral">&quot;MyAppName&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="classwx_string" kindref="compound">wxString</ref><sp/>str;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>config-&gt;Read(</highlight><highlight class="stringliteral">&quot;LastPrompt&quot;</highlight><highlight class="normal">,<sp/>&amp;str)<sp/>)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>last<sp/>prompt<sp/>was<sp/>found<sp/>in<sp/>the<sp/>config<sp/>file/registry<sp/>and<sp/>its<sp/>value<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>in<sp/>str</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>last<sp/>prompt...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>another<sp/>example:<sp/>using<sp/>default<sp/>values<sp/>and<sp/>the<sp/>full<sp/>path<sp/>instead<sp/>of<sp/>just</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>key<sp/>name:<sp/>if<sp/>the<sp/>key<sp/>is<sp/>not<sp/>found<sp/>,<sp/>the<sp/>value<sp/>17<sp/>is<sp/>returned</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>config-&gt;ReadLong(</highlight><highlight class="stringliteral">&quot;/LastRun/CalculatedValues/MaxValue&quot;</highlight><highlight class="normal">,<sp/>17);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>program<sp/>we<sp/>would<sp/>save<sp/>everything<sp/>back</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">config-&gt;Write(</highlight><highlight class="stringliteral">&quot;LastPrompt&quot;</highlight><highlight class="normal">,<sp/>str);</highlight></codeline>
<codeline><highlight class="normal">config-&gt;Write(</highlight><highlight class="stringliteral">&quot;/LastRun/CalculatedValues/MaxValue&quot;</highlight><highlight class="normal">,<sp/>value);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>changes<sp/>will<sp/>be<sp/>written<sp/>back<sp/>automatically</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>config;</highlight></codeline>
</programlisting></para>
<para>This basic example, of course, doesn&apos;t show all wxConfig features, such as enumerating, testing for existence and deleting the entries and groups of entries in the config file, its abilities to automatically store the default values or expand the environment variables on the fly. However, the main idea is that using this class is easy and that it should normally do what you expect it to.</para>
<para><simplesect kind="note"><para>In the documentation of this class, the words &quot;config file&quot; also mean &quot;registry hive&quot; for <ref refid="classwx_reg_config" kindref="compound">wxRegConfig</ref> and, generally speaking, might mean any physical storage where a wxConfigBase-derived class stores its data.</para>
</simplesect>
</para>
</sect1>
<sect1 id="classwx_config_base_1configbase_static">
<title>Static Functions</title>
<para>The static functions provided deal with the &quot;default&quot; config object. Although its usage is not at all mandatory it may be convenient to use a global config object instead of creating and deleting the local config objects each time you need one (especially because creating a <ref refid="classwx_file_config" kindref="compound">wxFileConfig</ref> object might be a time consuming operation). In this case, you may create this global config object in the very start of the program and Set() it as the default. Then, from anywhere in your program, you may access it using the Get() function. This global wxConfig object will be deleted by wxWidgets automatically if it exists. Note that this implies that if you do delete this object yourself (usually in <ref refid="classwx_app_console_1a5ee60051c92b0b2933258799626a0485" kindref="member">wxApp::OnExit()</ref>) you must use Set(NULL) to prevent wxWidgets from deleting it the second time.</para>
<para>As it happens, you may even further simplify the procedure described above: you may forget about calling Set(). When Get() is called and there is no current object, it will create one using Create() function. To disable this behaviour DontCreateOnDemand() is provided.</para>
<para><simplesect kind="note"><para>You should use either Set() or Get() because wxWidgets library itself would take advantage of it and could save various information in it. For example <ref refid="classwx_font_mapper" kindref="compound">wxFontMapper</ref> or Unix version of <ref refid="classwx_file_dialog" kindref="compound">wxFileDialog</ref> have the ability to use wxConfig class.</para>
</simplesect>
</para>
</sect1>
<sect1 id="classwx_config_base_1configbase_paths">
<title>Path Management</title>
<para>As explained in the <ref refid="overview_config" kindref="compound">config overview</ref>, the config classes support a file system-like hierarchy of keys (files) and groups (directories). As in the file system case, to specify a key in the config class you must use a path to it. Config classes also support the notion of the current group, which makes it possible to use the relative paths. To clarify all this, here is an example (it is only for the sake of demonstration, it doesn&apos;t do anything sensible!):</para>
<para><programlisting><codeline><highlight class="normal">wxConfig<sp/>*config<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>wxConfig(</highlight><highlight class="stringliteral">&quot;FooBarApp&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>right<sp/>now<sp/>the<sp/>current<sp/>path<sp/>is<sp/>&apos;/&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">conf-&gt;Write(</highlight><highlight class="stringliteral">&quot;RootEntry&quot;</highlight><highlight class="normal">,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>go<sp/>to<sp/>some<sp/>other<sp/>place:<sp/>if<sp/>the<sp/>group(s)<sp/>don&apos;t<sp/>exist,<sp/>they<sp/>will<sp/>be<sp/>created</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">conf-&gt;SetPath(</highlight><highlight class="stringliteral">&quot;/Group/Subgroup&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>create<sp/>an<sp/>entry<sp/>in<sp/>subgroup</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">conf-&gt;Write(</highlight><highlight class="stringliteral">&quot;SubgroupEntry&quot;</highlight><highlight class="normal">,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>&apos;..&apos;<sp/>is<sp/>understood</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">conf-&gt;Write(</highlight><highlight class="stringliteral">&quot;../GroupEntry&quot;</highlight><highlight class="normal">,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">conf-&gt;SetPath(</highlight><highlight class="stringliteral">&quot;..&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="debug_8h_1a204cc264ee560b67e6c6467ba8ffee5f" kindref="member">wxASSERT</ref>(<sp/>conf-&gt;ReadLong(</highlight><highlight class="stringliteral">&quot;Subgroup/SubgroupEntry&quot;</highlight><highlight class="normal">,<sp/>0)<sp/>==<sp/>3<sp/>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>use<sp/>absolute<sp/>path:<sp/>it<sp/>is<sp/>allowed,<sp/>too</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="debug_8h_1a204cc264ee560b67e6c6467ba8ffee5f" kindref="member">wxASSERT</ref>(<sp/>conf-&gt;ReadLong(</highlight><highlight class="stringliteral">&quot;/RootEntry&quot;</highlight><highlight class="normal">,<sp/>0)<sp/>==<sp/>1<sp/>);</highlight></codeline>
</programlisting></para>
<para>It is highly recommended that you restore the path to its old value on function exit:</para>
<para><programlisting><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>foo(<ref refid="classwx_config_base" kindref="compound">wxConfigBase</ref><sp/>*config)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classwx_string" kindref="compound">wxString</ref><sp/>strOldPath<sp/>=<sp/>config-&gt;<ref refid="classwx_config_base_1a36e42b9ffada7c3e86466b2b4e57f8bc" kindref="member">GetPath</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>config-&gt;<ref refid="classwx_config_base_1ad290d3fe7fad4f39a4bb2959db89b379" kindref="member">SetPath</ref>(</highlight><highlight class="stringliteral">&quot;/Foo/Data&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>config-&gt;<ref refid="classwx_config_base_1ad290d3fe7fad4f39a4bb2959db89b379" kindref="member">SetPath</ref>(strOldPath);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>Otherwise the assert in the following example will surely fail (we suppose here that the foo() function is the same as above except that it doesn’t save and restore the path):</para>
<para><programlisting><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>bar(<ref refid="classwx_config_base" kindref="compound">wxConfigBase</ref><sp/>*config)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>config-&gt;Write(</highlight><highlight class="stringliteral">&quot;Test&quot;</highlight><highlight class="normal">,<sp/>17);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>foo(config);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we&apos;re<sp/>reading<sp/>&quot;/Foo/Data/Test&quot;<sp/>here!<sp/>-1<sp/>will<sp/>probably<sp/>be<sp/>returned...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="debug_8h_1a204cc264ee560b67e6c6467ba8ffee5f" kindref="member">wxASSERT</ref>(<sp/>config-&gt;ReadLong(</highlight><highlight class="stringliteral">&quot;Test&quot;</highlight><highlight class="normal">,<sp/>-1)<sp/>==<sp/>17<sp/>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>Finally, the path separator in <ref refid="classwx_config_base" kindref="compound">wxConfigBase</ref> and derived classes is always &quot;/&quot;, regardless of the platform (i.e. it is not &quot;\\&quot; under Windows).</para>
</sect1>
<sect1 id="classwx_config_base_1configbase_enumeration">
<title>Enumeration</title>
<para>The enumeration functions allow you to enumerate all entries and groups in the config file. All functions here return false when there are no more items.</para>
<para>You must pass the same index to GetNext() and GetFirst() (don&apos;t modify it). Please note that it is not the index of the current item (you will have some great surprises with <ref refid="classwx_reg_config" kindref="compound">wxRegConfig</ref> if you assume this) and you shouldn&apos;t even look at it: it is just a &quot;cookie&quot; which stores the state of the enumeration. It can&apos;t be stored inside the class because it would prevent you from running several enumerations simultaneously, that&apos;s why you must pass it explicitly.</para>
<para>Having said all this, enumerating the config entries/groups is very simple:</para>
<para><programlisting><codeline><highlight class="normal"><ref refid="classwx_config_base" kindref="compound">wxConfigBase</ref><sp/>*config<sp/>=<sp/>...;</highlight></codeline>
<codeline><highlight class="normal"><ref refid="classwx_array_string" kindref="compound">wxArrayString</ref><sp/>aNames;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>enumeration<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="classwx_string" kindref="compound">wxString</ref><sp/>str;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>dummy;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>first<sp/>enum<sp/>all<sp/>entries</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bCont<sp/>=<sp/>config-&gt;<ref refid="classwx_config_base_1a1f8338dd47972d196c6475e7e1140ae7" kindref="member">GetFirstEntry</ref>(str,<sp/>dummy);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>bCont<sp/>)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>aNames.<ref refid="classwx_array_string_1af06b61455118d83a24183c3a9f6854b1" kindref="member">Add</ref>(str);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bCont<sp/>=<sp/>config-&gt;<ref refid="classwx_config_base_1a0c99d5eb83f8ebad82e1a13d1295f644" kindref="member">GetNextEntry</ref>(str,<sp/>dummy);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>...<sp/>we<sp/>have<sp/>all<sp/>entry<sp/>names<sp/>in<sp/>aNames...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>now<sp/>all<sp/>groups...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">bCont<sp/>=<sp/>config-&gt;<ref refid="classwx_config_base_1af111cb376665bd1b7fc77ae20d985a6d" kindref="member">GetFirstGroup</ref>(str,<sp/>dummy);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>bCont<sp/>)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>aNames.<ref refid="classwx_array_string_1af06b61455118d83a24183c3a9f6854b1" kindref="member">Add</ref>(str);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bCont<sp/>=<sp/>config-&gt;<ref refid="classwx_config_base_1a491e0d51c86d4facd8184969ea6d341c" kindref="member">GetNextGroup</ref>(str,<sp/>dummy);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>...<sp/>we<sp/>have<sp/>all<sp/>group<sp/>(and<sp/>entry)<sp/>names<sp/>in<sp/>aNames...</highlight></codeline>
</programlisting></para>
<para>There are also functions to get the number of entries/subgroups without actually enumerating them, but you will probably never need them.</para>
</sect1>
<sect1 id="classwx_config_base_1configbase_keyaccess">
<title>Key Access</title>
<para>The key access functions are the core of <ref refid="classwx_config_base" kindref="compound">wxConfigBase</ref> class: they allow you to read and write config file data. All <ref refid="classwx_config_base_1a0fe9238f38e565f3218563c674e66161" kindref="member">Read()</ref> functions take a default value which will be returned if the specified key is not found in the config file.</para>
<para>Currently, supported types of data are: <ref refid="classwx_string" kindref="compound">wxString</ref>, <computeroutput>long</computeroutput>, <computeroutput>double</computeroutput>, <computeroutput>bool</computeroutput>, <ref refid="classwx_colour" kindref="compound">wxColour</ref> and any other types for which the functions <ref refid="colour_8h_1a0adf8026ea8ed126420a2e7ef9edc678" kindref="member">wxToString()</ref> and <ref refid="colour_8h_1a598ae7504c6436af325490b41f4b5e90" kindref="member">wxFromString()</ref> are defined.</para>
<para>Try not to read long values into string variables and vice versa: although it just might work with <ref refid="classwx_file_config" kindref="compound">wxFileConfig</ref>, you will get a system error with <ref refid="classwx_reg_config" kindref="compound">wxRegConfig</ref> because in the Windows registry the different types of entries are indeed used.</para>
<para>Final remark: the <emphasis>szKey</emphasis> parameter for all these functions can contain an arbitrary path (either relative or absolute), not just the key name.</para>
<para><heading level="2"></heading>
</para>
<para>Library:<nonbreakablespace/><nonbreakablespace/><ref refid="page_libs_1page_libs_wxbase" kindref="member">wxBase</ref> &lt;&gt;&lt; =&apos;&apos;&gt;:&lt;/&gt;&amp;;&amp;;&lt; =&apos;&apos;&gt;\ &lt;/&gt;&lt;/&gt;</para>
<para><simplesect kind="see"><para><ref refid="classwx_config_path_changer" kindref="compound">wxConfigPathChanger</ref> </para>
</simplesect>
</para>
</sect1>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>wxConfigBase</label>
        <link refid="classwx_config_base"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>wxFileConfig</label>
        <link refid="classwx_file_config"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>wxObject</label>
        <link refid="classwx_object"/>
      </node>
      <node id="4">
        <label>wxRegConfig</label>
        <link refid="classwx_reg_config"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>wxConfigBase</label>
        <link refid="classwx_config_base"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>wxObject</label>
        <link refid="classwx_object"/>
        <childnode refid="3" relation="usage">
          <edgelabel>m_refData</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>wxObjectRefData</label>
        <link refid="classwx_object_ref_data"/>
      </node>
    </collaborationgraph>
    <location file="interface/wx/config.h" line="259" column="1" bodyfile="interface/wx/config.h" bodystart="260" bodyend="945"/>
    <listofallmembers>
      <member refid="classwx_object_1a60204063f3cc3aa2fa1c7ff5bda9eb13" prot="protected" virt="non-virtual"><scope>wxConfigBase</scope><name>AllocExclusive</name></member>
      <member refid="classwx_object_1ac9c60b64c3757a5818b1123b197cd50d" prot="protected" virt="virtual"><scope>wxConfigBase</scope><name>CloneRefData</name></member>
      <member refid="classwx_object_1a9c38fc7f7d0dd40d5d83f3eedf1fb817" prot="protected" virt="virtual"><scope>wxConfigBase</scope><name>CreateRefData</name></member>
      <member refid="classwx_config_base_1a499282208b4b9e90cbfe60de25745bc4" prot="public" virt="non-virtual"><scope>wxConfigBase</scope><name>EntryType</name></member>
      <member refid="classwx_config_base_1adf827c37b0872f16ccc286c8678718b6" prot="public" virt="non-virtual"><scope>wxConfigBase</scope><name>Exists</name></member>
      <member refid="classwx_config_base_1a0b8cfc81de4d2534e8ab980b0fc6b9b8" prot="public" virt="pure-virtual"><scope>wxConfigBase</scope><name>Flush</name></member>
      <member refid="classwx_config_base_1ac5b951ebb367a4bbc2ccebc045cb1591" prot="public" virt="non-virtual"><scope>wxConfigBase</scope><name>GetAppName</name></member>
      <member refid="classwx_object_1a9fd1bc8bc3a47c6e14e679a80e3cb8f4" prot="public" virt="virtual"><scope>wxConfigBase</scope><name>GetClassInfo</name></member>
      <member refid="classwx_config_base_1a2fd2205a9bbcd9fe248dc43174117d59" prot="public" virt="virtual"><scope>wxConfigBase</scope><name>GetEntryType</name></member>
      <member refid="classwx_config_base_1a1f8338dd47972d196c6475e7e1140ae7" prot="public" virt="pure-virtual"><scope>wxConfigBase</scope><name>GetFirstEntry</name></member>
      <member refid="classwx_config_base_1af111cb376665bd1b7fc77ae20d985a6d" prot="public" virt="pure-virtual"><scope>wxConfigBase</scope><name>GetFirstGroup</name></member>
      <member refid="classwx_config_base_1a0c99d5eb83f8ebad82e1a13d1295f644" prot="public" virt="pure-virtual"><scope>wxConfigBase</scope><name>GetNextEntry</name></member>
      <member refid="classwx_config_base_1a491e0d51c86d4facd8184969ea6d341c" prot="public" virt="pure-virtual"><scope>wxConfigBase</scope><name>GetNextGroup</name></member>
      <member refid="classwx_config_base_1a993bdb14c4115ddc1458fb8bdc9de604" prot="public" virt="pure-virtual"><scope>wxConfigBase</scope><name>GetNumberOfEntries</name></member>
      <member refid="classwx_config_base_1ad695ef5dd7dee1b24c7813aa08599eb9" prot="public" virt="pure-virtual"><scope>wxConfigBase</scope><name>GetNumberOfGroups</name></member>
      <member refid="classwx_config_base_1a36e42b9ffada7c3e86466b2b4e57f8bc" prot="public" virt="pure-virtual"><scope>wxConfigBase</scope><name>GetPath</name></member>
      <member refid="classwx_object_1a0e06d77b52ee4c44a31c7cb62c9a4b68" prot="public" virt="non-virtual"><scope>wxConfigBase</scope><name>GetRefData</name></member>
      <member refid="classwx_config_base_1affb49e611d184a7c0d4a2ccde9452026" prot="public" virt="non-virtual"><scope>wxConfigBase</scope><name>GetVendorName</name></member>
      <member refid="classwx_config_base_1aaca0748de0e2e2841aaec85f63403d3b" prot="public" virt="pure-virtual"><scope>wxConfigBase</scope><name>HasEntry</name></member>
      <member refid="classwx_config_base_1a27472b872af09e73597735d0938b007d" prot="public" virt="pure-virtual"><scope>wxConfigBase</scope><name>HasGroup</name></member>
      <member refid="classwx_object_1a3c7115ef4132dcee0c4fc34e84d7fced" prot="public" virt="non-virtual"><scope>wxConfigBase</scope><name>IsKindOf</name></member>
      <member refid="classwx_object_1a059373c494c2369d7db2a556efef8ecf" prot="public" virt="non-virtual"><scope>wxConfigBase</scope><name>IsSameAs</name></member>
      <member refid="classwx_object_1a9e31954530a0abd54982effc443ed2b8" prot="protected" virt="non-virtual"><scope>wxConfigBase</scope><name>m_refData</name></member>
      <member refid="classwx_object_1a07b8f34f5afc5743195c5fed052f55d3" prot="public" virt="non-virtual"><scope>wxConfigBase</scope><name>operator delete</name></member>
      <member refid="classwx_object_1a48f4a0e3f8d737ca8d6cd04c1bbf08f0" prot="public" virt="non-virtual"><scope>wxConfigBase</scope><name>operator new</name></member>
      <member refid="classwx_config_base_1a0fe9238f38e565f3218563c674e66161" prot="public" virt="non-virtual"><scope>wxConfigBase</scope><name>Read</name></member>
      <member refid="classwx_config_base_1aa664f00931a8cbf4990c3aa4b6b1098c" prot="public" virt="non-virtual"><scope>wxConfigBase</scope><name>Read</name></member>
      <member refid="classwx_config_base_1a1a593fc959d10854daa9dba04b6747ba" prot="public" virt="non-virtual"><scope>wxConfigBase</scope><name>Read</name></member>
      <member refid="classwx_config_base_1a8655c70b311edf7d808e5babb565ab77" prot="public" virt="non-virtual"><scope>wxConfigBase</scope><name>Read</name></member>
      <member refid="classwx_config_base_1a06fafffd5e7ac33927ba38cec18e30f0" prot="public" virt="non-virtual"><scope>wxConfigBase</scope><name>Read</name></member>
      <member refid="classwx_config_base_1a44b631c8f1e598b4d31d1cafe5fb3090" prot="public" virt="non-virtual"><scope>wxConfigBase</scope><name>Read</name></member>
      <member refid="classwx_object_1a2f6f1aa51fe9fc2b1415ca4211a90e9e" prot="public" virt="non-virtual"><scope>wxConfigBase</scope><name>Ref</name></member>
      <member refid="classwx_config_base_1ad290d3fe7fad4f39a4bb2959db89b379" prot="public" virt="pure-virtual"><scope>wxConfigBase</scope><name>SetPath</name></member>
      <member refid="classwx_object_1afab780710f2adc1bb33310e27590140b" prot="public" virt="non-virtual"><scope>wxConfigBase</scope><name>SetRefData</name></member>
      <member refid="classwx_config_base_1a499282208b4b9e90cbfe60de25745bc4a5338e90a8c51020109928f3177c06caf" prot="public" virt="non-virtual"><scope>wxConfigBase</scope><name>Type_Boolean</name></member>
      <member refid="classwx_config_base_1a499282208b4b9e90cbfe60de25745bc4af1cafe0a03c8c929511258c31ea138cb" prot="public" virt="non-virtual"><scope>wxConfigBase</scope><name>Type_Float</name></member>
      <member refid="classwx_config_base_1a499282208b4b9e90cbfe60de25745bc4abf7985582695bbed6da7d2de5b22b6e8" prot="public" virt="non-virtual"><scope>wxConfigBase</scope><name>Type_Integer</name></member>
      <member refid="classwx_config_base_1a499282208b4b9e90cbfe60de25745bc4afeb4cd8ae582520fd2d45ec35b316d0a" prot="public" virt="non-virtual"><scope>wxConfigBase</scope><name>Type_String</name></member>
      <member refid="classwx_config_base_1a499282208b4b9e90cbfe60de25745bc4a186e69ade61db5ba7e5fc2366d2388fc" prot="public" virt="non-virtual"><scope>wxConfigBase</scope><name>Type_Unknown</name></member>
      <member refid="classwx_object_1af51efc6b1ae632fc7f0cd7ebbce9fa36" prot="public" virt="non-virtual"><scope>wxConfigBase</scope><name>UnRef</name></member>
      <member refid="classwx_object_1a74b40e42d19a4b9e9bec0b57d62a5725" prot="public" virt="non-virtual"><scope>wxConfigBase</scope><name>UnShare</name></member>
      <member refid="classwx_config_base_1a7c3ce1f79df2837bc532c0ff551e7bac" prot="public" virt="non-virtual"><scope>wxConfigBase</scope><name>wxConfigBase</name></member>
      <member refid="classwx_object_1acaa378363a28af421ab56ad7b46eadf0" prot="public" virt="non-virtual"><scope>wxConfigBase</scope><name>wxObject</name></member>
      <member refid="classwx_object_1a4721b4dc9b7aff0f30904ba2ea3954cf" prot="public" virt="non-virtual"><scope>wxConfigBase</scope><name>wxObject</name></member>
      <member refid="classwx_config_base_1a43a12ede8b28e1a62820101105f380d0" prot="public" virt="virtual"><scope>wxConfigBase</scope><name>~wxConfigBase</name></member>
      <member refid="classwx_object_1a2a51aa8bfbab47ca2f051bcf84b3f35b" prot="public" virt="virtual"><scope>wxConfigBase</scope><name>~wxObject</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
