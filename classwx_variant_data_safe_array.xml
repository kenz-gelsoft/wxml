<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="classwx_variant_data_safe_array" kind="class" language="C++" prot="public">
    <compoundname>wxVariantDataSafeArray</compoundname>
    <basecompoundref refid="classwx_variant_data" prot="public" virt="non-virtual">wxVariantData</basecompoundref>
    <includes local="no">wx/msw/ole/oleutils.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classwx_variant_data_safe_array_1a5a37af571e21aa373885a80ea7ce512c" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxVariantDataSafeArray::wxVariantDataSafeArray</definition>
        <argsstring>(SAFEARRAY *value=NULL)</argsstring>
        <name>wxVariantDataSafeArray</name>
        <qualifiedname>wxVariantDataSafeArray::wxVariantDataSafeArray</qualifiedname>
        <param>
          <type>SAFEARRAY *</type>
          <declname>value</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Constructor initializes the object to <emphasis>value</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/msw/ole/oleutils.h" line="334" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_variant_data_safe_array_1a34b8071b7db65d28d50a046a1634b6c4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SAFEARRAY *</type>
        <definition>SAFEARRAY * wxVariantDataSafeArray::GetValue</definition>
        <argsstring>() const</argsstring>
        <name>GetValue</name>
        <qualifiedname>wxVariantDataSafeArray::GetValue</qualifiedname>
        <briefdescription>
<para>Returns the stored array. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/msw/ole/oleutils.h" line="339" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classwx_variant_data_safe_array_1ae6857c97e708a18b6e9c482dfacd46dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxVariantDataSafeArray::SetValue</definition>
        <argsstring>(SAFEARRAY *value)</argsstring>
        <name>SetValue</name>
        <qualifiedname>wxVariantDataSafeArray::SetValue</qualifiedname>
        <param>
          <type>SAFEARRAY *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the stored array. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/msw/ole/oleutils.h" line="344" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_variant_data_safe_array_1a84c652350cff475b4d4827064ff8a36e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool wxVariantDataSafeArray::Eq</definition>
        <argsstring>(wxVariantData &amp;data) const</argsstring>
        <name>Eq</name>
        <qualifiedname>wxVariantDataSafeArray::Eq</qualifiedname>
        <reimplements refid="classwx_variant_data_1a528c7c86af3dd554e5b72d2e5fdead6f">Eq</reimplements>
        <param>
          <type><ref refid="classwx_variant_data" kindref="compound">wxVariantData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Returns true if <emphasis>data</emphasis> is of <ref refid="classwx_variant_data_safe_array" kindref="compound">wxVariantDataSafeArray</ref> type and contains the same SAFEARRAY* value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/msw/ole/oleutils.h" line="350" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classwx_variant_data_safe_array_1aefdb19e804fefdcdbb9d2b1f34137598" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool wxVariantDataSafeArray::Write</definition>
        <argsstring>(wxString &amp;str) const</argsstring>
        <name>Write</name>
        <qualifiedname>wxVariantDataSafeArray::Write</qualifiedname>
        <reimplements refid="classwx_variant_data_1a9d208924d7b652fb85db4ff6cb0b5d08">Write</reimplements>
        <param>
          <type><ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Fills the provided string with the textual representation of this object. </para>
        </briefdescription>
        <detaileddescription>
<para>Only the address of <computeroutput>SAFEARRAY</computeroutput> pointer is output. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/msw/ole/oleutils.h" line="358" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classwx_variant_data_safe_array_1a6a6625cd37fd149b75d4f9762bedb7e4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classwx_variant_data" kindref="compound">wxVariantData</ref> *</type>
        <definition>wxVariantData * wxVariantDataSafeArray::Clone</definition>
        <argsstring>() const</argsstring>
        <name>Clone</name>
        <qualifiedname>wxVariantDataSafeArray::Clone</qualifiedname>
        <reimplements refid="classwx_variant_data_1a532ef084409dc34bab886b59d41fc7d3">Clone</reimplements>
        <briefdescription>
<para>Returns a copy of itself. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/msw/ole/oleutils.h" line="363" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classwx_variant_data_safe_array_1a18ea4f9ca1b455ab76f702b61476abec" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>virtual wxString wxVariantDataSafeArray::GetType</definition>
        <argsstring>() const</argsstring>
        <name>GetType</name>
        <qualifiedname>wxVariantDataSafeArray::GetType</qualifiedname>
        <reimplements refid="classwx_variant_data_1a56789ab40ed58d058e655576ec1e81bc">GetType</reimplements>
        <briefdescription>
<para>Returns &quot;safearray&quot;. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/msw/ole/oleutils.h" line="368" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classwx_variant_data_safe_array_1a810ff585ad88a965f288bb079d3ceb31" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool wxVariantDataSafeArray::GetAsAny</definition>
        <argsstring>(wxAny *any) const</argsstring>
        <name>GetAsAny</name>
        <qualifiedname>wxVariantDataSafeArray::GetAsAny</qualifiedname>
        <param>
          <type><ref refid="classwx_any" kindref="compound">wxAny</ref> *</type>
          <declname>any</declname>
        </param>
        <briefdescription>
<para>Converts the value of this object to <ref refid="classwx_any" kindref="compound">wxAny</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/msw/ole/oleutils.h" line="373" column="18"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This class stores <computeroutput>SAFEARRAY</computeroutput> in a <ref refid="classwx_variant" kindref="compound">wxVariant</ref>. </para>
    </briefdescription>
    <detaileddescription>
<para>It can be used to pass arrays having more than one dimension with <ref refid="classwx_automation_object" kindref="compound">wxAutomationObject</ref> methods.</para>
<para>When <ref refid="classwx_variant" kindref="compound">wxVariant</ref> stores <ref refid="classwx_variant_data_safe_array" kindref="compound">wxVariantDataSafeArray</ref>, it returns &quot;safearray&quot; as its type.</para>
<para><ref refid="classwx_variant_data_safe_array" kindref="compound">wxVariantDataSafeArray</ref> does NOT manage the <computeroutput>SAFEARRAY</computeroutput> it points to. If you want to pass it to a <ref refid="classwx_automation_object" kindref="compound">wxAutomationObject</ref> as a parameter:<orderedlist>
<listitem><para>Create and fill a <computeroutput>SAFEARRAY</computeroutput>.</para>
</listitem><listitem><para>Assign the <computeroutput>SAFEARRAY</computeroutput> pointer to it and store it in a <ref refid="classwx_variant" kindref="compound">wxVariant</ref>.</para>
</listitem><listitem><para>Call a <ref refid="classwx_automation_object" kindref="compound">wxAutomationObject</ref> method (such as CallMethod() or PutProperty()) with the <ref refid="classwx_variant" kindref="compound">wxVariant</ref> as a parameter.</para>
</listitem><listitem><para><ref refid="classwx_automation_object" kindref="compound">wxAutomationObject</ref> will destroy the array after the automation call.</para>
</listitem></orderedlist>
</para>
<para>An example of creating a two-dimensional <computeroutput>SAFEARRAY</computeroutput> containing <computeroutput>VARIANT</computeroutput>s and storing it in a <ref refid="classwx_variant" kindref="compound">wxVariant</ref>, using a utility class <ref refid="classwx_safe_array_3_01var_type_01_4" kindref="compound">wxSafeArray&lt;varType&gt;</ref>. <programlisting><codeline><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>dimensions<sp/>=<sp/>2;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>rowCount<sp/>=<sp/>1000;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>columnCount<sp/>=<sp/>20;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SAFEARRAYBOUND<sp/>bounds[dimensions];</highlight></codeline>
<codeline><highlight class="normal">wxSafeArray&lt;VT_VARIANT&gt;<sp/>safeArray;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">bounds[0].lLbound<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>elements<sp/>start<sp/>at<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">bounds[0].cElements<sp/>=<sp/>rowCount;</highlight></codeline>
<codeline><highlight class="normal">bounds[1].lLbound<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>elements<sp/>start<sp/>at<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">bounds[1].cElements<sp/>=<sp/>columnCount;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!safeArray.Create(bounds,<sp/>dimensions)<sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>indices[dimensions];</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>row<sp/>=<sp/>0;<sp/>row<sp/>&lt;<sp/>rowCount;<sp/>++row<sp/>)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>indices[0]<sp/>=<sp/>row;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>column<sp/>=<sp/>0;<sp/>column<sp/>&lt;<sp/>columnCount;<sp/>++column<sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indices[1]<sp/>=<sp/>column;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!safeArray.SetElement(indices,<sp/><ref refid="classwx_string_1addd9ccfa3ae2b7ab2d66bcbf034d0be0" kindref="member">wxString::Format</ref>(</highlight><highlight class="stringliteral">&quot;R%u<sp/>C%u&quot;</highlight><highlight class="normal">,<sp/>row,<sp/>column))<sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">range.PutProperty(</highlight><highlight class="stringliteral">&quot;Value&quot;</highlight><highlight class="normal">,<sp/><ref refid="classwx_variant" kindref="compound">wxVariant</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classwx_variant_data_safe_array_1a5a37af571e21aa373885a80ea7ce512c" kindref="member">wxVariantDataSafeArray</ref>(safeArray.Detach())));</highlight></codeline>
</programlisting></para>
<para>If you want to receive a <computeroutput>SAFEARRAY</computeroutput> in a <ref refid="classwx_variant" kindref="compound">wxVariant</ref> as a result of an <ref refid="classwx_automation_object" kindref="compound">wxAutomationObject</ref> call:<orderedlist>
<listitem><para>Call <ref refid="classwx_automation_object_1af68c1dfd67c9c018983e0da3c0385fae" kindref="member">wxAutomationObject::SetConvertVariantFlags()</ref> with parameter <ref refid="oleutils_8h_1abc7384fa01c6eb0bda9f6daba63b5f19ac9eb2d8b9ff34bf523694dfc2c7481f0" kindref="member">wxOleConvertVariant_ReturnSafeArrays</ref> (otherwise the data would be sent as a flattened one-dimensional list).</para>
</listitem><listitem><para>Call a <ref refid="classwx_automation_object" kindref="compound">wxAutomationObject</ref> method (such as CallMethod() or GetProperty()).</para>
</listitem><listitem><para>Retrieve the <computeroutput>SAFEARRAY</computeroutput> from the returned <ref refid="classwx_variant" kindref="compound">wxVariant</ref>.</para>
</listitem><listitem><para>Process the data in the <computeroutput>SAFEARRAY</computeroutput>.</para>
</listitem><listitem><para>Destroy the <computeroutput>SAFEARRAY</computeroutput> when you no longer need it.</para>
</listitem></orderedlist>
</para>
<para>The following example shows how to process a two-dimensional <computeroutput>SAFEARRAY</computeroutput> with <computeroutput>VT_VARIANT</computeroutput> type received from a <ref refid="classwx_automation_object" kindref="compound">wxAutomationObject</ref> call, using a utility class <ref refid="classwx_safe_array_3_01var_type_01_4" kindref="compound">wxSafeArray&lt;varType&gt;</ref>. <programlisting><codeline><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>dimensions<sp/>=<sp/>2;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="classwx_variant" kindref="compound">wxVariant</ref><sp/>result;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">range.SetConvertVariantFlags(<ref refid="oleutils_8h_1abc7384fa01c6eb0bda9f6daba63b5f19ac9eb2d8b9ff34bf523694dfc2c7481f0" kindref="member">wxOleConvertVariant_ReturnSafeArrays</ref>);</highlight></codeline>
<codeline><highlight class="normal">result<sp/>=<sp/>range.GetProperty(</highlight><highlight class="stringliteral">&quot;Value&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!result.<ref refid="classwx_variant_1a2cfe4b385f810f436d4167f20ac028af" kindref="member">IsType</ref>(</highlight><highlight class="stringliteral">&quot;safearray&quot;</highlight><highlight class="normal">)<sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">wxSafeArray&lt;VT_VARIANT&gt;<sp/>safeArray;</highlight></codeline>
<codeline><highlight class="normal"><ref refid="classwx_variant_data_safe_array" kindref="compound">wxVariantDataSafeArray</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>sa<sp/>=<sp/>wxStaticCastVariantData(result.<ref refid="classwx_variant_1afa388b5d6009bee62eb001d43d11a129" kindref="member">GetData</ref>(),<sp/><ref refid="classwx_variant_data_safe_array" kindref="compound">wxVariantDataSafeArray</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!safeArray.Attach(sa-&gt;<ref refid="classwx_variant_data_safe_array_1a34b8071b7db65d28d50a046a1634b6c4" kindref="member">GetValue</ref>())<sp/>)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!safeArray.HasArray()<sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::SafeArrayDestroy(sa-&gt;<ref refid="classwx_variant_data_safe_array_1a34b8071b7db65d28d50a046a1634b6c4" kindref="member">GetValue</ref>());<sp/></highlight><highlight class="comment">//<sp/>we<sp/>have<sp/>to<sp/>dispose<sp/>the<sp/>SAFEARRAY<sp/>ourselves</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>safeArray.GetDim()<sp/>!=<sp/>dimensions<sp/>)<sp/></highlight><highlight class="comment">//<sp/>we<sp/>are<sp/>expecting<sp/>2<sp/>dimensions</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>SAFEARRAY<sp/>will<sp/>be<sp/>disposed<sp/>by<sp/>safeArray&apos;s<sp/>dtor</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>rowStart,<sp/>columnStart;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>rowCount,<sp/>columnCount;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>indices[dimensions];</highlight></codeline>
<codeline><highlight class="normal"><ref refid="classwx_variant" kindref="compound">wxVariant</ref><sp/>value;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>get<sp/>start<sp/>indices<sp/>and<sp/>item<sp/>counts<sp/>for<sp/>rows<sp/>and<sp/>columns</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">safeArray.GetLBound(1,<sp/>rowStart);</highlight></codeline>
<codeline><highlight class="normal">safeArray.GetLBound(2,<sp/>columnStart);</highlight></codeline>
<codeline><highlight class="normal">safeArray.GetUBound(1,<sp/>rowCount);</highlight></codeline>
<codeline><highlight class="normal">safeArray.GetUBound(2,<sp/>columnCount);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>row<sp/>=<sp/>rowStart;<sp/>row<sp/>&lt;=<sp/>rowCount;<sp/>++row<sp/>)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>indices[0]<sp/>=<sp/>row;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>column<sp/>=<sp/>columnStart;<sp/>column<sp/>&lt;=<sp/>columnCount;<sp/>++column<sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indices[1]<sp/>=<sp/>column;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!safeArray.GetElement(indices,<sp/>value)<sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>something<sp/>with<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>SAFEARRAY<sp/>will<sp/>be<sp/>disposed<sp/>by<sp/>safeArray&apos;s<sp/>dtor</highlight></codeline>
</programlisting></para>
<para>Availability:<nonbreakablespace/><nonbreakablespace/>only available for the <ref refid="page_port_1page_port_wxmsw" kindref="member">wxMSW</ref> port.  <onlyfor>wxmsw</onlyfor>  <simplesect kind="since"><para>2.9.5</para>
</simplesect>
<heading level="2"></heading>
</para>
<para>Library:<nonbreakablespace/><nonbreakablespace/><ref refid="page_libs_1page_libs_wxcore" kindref="member">wxCore</ref></para>
<para>Category:<nonbreakablespace/><nonbreakablespace/><ref refid="group__group__class__data" kindref="compound">Data Structures</ref></para>
<para><simplesect kind="see"><para><ref refid="classwx_automation_object" kindref="compound">wxAutomationObject</ref>, <ref refid="classwx_safe_array_3_01var_type_01_4" kindref="compound">wxSafeArray&lt;varType&gt;</ref>, <ref refid="classwx_variant" kindref="compound">wxVariant</ref>, <ref refid="classwx_variant_data" kindref="compound">wxVariantData</ref> </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>wxObjectRefData</label>
        <link refid="classwx_object_ref_data"/>
      </node>
      <node id="2">
        <label>wxVariantData</label>
        <link refid="classwx_variant_data"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>wxVariantDataSafeArray</label>
        <link refid="classwx_variant_data_safe_array"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>wxObjectRefData</label>
        <link refid="classwx_object_ref_data"/>
      </node>
      <node id="2">
        <label>wxVariantData</label>
        <link refid="classwx_variant_data"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>wxVariantDataSafeArray</label>
        <link refid="classwx_variant_data_safe_array"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="interface/wx/msw/ole/oleutils.h" line="328" column="1" bodyfile="interface/wx/msw/ole/oleutils.h" bodystart="329" bodyend="374"/>
    <listofallmembers>
      <member refid="classwx_variant_data_safe_array_1a6a6625cd37fd149b75d4f9762bedb7e4" prot="public" virt="virtual"><scope>wxVariantDataSafeArray</scope><name>Clone</name></member>
      <member refid="classwx_variant_data_1a5c90358b8b5d3bc99c0c3410cf565010" prot="public" virt="non-virtual"><scope>wxVariantDataSafeArray</scope><name>DecRef</name></member>
      <member refid="classwx_variant_data_safe_array_1a84c652350cff475b4d4827064ff8a36e" prot="public" virt="virtual"><scope>wxVariantDataSafeArray</scope><name>Eq</name></member>
      <member refid="classwx_variant_data_1a423d43c0ac02ce4c0c044332afa41201" prot="public" virt="virtual"><scope>wxVariantDataSafeArray</scope><name>GetAny</name></member>
      <member refid="classwx_variant_data_safe_array_1a810ff585ad88a965f288bb079d3ceb31" prot="public" virt="virtual"><scope>wxVariantDataSafeArray</scope><name>GetAsAny</name></member>
      <member refid="classwx_variant_data_safe_array_1a18ea4f9ca1b455ab76f702b61476abec" prot="public" virt="virtual"><scope>wxVariantDataSafeArray</scope><name>GetType</name></member>
      <member refid="classwx_variant_data_safe_array_1a34b8071b7db65d28d50a046a1634b6c4" prot="public" virt="non-virtual"><scope>wxVariantDataSafeArray</scope><name>GetValue</name></member>
      <member refid="classwx_variant_data_1ae5c91c7065e3faadacb4ae2ec7cbf772" prot="public" virt="virtual"><scope>wxVariantDataSafeArray</scope><name>GetValueClassInfo</name></member>
      <member refid="classwx_variant_data_1ae25c62e3451463ed287367a7b709e51d" prot="public" virt="non-virtual"><scope>wxVariantDataSafeArray</scope><name>IncRef</name></member>
      <member refid="classwx_variant_data_1a1007dbb33d60c210caab567d2d12feae" prot="public" virt="virtual"><scope>wxVariantDataSafeArray</scope><name>Read</name></member>
      <member refid="classwx_variant_data_1a478c208420802aade488e57de371d27b" prot="public" virt="virtual"><scope>wxVariantDataSafeArray</scope><name>Read</name></member>
      <member refid="classwx_variant_data_safe_array_1ae6857c97e708a18b6e9c482dfacd46dc" prot="public" virt="non-virtual"><scope>wxVariantDataSafeArray</scope><name>SetValue</name></member>
      <member refid="classwx_variant_data_safe_array_1aefdb19e804fefdcdbb9d2b1f34137598" prot="public" virt="virtual"><scope>wxVariantDataSafeArray</scope><name>Write</name></member>
      <member refid="classwx_variant_data_1aa8c8235c54ddea7002980514ec63caae" prot="public" virt="virtual" ambiguityscope="wxVariantData::"><scope>wxVariantDataSafeArray</scope><name>Write</name></member>
      <member refid="classwx_variant_data_1ac6f6a975c310013dca16b71ce891f39e" prot="public" virt="non-virtual"><scope>wxVariantDataSafeArray</scope><name>wxVariantData</name></member>
      <member refid="classwx_variant_data_safe_array_1a5a37af571e21aa373885a80ea7ce512c" prot="public" virt="non-virtual"><scope>wxVariantDataSafeArray</scope><name>wxVariantDataSafeArray</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
