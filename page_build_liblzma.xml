<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="page_build_liblzma" kind="page">
    <compoundname>page_build_liblzma</compoundname>
    <title>Using LZMA compression with liblzma</title>
    <briefdescription>
<para>To use <ref refid="classwx_l_z_m_a_input_stream" kindref="compound">wxLZMAInputStream</ref> and <ref refid="classwx_l_z_m_a_output_stream" kindref="compound">wxLZMAOutputStream</ref> classes, a public domain liblzma library is required when building wxWidgets. </para>
    </briefdescription>
    <detaileddescription>
<para>To use <ref refid="classwx_l_z_m_a_input_stream" kindref="compound">wxLZMAInputStream</ref> and <ref refid="classwx_l_z_m_a_output_stream" kindref="compound">wxLZMAOutputStream</ref> classes, a public domain liblzma library is required when building wxWidgets.</para>
<para>This guide explains how to make liblzma available and let wxWidgets build system use it. The exact steps depend on the operating system and compiler used, please refer to the section appropriate for your environment below.</para>
<sect1 id="page_build_liblzma_1page_build_liblzma_unix">
<title>Unix-like operating system (including Cygwin)</title>
<para>Under many Unix or Unix-like (including Cygwin) systems, liblzma is available as a system package and the simplest thing to do is to just install it using the system-specific tool (apt, yum, ...). Just note that you need to install the liblzma-dev or liblzma-devel package in order to obtain the library headers and not just the library itself.</para>
<para>If your system doesn&apos;t provide such package or you need to use a newer version than is available in the system repositories, it is also simple to build liblzma from sources: basically, just download the library sources from <ulink url="https://tukaani.org/xz/">https://tukaani.org/xz/</ulink> or clone its repository and perform the usual</para>
<para><programlisting><codeline><highlight class="normal">$<sp/>./configure</highlight></codeline>
<codeline><highlight class="normal">$<sp/>make</highlight></codeline>
<codeline><highlight class="normal">$<sp/>make<sp/>install</highlight></codeline>
</programlisting></para>
<para>commands sequence.</para>
<para>As wxWidgets is built using either configure or CMake under Unix-like systems, there is nothing special to do to let wxWidgets use liblzma, as it will be detected automatically <ndash/> just check the end of configure or CMake output to confirm that it was found. If this is not the case because the library was installed in some non-default location, you need to provide <computeroutput>CPPFLAGS</computeroutput> and <computeroutput>LDFLAGS</computeroutput> on configure command line, e.g.:</para>
<para><programlisting><codeline><highlight class="normal">$<sp/>../configure<sp/>CPPFLAGS=-I/opt/liblzma/include<sp/>LDFLAGS=-L/opt/liblzma/lib</highlight></codeline>
</programlisting></para>
</sect1>
<sect1 id="page_build_liblzma_1page_build_liblzma_msw">
<title>MSW not using configure</title>
<para>When not using configure, you must edit <computeroutput>wx/msw/setup.h</computeroutput> file and change the value of <computeroutput>wxUSE_LIBLZMA</computeroutput> option to <computeroutput>1</computeroutput> manually in order to enable LZMA support, which is disabled by default.</para>
<para>Next, you need to actually ensure that the library is available to be able to build wxWidgets:</para>
<sect2 id="page_build_liblzma_1page_build_liblzma_msw_vcpkg">
<title>MSW using MSVS 2015 with Vcpkg</title>
<para>If you build wxWidgets with Microsoft Visual Studio 2015.3 or later, you can use Microsoft vcpkg tool (see <ulink url="https://github.com/Microsoft/vcpkg">https://github.com/Microsoft/vcpkg</ulink>) to install liblzma as any other library and integrate it with Microsoft Visual Studio automatically. Please see vcpkg documentation for details, but, basically, it&apos;s as simple as executing the following commands:</para>
<para><programlisting><codeline><highlight class="normal">&gt;<sp/>git<sp/>clone<sp/>https:</highlight><highlight class="comment">//github.com/Microsoft/vcpkg.git</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>cd<sp/>vcpkg</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>.\bootstrap-vcpkg.bat</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>.\vcpkg<sp/>integrate<sp/>install</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>.\vcpkg<sp/>install<sp/>liblzma</highlight></codeline>
</programlisting></para>
<para>Afterwards, liblzma headers and libraries (in DLL form) will be available to all C++ Visual Studio projects, including wxWidgets, so you just need to build it as usual, i.e. by opening <computeroutput>build/msw/wx_vcXX.sln</computeroutput> file and building it.</para>
</sect2>
</sect1>
<sect1 id="page_build_liblzma_1page_build_liblzma_msw_manual">
<title>MSW manual setup</title>
<para>First of all, you need to either build or download liblzma binaries. Building the library from source with gcc requires configure, and as you don&apos;t use an environment capable of running it (if you&apos;re, you&apos;re reading the wrong section of this guide, please go to the first one instead), it might be simpler to just download the binaries from <ulink url="https://tukaani.org/xz/">https://tukaani.org/xz/</ulink></para>
<para>However these binaries don&apos;t provide import libraries for MSVC, so you may prefer building from source when using this compiler, provided it is at least 2013.2 or later (otherwise, you must use the binaries and create the import library from the DLL). To do it, simply open the MSVS solution provided under <computeroutput>windows</computeroutput> directory of the source archive corresponding to your compiler version and build all the relevant configurations. Notice that you may build it as either a static or a dynamic library, but if you choose the former, you must also predefine <computeroutput>LZMA_API_STATIC</computeroutput> when building wxWidgets.</para>
<para>Second, you need to let wxWidgets build system know about the liblzma headers and libraries location. When using makefiles, with either gcc or MSVC compiler, this can be done simply by specifying <computeroutput>CPPFLAGS</computeroutput> and <computeroutput>LDFLAGS</computeroutput> on make command line, e.g.</para>
<para><programlisting><codeline><highlight class="normal">&gt;<sp/>make<sp/>-f<sp/>makefile.gcc<sp/>CPPFLAGS=-Ic:/dev/include<sp/>LDFLAGS=-Lc:/dev/lib</highlight></codeline>
</programlisting></para>
<para>If you built liblzma as a static library, change <computeroutput>CPPFLAGS</computeroutput> to also include <computeroutput>-DLZMA_API_STATIC</computeroutput>.</para>
<para>When building wxWidgets with MSVC project files, you must update them to use liblzma. For this, start by copying build\msw\wx_setup.props file to build\msw\wx_local.props, if you don&apos;t have the latter file yet. Then open this file in your favourite editor and locate the <computeroutput>Link</computeroutput> tag inside an <computeroutput>ItemDefinitionGroup</computeroutput> tag and add a new <computeroutput>AdditionalIncludeDirectories</computeroutput> line inside the <computeroutput>ClCompile</computeroutput> tag as well as add <computeroutput>liblzma.lib</computeroutput> to the <computeroutput>AdditionalDependencies</computeroutput> tag under <computeroutput>Link</computeroutput> itself. The result should look like the following, assuming liblzma sources are in c:\src\liblzma:</para>
<para><programlisting><codeline><highlight class="normal">&lt;ItemDefinitionGroup&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;ClCompile&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>...<sp/>any<sp/>existing<sp/>lines<sp/>here<sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;AdditionalIncludeDirectories&gt;c:\src\liblzma\src\liblzma\api;%(AdditionalIncludeDirectories)&lt;/AdditionalIncludeDirectories&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;!--</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Uncomment<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>line<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">,<sp/>and<sp/>only<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">,<sp/>you<sp/>link<sp/>with<sp/>liblzma<sp/>statically.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;PreprocessorDefinitions&gt;LZMA_API_STATIC;%(PreprocessorDefinitions)&lt;/PreprocessorDefinitions&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>--&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;/ClCompile&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;Link&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;AdditionalDependencies&gt;...<sp/>all<sp/>the<sp/>previously<sp/>listed<sp/>libraries;c:\src\liblzma\windows\vs2017\$(Configuration)\$(Platform)\liblzma_dll\liblzma.lib;%(AdditionalDependencies)&lt;/AdditionalDependencies&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;/Link&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;/ItemDefinitionGroup&gt;</highlight></codeline>
</programlisting></para>
<para>Afterwards, build wxWidgets as usual and don&apos;t forget to provide <computeroutput>liblzma.dll</computeroutput> when distributing your application unless you have decided to link it statically. </para>
</sect1>
    </detaileddescription>
    <location file="docs/doxygen/mainpages/liblzma.h"/>
  </compounddef>
</doxygen>
