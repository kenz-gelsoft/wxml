<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="classwx_xml_node" kind="class" language="C++" prot="public">
    <compoundname>wxXmlNode</compoundname>
    <includes local="no">wx/xml/xml.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classwx_xml_node_1af15f0d39908335cbd71eb15361fda20e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxXmlNode::wxXmlNode</definition>
        <argsstring>(wxXmlNode *parent, wxXmlNodeType type, const wxString &amp;name, const wxString &amp;content=wxEmptyString, wxXmlAttribute *attrs=NULL, wxXmlNode *next=NULL, int lineNo=-1)</argsstring>
        <name>wxXmlNode</name>
        <qualifiedname>wxXmlNode::wxXmlNode</qualifiedname>
        <param>
          <type><ref refid="classwx_xml_node" kindref="compound">wxXmlNode</ref> *</type>
          <declname>parent</declname>
        </param>
        <param>
          <type><ref refid="xml_8h_1a8439c6a82632b0ef566fcadbcd9e7510" kindref="member">wxXmlNodeType</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>content</declname>
          <defval><ref refid="interface_2wx_2string_8h_1a9a321d587166a30017b608dd2d234033" kindref="member">wxEmptyString</ref></defval>
        </param>
        <param>
          <type><ref refid="classwx_xml_attribute" kindref="compound">wxXmlAttribute</ref> *</type>
          <declname>attrs</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type><ref refid="classwx_xml_node" kindref="compound">wxXmlNode</ref> *</type>
          <declname>next</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>int</type>
          <declname>lineNo</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
<para>Creates this XML node and inserts it into the XML tree as a child of the specified parent. </para>
        </briefdescription>
        <detaileddescription>
<para>Once added, the XML tree takes ownership of this object and there is no need to delete it.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>parent</parametername>
</parameternamelist>
<parameterdescription>
<para>The parent node to which append this node instance. If this argument is NULL this new node will be floating and it can be appended later to another one using the <ref refid="classwx_xml_node_1a06a09a31e1f7531f3b37f29b89fe5a10" kindref="member">AddChild()</ref> or <ref refid="classwx_xml_node_1a0278086b6241fd16490c0090d983dd53" kindref="member">InsertChild()</ref> functions. Otherwise the child is added to the XML tree by this constructor and it shouldn&apos;t be done again. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>One of the <ref refid="xml_8h_1a8439c6a82632b0ef566fcadbcd9e7510" kindref="member">wxXmlNodeType</ref> enumeration value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the node. This is the string which appears between angular brackets. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>content</parametername>
</parameternamelist>
<parameterdescription>
<para>The content of the node. Only meaningful when type is <computeroutput>wxXML_TEXT_NODE</computeroutput> or <computeroutput>wxXML_CDATA_SECTION_NODE</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>attrs</parametername>
</parameternamelist>
<parameterdescription>
<para>If not NULL, this <ref refid="classwx_xml_attribute" kindref="compound">wxXmlAttribute</ref> object and its eventual siblings are attached to the node. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>next</parametername>
</parameternamelist>
<parameterdescription>
<para>If not NULL, this node and its eventual siblings are attached to the node. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lineNo</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of line this node was present at in input file or -1. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/xml/xml.h" line="101" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classwx_xml_node_1a23e8c27c4636fafbb329721e2fc11674" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxXmlNode::wxXmlNode</definition>
        <argsstring>(wxXmlNodeType type, const wxString &amp;name, const wxString &amp;content=wxEmptyString, int lineNo=-1)</argsstring>
        <name>wxXmlNode</name>
        <qualifiedname>wxXmlNode::wxXmlNode</qualifiedname>
        <param>
          <type><ref refid="xml_8h_1a8439c6a82632b0ef566fcadbcd9e7510" kindref="member">wxXmlNodeType</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>content</declname>
          <defval><ref refid="interface_2wx_2string_8h_1a9a321d587166a30017b608dd2d234033" kindref="member">wxEmptyString</ref></defval>
        </param>
        <param>
          <type>int</type>
          <declname>lineNo</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
<para>A simplified version of the first constructor form, assuming a NULL parent. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>One of the <ref refid="xml_8h_1a8439c6a82632b0ef566fcadbcd9e7510" kindref="member">wxXmlNodeType</ref> enumeration value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the node. This is the string which appears between angular brackets. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>content</parametername>
</parameternamelist>
<parameterdescription>
<para>The content of the node. Only meaningful when type is <computeroutput>wxXML_TEXT_NODE</computeroutput> or <computeroutput>wxXML_CDATA_SECTION_NODE</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lineNo</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of line this node was present at in input file or -1. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/xml/xml.h" line="120" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classwx_xml_node_1a7848928197b7644ff4cbb0ba96b44642" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxXmlNode::wxXmlNode</definition>
        <argsstring>(const wxXmlNode &amp;node)</argsstring>
        <name>wxXmlNode</name>
        <qualifiedname>wxXmlNode::wxXmlNode</qualifiedname>
        <param>
          <type>const <ref refid="classwx_xml_node" kindref="compound">wxXmlNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Copy constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that this does NOT copy siblings and parent pointer, i.e. <ref refid="classwx_xml_node_1a00a8405c3f679f29ac570bbcba9bd295" kindref="member">GetParent()</ref> and <ref refid="classwx_xml_node_1aa159f74469f9ebe5fa830c38f656c60e" kindref="member">GetNext()</ref> will return NULL after using copy ctor and are never unmodified by <ref refid="classwx_xml_node_1a5e3c4c264ae11ffca59917a26f67bdb7" kindref="member">operator=()</ref>. On the other hand, it DOES copy children and attributes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/xml/xml.h" line="131" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classwx_xml_node_1aa2a7fd7f10de9340308e06b19f011538" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual wxXmlNode::~wxXmlNode</definition>
        <argsstring>()</argsstring>
        <name>~wxXmlNode</name>
        <qualifiedname>wxXmlNode::~wxXmlNode</qualifiedname>
        <briefdescription>
<para>The virtual destructor. </para>
        </briefdescription>
        <detaileddescription>
<para>Deletes attached children and attributes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/xml/xml.h" line="136" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classwx_xml_node_1a9a2012a18ff44037a6de74cb241e34e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void wxXmlNode::AddAttribute</definition>
        <argsstring>(const wxString &amp;name, const wxString &amp;value)</argsstring>
        <name>AddAttribute</name>
        <qualifiedname>wxXmlNode::AddAttribute</qualifiedname>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Appends an attribute with given <emphasis>name</emphasis> and <emphasis>value</emphasis> to the list of attributes for this node. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/xml/xml.h" line="142" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classwx_xml_node_1ac99f7e9aa7f2aafb416564fa4911c799" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void wxXmlNode::AddAttribute</definition>
        <argsstring>(wxXmlAttribute *attr)</argsstring>
        <name>AddAttribute</name>
        <qualifiedname>wxXmlNode::AddAttribute</qualifiedname>
        <param>
          <type><ref refid="classwx_xml_attribute" kindref="compound">wxXmlAttribute</ref> *</type>
          <declname>attr</declname>
        </param>
        <briefdescription>
<para>Appends given attribute to the list of attributes for this node. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/xml/xml.h" line="147" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classwx_xml_node_1a06a09a31e1f7531f3b37f29b89fe5a10" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void wxXmlNode::AddChild</definition>
        <argsstring>(wxXmlNode *child)</argsstring>
        <name>AddChild</name>
        <qualifiedname>wxXmlNode::AddChild</qualifiedname>
        <param>
          <type><ref refid="classwx_xml_node" kindref="compound">wxXmlNode</ref> *</type>
          <declname>child</declname>
        </param>
        <briefdescription>
<para>Adds node <emphasis>child</emphasis> as the last child of this node. </para>
        </briefdescription>
        <detaileddescription>
<para>Once added, the XML tree takes ownership of this object and there is no need to delete it.</para>
<para><simplesect kind="note"><para>Note that this function works in O(n) time where <emphasis>n</emphasis> is the number of existing children. Consequently, adding large number of child nodes using this method can be expensive, because it has O(n^2) time complexity in number of nodes to be added. Use <ref refid="classwx_xml_node_1a7387dfd55a683f1c52362c08dafd1106" kindref="member">InsertChildAfter()</ref> to populate XML tree in linear time.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classwx_xml_node_1a0278086b6241fd16490c0090d983dd53" kindref="member">InsertChild()</ref>, <ref refid="classwx_xml_node_1a7387dfd55a683f1c52362c08dafd1106" kindref="member">InsertChildAfter()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/xml/xml.h" line="162" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classwx_xml_node_1aa8ef6092958403ecf760bd7285c19df7" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool wxXmlNode::DeleteAttribute</definition>
        <argsstring>(const wxString &amp;name)</argsstring>
        <name>DeleteAttribute</name>
        <qualifiedname>wxXmlNode::DeleteAttribute</qualifiedname>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Removes the first attributes which has the given <emphasis>name</emphasis> from the list of attributes for this node. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/xml/xml.h" line="168" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classwx_xml_node_1a264331d3aa88064e2c56ff25209b90b7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxXmlNode::GetAttribute</definition>
        <argsstring>(const wxString &amp;attrName, wxString *value) const</argsstring>
        <name>GetAttribute</name>
        <qualifiedname>wxXmlNode::GetAttribute</qualifiedname>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>attrName</declname>
        </param>
        <param>
          <type><ref refid="classwx_string" kindref="compound">wxString</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Returns true if a attribute named attrName could be found. </para>
        </briefdescription>
        <detaileddescription>
<para>The value of that attribute is saved in value (which must not be NULL). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/xml/xml.h" line="174" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_xml_node_1a34d3a14cadb8edecd0f7949bd6b8839d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>wxString wxXmlNode::GetAttribute</definition>
        <argsstring>(const wxString &amp;attrName, const wxString &amp;defaultVal=wxEmptyString) const</argsstring>
        <name>GetAttribute</name>
        <qualifiedname>wxXmlNode::GetAttribute</qualifiedname>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>attrName</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>defaultVal</declname>
          <defval><ref refid="interface_2wx_2string_8h_1a9a321d587166a30017b608dd2d234033" kindref="member">wxEmptyString</ref></defval>
        </param>
        <briefdescription>
<para>Returns the value of the attribute named <emphasis>attrName</emphasis> if it does exist. </para>
        </briefdescription>
        <detaileddescription>
<para>If it does not exist, the <emphasis>defaultVal</emphasis> is returned. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/xml/xml.h" line="180" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_xml_node_1aa80eb546c9364cc446dde5a7fbac3cba" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_xml_attribute" kindref="compound">wxXmlAttribute</ref> *</type>
        <definition>wxXmlAttribute * wxXmlNode::GetAttributes</definition>
        <argsstring>() const</argsstring>
        <name>GetAttributes</name>
        <qualifiedname>wxXmlNode::GetAttributes</qualifiedname>
        <briefdescription>
<para>Return a pointer to the first attribute of this node. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/xml/xml.h" line="186" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classwx_xml_node_1a73f0963e26f6ea42bff21906fbef878c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_xml_node" kindref="compound">wxXmlNode</ref> *</type>
        <definition>wxXmlNode * wxXmlNode::GetChildren</definition>
        <argsstring>() const</argsstring>
        <name>GetChildren</name>
        <qualifiedname>wxXmlNode::GetChildren</qualifiedname>
        <briefdescription>
<para>Returns the first child of this node. </para>
        </briefdescription>
        <detaileddescription>
<para>To get a pointer to the second child of this node (if it does exist), use the <ref refid="classwx_xml_node_1aa159f74469f9ebe5fa830c38f656c60e" kindref="member">GetNext()</ref> function on the returned value. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/xml/xml.h" line="193" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classwx_xml_node_1a99da2ab6935b6c1990a648332b09da1c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
        <definition>const wxString &amp; wxXmlNode::GetContent</definition>
        <argsstring>() const</argsstring>
        <name>GetContent</name>
        <qualifiedname>wxXmlNode::GetContent</qualifiedname>
        <briefdescription>
<para>Returns the content of this node. </para>
        </briefdescription>
        <detaileddescription>
<para>Can be an empty string. Be aware that for nodes of type <computeroutput>wxXML_ELEMENT_NODE</computeroutput> (the most used node type) the content is an empty string. See <ref refid="classwx_xml_node_1aaf03f3e38191f68eae22b603dd40bc5c" kindref="member">GetNodeContent()</ref> for more details. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/xml/xml.h" line="200" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classwx_xml_node_1aaa65f143a0cb44c496fa5def63396a5a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxXmlNode::GetDepth</definition>
        <argsstring>(wxXmlNode *grandparent=NULL) const</argsstring>
        <name>GetDepth</name>
        <qualifiedname>wxXmlNode::GetDepth</qualifiedname>
        <param>
          <type><ref refid="classwx_xml_node" kindref="compound">wxXmlNode</ref> *</type>
          <declname>grandparent</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Returns the number of nodes which separate this node from <computeroutput>grandparent</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>This function searches only the parents of this node until it finds <emphasis>grandparent</emphasis> or the NULL node (which is the parent of non-linked nodes or the parent of a <ref refid="classwx_xml_document" kindref="compound">wxXmlDocument</ref>&apos;s root element node). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/xml/xml.h" line="209" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_xml_node_1a4af4064defea56bbe8b90fc4aaae4d58" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxXmlNode::GetNoConversion</definition>
        <argsstring>() const</argsstring>
        <name>GetNoConversion</name>
        <qualifiedname>wxXmlNode::GetNoConversion</qualifiedname>
        <briefdescription>
<para>Returns a flag indicating whether encoding conversion is necessary when saving. </para>
        </briefdescription>
        <detaileddescription>
<para>The default is false.</para>
<para>You can improve saving efficiency considerably by setting this value. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/xml/xml.h" line="216" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_xml_node_1ab78231dec2376cf5830f693b0ea1647a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxXmlNode::GetLineNumber</definition>
        <argsstring>() const</argsstring>
        <name>GetLineNumber</name>
        <qualifiedname>wxXmlNode::GetLineNumber</qualifiedname>
        <briefdescription>
<para>Returns line number of the node in the input XML file or <computeroutput>-1</computeroutput> if it is unknown. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/xml/xml.h" line="221" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_xml_node_1a8f7a253c34c02c0405d0c5db41278b26" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
        <definition>const wxString &amp; wxXmlNode::GetName</definition>
        <argsstring>() const</argsstring>
        <name>GetName</name>
        <qualifiedname>wxXmlNode::GetName</qualifiedname>
        <briefdescription>
<para>Returns the name of this node. </para>
        </briefdescription>
        <detaileddescription>
<para>Can be an empty string (e.g. for nodes of type <computeroutput>wxXML_TEXT_NODE</computeroutput> or <computeroutput>wxXML_CDATA_SECTION_NODE</computeroutput>). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/xml/xml.h" line="228" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classwx_xml_node_1aa159f74469f9ebe5fa830c38f656c60e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_xml_node" kindref="compound">wxXmlNode</ref> *</type>
        <definition>wxXmlNode * wxXmlNode::GetNext</definition>
        <argsstring>() const</argsstring>
        <name>GetNext</name>
        <qualifiedname>wxXmlNode::GetNext</qualifiedname>
        <briefdescription>
<para>Returns a pointer to the sibling of this node or NULL if there are no siblings. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/xml/xml.h" line="234" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classwx_xml_node_1aaf03f3e38191f68eae22b603dd40bc5c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>wxString wxXmlNode::GetNodeContent</definition>
        <argsstring>() const</argsstring>
        <name>GetNodeContent</name>
        <qualifiedname>wxXmlNode::GetNodeContent</qualifiedname>
        <briefdescription>
<para>Returns the content of the first child node of type <computeroutput>wxXML_TEXT_NODE</computeroutput> or <computeroutput>wxXML_CDATA_SECTION_NODE</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is very useful since the XML snippet <computeroutput>&quot;tagnametagcontent/tagname&quot;</computeroutput> is represented by expat with the following tag tree:</para>
<para><programlisting><codeline><highlight class="normal"><ref refid="xml_8h_1a8439c6a82632b0ef566fcadbcd9e7510ab54c1350681613fc5de1a6ab85debed2" kindref="member">wxXML_ELEMENT_NODE</ref><sp/>name=</highlight><highlight class="stringliteral">&quot;tagname&quot;</highlight><highlight class="normal">,<sp/>content=</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">|--<sp/><ref refid="xml_8h_1a8439c6a82632b0ef566fcadbcd9e7510a7b3137b950d3341c9056f6d5eff10210" kindref="member">wxXML_TEXT_NODE</ref><sp/>name=</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>content=</highlight><highlight class="stringliteral">&quot;tagcontent&quot;</highlight></codeline>
</programlisting></para>
<para>or eventually:</para>
<para><programlisting><codeline><highlight class="normal"><ref refid="xml_8h_1a8439c6a82632b0ef566fcadbcd9e7510ab54c1350681613fc5de1a6ab85debed2" kindref="member">wxXML_ELEMENT_NODE</ref><sp/>name=</highlight><highlight class="stringliteral">&quot;tagname&quot;</highlight><highlight class="normal">,<sp/>content=</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">|--<sp/><ref refid="xml_8h_1a8439c6a82632b0ef566fcadbcd9e7510a816e967793c856da35ac64f2eeb66940" kindref="member">wxXML_CDATA_SECTION_NODE</ref><sp/>name=</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>content=</highlight><highlight class="stringliteral">&quot;tagcontent&quot;</highlight></codeline>
</programlisting></para>
<para>An empty string is returned if the node has no children of type <computeroutput>wxXML_TEXT_NODE</computeroutput> or <computeroutput>wxXML_CDATA_SECTION_NODE</computeroutput>, or if the content of the first child of such types is empty. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/xml/xml.h" line="258" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_xml_node_1a00a8405c3f679f29ac570bbcba9bd295" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_xml_node" kindref="compound">wxXmlNode</ref> *</type>
        <definition>wxXmlNode * wxXmlNode::GetParent</definition>
        <argsstring>() const</argsstring>
        <name>GetParent</name>
        <qualifiedname>wxXmlNode::GetParent</qualifiedname>
        <briefdescription>
<para>Returns a pointer to the parent of this node or NULL if this node has no parent. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/xml/xml.h" line="264" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classwx_xml_node_1a85c85dcae55f6276eec1a448cc4d5683" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xml_8h_1a8439c6a82632b0ef566fcadbcd9e7510" kindref="member">wxXmlNodeType</ref></type>
        <definition>wxXmlNodeType wxXmlNode::GetType</definition>
        <argsstring>() const</argsstring>
        <name>GetType</name>
        <qualifiedname>wxXmlNode::GetType</qualifiedname>
        <briefdescription>
<para>Returns the type of this node. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/xml/xml.h" line="269" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classwx_xml_node_1adfeedb694e4e29b083feb803987e7a77" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxXmlNode::HasAttribute</definition>
        <argsstring>(const wxString &amp;attrName) const</argsstring>
        <name>HasAttribute</name>
        <qualifiedname>wxXmlNode::HasAttribute</qualifiedname>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>attrName</declname>
        </param>
        <briefdescription>
<para>Returns true if this node has a attribute named <emphasis>attrName</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/xml/xml.h" line="274" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_xml_node_1a0278086b6241fd16490c0090d983dd53" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool wxXmlNode::InsertChild</definition>
        <argsstring>(wxXmlNode *child, wxXmlNode *followingNode)</argsstring>
        <name>InsertChild</name>
        <qualifiedname>wxXmlNode::InsertChild</qualifiedname>
        <param>
          <type><ref refid="classwx_xml_node" kindref="compound">wxXmlNode</ref> *</type>
          <declname>child</declname>
        </param>
        <param>
          <type><ref refid="classwx_xml_node" kindref="compound">wxXmlNode</ref> *</type>
          <declname>followingNode</declname>
        </param>
        <briefdescription>
<para>Inserts the <emphasis>child</emphasis> node immediately before <emphasis>followingNode</emphasis> in the children list. </para>
        </briefdescription>
        <detaileddescription>
<para>Once inserted, the XML tree takes ownership of the new child and there is no need to delete it.</para>
<para><simplesect kind="return"><para>true if <emphasis>followingNode</emphasis> has been found and the <emphasis>child</emphasis> node has been inserted.</para>
</simplesect>
<simplesect kind="note"><para>For historical reasons, <emphasis>followingNode</emphasis> may be NULL. In that case, then <emphasis>child</emphasis> is prepended to the list of children and becomes the first child of this node, i.e. it behaves identically to using the first children (as returned by <ref refid="classwx_xml_node_1a73f0963e26f6ea42bff21906fbef878c" kindref="member">GetChildren()</ref>) for <emphasis>followingNode</emphasis>).</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classwx_xml_node_1a06a09a31e1f7531f3b37f29b89fe5a10" kindref="member">AddChild()</ref>, <ref refid="classwx_xml_node_1a7387dfd55a683f1c52362c08dafd1106" kindref="member">InsertChildAfter()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/xml/xml.h" line="292" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classwx_xml_node_1a7387dfd55a683f1c52362c08dafd1106" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool wxXmlNode::InsertChildAfter</definition>
        <argsstring>(wxXmlNode *child, wxXmlNode *precedingNode)</argsstring>
        <name>InsertChildAfter</name>
        <qualifiedname>wxXmlNode::InsertChildAfter</qualifiedname>
        <param>
          <type><ref refid="classwx_xml_node" kindref="compound">wxXmlNode</ref> *</type>
          <declname>child</declname>
        </param>
        <param>
          <type><ref refid="classwx_xml_node" kindref="compound">wxXmlNode</ref> *</type>
          <declname>precedingNode</declname>
        </param>
        <briefdescription>
<para>Inserts the <emphasis>child</emphasis> node immediately after <emphasis>precedingNode</emphasis> in the children list. </para>
        </briefdescription>
        <detaileddescription>
<para>Once inserted, the XML tree takes ownership of the new child and there is no need to delete it.</para>
<para><simplesect kind="return"><para>true if <emphasis>precedingNode</emphasis> has been found and the <emphasis>child</emphasis> node has been inserted.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>child</parametername>
</parameternamelist>
<parameterdescription>
<para>The child to insert. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>precedingNode</parametername>
</parameternamelist>
<parameterdescription>
<para>The node to insert <emphasis>child</emphasis> after. As a special case, this can be NULL if this node has no children yet <ndash/> in that case, <emphasis>child</emphasis> will become this node&apos;s only child node.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>2.8.8</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classwx_xml_node_1a0278086b6241fd16490c0090d983dd53" kindref="member">InsertChild()</ref>, <ref refid="classwx_xml_node_1a06a09a31e1f7531f3b37f29b89fe5a10" kindref="member">AddChild()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/xml/xml.h" line="313" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classwx_xml_node_1ac8e8abac6045fdefb7d14f7276817e42" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxXmlNode::IsWhitespaceOnly</definition>
        <argsstring>() const</argsstring>
        <name>IsWhitespaceOnly</name>
        <qualifiedname>wxXmlNode::IsWhitespaceOnly</qualifiedname>
        <briefdescription>
<para>Returns true if the content of this node is a string containing only whitespaces (spaces, tabs, new lines, etc). </para>
        </briefdescription>
        <detaileddescription>
<para>Note that this function is locale-independent since the parsing of XML documents must always produce the exact same tree regardless of the locale it runs under. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/xml/xml.h" line="323" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_xml_node_1a04af1a58610feb763603b67360645674" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool wxXmlNode::RemoveChild</definition>
        <argsstring>(wxXmlNode *child)</argsstring>
        <name>RemoveChild</name>
        <qualifiedname>wxXmlNode::RemoveChild</qualifiedname>
        <param>
          <type><ref refid="classwx_xml_node" kindref="compound">wxXmlNode</ref> *</type>
          <declname>child</declname>
        </param>
        <briefdescription>
<para>Removes the given node from the children list. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns true if the node was found and removed or false if the node could not be found. Note that the caller is responsible for deleting the removed node in order to avoid memory leaks. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/xml/xml.h" line="333" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classwx_xml_node_1a6f06d89fd5ee89a199131ae3f64c0e03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxXmlNode::SetAttributes</definition>
        <argsstring>(wxXmlAttribute *attr)</argsstring>
        <name>SetAttributes</name>
        <qualifiedname>wxXmlNode::SetAttributes</qualifiedname>
        <param>
          <type><ref refid="classwx_xml_attribute" kindref="compound">wxXmlAttribute</ref> *</type>
          <declname>attr</declname>
        </param>
        <briefdescription>
<para>Sets as first attribute the given <ref refid="classwx_xml_attribute" kindref="compound">wxXmlAttribute</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para>The caller is responsible for deleting any previously present attributes attached to this node. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/xml/xml.h" line="341" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_xml_node_1ae34716fde958598ad4a96801098add50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxXmlNode::SetChildren</definition>
        <argsstring>(wxXmlNode *child)</argsstring>
        <name>SetChildren</name>
        <qualifiedname>wxXmlNode::SetChildren</qualifiedname>
        <param>
          <type><ref refid="classwx_xml_node" kindref="compound">wxXmlNode</ref> *</type>
          <declname>child</declname>
        </param>
        <briefdescription>
<para>Sets as first child the given node. </para>
        </briefdescription>
        <detaileddescription>
<para>The caller is responsible for deleting any previously present children node. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/xml/xml.h" line="348" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_xml_node_1a498a7ab0a0909f2e1ec8ae4b5b8a17c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxXmlNode::SetContent</definition>
        <argsstring>(const wxString &amp;con)</argsstring>
        <name>SetContent</name>
        <qualifiedname>wxXmlNode::SetContent</qualifiedname>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>con</declname>
        </param>
        <briefdescription>
<para>Sets the content of this node. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/xml/xml.h" line="353" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_xml_node_1a91e113b0061430f7ea87b4197f130759" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxXmlNode::SetName</definition>
        <argsstring>(const wxString &amp;name)</argsstring>
        <name>SetName</name>
        <qualifiedname>wxXmlNode::SetName</qualifiedname>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Sets the name of this node. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/xml/xml.h" line="358" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_xml_node_1aadb626778d184a459c3dd1992cb59785" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxXmlNode::SetNext</definition>
        <argsstring>(wxXmlNode *next)</argsstring>
        <name>SetNext</name>
        <qualifiedname>wxXmlNode::SetNext</qualifiedname>
        <param>
          <type><ref refid="classwx_xml_node" kindref="compound">wxXmlNode</ref> *</type>
          <declname>next</declname>
        </param>
        <briefdescription>
<para>Sets as sibling the given node. </para>
        </briefdescription>
        <detaileddescription>
<para>The caller is responsible for deleting any previously present sibling node. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/xml/xml.h" line="365" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_xml_node_1a673e755ce0b66802430bb087849ee467" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxXmlNode::SetNoConversion</definition>
        <argsstring>(bool noconversion)</argsstring>
        <name>SetNoConversion</name>
        <qualifiedname>wxXmlNode::SetNoConversion</qualifiedname>
        <param>
          <type>bool</type>
          <declname>noconversion</declname>
        </param>
        <briefdescription>
<para>Sets a flag to indicate whether encoding conversion is necessary when saving. </para>
        </briefdescription>
        <detaileddescription>
<para>The default is false.</para>
<para>You can improve saving efficiency considerably by setting this value. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/xml/xml.h" line="372" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_xml_node_1aae5220ccbc45caa31296ba165dde3fbd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxXmlNode::SetParent</definition>
        <argsstring>(wxXmlNode *parent)</argsstring>
        <name>SetParent</name>
        <qualifiedname>wxXmlNode::SetParent</qualifiedname>
        <param>
          <type><ref refid="classwx_xml_node" kindref="compound">wxXmlNode</ref> *</type>
          <declname>parent</declname>
        </param>
        <briefdescription>
<para>Sets as parent the given node. </para>
        </briefdescription>
        <detaileddescription>
<para>The caller is responsible for deleting any previously present parent node. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/xml/xml.h" line="379" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_xml_node_1a691b60bdae2c594d403f4374ac672221" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxXmlNode::SetType</definition>
        <argsstring>(wxXmlNodeType type)</argsstring>
        <name>SetType</name>
        <qualifiedname>wxXmlNode::SetType</qualifiedname>
        <param>
          <type><ref refid="xml_8h_1a8439c6a82632b0ef566fcadbcd9e7510" kindref="member">wxXmlNodeType</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Sets the type of this node. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/xml/xml.h" line="384" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_xml_node_1a5e3c4c264ae11ffca59917a26f67bdb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_xml_node" kindref="compound">wxXmlNode</ref> &amp;</type>
        <definition>wxXmlNode &amp; wxXmlNode::operator=</definition>
        <argsstring>(const wxXmlNode &amp;node)</argsstring>
        <name>operator=</name>
        <qualifiedname>wxXmlNode::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classwx_xml_node" kindref="compound">wxXmlNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>See the copy constructor for more info. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/xml/xml.h" line="389" column="15"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Represents a node in an XML document. </para>
    </briefdescription>
    <detaileddescription>
<para>See <ref refid="classwx_xml_document" kindref="compound">wxXmlDocument</ref>.</para>
<para>Each node is named and depending on the node type it may also hold content or be given attributes.</para>
<para>The two most common node types are <computeroutput>wxXML_ELEMENT_NODE</computeroutput> and <computeroutput>wxXML_TEXT_NODE</computeroutput>. <computeroutput>wxXML_ELEMENT_NODE</computeroutput> represents a pair of XML element tags, whilst <computeroutput>wxXML_TEXT_NODE</computeroutput> represents the text value that can belong to the element.</para>
<para>A <computeroutput>wxXML_ELEMENT_NODE</computeroutput> has a title, and optionally attributes, but does not have any content. A <computeroutput>wxXML_TEXT_NODE</computeroutput> does not have a title or attributes but should normally have content.</para>
<para>For example: in the XML fragment <computeroutput>&lt;title&gt;hi&lt;/title&gt;</computeroutput> there is an element node with the name <computeroutput>title</computeroutput> and a single text node child with the text <computeroutput>hi</computeroutput> as content.</para>
<para>A <computeroutput>wxXML_PI_NODE</computeroutput> represents a Processing Instruction (PI) node with the name parameter set as the target and the contents parameter set as the instructions. Note that whilst the PI instructions are often in the form of pseudo-attributes, these do not use the node&apos;s attribute member. It is the user&apos;s responsibility to code and decode the PI instruction text.</para>
<para>The <computeroutput>wxXML_DOCUMENT_TYPE_NODE</computeroutput> is not implemented at this time. Instead, you should get and set the DOCTYPE values using the <ref refid="classwx_xml_document" kindref="compound">wxXmlDocument</ref> class.</para>
<para>If <computeroutput>wxUSE_UNICODE</computeroutput> is 0, all strings are encoded in the encoding given to <ref refid="classwx_xml_document_1af0dfc897ac9fd69d67a0d8b5f00d23c2" kindref="member">wxXmlDocument::Load</ref> (default is UTF-8).</para>
<para><simplesect kind="note"><para>Once a <ref refid="classwx_xml_node" kindref="compound">wxXmlNode</ref> has been added to a <ref refid="classwx_xml_document" kindref="compound">wxXmlDocument</ref> it becomes owned by the document and this has two implications. Firstly, the <ref refid="classwx_xml_document" kindref="compound">wxXmlDocument</ref> takes responsibility for deleting the node so the user should not <computeroutput>delete</computeroutput> it; and secondly, a <ref refid="classwx_xml_node" kindref="compound">wxXmlNode</ref> must always be created on the heap and never on the stack.</para>
</simplesect>
<heading level="2"></heading>
</para>
<para>Library:<nonbreakablespace/><nonbreakablespace/><ref refid="page_libs_1page_libs_wxxml" kindref="member">wxXML</ref></para>
<para>Category:<nonbreakablespace/><nonbreakablespace/><ref refid="group__group__class__xml" kindref="compound">XML</ref></para>
<para><simplesect kind="see"><para><ref refid="classwx_xml_document" kindref="compound">wxXmlDocument</ref>, <ref refid="classwx_xml_doctype" kindref="compound">wxXmlDoctype</ref>, <ref refid="classwx_xml_attribute" kindref="compound">wxXmlAttribute</ref> </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="interface/wx/xml/xml.h" line="73" column="1" bodyfile="interface/wx/xml/xml.h" bodystart="74" bodyend="390"/>
    <listofallmembers>
      <member refid="classwx_xml_node_1a9a2012a18ff44037a6de74cb241e34e2" prot="public" virt="virtual"><scope>wxXmlNode</scope><name>AddAttribute</name></member>
      <member refid="classwx_xml_node_1ac99f7e9aa7f2aafb416564fa4911c799" prot="public" virt="virtual"><scope>wxXmlNode</scope><name>AddAttribute</name></member>
      <member refid="classwx_xml_node_1a06a09a31e1f7531f3b37f29b89fe5a10" prot="public" virt="virtual"><scope>wxXmlNode</scope><name>AddChild</name></member>
      <member refid="classwx_xml_node_1aa8ef6092958403ecf760bd7285c19df7" prot="public" virt="virtual"><scope>wxXmlNode</scope><name>DeleteAttribute</name></member>
      <member refid="classwx_xml_node_1a264331d3aa88064e2c56ff25209b90b7" prot="public" virt="non-virtual"><scope>wxXmlNode</scope><name>GetAttribute</name></member>
      <member refid="classwx_xml_node_1a34d3a14cadb8edecd0f7949bd6b8839d" prot="public" virt="non-virtual"><scope>wxXmlNode</scope><name>GetAttribute</name></member>
      <member refid="classwx_xml_node_1aa80eb546c9364cc446dde5a7fbac3cba" prot="public" virt="non-virtual"><scope>wxXmlNode</scope><name>GetAttributes</name></member>
      <member refid="classwx_xml_node_1a73f0963e26f6ea42bff21906fbef878c" prot="public" virt="non-virtual"><scope>wxXmlNode</scope><name>GetChildren</name></member>
      <member refid="classwx_xml_node_1a99da2ab6935b6c1990a648332b09da1c" prot="public" virt="non-virtual"><scope>wxXmlNode</scope><name>GetContent</name></member>
      <member refid="classwx_xml_node_1aaa65f143a0cb44c496fa5def63396a5a" prot="public" virt="non-virtual"><scope>wxXmlNode</scope><name>GetDepth</name></member>
      <member refid="classwx_xml_node_1ab78231dec2376cf5830f693b0ea1647a" prot="public" virt="non-virtual"><scope>wxXmlNode</scope><name>GetLineNumber</name></member>
      <member refid="classwx_xml_node_1a8f7a253c34c02c0405d0c5db41278b26" prot="public" virt="non-virtual"><scope>wxXmlNode</scope><name>GetName</name></member>
      <member refid="classwx_xml_node_1aa159f74469f9ebe5fa830c38f656c60e" prot="public" virt="non-virtual"><scope>wxXmlNode</scope><name>GetNext</name></member>
      <member refid="classwx_xml_node_1a4af4064defea56bbe8b90fc4aaae4d58" prot="public" virt="non-virtual"><scope>wxXmlNode</scope><name>GetNoConversion</name></member>
      <member refid="classwx_xml_node_1aaf03f3e38191f68eae22b603dd40bc5c" prot="public" virt="non-virtual"><scope>wxXmlNode</scope><name>GetNodeContent</name></member>
      <member refid="classwx_xml_node_1a00a8405c3f679f29ac570bbcba9bd295" prot="public" virt="non-virtual"><scope>wxXmlNode</scope><name>GetParent</name></member>
      <member refid="classwx_xml_node_1a85c85dcae55f6276eec1a448cc4d5683" prot="public" virt="non-virtual"><scope>wxXmlNode</scope><name>GetType</name></member>
      <member refid="classwx_xml_node_1adfeedb694e4e29b083feb803987e7a77" prot="public" virt="non-virtual"><scope>wxXmlNode</scope><name>HasAttribute</name></member>
      <member refid="classwx_xml_node_1a0278086b6241fd16490c0090d983dd53" prot="public" virt="virtual"><scope>wxXmlNode</scope><name>InsertChild</name></member>
      <member refid="classwx_xml_node_1a7387dfd55a683f1c52362c08dafd1106" prot="public" virt="virtual"><scope>wxXmlNode</scope><name>InsertChildAfter</name></member>
      <member refid="classwx_xml_node_1ac8e8abac6045fdefb7d14f7276817e42" prot="public" virt="non-virtual"><scope>wxXmlNode</scope><name>IsWhitespaceOnly</name></member>
      <member refid="classwx_xml_node_1a5e3c4c264ae11ffca59917a26f67bdb7" prot="public" virt="non-virtual"><scope>wxXmlNode</scope><name>operator=</name></member>
      <member refid="classwx_xml_node_1a04af1a58610feb763603b67360645674" prot="public" virt="virtual"><scope>wxXmlNode</scope><name>RemoveChild</name></member>
      <member refid="classwx_xml_node_1a6f06d89fd5ee89a199131ae3f64c0e03" prot="public" virt="non-virtual"><scope>wxXmlNode</scope><name>SetAttributes</name></member>
      <member refid="classwx_xml_node_1ae34716fde958598ad4a96801098add50" prot="public" virt="non-virtual"><scope>wxXmlNode</scope><name>SetChildren</name></member>
      <member refid="classwx_xml_node_1a498a7ab0a0909f2e1ec8ae4b5b8a17c3" prot="public" virt="non-virtual"><scope>wxXmlNode</scope><name>SetContent</name></member>
      <member refid="classwx_xml_node_1a91e113b0061430f7ea87b4197f130759" prot="public" virt="non-virtual"><scope>wxXmlNode</scope><name>SetName</name></member>
      <member refid="classwx_xml_node_1aadb626778d184a459c3dd1992cb59785" prot="public" virt="non-virtual"><scope>wxXmlNode</scope><name>SetNext</name></member>
      <member refid="classwx_xml_node_1a673e755ce0b66802430bb087849ee467" prot="public" virt="non-virtual"><scope>wxXmlNode</scope><name>SetNoConversion</name></member>
      <member refid="classwx_xml_node_1aae5220ccbc45caa31296ba165dde3fbd" prot="public" virt="non-virtual"><scope>wxXmlNode</scope><name>SetParent</name></member>
      <member refid="classwx_xml_node_1a691b60bdae2c594d403f4374ac672221" prot="public" virt="non-virtual"><scope>wxXmlNode</scope><name>SetType</name></member>
      <member refid="classwx_xml_node_1af15f0d39908335cbd71eb15361fda20e" prot="public" virt="non-virtual"><scope>wxXmlNode</scope><name>wxXmlNode</name></member>
      <member refid="classwx_xml_node_1a23e8c27c4636fafbb329721e2fc11674" prot="public" virt="non-virtual"><scope>wxXmlNode</scope><name>wxXmlNode</name></member>
      <member refid="classwx_xml_node_1a7848928197b7644ff4cbb0ba96b44642" prot="public" virt="non-virtual"><scope>wxXmlNode</scope><name>wxXmlNode</name></member>
      <member refid="classwx_xml_node_1aa2a7fd7f10de9340308e06b19f011538" prot="public" virt="virtual"><scope>wxXmlNode</scope><name>~wxXmlNode</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
