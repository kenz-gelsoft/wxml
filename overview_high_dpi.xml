<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="overview_high_dpi" kind="page">
    <compoundname>overview_high_dpi</compoundname>
    <title>High DPI Support in wxWidgets</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><anchor id="overview_high_dpi_1md_docs_doxygen_overviews_high_dpi"/></para>
<sect1 id="overview_high_dpi_1high_dpi_intro">
<title>Introduction</title>
<para>Many modern displays have way more pixels on the same surface than used to be the norm, resulting in much higher values of DPI (dots, i.e. pixels, per inch) than the traditionally used values. This allows to render texts, or geometric shapes in general much more smoothly.</para>
<para>As an illustration here are two scaled up views of the same text in 11 pt Helvetica using up the same space on screen. First on an original Mac display at 72 dpi, then on a High DPI Display, called &quot;Retina&quot; by Apple with twice as many pixels in both dimensions (144 dpi), thus 4 times the number of pixels on the same surface. Using these the contours are much more detailed.</para>
<para><image type="html" name="overview_highdpi_text_72.png">11 pt Helvetica at 72 DPI</image>
 <image type="latex" name="overview_highdpi_text_72.png">11 pt Helvetica at 72 DPI</image>
 <image type="rtf" name="overview_highdpi_text_72.png">11 pt Helvetica at 72 DPI</image>
 <image type="docbook" name="overview_highdpi_text_72.png">11 pt Helvetica at 72 DPI</image>
 <image type="xml" name="overview_highdpi_text_72.png">11 pt Helvetica at 72 DPI</image>
</para>
<para><image type="html" name="overview_highdpi_text_144.png">11 pt Helvetica at 144 DPI</image>
 <image type="latex" name="overview_highdpi_text_144.png">11 pt Helvetica at 144 DPI</image>
 <image type="rtf" name="overview_highdpi_text_144.png">11 pt Helvetica at 144 DPI</image>
 <image type="docbook" name="overview_highdpi_text_144.png">11 pt Helvetica at 144 DPI</image>
 <image type="xml" name="overview_highdpi_text_144.png">11 pt Helvetica at 144 DPI</image>
</para>
<para>To the user the DPI is typically expressed using a scaling factor, by which the baseline DPI value is multiplied. For example, MSW systems may use 125% or 150% scaling, meaning that they use DPI of 120 or 144 respectively, as baseline DPI value is 96. Similarly, Linux systems may use &quot;2x&quot; scaling, resulting in DPI value of 192. Macs are slightly different, as even they also may use &quot;2x&quot; scaling, as in the example above, the effective DPI corresponding to it is 144, as the baseline value on this platform is 72.</para>
<sect2 id="overview_high_dpi_1autotoc_md0">
<title>The Problem with High DPI Displays</title>
<para>If high DPI displays were treated in the same way as normal ones, existing applications would look tiny of them. For example, a square window 500 pixels in size would take half of a standard 1920×1080 (&quot;Full HD&quot;) display vertically, but only a quarter on a 3840×2160 (&quot;4K UHD&quot;) display. To prevent this from happening, most platforms automatically scale the windows by the scaling factor, defined above, when displaying them on high DPI displays. In this example, scaling factor is 2 and so the actual size of the window on screen would become 1000 when automatic scaling is in effect.</para>
<para>Automatic scaling is convenient, but doesn&apos;t really allow the application to use the extra pixels available on the display. Visually, this means that the scaled application appears blurry, in contrast to sharper applications using the full display resolution, so a better solution for interpreting pixel values on high DPI displays is needed: one which allows to scale some pixel values (e.g. the total window size), but not some other ones (e.g. those used for drawing, which should remain unscaled to use the full available resolution).</para>
</sect2>
</sect1>
<sect1 id="overview_high_dpi_1high_dpi_pixel_types">
<title>Pixel Values in wxWidgets</title>
<sect2 id="overview_high_dpi_1high_dpi_lp_and_dip">
<title>Logical and Device-Independent Pixels</title>
<para>Some systems like eg Apple&apos;s OSes automatically scale all the coordinates by the DPI scaling factor, however not all systems supported by wxWidgets do it <ndash/> notably, MSW does not. This means that <bold>logical pixels</bold>, in which all coordinates and sizes are expressed in wxWidgets API, do <emphasis>not</emphasis> have the same meaning on all platforms when using high DPI displays. So while on macOS you can always pass in a size of (500,500) to create the window from the previous paragraph, whatever the resolution of the display is, you would have to increase this to (1000,1000) on MSW when working on a 200% display. To hide this difference from the application, wxWidgets provides <bold>device-independent pixels</bold>, abbreviated as &quot;DIP&quot;, that are always of the same size on all displays and all platforms.</para>
<para>Thus, the first thing do when preparing your application for high DPI support is to stop using raw pixel values, as they mean different things under different platforms when DPI scaling is used. Actually, using any pixel values is not recommended and replacing them with the values based on the text metrics, i.e. obtained using <ref refid="classwx_window_1a4220668e42f3a173bf29d335da4db2c3" kindref="member">wxWindow::GetTextExtent()</ref>, or expressing them in dialog units (see <ref refid="classwx_window_1a3dbe034120d742c4f5f6d64dc5d69590" kindref="member">wxWindow::ConvertDialogToPixels()</ref>) is preferable. However the simplest change is to just replace the pixel values with the values in DIP: for this, just use <ref refid="classwx_window_1a4b0a9da72d28465bdf5c0bfe5661cdf9" kindref="member">wxWindow::FromDIP()</ref> to convert from one to the other.</para>
<para>For example, if you have the existing code: <programlisting filename=".cpp"><codeline><highlight class="normal">myFrame-&gt;SetClientSize(<ref refid="classwx_size" kindref="compound">wxSize</ref>(400,<sp/>300));</highlight></codeline>
</programlisting> you can just replace it with <programlisting filename=".cpp"><codeline><highlight class="normal">myFrame-&gt;SetClientSize(myFrame-&gt;FromDIP(<ref refid="classwx_size" kindref="compound">wxSize</ref>(400,<sp/>300)));</highlight></codeline>
</programlisting> although replacing it with something like <programlisting filename=".cpp"><codeline><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classwx_size" kindref="compound">wxSize</ref><sp/>sizeM<sp/>=<sp/>myFrame-&gt;GetTextExtent(</highlight><highlight class="stringliteral">&quot;M&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">myFrame-&gt;SetClientSize(100*sizeM.x,<sp/>40*sizeM.y));</highlight></codeline>
</programlisting> might be even better.</para>
<para>In any case, remember that window and <ref refid="classwx_d_c" kindref="compound">wxDC</ref> or <ref refid="classwx_graphics_context" kindref="compound">wxGraphicsContext</ref> coordinates must be in logical pixels that can depend on the current DPI scaling, and so should never be fixed at compilation time.</para>
</sect2>
<sect2 id="overview_high_dpi_1high_dpi_pp">
<title>Physical Pixels</title>
<para>In addition to (logical) pixels and DIPs discussed above, you may also need to work in physical pixel coordinates, corresponding to the actual display pixels. Physical pixels are never scaled, on any platform, and are used for the real bitmap sizes. They are also used for drawing operations on <ref refid="classwx_g_l_canvas" kindref="compound">wxGLCanvas</ref>, which is <emphasis>different</emphasis> from <ref refid="classwx_d_c" kindref="compound">wxDC</ref> and <ref refid="classwx_graphics_context" kindref="compound">wxGraphicsContext</ref> that use logical pixels.</para>
<para>Under MSW physical pixels are same as logical ones, but when writing portable code you need to convert between logical and physical pixels. This can be done using convenience <ref refid="classwx_window_1a144678f0b197268aa9d8d81b76a150a7" kindref="member">wxWindow::FromPhys()</ref> and <ref refid="classwx_window_1a5d3a9450e6b6f44c6b7d0d4a002fa40f" kindref="member">wxWindow::ToPhys()</ref> functions similar to the DIP functions above or by directly multiplying or dividing by <ref refid="classwx_window_1a89cbf94bc15d4e8cb5b1e7db85225577" kindref="member">wxWindow::GetContentScaleFactor()</ref>: this function returns a value greater than or equal to 1 (and always just 1 under MSW), so a value in logical pixels needs to be multiplied by it in order to obtain the value in physical pixels.</para>
<para>For example, in a <ref refid="classwx_g_l_canvas" kindref="compound">wxGLCanvas</ref> created with the size of 100 (logical) pixels, the rightmost physical pixel coordinate will be <computeroutput>100*GetContentScaleFactor()</computeroutput> under all platforms.</para>
<para>You can convert from DIPs to physical pixels by converting DIPs to the logical pixels first, but you can also do it directly, by using <ref refid="classwx_window_1a43bfd56d59b728157f95c838f981872c" kindref="member">wxWindow::GetDPIScaleFactor()</ref>. This function can return a value different from 1 even under MSW, i.e. it returns DPI scaling for physical display pixels.</para>
<para><bold>Warning:</bold> It is possible that conversion between different pixel coordinates is not lossless due to rounding. E.g. to create a window big enough to show a bitmap 15 pixels wide, you need to use <computeroutput>FromPhys(15)</computeroutput>, however the exact result of this function is not representable as an <computeroutput>int</computeroutput> when using 200% DPI scaling. In this case, the value is always rounded upwards, i.e. the function returns <computeroutput>8</computeroutput>, to ensure that a window of this size in logical pixels is always big enough to show the bitmap, but this can only be done at the price of having one &quot;extra&quot; pixel in the window.</para>
</sect2>
<sect2 id="overview_high_dpi_1high_dpi_pixel_conversions">
<title>Summary of Different Pixel Kinds</title>
<para>Under MSW, logical pixels are always the same as physical pixels, but are different from DIPs, while under all the other platforms with DPI scaling support (currently only GTK 3 and macOS), logical pixels are the same as DIP, but different from physical pixels.</para>
<para>However under all platforms the following functions can be used to convert between different kinds of pixels:</para>
<para><itemizedlist>
<listitem><para>From DIP to logical pixels: use <ref refid="classwx_window_1a4b0a9da72d28465bdf5c0bfe5661cdf9" kindref="member">wxWindow::FromDIP()</ref> or <ref refid="classwx_window_1a0100742eee71c42ab33d98dc2422aa5b" kindref="member">wxWindow::ToDIP()</ref>.</para>
</listitem><listitem><para>From physical to logical pixels: use <ref refid="classwx_window_1a144678f0b197268aa9d8d81b76a150a7" kindref="member">wxWindow::FromPhys()</ref> or <ref refid="classwx_window_1a5d3a9450e6b6f44c6b7d0d4a002fa40f" kindref="member">wxWindow::ToPhys()</ref>.</para>
</listitem><listitem><para>From DIP to physical pixels: multiply or divide by <ref refid="classwx_window_1a43bfd56d59b728157f95c838f981872c" kindref="member">wxWindow::GetDPIScaleFactor()</ref>.</para>
</listitem></itemizedlist>
</para>
<para>Or, in the diagram form:</para>
<para><dot>
digraph Pixels
{
    node [shape = hexagon, style = filled, fontname = Helvetica];

    LP  [fillcolor = lightblue, label = &quot;Logical\nPixels&quot;];
    DIP [fillcolor = yellow, label = &quot;DI\nPixels&quot;];
    PP  [fillcolor = green, label = &quot;Physical\nPixels&quot;];

    LP  -&gt; PP [fontname = Helvetica, labeldistance = 5, labelangle = 30, dir = both, weight = 2, minlen = 3, headlabel = &quot;ToPhys()&quot;, taillabel = &quot;FromPhys()&quot;];
    LP -&gt; DIP [fontname = Helvetica, labeldistance = 6, dir = both, weight = 2, minlen = 3, headlabel = &quot;ToDIP()&quot;, taillabel = &quot;FromDIP()&quot;];
    DIP -&gt; PP [fontname = Helvetica, dir = both, minlen = 10, label = &quot;GetDPIScaleFactor()&quot; headlabel = &quot;multiply by&quot;, taillabel = &quot;divide by&quot;, constraint = false] ;
}
</dot>
</para>
<para>Almost all functions in wxWidgets API take and return values expressed in logical pixels. With the obvious exceptions of the functions that explicitly use &quot;Logical&quot;, &quot;Physical&quot; or &quot;DIP&quot; in their names, the only exceptions are:</para>
<para><itemizedlist>
<listitem><para>Size passed to <ref refid="classwx_bitmap" kindref="compound">wxBitmap</ref> constructors taking one, as well as the size returned by <ref refid="classwx_bitmap_1a4b65e32ca794aa762052d0704f81e18d" kindref="member">wxBitmap::GetWidth()</ref> and <ref refid="classwx_bitmap_1a61b416cd608708cf823c267386d2176f" kindref="member">wxBitmap::GetHeight()</ref> is in physical pixels. You can use <ref refid="classwx_bitmap_1a975c964214c3b77f1d639c1c85ebc4a5" kindref="member">wxBitmap::CreateWithDIPSize()</ref> and <ref refid="classwx_bitmap_1a2392bcd1b9994f57a3a8da583c3a9fec" kindref="member">wxBitmap::GetDIPSize()</ref> or <ref refid="classwx_bitmap_1ab8db6da1c0bf12acc77975f4b7783e99" kindref="member">wxBitmap::GetLogicalSize()</ref> to use or get the size in DPI-independent or logical pixels (notably, the latter must be used in any computations involving the sizes expressed in logical units).</para>
</listitem><listitem><para>Similarly, the size returned by <ref refid="classwx_bitmap_bundle_1a718bffe698fa7093570968817e9bcf90" kindref="member">wxBitmapBundle::GetPreferredBitmapSizeFor()</ref> is in physical pixels, but <ref refid="classwx_bitmap_bundle_1a7334c0d48ad8b53a21d315d6eaed75b8" kindref="member">wxBitmapBundle::GetPreferredLogicalSizeFor()</ref> can be used to retrieve the same value in logical units.</para>
</listitem><listitem><para>The default size of <ref refid="classwx_bitmap_bundle" kindref="compound">wxBitmapBundle</ref>, taken by <ref refid="classwx_bitmap_bundle_1a148dc26191f48f22e57c1ef2d8ff611b" kindref="member">wxBitmapBundle::FromSVG()</ref> and returned by <ref refid="classwx_bitmap_bundle_1a577a349a985b8c4b477288673072bcdc" kindref="member">wxBitmapBundle::GetDefaultSize()</ref> is in DIPs.</para>
</listitem></itemizedlist>
</para>
</sect2>
</sect1>
<sect1 id="overview_high_dpi_1high_dpi_artwork">
<title>High-Resolution Images and Artwork</title>
<para>In order to really benefit from the increased detail on High DPI devices you need to provide the images or artwork your application uses in higher resolutions as well. Note that it is not recommended to just provide a high-resolution version and let the system scale that down on 1x displays. Apart from performance consideration also the quality might suffer, contours become more blurry, so for best results it is recommended to use the images that can be used without scaling at the common DPI values, i.e. at least 100% and 200% scaling. If you don&apos;t want providing several copies of all bitmaps, you can use a single vector image in <ulink url="https://en.wikipedia.org/wiki/Scalable_Vector_Graphics">SVG format</ulink> instead.</para>
<para>In either case, you must use <ref refid="classwx_bitmap_bundle" kindref="compound">wxBitmapBundle</ref> class representing several different versions of the same bitmap (or even potentially just a single one, which makes it upwards-compatible with <ref refid="classwx_bitmap" kindref="compound">wxBitmap</ref>). Most functions accepting <ref refid="classwx_bitmap" kindref="compound">wxBitmap</ref> or <ref refid="classwx_image" kindref="compound">wxImage</ref> in wxWidgets API have been updated to work with <ref refid="classwx_bitmap_bundle" kindref="compound">wxBitmapBundle</ref> instead, which allows the library to select the appropriate size depending on the current DPI and, for the platforms supporting it (currently only MSW and macOS), even update the bitmap automatically if the DPI changes, as can happen, for example, when the window showing the bitmap is moved to another monitor with a different resolution.</para>
<para>Note that other than creating <ref refid="classwx_bitmap_bundle" kindref="compound">wxBitmapBundle</ref> instead of <ref refid="classwx_bitmap" kindref="compound">wxBitmap</ref>, no other changes are needed. Moreover, when upgrading the existing code it is possible to replace some <ref refid="classwx_bitmap" kindref="compound">wxBitmap</ref> objects by <ref refid="classwx_bitmap_bundle" kindref="compound">wxBitmapBundle</ref> while keeping the others.</para>
<sect2 id="overview_high_dpi_1high_dpi_bundle_bitmaps">
<title>Using Multiple Bitmaps</title>
<para>When using multiple bitmaps, the simplest way to create a <ref refid="classwx_bitmap_bundle" kindref="compound">wxBitmapBundle</ref> is to do it from a vector of bitmaps of different sizes. In the most common case of just two bitmaps, a special constructor taking these bitmaps directly can be used rather than having to construct a vector from them:</para>
<para><programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="classwx_bitmap" kindref="compound">wxBitmap</ref><sp/>normal(32,<sp/>32);</highlight></codeline>
<codeline><highlight class="normal"><ref refid="classwx_bitmap" kindref="compound">wxBitmap</ref><sp/>highDPI(64,<sp/>64);</highlight></codeline>
<codeline><highlight class="normal">...<sp/>initialize<sp/>the<sp/>bitmaps<sp/>somehow<sp/>...</highlight></codeline>
<codeline><highlight class="normal">wxBitmapBundle<sp/>bundle<sp/>=<sp/><ref refid="classwx_bitmap_bundle_1a4e46fb7cee28a465150c2233b3f0698f" kindref="member">wxBitmapBundle::FromBitmaps</ref>(normal,<sp/>highDPI);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Now<sp/>the<sp/>bundle<sp/>can<sp/>be<sp/>passed<sp/>to<sp/>any<sp/>wxWidgets<sp/>control<sp/>using<sp/>bitmaps.</highlight></codeline>
</programlisting></para>
<para>For the platforms where it is common to embed bitmaps in the resources, it is possible to use <ref refid="classwx_bitmap_bundle_1af5521b4db71cbca163f54ecb1d2ad69d" kindref="member">wxBitmapBundle::FromResources()</ref> to create a bundle containing all bitmaps using the given base name, i.e. <computeroutput>foo</computeroutput> for the normal bitmap and <computeroutput>foo_2x</computeroutput> for the bitmap for 200% scaling (for fractional values decimal separator must be replaced with underscore, e.g. use <computeroutput>foo_1_5x</computeroutput> for the bitmap to use 150% scaling).</para>
<para>It is also possible to create <ref refid="classwx_bitmap_bundle" kindref="compound">wxBitmapBundle</ref> from the files using the same naming convention with <ref refid="classwx_bitmap_bundle_1aef5f4778d6fd9463128d68d9e280c67a" kindref="member">wxBitmapBundle::FromFiles()</ref>. And, to abstract the differences between the platforms using resources and the other ones, a helper <ref refid="bmpbndl_8h_1ac1b58fbf47d9fead665cd4665d3b02bf" kindref="member">wxBITMAP_BUNDLE_2()</ref> macro which uses resources if possible or files otherwise is provided, similar to <ref refid="gdicmn_8h_1a30fc362d22b3045f58aed54fc808f203" kindref="member">wxBITMAP_PNG()</ref> macro for plain bitmaps.</para>
<para>Independently of the way in which the bundle was created, it will provide the bitmap closest in size to the expected size at the current DPI, while trying to avoid having scale it. This means that at 175% DPI scaling, for example, the high DPI (i.e. double-sized) bitmap will be used <emphasis>without</emphasis> scaling rather than scaling it by 0.875, which almost certainly wouldn&apos;t look good. However if the current DPI scaling is 300%, the 2x bitmap will be scaled, if it&apos;s the closest one available, as using it without scaling would result in bitmaps too small to use. The cut-off for the decision whether to scale bitmap or use an existing one without scaling is the factor of 1.5: if the mismatch between the required and closest available size is equal or greater than 1.5, the bitmap will be scaled. Otherwise it will be used in its natural size.</para>
<para>If this behaviour is inappropriate for your application, it is also possible to define a custom <ref refid="classwx_bitmap_bundle" kindref="compound">wxBitmapBundle</ref> implementation, see <ref refid="classwx_bitmap_bundle_impl" kindref="compound">wxBitmapBundleImpl</ref> for more details.</para>
</sect2>
<sect2 id="overview_high_dpi_1high_dpi_bundle_vector">
<title>Using Vector Graphics</title>
<para>As an alternative to providing multiple versions of the bitmaps, it is possible to use a single SVG image and create the bitmap bundle using either <ref refid="classwx_bitmap_bundle_1a148dc26191f48f22e57c1ef2d8ff611b" kindref="member">wxBitmapBundle::FromSVG()</ref> or <ref refid="classwx_bitmap_bundle_1ac0b99263576f8c11815ab60cfbb573ab" kindref="member">wxBitmapBundle::FromSVGFile()</ref>. Such bitmap bundles will always produce bitmaps of exactly the required size, at any resolution. At normal DPI, i.e. without any scaling, the size of the resulting bitmap will be the default bundle size, which must be provided when creating this kind of bitmap bundle, as SVG image itself doesn&apos;t necessarily contain this information.</para>
<para>Note that wxWidgets currently uses <ulink url="https://en.wikipedia.org/wiki/Scalable_Vector_Graphics">NanoSVG</ulink> library for SVG support and so doesn&apos;t support all SVG standard features and you may need to simplify or tweak the SVG files to make them appear correctly.</para>
</sect2>
<sect2 id="overview_high_dpi_1high_dpi_bundle_xrc">
<title>wxBitmapBundle and XRC</title>
<para>XRC format has been updated to allow specifying <ref refid="classwx_bitmap_bundle" kindref="compound">wxBitmapBundle</ref> with <computeroutput>&lt;bitmaps&gt;</computeroutput> tag in all the places where <ref refid="classwx_bitmap" kindref="compound">wxBitmap</ref> could be specified using <computeroutput>&lt;bitmap&gt;</computeroutput> before (of course, using the latter tag is still supported). Either multiple bitmaps or a single SVG image can be used.</para>
</sect2>
</sect1>
<sect1 id="overview_high_dpi_1high_dpi_existing_code">
<title>Adapting Existing Code To High DPI</title>
<para>Generally speaking, adding support for high DPI to the existing wxWidgets programs involves doing at least the following:</para>
<para><orderedlist>
<listitem><para>Not using any hard-coded pixel values outside of <computeroutput>FromDIP()</computeroutput> (note that this does <emphasis>not</emphasis> apply to XRC).</para>
</listitem><listitem><para>Using <ref refid="classwx_bitmap_bundle" kindref="compound">wxBitmapBundle</ref> containing at least 2 (normal and high DPI) bitmaps instead of <ref refid="classwx_bitmap" kindref="compound">wxBitmap</ref> and <ref refid="classwx_image_list" kindref="compound">wxImageList</ref> when setting bitmaps.</para>
</listitem><listitem><para>Updating any custom art providers to override <ref refid="classwx_art_provider_1a60e15b26d7043b192697de3e02b92395" kindref="member">wxArtProvider::CreateBitmapBundle()</ref> (and, of course, return multiple bitmaps from it) instead of <ref refid="classwx_art_provider_1a7605cdbfeac3b04094ab05cfa9aba0bc" kindref="member">wxArtProvider::CreateBitmap()</ref>.</para>
</listitem><listitem><para>Removing any calls to <ref refid="classwx_tool_bar_1a57398893cb553fad90ffa7cd18cb1882" kindref="member">wxToolBar::SetToolBitmapSize()</ref> or, equivalently, <computeroutput>&lt;bitmapsize&gt;</computeroutput> attributes from the XRC, as this overrides the best size determination and may result in suboptimal appearance.</para>
</listitem></orderedlist>
</para>
</sect1>
<sect1 id="overview_high_dpi_1high_dpi_platform_specific">
<title>Platform-Specific Build Issues</title>
<para>Generally speaking, all systems handle applications not specifically marked as being &quot;DPI-aware&quot; by emulating low-resolution display for them and scaling them up, resulting in blurry graphics and fonts, but globally preserving the application appearance. For the best results, the application needs to be explicitly marked as DPI-aware in a platform-dependent way.</para>
<sect2 id="overview_high_dpi_1high_dpi_platform_msw">
<title>MSW</title>
<para>The behaviour of the application when running on a high-DPI display depends on the values in its <ulink url="https://en.wikipedia.org/wiki/Scalable_Vector_Graphics">manifest</ulink>. You may either use your own manifest, in which case you need to define the <computeroutput>dpiAware</computeroutput> (for compatibility with older OS versions) and <computeroutput>dpiAwareness</computeroutput> (for proper per-monitor DPI support) in it, or simply include <computeroutput>wx/msw/wx.rc</computeroutput> from your resource file to use the manifest provided by wxWidgets and predefine <computeroutput>wxUSE_DPI_AWARE_MANIFEST</computeroutput> to opt-in into <ulink url="https://docs.microsoft.com/en-us/windows/win32/hidpi/high-dpi-desktop-application-development-on-windows">high DPI support</ulink>: define it as <computeroutput>1</computeroutput> for minimal DPI awareness and <computeroutput>2</computeroutput> for full, per-monitor DPI awareness supported by Windows 10 version 1703 or later.</para>
</sect2>
<sect2 id="overview_high_dpi_1high_dpi_platform_mac">
<title>macOS</title>
<para>DPI-aware applications must set their <computeroutput>NSPrincipalClass</computeroutput> to <computeroutput>wxNSApplication</computeroutput> (or at least <computeroutput>NSApplication</computeroutput>) in their <computeroutput>Info.plist</computeroutput> file. Also see Apple <ulink url="https://developer.apple.com/library/archive/documentation/GraphicsAnimation/Conceptual/HighResolutionOSX/Explained/Explained.html">high resolution guidelines</ulink> for more information. </para>
</sect2>
</sect1>
    </detaileddescription>
    <location file="docs/doxygen/overviews/high_dpi.md"/>
  </compounddef>
</doxygen>
