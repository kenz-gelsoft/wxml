<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="classwx_secret_value" kind="class" language="C++" prot="public">
    <compoundname>wxSecretValue</compoundname>
    <includes local="no">wx/secretstore.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classwx_secret_value_1a00b4f7973fbf7d91fc65aa73e274e1ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxSecretValue::wxSecretValue</definition>
        <argsstring>()</argsstring>
        <name>wxSecretValue</name>
        <qualifiedname>wxSecretValue::wxSecretValue</qualifiedname>
        <briefdescription>
<para>Creates an empty secret value (not the same as an empty password). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/secretstore.h" line="63" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classwx_secret_value_1a3da5b41db9ce53fdc12b0d438132ed20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxSecretValue::wxSecretValue</definition>
        <argsstring>(size_t size, const void *data)</argsstring>
        <name>wxSecretValue</name>
        <qualifiedname>wxSecretValue::wxSecretValue</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Creates a secret value from the given data. </para>
        </briefdescription>
        <detaileddescription>
<para>The <emphasis>data</emphasis> argument may contain NUL bytes and doesn&apos;t need to be NUL-terminated.</para>
<para>Notice that at least under MSW the maximal size of the secret is limited. The exact limit depends on the OS version and is e.g. 2560 for Windows 7. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/secretstore.h" line="75" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classwx_secret_value_1a047e626ea3f87a04884b129d8303d5b1" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxSecretValue::wxSecretValue</definition>
        <argsstring>(const wxString &amp;secret)</argsstring>
        <name>wxSecretValue</name>
        <qualifiedname>wxSecretValue::wxSecretValue</qualifiedname>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>secret</declname>
        </param>
        <briefdescription>
<para>Creates a secret value from the given string. </para>
        </briefdescription>
        <detaileddescription>
<para>The <emphasis>secret</emphasis> argument may contain NUL bytes.</para>
<para>The secret value will stored serialized in UTF-8 encoding. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/secretstore.h" line="84" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_secret_value_1a2a0780870647d27d3f01318d7fb660c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxSecretValue::wxSecretValue</definition>
        <argsstring>(const wxSecretValue &amp;other)</argsstring>
        <name>wxSecretValue</name>
        <qualifiedname>wxSecretValue::wxSecretValue</qualifiedname>
        <param>
          <type>const <ref refid="classwx_secret_value" kindref="compound">wxSecretValue</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Creates a copy of an existing secret. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/secretstore.h" line="89" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classwx_secret_value_1abf0d8f032434b4544c8ed2d6b260a10a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_secret_value" kindref="compound">wxSecretValue</ref> &amp;</type>
        <definition>wxSecretValue &amp; wxSecretValue::operator=</definition>
        <argsstring>(const wxSecretValue &amp;other)</argsstring>
        <name>operator=</name>
        <qualifiedname>wxSecretValue::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classwx_secret_value" kindref="compound">wxSecretValue</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Assigns another secret to this one. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/secretstore.h" line="94" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classwx_secret_value_1a28ec70e784d49a957e46b1a65dfe1bcd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxSecretValue::~wxSecretValue</definition>
        <argsstring>()</argsstring>
        <name>~wxSecretValue</name>
        <qualifiedname>wxSecretValue::~wxSecretValue</qualifiedname>
        <briefdescription>
<para>Wipes out the secret value from memory before destroying the object. </para>
        </briefdescription>
        <detaileddescription>
<para>This method doesn&apos;t provide any real security guarantee, but it does reduce the likelihood that secret value is leaked if the program crashes and ends in a core or a minidump file, for example.</para>
<para>See <ref refid="classwx_secret_value_1ae4cf2e2cb99ff4fe7b6f9b83e4237b9e" kindref="member">Wipe()</ref> method if you need to overwrite another region of memory where the secret was copied to or from. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/secretstore.h" line="106" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classwx_secret_value_1aeb4b0527c176273e6c945dcd56c1d501" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxSecretValue::IsOk</definition>
        <argsstring>() const</argsstring>
        <name>IsOk</name>
        <qualifiedname>wxSecretValue::IsOk</qualifiedname>
        <briefdescription>
<para>Check if a secret is not empty. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/secretstore.h" line="111" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_secret_value_1a52a8f6628d578ff86d1600bf2b9a340e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxSecretValue::operator==</definition>
        <argsstring>(const wxSecretValue &amp;other) const</argsstring>
        <name>operator==</name>
        <qualifiedname>wxSecretValue::operator==</qualifiedname>
        <param>
          <type>const <ref refid="classwx_secret_value" kindref="compound">wxSecretValue</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Compare with another secret for equality. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/secretstore.h" line="116" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_secret_value_1aac77aafda3188523da0f9ca8621c607c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxSecretValue::operator!=</definition>
        <argsstring>(const wxSecretValue &amp;other) const</argsstring>
        <name>operator!=</name>
        <qualifiedname>wxSecretValue::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="classwx_secret_value" kindref="compound">wxSecretValue</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Compare with another secret for inequality. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/secretstore.h" line="121" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_secret_value_1a074f4fb01ec5f09b5ae1a8004dae8f69" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t wxSecretValue::GetSize</definition>
        <argsstring>() const</argsstring>
        <name>GetSize</name>
        <qualifiedname>wxSecretValue::GetSize</qualifiedname>
        <briefdescription>
<para>Get the size, in bytes, of the secret data. </para>
        </briefdescription>
        <detaileddescription>
<para>May return 0.</para>
<para><simplesect kind="see"><para><ref refid="classwx_secret_value_1a7a4f23ff96eba588ab634f866799539b" kindref="member">GetData()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/secretstore.h" line="130" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classwx_secret_value_1a7a4f23ff96eba588ab634f866799539b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const void *</type>
        <definition>const void * wxSecretValue::GetData</definition>
        <argsstring>() const</argsstring>
        <name>GetData</name>
        <qualifiedname>wxSecretValue::GetData</qualifiedname>
        <briefdescription>
<para>Get read-only access to the secret data. </para>
        </briefdescription>
        <detaileddescription>
<para>Don&apos;t assume it is NUL-terminated, use <ref refid="classwx_secret_value_1a074f4fb01ec5f09b5ae1a8004dae8f69" kindref="member">GetSize()</ref> instead.</para>
<para><simplesect kind="see"><para><ref refid="classwx_secret_value_1af1dbae6d45db532ae95ba3d399d8dd9d" kindref="member">GetAsString()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/secretstore.h" line="139" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classwx_secret_value_1af1dbae6d45db532ae95ba3d399d8dd9d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>wxString wxSecretValue::GetAsString</definition>
        <argsstring>(const wxMBConv &amp;conv=wxConvWhateverWorks) const</argsstring>
        <name>GetAsString</name>
        <qualifiedname>wxSecretValue::GetAsString</qualifiedname>
        <param>
          <type>const <ref refid="classwx_m_b_conv" kindref="compound">wxMBConv</ref> &amp;</type>
          <declname>conv</declname>
          <defval><ref refid="strconv_8h_1ab91097a28adc811113c5c1bf9e4b3873" kindref="member">wxConvWhateverWorks</ref></defval>
        </param>
        <briefdescription>
<para>Get the secret data as a string. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a more convenient but less secure alternative to using <ref refid="classwx_secret_value_1a074f4fb01ec5f09b5ae1a8004dae8f69" kindref="member">GetSize()</ref> and <ref refid="classwx_secret_value_1a7a4f23ff96eba588ab634f866799539b" kindref="member">GetData()</ref>, as this function creates another copy of a secret which won&apos;t be wiped when this object is destroyed and you will need to call <ref refid="classwx_secret_value_1ac2464d95b6e550eba55f8a426e0051c2" kindref="member">WipeString()</ref> to overwrite the content of the returned string, as well all its copies, if any, manually to avoid the secret being left in memory.</para>
<para>This function uses the specified <emphasis>conv</emphasis> object to convert binary secret data to string form. As the secret data may have been created by external programs not using wxWidgets API, it may be not a valid UTF-8-encoded string, so by default <ref refid="strconv_8h_1ab91097a28adc811113c5c1bf9e4b3873" kindref="member">wxConvWhateverWorks</ref>, which tries to interpret it in any way not avoiding loss of data, is used. However if the secrets are only saved by the program itself and are known to be always encoded in UTF-8, it may be better to pass <ref refid="classwx_m_b_conv_u_t_f8" kindref="compound">wxMBConvUTF8</ref> as the converter to use. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/secretstore.h" line="160" column="14"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classwx_secret_value_1ae4cf2e2cb99ff4fe7b6f9b83e4237b9e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void wxSecretValue::Wipe</definition>
        <argsstring>(size_t size, void *data)</argsstring>
        <name>Wipe</name>
        <qualifiedname>wxSecretValue::Wipe</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Erase the given area of memory overwriting its presumably sensitive content. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/secretstore.h" line="166" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classwx_secret_value_1ac2464d95b6e550eba55f8a426e0051c2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void wxSecretValue::WipeString</definition>
        <argsstring>(wxString &amp;str)</argsstring>
        <name>WipeString</name>
        <qualifiedname>wxSecretValue::WipeString</qualifiedname>
        <param>
          <type><ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Overwrite the contents of the given string. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classwx_secret_string" kindref="compound">wxSecretString</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/secretstore.h" line="173" column="17"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Represents the value of a secret in <ref refid="classwx_secret_store" kindref="compound">wxSecretStore</ref>. </para>
    </briefdescription>
    <detaileddescription>
<para>Immutable value-like class which tries to ensure that the secret value will be removed once it&apos;s not needed any more.</para>
<para><heading level="2"></heading>
</para>
<para>Library:<nonbreakablespace/><nonbreakablespace/><ref refid="page_libs_1page_libs_wxbase" kindref="member">wxBase</ref></para>
<para>Category:<nonbreakablespace/><nonbreakablespace/><ref refid="group__group__class__misc" kindref="compound">Miscellaneous</ref></para>
<para><simplesect kind="since"><para>3.1.1 </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="interface/wx/secretstore.h" line="57" column="1" bodyfile="interface/wx/secretstore.h" bodystart="58" bodyend="174"/>
    <listofallmembers>
      <member refid="classwx_secret_value_1af1dbae6d45db532ae95ba3d399d8dd9d" prot="public" virt="non-virtual"><scope>wxSecretValue</scope><name>GetAsString</name></member>
      <member refid="classwx_secret_value_1a7a4f23ff96eba588ab634f866799539b" prot="public" virt="non-virtual"><scope>wxSecretValue</scope><name>GetData</name></member>
      <member refid="classwx_secret_value_1a074f4fb01ec5f09b5ae1a8004dae8f69" prot="public" virt="non-virtual"><scope>wxSecretValue</scope><name>GetSize</name></member>
      <member refid="classwx_secret_value_1aeb4b0527c176273e6c945dcd56c1d501" prot="public" virt="non-virtual"><scope>wxSecretValue</scope><name>IsOk</name></member>
      <member refid="classwx_secret_value_1aac77aafda3188523da0f9ca8621c607c" prot="public" virt="non-virtual"><scope>wxSecretValue</scope><name>operator!=</name></member>
      <member refid="classwx_secret_value_1abf0d8f032434b4544c8ed2d6b260a10a" prot="public" virt="non-virtual"><scope>wxSecretValue</scope><name>operator=</name></member>
      <member refid="classwx_secret_value_1a52a8f6628d578ff86d1600bf2b9a340e" prot="public" virt="non-virtual"><scope>wxSecretValue</scope><name>operator==</name></member>
      <member refid="classwx_secret_value_1ae4cf2e2cb99ff4fe7b6f9b83e4237b9e" prot="public" virt="non-virtual"><scope>wxSecretValue</scope><name>Wipe</name></member>
      <member refid="classwx_secret_value_1ac2464d95b6e550eba55f8a426e0051c2" prot="public" virt="non-virtual"><scope>wxSecretValue</scope><name>WipeString</name></member>
      <member refid="classwx_secret_value_1a00b4f7973fbf7d91fc65aa73e274e1ee" prot="public" virt="non-virtual"><scope>wxSecretValue</scope><name>wxSecretValue</name></member>
      <member refid="classwx_secret_value_1a3da5b41db9ce53fdc12b0d438132ed20" prot="public" virt="non-virtual"><scope>wxSecretValue</scope><name>wxSecretValue</name></member>
      <member refid="classwx_secret_value_1a047e626ea3f87a04884b129d8303d5b1" prot="public" virt="non-virtual"><scope>wxSecretValue</scope><name>wxSecretValue</name></member>
      <member refid="classwx_secret_value_1a2a0780870647d27d3f01318d7fb660c4" prot="public" virt="non-virtual"><scope>wxSecretValue</scope><name>wxSecretValue</name></member>
      <member refid="classwx_secret_value_1a28ec70e784d49a957e46b1a65dfe1bcd" prot="public" virt="non-virtual"><scope>wxSecretValue</scope><name>~wxSecretValue</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
