<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="classwx_archive_class_factory" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>wxArchiveClassFactory</compoundname>
    <basecompoundref refid="classwx_object" prot="public" virt="non-virtual">wxObject</basecompoundref>
    <derivedcompoundref refid="classwx_tar_class_factory" prot="public" virt="non-virtual">wxTarClassFactory</derivedcompoundref>
    <derivedcompoundref refid="classwx_zip_class_factory" prot="public" virt="non-virtual">wxZipClassFactory</derivedcompoundref>
    <includes local="no">wx/archive.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classwx_archive_class_factory_1a9c79bfa1c111f5016a8e536d66aab3e0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxArchiveClassFactory::CanHandle</definition>
        <argsstring>(const wxString &amp;protocol, wxStreamProtocolType type=wxSTREAM_PROTOCOL) const</argsstring>
        <name>CanHandle</name>
        <qualifiedname>wxArchiveClassFactory::CanHandle</qualifiedname>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>protocol</declname>
        </param>
        <param>
          <type><ref refid="interface_2wx_2stream_8h_1af43964582cc2e87658bf792727dceff8" kindref="member">wxStreamProtocolType</ref></type>
          <declname>type</declname>
          <defval><ref refid="interface_2wx_2stream_8h_1af43964582cc2e87658bf792727dceff8a4149acac8ba8afeec2994b101840893b" kindref="member">wxSTREAM_PROTOCOL</ref></defval>
        </param>
        <briefdescription>
<para>Returns true if this factory can handle the given protocol, MIME type or file extension. </para>
        </briefdescription>
        <detaileddescription>
<para>When using wxSTREAM_FILEEXT for the second parameter, the first parameter can be a complete filename rather than just an extension. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/archive.h" line="339" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_archive_class_factory_1ae10df6db899ec0f203cae3d6897e56b8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_m_b_conv" kindref="compound">wxMBConv</ref> &amp;</type>
        <definition>wxMBConv &amp; wxArchiveClassFactory::GetConv</definition>
        <argsstring>() const</argsstring>
        <name>GetConv</name>
        <qualifiedname>wxArchiveClassFactory::GetConv</qualifiedname>
        <briefdescription>
<para>Returns the <ref refid="classwx_m_b_conv" kindref="compound">wxMBConv</ref> object that the created streams will use when translating meta-data. </para>
        </briefdescription>
        <detaileddescription>
<para>The initial default, set by the constructor, is wxConvLocal. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/archive.h" line="358" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_archive_class_factory_1ae541f085aabc3531062e541c4bf42983" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxArchiveClassFactory::SetConv</definition>
        <argsstring>(wxMBConv &amp;conv)</argsstring>
        <name>SetConv</name>
        <qualifiedname>wxArchiveClassFactory::SetConv</qualifiedname>
        <param>
          <type><ref refid="classwx_m_b_conv" kindref="compound">wxMBConv</ref> &amp;</type>
          <declname>conv</declname>
        </param>
        <briefdescription>
<para>Sets the <ref refid="classwx_m_b_conv" kindref="compound">wxMBConv</ref> object that the created streams will use when translating meta-data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/archive.h" line="364" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_archive_class_factory_1a195777ed4a768085e9245735f12f6748" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classwx_archive_class_factory" kindref="compound">wxArchiveClassFactory</ref> *</type>
        <definition>const wxArchiveClassFactory * wxArchiveClassFactory::GetNext</definition>
        <argsstring>() const</argsstring>
        <name>GetNext</name>
        <qualifiedname>wxArchiveClassFactory::GetNext</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/archive.h" line="385" column="33"/>
      </memberdef>
      <memberdef kind="function" id="classwx_archive_class_factory_1ac83622385ff9b2525266d0c5c147f90c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>virtual wxString wxArchiveClassFactory::GetInternalName</definition>
        <argsstring>(const wxString &amp;name, wxPathFormat format=wxPATH_NATIVE) const =0</argsstring>
        <name>GetInternalName</name>
        <qualifiedname>wxArchiveClassFactory::GetInternalName</qualifiedname>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="filename_8h_1a0f0d9c04938ef2820d1ff7ed6b97bf00" kindref="member">wxPathFormat</ref></type>
          <declname>format</declname>
          <defval><ref refid="filename_8h_1a0f0d9c04938ef2820d1ff7ed6b97bf00a82373989c22bc22b15025a7900f4324e" kindref="member">wxPATH_NATIVE</ref></defval>
        </param>
        <briefdescription>
<para>Calls the static <ref refid="classwx_archive_class_factory_1ac83622385ff9b2525266d0c5c147f90c" kindref="member">GetInternalName()</ref> function for the archive entry type, for example <ref refid="classwx_zip_entry_1a4e6efe4cf7ae4196892998c977ff8287" kindref="member">wxZipEntry::GetInternalName</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/archive.h" line="392" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classwx_archive_class_factory_1a135eb8fa4ad950e25b5db824067d1231" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>wxString wxArchiveClassFactory::GetProtocol</definition>
        <argsstring>() const</argsstring>
        <name>GetProtocol</name>
        <qualifiedname>wxArchiveClassFactory::GetProtocol</qualifiedname>
        <briefdescription>
<para>Returns the <ref refid="classwx_file_system" kindref="compound">wxFileSystem</ref> protocol supported by this factory. </para>
        </briefdescription>
        <detaileddescription>
<para>Equivalent to <programlisting><codeline><highlight class="normal"><ref refid="classwx_string" kindref="compound">wxString</ref>(*<ref refid="classwx_archive_class_factory_1a95daac25443636a21e3fad3e82f9129d" kindref="member">GetProtocols</ref>())<sp/></highlight></codeline>
</programlisting>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/archive.h" line="399" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_archive_class_factory_1a95daac25443636a21e3fad3e82f9129d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>const <ref refid="chartype_8h_1ad42f64d8c82f1ce4ae58773a89b2d6a7" kindref="member">wxChar</ref> **</type>
        <definition>virtual const wxChar ** wxArchiveClassFactory::GetProtocols</definition>
        <argsstring>(wxStreamProtocolType type=wxSTREAM_PROTOCOL) const =0</argsstring>
        <name>GetProtocols</name>
        <qualifiedname>wxArchiveClassFactory::GetProtocols</qualifiedname>
        <param>
          <type><ref refid="interface_2wx_2stream_8h_1af43964582cc2e87658bf792727dceff8" kindref="member">wxStreamProtocolType</ref></type>
          <declname>type</declname>
          <defval><ref refid="interface_2wx_2stream_8h_1af43964582cc2e87658bf792727dceff8a4149acac8ba8afeec2994b101840893b" kindref="member">wxSTREAM_PROTOCOL</ref></defval>
        </param>
        <briefdescription>
<para>Returns the protocols, MIME types or file extensions supported by this factory, as an array of null terminated strings. </para>
        </briefdescription>
        <detaileddescription>
<para>It does not give away ownership of the array or strings. For example, to list the file extensions a factory supports:</para>
<para><programlisting><codeline><highlight class="normal"><ref refid="classwx_string" kindref="compound">wxString</ref><sp/>list;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="chartype_8h_1ad42f64d8c82f1ce4ae58773a89b2d6a7" kindref="member">wxChar</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*p;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(p<sp/>=<sp/>factory-&gt;GetProtocols(<ref refid="interface_2wx_2stream_8h_1af43964582cc2e87658bf792727dceff8a6a7551247424d0c62b240da47daee204" kindref="member">wxSTREAM_FILEEXT</ref>);<sp/>*p;<sp/>p++)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>list<sp/>&lt;&lt;<sp/>*p<sp/>&lt;&lt;<sp/><ref refid="chartype_8h_1a437ea6ba615b75dac8603e96ec864160" kindref="member">wxT</ref>(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/archive.h" line="416" column="26"/>
      </memberdef>
      <memberdef kind="function" id="classwx_archive_class_factory_1a8f2d026b1da64645e7d5df05ee35aa48" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_archive_entry" kindref="compound">wxArchiveEntry</ref> *</type>
        <definition>wxArchiveEntry * wxArchiveClassFactory::NewEntry</definition>
        <argsstring>() const</argsstring>
        <name>NewEntry</name>
        <qualifiedname>wxArchiveClassFactory::NewEntry</qualifiedname>
        <briefdescription>
<para>Create a new <ref refid="classwx_archive_entry" kindref="compound">wxArchiveEntry</ref> object of the appropriate type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/archive.h" line="421" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classwx_archive_class_factory_1a8335cbb540b1c5c7347a3917e00e4978" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_archive_input_stream" kindref="compound">wxArchiveInputStream</ref> *</type>
        <definition>wxArchiveInputStream * wxArchiveClassFactory::NewStream</definition>
        <argsstring>(wxInputStream &amp;stream) const</argsstring>
        <name>NewStream</name>
        <qualifiedname>wxArchiveClassFactory::NewStream</qualifiedname>
        <param>
          <type><ref refid="classwx_input_stream" kindref="compound">wxInputStream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Create a new input or output stream to read or write an archive. </para>
        </briefdescription>
        <detaileddescription>
<para>If the parent stream is passed as a pointer then the new archive stream takes ownership of it. If it is passed by reference then it does not. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/archive.h" line="430" column="26"/>
      </memberdef>
      <memberdef kind="function" id="classwx_archive_class_factory_1ae758fe35da8c9b67c2a17c3bffeb259c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_archive_output_stream" kindref="compound">wxArchiveOutputStream</ref> *</type>
        <definition>wxArchiveOutputStream * wxArchiveClassFactory::NewStream</definition>
        <argsstring>(wxOutputStream &amp;stream) const</argsstring>
        <name>NewStream</name>
        <qualifiedname>wxArchiveClassFactory::NewStream</qualifiedname>
        <param>
          <type><ref refid="classwx_output_stream" kindref="compound">wxOutputStream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/archive.h" line="431" column="27"/>
      </memberdef>
      <memberdef kind="function" id="classwx_archive_class_factory_1a7e9ca9f5b62aa36c815d27693e6445aa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_archive_input_stream" kindref="compound">wxArchiveInputStream</ref> *</type>
        <definition>wxArchiveInputStream * wxArchiveClassFactory::NewStream</definition>
        <argsstring>(wxInputStream *stream) const</argsstring>
        <name>NewStream</name>
        <qualifiedname>wxArchiveClassFactory::NewStream</qualifiedname>
        <param>
          <type><ref refid="classwx_input_stream" kindref="compound">wxInputStream</ref> *</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/archive.h" line="432" column="26"/>
      </memberdef>
      <memberdef kind="function" id="classwx_archive_class_factory_1ab68504c53964c1e139e3eed453371398" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_archive_output_stream" kindref="compound">wxArchiveOutputStream</ref> *</type>
        <definition>wxArchiveOutputStream * wxArchiveClassFactory::NewStream</definition>
        <argsstring>(wxOutputStream *stream) const</argsstring>
        <name>NewStream</name>
        <qualifiedname>wxArchiveClassFactory::NewStream</qualifiedname>
        <param>
          <type><ref refid="classwx_output_stream" kindref="compound">wxOutputStream</ref> *</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/archive.h" line="433" column="27"/>
      </memberdef>
      <memberdef kind="function" id="classwx_archive_class_factory_1a2ce9c0d68e825a8f2b61617f8b213ee2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxArchiveClassFactory::PushFront</definition>
        <argsstring>()</argsstring>
        <name>PushFront</name>
        <qualifiedname>wxArchiveClassFactory::PushFront</qualifiedname>
        <briefdescription>
<para>Adds this class factory to the list returned by <ref refid="classwx_archive_class_factory_1ae4352734a45f0257c3d260daaef6a73b" kindref="member">GetFirst()</ref> or <ref refid="classwx_archive_class_factory_1a195777ed4a768085e9245735f12f6748" kindref="member">GetNext()</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>It is not necessary to do this to use the archive streams. It is usually used when implementing streams, typically the implementation will add a static instance of its factory class.</para>
<para>It can also be used to change the order of a factory already in the list, bringing it to the front. This isn&apos;t a thread safe operation so can&apos;t be done when other threads are running that will be using the list. The list does not take ownership of the factory. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/archive.h" line="448" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_archive_class_factory_1a541af2ac6ad3a33a103d0c557165751f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxArchiveClassFactory::Remove</definition>
        <argsstring>()</argsstring>
        <name>Remove</name>
        <qualifiedname>wxArchiveClassFactory::Remove</qualifiedname>
        <briefdescription>
<para>Removes this class factory from the list returned by <ref refid="classwx_archive_class_factory_1ae4352734a45f0257c3d260daaef6a73b" kindref="member">GetFirst()</ref> and <ref refid="classwx_archive_class_factory_1a195777ed4a768085e9245735f12f6748" kindref="member">GetNext()</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Removing from the list isn&apos;t a thread safe operation so can&apos;t be done when other threads are running that will be using the list. The list does not own the factories, so removing a factory does not delete it. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/archive.h" line="457" column="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classwx_archive_class_factory_1a16277df97e73b3670f654d373cee0ec3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classwx_archive_class_factory" kindref="compound">wxArchiveClassFactory</ref> *</type>
        <definition>static const wxArchiveClassFactory * wxArchiveClassFactory::Find</definition>
        <argsstring>(const wxString &amp;protocol, wxStreamProtocolType type=wxSTREAM_PROTOCOL)</argsstring>
        <name>Find</name>
        <qualifiedname>wxArchiveClassFactory::Find</qualifiedname>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>protocol</declname>
        </param>
        <param>
          <type><ref refid="interface_2wx_2stream_8h_1af43964582cc2e87658bf792727dceff8" kindref="member">wxStreamProtocolType</ref></type>
          <declname>type</declname>
          <defval><ref refid="interface_2wx_2stream_8h_1af43964582cc2e87658bf792727dceff8a4149acac8ba8afeec2994b101840893b" kindref="member">wxSTREAM_PROTOCOL</ref></defval>
        </param>
        <briefdescription>
<para>A static member that finds a factory that can handle a given protocol, MIME type or file extension. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns a pointer to the class factory if found, or NULL otherwise. It does not give away ownership of the factory.</para>
<para>When using wxSTREAM_FILEEXT for the second parameter, the first parameter can be a complete filename rather than just an extension. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/archive.h" line="350" column="40"/>
      </memberdef>
      <memberdef kind="function" id="classwx_archive_class_factory_1ae4352734a45f0257c3d260daaef6a73b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classwx_archive_class_factory" kindref="compound">wxArchiveClassFactory</ref> *</type>
        <definition>static const wxArchiveClassFactory * wxArchiveClassFactory::GetFirst</definition>
        <argsstring>()</argsstring>
        <name>GetFirst</name>
        <qualifiedname>wxArchiveClassFactory::GetFirst</qualifiedname>
        <briefdescription>
<para>GetFirst and GetNext can be used to enumerate the available factories. </para>
        </briefdescription>
        <detaileddescription>
<para>For example, to list them:</para>
<para><programlisting><codeline><highlight class="normal"><ref refid="classwx_string" kindref="compound">wxString</ref><sp/>list;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classwx_archive_class_factory" kindref="compound">wxArchiveClassFactory</ref><sp/>*factory<sp/>=<sp/><ref refid="classwx_archive_class_factory_1ae4352734a45f0257c3d260daaef6a73b" kindref="member">wxArchiveClassFactory::GetFirst</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(factory)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>list<sp/>&lt;&lt;<sp/>factory-&gt;<ref refid="classwx_archive_class_factory_1a135eb8fa4ad950e25b5db824067d1231" kindref="member">GetProtocol</ref>()<sp/>&lt;&lt;<sp/><ref refid="chartype_8h_1a437ea6ba615b75dac8603e96ec864160" kindref="member">wxT</ref>(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>factory<sp/>=<sp/>factory-&gt;<ref refid="classwx_archive_class_factory_1a195777ed4a768085e9245735f12f6748" kindref="member">GetNext</ref>();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><ref refid="classwx_archive_class_factory_1ae4352734a45f0257c3d260daaef6a73b" kindref="member">GetFirst()</ref> and <ref refid="classwx_archive_class_factory_1a195777ed4a768085e9245735f12f6748" kindref="member">GetNext()</ref> return a pointer to a factory or NULL if no more are available. They do not give away ownership of the factory. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/archive.h" line="384" column="40"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Allows the creation of streams to handle archive formats such as zip and tar. </para>
    </briefdescription>
    <detaileddescription>
<para>For example, given a filename you can search for a factory that will handle it and create a stream to read it:</para>
<para><programlisting><codeline><highlight class="normal">factory<sp/>=<sp/><ref refid="classwx_archive_class_factory_1a16277df97e73b3670f654d373cee0ec3" kindref="member">wxArchiveClassFactory::Find</ref>(filename,<sp/><ref refid="interface_2wx_2stream_8h_1af43964582cc2e87658bf792727dceff8a6a7551247424d0c62b240da47daee204" kindref="member">wxSTREAM_FILEEXT</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(factory)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>stream<sp/>=<sp/>factory-&gt;NewStream(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classwx_f_file_input_stream" kindref="compound">wxFFileInputStream</ref>(filename));</highlight></codeline>
</programlisting></para>
<para><ref refid="classwx_archive_class_factory_1a16277df97e73b3670f654d373cee0ec3" kindref="member">wxArchiveClassFactory::Find</ref> can also search for a factory by MIME type or <ref refid="classwx_file_system" kindref="compound">wxFileSystem</ref> protocol.</para>
<para>The available factories can be enumerated using <ref refid="classwx_archive_class_factory_1ae4352734a45f0257c3d260daaef6a73b" kindref="member">wxArchiveClassFactory::GetFirst()</ref> and <ref refid="classwx_archive_class_factory_1a195777ed4a768085e9245735f12f6748" kindref="member">wxArchiveClassFactory::GetNext()</ref>.</para>
<para><heading level="2"></heading>
</para>
<para>Library:<nonbreakablespace/><nonbreakablespace/><ref refid="page_libs_1page_libs_wxbase" kindref="member">wxBase</ref></para>
<para>Category:<nonbreakablespace/><nonbreakablespace/><ref refid="group__group__class__archive" kindref="compound">Archive support</ref>, <ref refid="group__group__class__streams" kindref="compound">Streams</ref></para>
<para><simplesect kind="see"><para><ref refid="overview_archive" kindref="compound">Archive Formats</ref>, <ref refid="overview_archive_1overview_archive_generic" kindref="member">Generic Archive Programming</ref>, <ref refid="classwx_archive_entry" kindref="compound">wxArchiveEntry</ref>, <ref refid="classwx_archive_input_stream" kindref="compound">wxArchiveInputStream</ref>, <ref refid="classwx_archive_output_stream" kindref="compound">wxArchiveOutputStream</ref>, <ref refid="classwx_filter_class_factory" kindref="compound">wxFilterClassFactory</ref> </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>wxArchiveClassFactory</label>
        <link refid="classwx_archive_class_factory"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>wxObject</label>
        <link refid="classwx_object"/>
      </node>
      <node id="3">
        <label>wxTarClassFactory</label>
        <link refid="classwx_tar_class_factory"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>wxZipClassFactory</label>
        <link refid="classwx_zip_class_factory"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>wxArchiveClassFactory</label>
        <link refid="classwx_archive_class_factory"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>wxObject</label>
        <link refid="classwx_object"/>
        <childnode refid="3" relation="usage">
          <edgelabel>m_refData</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>wxObjectRefData</label>
        <link refid="classwx_object_ref_data"/>
      </node>
    </collaborationgraph>
    <location file="interface/wx/archive.h" line="329" column="1" bodyfile="interface/wx/archive.h" bodystart="330" bodyend="458"/>
    <listofallmembers>
      <member refid="classwx_object_1a60204063f3cc3aa2fa1c7ff5bda9eb13" prot="protected" virt="non-virtual"><scope>wxArchiveClassFactory</scope><name>AllocExclusive</name></member>
      <member refid="classwx_archive_class_factory_1a9c79bfa1c111f5016a8e536d66aab3e0" prot="public" virt="non-virtual"><scope>wxArchiveClassFactory</scope><name>CanHandle</name></member>
      <member refid="classwx_object_1ac9c60b64c3757a5818b1123b197cd50d" prot="protected" virt="virtual"><scope>wxArchiveClassFactory</scope><name>CloneRefData</name></member>
      <member refid="classwx_object_1a9c38fc7f7d0dd40d5d83f3eedf1fb817" prot="protected" virt="virtual"><scope>wxArchiveClassFactory</scope><name>CreateRefData</name></member>
      <member refid="classwx_archive_class_factory_1a16277df97e73b3670f654d373cee0ec3" prot="public" virt="non-virtual"><scope>wxArchiveClassFactory</scope><name>Find</name></member>
      <member refid="classwx_object_1a9fd1bc8bc3a47c6e14e679a80e3cb8f4" prot="public" virt="virtual"><scope>wxArchiveClassFactory</scope><name>GetClassInfo</name></member>
      <member refid="classwx_archive_class_factory_1ae10df6db899ec0f203cae3d6897e56b8" prot="public" virt="non-virtual"><scope>wxArchiveClassFactory</scope><name>GetConv</name></member>
      <member refid="classwx_archive_class_factory_1ae4352734a45f0257c3d260daaef6a73b" prot="public" virt="non-virtual"><scope>wxArchiveClassFactory</scope><name>GetFirst</name></member>
      <member refid="classwx_archive_class_factory_1ac83622385ff9b2525266d0c5c147f90c" prot="public" virt="pure-virtual"><scope>wxArchiveClassFactory</scope><name>GetInternalName</name></member>
      <member refid="classwx_archive_class_factory_1a195777ed4a768085e9245735f12f6748" prot="public" virt="non-virtual"><scope>wxArchiveClassFactory</scope><name>GetNext</name></member>
      <member refid="classwx_archive_class_factory_1a135eb8fa4ad950e25b5db824067d1231" prot="public" virt="non-virtual"><scope>wxArchiveClassFactory</scope><name>GetProtocol</name></member>
      <member refid="classwx_archive_class_factory_1a95daac25443636a21e3fad3e82f9129d" prot="public" virt="pure-virtual"><scope>wxArchiveClassFactory</scope><name>GetProtocols</name></member>
      <member refid="classwx_object_1a0e06d77b52ee4c44a31c7cb62c9a4b68" prot="public" virt="non-virtual"><scope>wxArchiveClassFactory</scope><name>GetRefData</name></member>
      <member refid="classwx_object_1a3c7115ef4132dcee0c4fc34e84d7fced" prot="public" virt="non-virtual"><scope>wxArchiveClassFactory</scope><name>IsKindOf</name></member>
      <member refid="classwx_object_1a059373c494c2369d7db2a556efef8ecf" prot="public" virt="non-virtual"><scope>wxArchiveClassFactory</scope><name>IsSameAs</name></member>
      <member refid="classwx_object_1a9e31954530a0abd54982effc443ed2b8" prot="protected" virt="non-virtual"><scope>wxArchiveClassFactory</scope><name>m_refData</name></member>
      <member refid="classwx_archive_class_factory_1a8f2d026b1da64645e7d5df05ee35aa48" prot="public" virt="non-virtual"><scope>wxArchiveClassFactory</scope><name>NewEntry</name></member>
      <member refid="classwx_archive_class_factory_1a8335cbb540b1c5c7347a3917e00e4978" prot="public" virt="non-virtual"><scope>wxArchiveClassFactory</scope><name>NewStream</name></member>
      <member refid="classwx_archive_class_factory_1ae758fe35da8c9b67c2a17c3bffeb259c" prot="public" virt="non-virtual"><scope>wxArchiveClassFactory</scope><name>NewStream</name></member>
      <member refid="classwx_archive_class_factory_1a7e9ca9f5b62aa36c815d27693e6445aa" prot="public" virt="non-virtual"><scope>wxArchiveClassFactory</scope><name>NewStream</name></member>
      <member refid="classwx_archive_class_factory_1ab68504c53964c1e139e3eed453371398" prot="public" virt="non-virtual"><scope>wxArchiveClassFactory</scope><name>NewStream</name></member>
      <member refid="classwx_object_1a07b8f34f5afc5743195c5fed052f55d3" prot="public" virt="non-virtual"><scope>wxArchiveClassFactory</scope><name>operator delete</name></member>
      <member refid="classwx_object_1a48f4a0e3f8d737ca8d6cd04c1bbf08f0" prot="public" virt="non-virtual"><scope>wxArchiveClassFactory</scope><name>operator new</name></member>
      <member refid="classwx_archive_class_factory_1a2ce9c0d68e825a8f2b61617f8b213ee2" prot="public" virt="non-virtual"><scope>wxArchiveClassFactory</scope><name>PushFront</name></member>
      <member refid="classwx_object_1a2f6f1aa51fe9fc2b1415ca4211a90e9e" prot="public" virt="non-virtual"><scope>wxArchiveClassFactory</scope><name>Ref</name></member>
      <member refid="classwx_archive_class_factory_1a541af2ac6ad3a33a103d0c557165751f" prot="public" virt="non-virtual"><scope>wxArchiveClassFactory</scope><name>Remove</name></member>
      <member refid="classwx_archive_class_factory_1ae541f085aabc3531062e541c4bf42983" prot="public" virt="non-virtual"><scope>wxArchiveClassFactory</scope><name>SetConv</name></member>
      <member refid="classwx_object_1afab780710f2adc1bb33310e27590140b" prot="public" virt="non-virtual"><scope>wxArchiveClassFactory</scope><name>SetRefData</name></member>
      <member refid="classwx_object_1af51efc6b1ae632fc7f0cd7ebbce9fa36" prot="public" virt="non-virtual"><scope>wxArchiveClassFactory</scope><name>UnRef</name></member>
      <member refid="classwx_object_1a74b40e42d19a4b9e9bec0b57d62a5725" prot="public" virt="non-virtual"><scope>wxArchiveClassFactory</scope><name>UnShare</name></member>
      <member refid="classwx_object_1acaa378363a28af421ab56ad7b46eadf0" prot="public" virt="non-virtual"><scope>wxArchiveClassFactory</scope><name>wxObject</name></member>
      <member refid="classwx_object_1a4721b4dc9b7aff0f30904ba2ea3954cf" prot="public" virt="non-virtual"><scope>wxArchiveClassFactory</scope><name>wxObject</name></member>
      <member refid="classwx_object_1a2a51aa8bfbab47ca2f051bcf84b3f35b" prot="public" virt="virtual"><scope>wxArchiveClassFactory</scope><name>~wxObject</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
