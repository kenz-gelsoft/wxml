<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="classwx_g_l_context" kind="class" language="C++" prot="public">
    <compoundname>wxGLContext</compoundname>
    <basecompoundref refid="classwx_object" prot="public" virt="non-virtual">wxObject</basecompoundref>
    <includes local="no">wx/glcanvas.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classwx_g_l_context_1a07127d8bd9fe6d28ec4be92931a7f3e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxGLContext::wxGLContext</definition>
        <argsstring>(wxGLCanvas *win, const wxGLContext *other=NULL, const wxGLContextAttrs *ctxAttrs=NULL)</argsstring>
        <name>wxGLContext</name>
        <qualifiedname>wxGLContext::wxGLContext</qualifiedname>
        <param>
          <type><ref refid="classwx_g_l_canvas" kindref="compound">wxGLCanvas</ref> *</type>
          <declname>win</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_g_l_context" kindref="compound">wxGLContext</ref> *</type>
          <declname>other</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>const <ref refid="classwx_g_l_context_attrs" kindref="compound">wxGLContextAttrs</ref> *</type>
          <declname>ctxAttrs</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>win</parametername>
</parameternamelist>
<parameterdescription>
<para>The canvas that is used to initialize this context. This parameter is needed only temporarily, and the caller may do anything with it (e.g. destroy the window) after the constructor returned. <linebreak/>
 It will be possible to bind (make current) this context to any other <ref refid="classwx_g_l_canvas" kindref="compound">wxGLCanvas</ref> that has been created with equivalent attributes as win. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Context to share some data with or NULL (the default) for no sharing. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctxAttrs</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="classwx_g_l_context_attrs" kindref="compound">wxGLContextAttrs</ref> pointer to the attributes used for defining the flags when OGL &gt;= 3.2 is requested. This is the preferred method since wxWidgets 3.1.0. The previous method (still available for backwards compatibility) is to define the attributes at <ref refid="classwx_g_l_canvas" kindref="compound">wxGLCanvas</ref> ctor. If this parameter is NULL (the default) then that previous method is taken. If no attributes are defined at all, then those provided by the GPU driver defaults will be used. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/glcanvas.h" line="513" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classwx_g_l_context_1ae3487efd7bfe56874995609d5beab250" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxGLContext::IsOK</definition>
        <argsstring>()</argsstring>
        <name>IsOK</name>
        <qualifiedname>wxGLContext::IsOK</qualifiedname>
        <briefdescription>
<para>Checks if the underlying OpenGL rendering context was correctly created by the system with the requested attributes. </para>
        </briefdescription>
        <detaileddescription>
<para>If this function returns false then the <ref refid="classwx_g_l_context" kindref="compound">wxGLContext</ref> object is useless and should be deleted and recreated with different attributes.</para>
<para><simplesect kind="since"><para>3.1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/glcanvas.h" line="525" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_g_l_context_1aab51549ab80c98b3ffc0f217f5626bec" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool wxGLContext::SetCurrent</definition>
        <argsstring>(const wxGLCanvas &amp;win) const</argsstring>
        <name>SetCurrent</name>
        <qualifiedname>wxGLContext::SetCurrent</qualifiedname>
        <param>
          <type>const <ref refid="classwx_g_l_canvas" kindref="compound">wxGLCanvas</ref> &amp;</type>
          <declname>win</declname>
        </param>
        <briefdescription>
<para>Makes the OpenGL state that is represented by this rendering context current with the <ref refid="classwx_g_l_canvas" kindref="compound">wxGLCanvas</ref> <emphasis>win</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para><emphasis>win</emphasis> can be a different <ref refid="classwx_g_l_canvas" kindref="compound">wxGLCanvas</ref> window than the one that was passed to the constructor of this rendering context. If <emphasis>RC</emphasis> is an object of type <ref refid="classwx_g_l_context" kindref="compound">wxGLContext</ref>, the statements <emphasis>&quot;RC.SetCurrent(win);&quot;</emphasis> and <emphasis>&quot;win.SetCurrent(RC);&quot;</emphasis> are equivalent, see <ref refid="classwx_g_l_canvas_1abb550870107fd0e9fe1596a0e718f2e0" kindref="member">wxGLCanvas::SetCurrent()</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/glcanvas.h" line="537" column="18"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>An instance of a <ref refid="classwx_g_l_context" kindref="compound">wxGLContext</ref> represents the state of an OpenGL state machine and the connection between OpenGL and the system. </para>
    </briefdescription>
    <detaileddescription>
<para>The OpenGL state includes everything that can be set with the OpenGL API: colors, rendering variables, buffer data ids, texture objects, etc. It is possible to have multiple rendering contexts share buffer data and textures. This feature is specially useful when the application use multiple threads for updating data into the memory of the graphics card.</para>
<para>Whether one only rendering context is used with or bound to multiple output windows or if each window has its own bound context is a developer decision. It is important to take into account that GPU makers may set different pointers to the same OGL function for different contexts. The way these pointers are retrieved from the OGL driver should be used again for each new context.</para>
<para>Binding (making current) a rendering context with another instance of a <ref refid="classwx_g_l_canvas" kindref="compound">wxGLCanvas</ref> however works only if the both <ref refid="classwx_g_l_canvas" kindref="compound">wxGLCanvas</ref> instances were created with the same attributes.</para>
<para>OpenGL version 3 introduced a new type of specification profile, the modern core profile. The old compatibility profile maintains all legacy features. Since wxWidgets 3.1.0 you can choose the type of context and even ask for a specified OGL version number. However, its advised to use only core profile as the compatibility profile may run a bit slower.</para>
<para>OpenGL core profile specification defines several flags at context creation that determine not only the type of context but also some features. Some of these flags can be set in the list of attributes used at <ref refid="classwx_g_l_canvas" kindref="compound">wxGLCanvas</ref> ctor. But since wxWidgets 3.1.0 it is strongly encouraged to use the new mechanism: setting the context attributes with a <ref refid="classwx_g_l_context_attrs" kindref="compound">wxGLContextAttrs</ref> object and the canvas attributes with a <ref refid="classwx_g_l_attributes" kindref="compound">wxGLAttributes</ref> object.</para>
<para>The best way of knowing if your OpenGL environment supports a specific type of context is creating a <ref refid="classwx_g_l_context" kindref="compound">wxGLContext</ref> instance and checking <ref refid="classwx_g_l_context_1ae3487efd7bfe56874995609d5beab250" kindref="member">wxGLContext::IsOK()</ref>. If it returns false, then simply delete that instance and create a new one with other attributes.</para>
<para>wxHAS_OPENGL_ES is defined on platforms that only have this implementation available (e.g. the iPhone) and don&apos;t support the full specification.</para>
<para><heading level="2"></heading>
</para>
<para>Library:<nonbreakablespace/><nonbreakablespace/><ref refid="page_libs_1page_libs_wxgl" kindref="member">wxGL</ref></para>
<para>Category:<nonbreakablespace/><nonbreakablespace/><ref refid="group__group__class__gl" kindref="compound">OpenGL</ref></para>
<para><simplesect kind="see"><para><ref refid="classwx_g_l_canvas" kindref="compound">wxGLCanvas</ref>, <ref refid="classwx_g_l_context_attrs" kindref="compound">wxGLContextAttrs</ref>, <ref refid="classwx_g_l_attributes" kindref="compound">wxGLAttributes</ref> </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>wxGLContext</label>
        <link refid="classwx_g_l_context"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>wxObject</label>
        <link refid="classwx_object"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>wxGLContext</label>
        <link refid="classwx_g_l_context"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>wxObject</label>
        <link refid="classwx_object"/>
        <childnode refid="3" relation="usage">
          <edgelabel>m_refData</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>wxObjectRefData</label>
        <link refid="classwx_object_ref_data"/>
      </node>
    </collaborationgraph>
    <location file="interface/wx/glcanvas.h" line="487" column="1" bodyfile="interface/wx/glcanvas.h" bodystart="488" bodyend="538"/>
    <listofallmembers>
      <member refid="classwx_object_1a60204063f3cc3aa2fa1c7ff5bda9eb13" prot="protected" virt="non-virtual"><scope>wxGLContext</scope><name>AllocExclusive</name></member>
      <member refid="classwx_object_1ac9c60b64c3757a5818b1123b197cd50d" prot="protected" virt="virtual"><scope>wxGLContext</scope><name>CloneRefData</name></member>
      <member refid="classwx_object_1a9c38fc7f7d0dd40d5d83f3eedf1fb817" prot="protected" virt="virtual"><scope>wxGLContext</scope><name>CreateRefData</name></member>
      <member refid="classwx_object_1a9fd1bc8bc3a47c6e14e679a80e3cb8f4" prot="public" virt="virtual"><scope>wxGLContext</scope><name>GetClassInfo</name></member>
      <member refid="classwx_object_1a0e06d77b52ee4c44a31c7cb62c9a4b68" prot="public" virt="non-virtual"><scope>wxGLContext</scope><name>GetRefData</name></member>
      <member refid="classwx_object_1a3c7115ef4132dcee0c4fc34e84d7fced" prot="public" virt="non-virtual"><scope>wxGLContext</scope><name>IsKindOf</name></member>
      <member refid="classwx_g_l_context_1ae3487efd7bfe56874995609d5beab250" prot="public" virt="non-virtual"><scope>wxGLContext</scope><name>IsOK</name></member>
      <member refid="classwx_object_1a059373c494c2369d7db2a556efef8ecf" prot="public" virt="non-virtual"><scope>wxGLContext</scope><name>IsSameAs</name></member>
      <member refid="classwx_object_1a9e31954530a0abd54982effc443ed2b8" prot="protected" virt="non-virtual"><scope>wxGLContext</scope><name>m_refData</name></member>
      <member refid="classwx_object_1a07b8f34f5afc5743195c5fed052f55d3" prot="public" virt="non-virtual"><scope>wxGLContext</scope><name>operator delete</name></member>
      <member refid="classwx_object_1a48f4a0e3f8d737ca8d6cd04c1bbf08f0" prot="public" virt="non-virtual"><scope>wxGLContext</scope><name>operator new</name></member>
      <member refid="classwx_object_1a2f6f1aa51fe9fc2b1415ca4211a90e9e" prot="public" virt="non-virtual"><scope>wxGLContext</scope><name>Ref</name></member>
      <member refid="classwx_g_l_context_1aab51549ab80c98b3ffc0f217f5626bec" prot="public" virt="virtual"><scope>wxGLContext</scope><name>SetCurrent</name></member>
      <member refid="classwx_object_1afab780710f2adc1bb33310e27590140b" prot="public" virt="non-virtual"><scope>wxGLContext</scope><name>SetRefData</name></member>
      <member refid="classwx_object_1af51efc6b1ae632fc7f0cd7ebbce9fa36" prot="public" virt="non-virtual"><scope>wxGLContext</scope><name>UnRef</name></member>
      <member refid="classwx_object_1a74b40e42d19a4b9e9bec0b57d62a5725" prot="public" virt="non-virtual"><scope>wxGLContext</scope><name>UnShare</name></member>
      <member refid="classwx_g_l_context_1a07127d8bd9fe6d28ec4be92931a7f3e6" prot="public" virt="non-virtual"><scope>wxGLContext</scope><name>wxGLContext</name></member>
      <member refid="classwx_object_1acaa378363a28af421ab56ad7b46eadf0" prot="public" virt="non-virtual"><scope>wxGLContext</scope><name>wxObject</name></member>
      <member refid="classwx_object_1a4721b4dc9b7aff0f30904ba2ea3954cf" prot="public" virt="non-virtual"><scope>wxGLContext</scope><name>wxObject</name></member>
      <member refid="classwx_object_1a2a51aa8bfbab47ca2f051bcf84b3f35b" prot="public" virt="virtual"><scope>wxGLContext</scope><name>~wxObject</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
