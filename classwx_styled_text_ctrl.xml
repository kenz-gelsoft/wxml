<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="classwx_styled_text_ctrl" kind="class" language="C++" prot="public">
    <compoundname>wxStyledTextCtrl</compoundname>
    <basecompoundref refid="classwx_control" prot="public" virt="non-virtual">wxControl</basecompoundref>
    <basecompoundref refid="classwx_text_entry" prot="public" virt="non-virtual">wxTextEntry</basecompoundref>
    <includes local="no">wx/stc/stc.h</includes>
      <sectiondef kind="user-defined">
      <header>Constructors and related methods</header>
      <description><para><anchor id="classwx_styled_text_ctrl_1ctor"/> </para>
</description>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a0a55567d3331ee6cb8271d183be7a737" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxStyledTextCtrl::wxStyledTextCtrl</definition>
        <argsstring>(wxWindow *parent, wxWindowID id=wxID_ANY, const wxPoint &amp;pos=wxDefaultPosition, const wxSize &amp;size=wxDefaultSize, long style=0, const wxString &amp;name=wxSTCNameStr)</argsstring>
        <name>wxStyledTextCtrl</name>
        <qualifiedname>wxStyledTextCtrl::wxStyledTextCtrl</qualifiedname>
        <param>
          <type><ref refid="classwx_window" kindref="compound">wxWindow</ref> *</type>
          <declname>parent</declname>
        </param>
        <param>
          <type><ref refid="windowid_8h_1ae8091432cc2cb2485d45f2302fb51133" kindref="member">wxWindowID</ref></type>
          <declname>id</declname>
          <defval><ref refid="defs_8h_1ac66d0a09761e7d86b2ac0b2e0c6a8cbba1f375b01ea03a713bbb7e32a36a2589c" kindref="member">wxID_ANY</ref></defval>
        </param>
        <param>
          <type>const <ref refid="classwx_point" kindref="compound">wxPoint</ref> &amp;</type>
          <declname>pos</declname>
          <defval><ref refid="gdicmn_8h_1af5a90c753eaf3d3e3e5068a19ec3c1d0" kindref="member">wxDefaultPosition</ref></defval>
        </param>
        <param>
          <type>const <ref refid="classwx_size" kindref="compound">wxSize</ref> &amp;</type>
          <declname>size</declname>
          <defval><ref refid="gdicmn_8h_1a33a012cdb075e9f78c93f63bec2dc27b" kindref="member">wxDefaultSize</ref></defval>
        </param>
        <param>
          <type>long</type>
          <declname>style</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>name</declname>
          <defval>wxSTCNameStr</defval>
        </param>
        <briefdescription>
<para>Ctor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="2853" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a012c578bfab78963f4bb0202af4b85d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxStyledTextCtrl::wxStyledTextCtrl</definition>
        <argsstring>()</argsstring>
        <name>wxStyledTextCtrl</name>
        <qualifiedname>wxStyledTextCtrl::wxStyledTextCtrl</qualifiedname>
        <briefdescription>
<para>Default ctor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="2860" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1aba99276c146d48f1c2da7ad8bd2756ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxStyledTextCtrl::~wxStyledTextCtrl</definition>
        <argsstring>()</argsstring>
        <name>~wxStyledTextCtrl</name>
        <qualifiedname>wxStyledTextCtrl::~wxStyledTextCtrl</qualifiedname>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="2865" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ac9fec1a8bb67fcb8d89751db19583e92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxStyledTextCtrl::Create</definition>
        <argsstring>(wxWindow *parent, wxWindowID id=wxID_ANY, const wxPoint &amp;pos=wxDefaultPosition, const wxSize &amp;size=wxDefaultSize, long style=0, const wxString &amp;name=wxSTCNameStr)</argsstring>
        <name>Create</name>
        <qualifiedname>wxStyledTextCtrl::Create</qualifiedname>
        <param>
          <type><ref refid="classwx_window" kindref="compound">wxWindow</ref> *</type>
          <declname>parent</declname>
        </param>
        <param>
          <type><ref refid="windowid_8h_1ae8091432cc2cb2485d45f2302fb51133" kindref="member">wxWindowID</ref></type>
          <declname>id</declname>
          <defval><ref refid="defs_8h_1ac66d0a09761e7d86b2ac0b2e0c6a8cbba1f375b01ea03a713bbb7e32a36a2589c" kindref="member">wxID_ANY</ref></defval>
        </param>
        <param>
          <type>const <ref refid="classwx_point" kindref="compound">wxPoint</ref> &amp;</type>
          <declname>pos</declname>
          <defval><ref refid="gdicmn_8h_1af5a90c753eaf3d3e3e5068a19ec3c1d0" kindref="member">wxDefaultPosition</ref></defval>
        </param>
        <param>
          <type>const <ref refid="classwx_size" kindref="compound">wxSize</ref> &amp;</type>
          <declname>size</declname>
          <defval><ref refid="gdicmn_8h_1a33a012cdb075e9f78c93f63bec2dc27b" kindref="member">wxDefaultSize</ref></defval>
        </param>
        <param>
          <type>long</type>
          <declname>style</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>name</declname>
          <defval>wxSTCNameStr</defval>
        </param>
        <briefdescription>
<para>Create the UI elements for a STC that was created with the default ctor. </para>
        </briefdescription>
        <detaileddescription>
<para>(For 2-phase create.) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="2870" column="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Text retrieval and modification</header>
      <description><para><anchor id="classwx_styled_text_ctrl_1TextRetrievalAndModification"/> </para>
</description>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ae6a49933178e52a9312741c06a7bcfb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::AddText</definition>
        <argsstring>(const wxString &amp;text)</argsstring>
        <name>AddText</name>
        <qualifiedname>wxStyledTextCtrl::AddText</qualifiedname>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>text</declname>
        </param>
        <briefdescription>
<para>Add text to the document at current position. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="2892" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1acf84b22ebe77e57927ac9bcbcec09a5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::AddStyledText</definition>
        <argsstring>(const wxMemoryBuffer &amp;data)</argsstring>
        <name>AddStyledText</name>
        <qualifiedname>wxStyledTextCtrl::AddStyledText</qualifiedname>
        <param>
          <type>const <ref refid="classwx_memory_buffer" kindref="compound">wxMemoryBuffer</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Add array of cells to document. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="2897" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a2fd8afea2355396a93b2b8ba99f1a559" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::InsertText</definition>
        <argsstring>(int pos, const wxString &amp;text)</argsstring>
        <name>InsertText</name>
        <qualifiedname>wxStyledTextCtrl::InsertText</qualifiedname>
        <param>
          <type>int</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>text</declname>
        </param>
        <briefdescription>
<para>Insert string at a position. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="2902" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a0d58a4a3d9496ce64ee1308e3faa3d6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::ChangeInsertion</definition>
        <argsstring>(int length, const wxString &amp;text)</argsstring>
        <name>ChangeInsertion</name>
        <qualifiedname>wxStyledTextCtrl::ChangeInsertion</qualifiedname>
        <param>
          <type>int</type>
          <declname>length</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>text</declname>
        </param>
        <briefdescription>
<para>Change the text that is being inserted in response to wxSTC_MOD_INSERTCHECK. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>3.1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="2909" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1af771cdc0e3b8d85c1038ba51ef33cdae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::ClearAll</definition>
        <argsstring>()</argsstring>
        <name>ClearAll</name>
        <qualifiedname>wxStyledTextCtrl::ClearAll</qualifiedname>
        <briefdescription>
<para>Delete all text in the document. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="2914" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a238a27805b06fe0f7eb60e84bf9d6333" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::DeleteRange</definition>
        <argsstring>(int start, int lengthDelete)</argsstring>
        <name>DeleteRange</name>
        <qualifiedname>wxStyledTextCtrl::DeleteRange</qualifiedname>
        <param>
          <type>int</type>
          <declname>start</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lengthDelete</declname>
        </param>
        <briefdescription>
<para>Delete a range of text in the document. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="2919" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a9cfd5783fd85eaa636ce31994af57303" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::ClearDocumentStyle</definition>
        <argsstring>()</argsstring>
        <name>ClearDocumentStyle</name>
        <qualifiedname>wxStyledTextCtrl::ClearDocumentStyle</qualifiedname>
        <briefdescription>
<para>Set all style bytes to 0, remove all folding information. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="2924" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a09eacf24c80494a9064e570ea14e6bf8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetCharAt</definition>
        <argsstring>(int pos) const</argsstring>
        <name>GetCharAt</name>
        <qualifiedname>wxStyledTextCtrl::GetCharAt</qualifiedname>
        <param>
          <type>int</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
<para>Returns the character byte at the position. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="2929" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a56ff6a0074271514781e23f7432f2df9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetStyleAt</definition>
        <argsstring>(int pos) const</argsstring>
        <name>GetStyleAt</name>
        <qualifiedname>wxStyledTextCtrl::GetStyleAt</qualifiedname>
        <param>
          <type>int</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
<para>Returns the style byte at the position. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="2934" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ab6d036ea6ab7a6389eca1d8d1fa19430" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetSavePoint</definition>
        <argsstring>()</argsstring>
        <name>SetSavePoint</name>
        <qualifiedname>wxStyledTextCtrl::SetSavePoint</qualifiedname>
        <briefdescription>
<para>Remember the current position in the undo history as the position at which the document was saved. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="2940" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a4d99c288fef906a6f31c4007a2526297" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_memory_buffer" kindref="compound">wxMemoryBuffer</ref></type>
        <definition>wxMemoryBuffer wxStyledTextCtrl::GetStyledText</definition>
        <argsstring>(int startPos, int endPos)</argsstring>
        <name>GetStyledText</name>
        <qualifiedname>wxStyledTextCtrl::GetStyledText</qualifiedname>
        <param>
          <type>int</type>
          <declname>startPos</declname>
        </param>
        <param>
          <type>int</type>
          <declname>endPos</declname>
        </param>
        <briefdescription>
<para>Retrieve a buffer of cells. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="2945" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a71e55478cc3e71eb5fce9151624b5e48" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxStyledTextCtrl::GetReadOnly</definition>
        <argsstring>() const</argsstring>
        <name>GetReadOnly</name>
        <qualifiedname>wxStyledTextCtrl::GetReadOnly</qualifiedname>
        <briefdescription>
<para>In read-only mode? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="2950" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a33257fd9c68db789842f5dab8d93defb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>wxString wxStyledTextCtrl::GetLine</definition>
        <argsstring>(int line) const</argsstring>
        <name>GetLine</name>
        <qualifiedname>wxStyledTextCtrl::GetLine</qualifiedname>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
<para>Retrieve the contents of a line. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="2955" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a4a1c9bb239d6d24e69675bbf4a1c7e99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>wxString wxStyledTextCtrl::GetTextRange</definition>
        <argsstring>(int startPos, int endPos)</argsstring>
        <name>GetTextRange</name>
        <qualifiedname>wxStyledTextCtrl::GetTextRange</qualifiedname>
        <param>
          <type>int</type>
          <declname>startPos</declname>
        </param>
        <param>
          <type>int</type>
          <declname>endPos</declname>
        </param>
        <briefdescription>
<para>Retrieve a range of text. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="2960" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a781675a6c92f399e0cfe426fcf8ee13e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::ReplaceSelection</definition>
        <argsstring>(const wxString &amp;text)</argsstring>
        <name>ReplaceSelection</name>
        <qualifiedname>wxStyledTextCtrl::ReplaceSelection</qualifiedname>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>text</declname>
        </param>
        <briefdescription>
<para>Replace the selected text with the argument text. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="2965" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a8e0234fe76281a6645798c47a34c2ecd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetReadOnly</definition>
        <argsstring>(bool readOnly)</argsstring>
        <name>SetReadOnly</name>
        <qualifiedname>wxStyledTextCtrl::SetReadOnly</qualifiedname>
        <param>
          <type>bool</type>
          <declname>readOnly</declname>
        </param>
        <briefdescription>
<para>Set to read only or read write. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="2970" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a404eb5101b0c1602f29dec04ef6e4394" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetText</definition>
        <argsstring>(const wxString &amp;text)</argsstring>
        <name>SetText</name>
        <qualifiedname>wxStyledTextCtrl::SetText</qualifiedname>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>text</declname>
        </param>
        <briefdescription>
<para>Replace the contents of the document with the argument text. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="2975" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a8b0eead8e87c66d7fe0afc9f047848d6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>wxString wxStyledTextCtrl::GetText</definition>
        <argsstring>() const</argsstring>
        <name>GetText</name>
        <qualifiedname>wxStyledTextCtrl::GetText</qualifiedname>
        <briefdescription>
<para>Retrieve all the text in the document. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="2980" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a1122175b8fc2860c8d929908e2eed8aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::AppendText</definition>
        <argsstring>(const wxString &amp;text)</argsstring>
        <name>AppendText</name>
        <qualifiedname>wxStyledTextCtrl::AppendText</qualifiedname>
        <reimplements refid="classwx_text_entry_1af80b5a51906ca9c65fa6cdaa9640768b">AppendText</reimplements>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>text</declname>
        </param>
        <briefdescription>
<para>Append a string to the end of the document without changing the selection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="2985" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a4af0b26e83a158ba2d444bcb42fe90be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::Allocate</definition>
        <argsstring>(int bytes)</argsstring>
        <name>Allocate</name>
        <qualifiedname>wxStyledTextCtrl::Allocate</qualifiedname>
        <param>
          <type>int</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
<para>Enlarge the document to a particular size of text bytes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="2990" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a8f7acde53132f753f9ed2a182c470dff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::ReleaseAllExtendedStyles</definition>
        <argsstring>()</argsstring>
        <name>ReleaseAllExtendedStyles</name>
        <qualifiedname>wxStyledTextCtrl::ReleaseAllExtendedStyles</qualifiedname>
        <briefdescription>
<para>Release all extended (&gt;255) style numbers. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>3.1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="2997" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a25caac69af890b5750a05dd3c9ce3cb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::AllocateExtendedStyles</definition>
        <argsstring>(int numberStyles)</argsstring>
        <name>AllocateExtendedStyles</name>
        <qualifiedname>wxStyledTextCtrl::AllocateExtendedStyles</qualifiedname>
        <param>
          <type>int</type>
          <declname>numberStyles</declname>
        </param>
        <briefdescription>
<para>Allocate some extended (&gt;255) style numbers and return the start of the range. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>3.1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3004" column="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Searching and replacing</header>
      <description><para><anchor id="classwx_styled_text_ctrl_1Searching"/> </para>
</description>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a753089eba7f27bdd2733c36d38ec97ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::FindText</definition>
        <argsstring>(int minPos, int maxPos, const wxString &amp;text, int flags=0, int *findEnd=NULL)</argsstring>
        <name>FindText</name>
        <qualifiedname>wxStyledTextCtrl::FindText</qualifiedname>
        <param>
          <type>int</type>
          <declname>minPos</declname>
        </param>
        <param>
          <type>int</type>
          <declname>maxPos</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>text</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int *</type>
          <declname>findEnd</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Find some text in the document. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>minPos</parametername>
</parameternamelist>
<parameterdescription>
<para>The position (starting from zero) in the document at which to begin the search </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxPos</parametername>
</parameternamelist>
<parameterdescription>
<para>The last position (starting from zero) in the document to which the search will be restricted. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>text</parametername>
</parameternamelist>
<parameterdescription>
<para>The text to search for. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional) The search flags. This should be a bit list containing one or more of the <ref refid="stc_8h_1a6bdd5cb2010c35c83e69d85079f5db33" kindref="member">wxSTC_FIND_* </ref> constants. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>findEnd</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional) This parameter can optionally be used to receive the end position (starting from zero) of the found text. This is primarily needed when searching using regular expressions. This parameter is available since wxWidgets 3.1.1. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The position (starting from zero) in the document at which the text was found or wxSTC_INVALID_POSITION if the search fails. </para>
</simplesect>
<simplesect kind="remark"><para>A backwards search can be performed by setting minPos to be greater than maxPos. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3040" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ac336c85b3a7fbcaa849ec2f8aa9546b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetTargetStart</definition>
        <argsstring>(int start)</argsstring>
        <name>SetTargetStart</name>
        <qualifiedname>wxStyledTextCtrl::SetTargetStart</qualifiedname>
        <param>
          <type>int</type>
          <declname>start</declname>
        </param>
        <briefdescription>
<para>Sets the position that starts the target which is used for updating the document without affecting the scroll position. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3047" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1abfd98b1eb22f557f14d07ddce583bdfb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetTargetStart</definition>
        <argsstring>() const</argsstring>
        <name>GetTargetStart</name>
        <qualifiedname>wxStyledTextCtrl::GetTargetStart</qualifiedname>
        <briefdescription>
<para>Get the position that starts the target. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3052" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a7c7429c691e7c0c79afb56e35e12fb20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetTargetEnd</definition>
        <argsstring>(int end)</argsstring>
        <name>SetTargetEnd</name>
        <qualifiedname>wxStyledTextCtrl::SetTargetEnd</qualifiedname>
        <param>
          <type>int</type>
          <declname>end</declname>
        </param>
        <briefdescription>
<para>Sets the position that ends the target which is used for updating the document without affecting the scroll position. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3058" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1aa781c1907142929d5f2a6498386b4112" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetTargetEnd</definition>
        <argsstring>() const</argsstring>
        <name>GetTargetEnd</name>
        <qualifiedname>wxStyledTextCtrl::GetTargetEnd</qualifiedname>
        <briefdescription>
<para>Get the position that ends the target. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3063" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a8874cfa68a509d60c80101b822b5ef16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetTargetRange</definition>
        <argsstring>(int start, int end)</argsstring>
        <name>SetTargetRange</name>
        <qualifiedname>wxStyledTextCtrl::SetTargetRange</qualifiedname>
        <param>
          <type>int</type>
          <declname>start</declname>
        </param>
        <param>
          <type>int</type>
          <declname>end</declname>
        </param>
        <briefdescription>
<para>Sets both the start and end of the target in one call. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>3.1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3070" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a3794da618c4c27e9ffc3b2fe6a465c76" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>wxString wxStyledTextCtrl::GetTargetText</definition>
        <argsstring>() const</argsstring>
        <name>GetTargetText</name>
        <qualifiedname>wxStyledTextCtrl::GetTargetText</qualifiedname>
        <briefdescription>
<para>Retrieve the text in the target. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>3.1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3077" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ab943ccce1bf3a135bea42becef9d5653" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::TargetFromSelection</definition>
        <argsstring>()</argsstring>
        <name>TargetFromSelection</name>
        <qualifiedname>wxStyledTextCtrl::TargetFromSelection</qualifiedname>
        <briefdescription>
<para>Make the target range start and end be the same as the selection range start and end. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3082" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1afc834e2af86a686d1ad4053886d73126" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::TargetWholeDocument</definition>
        <argsstring>()</argsstring>
        <name>TargetWholeDocument</name>
        <qualifiedname>wxStyledTextCtrl::TargetWholeDocument</qualifiedname>
        <briefdescription>
<para>Sets the target to the whole document. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>3.1.1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3089" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a9f9600dbe5b828f493e323f0dabd67ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::ReplaceTarget</definition>
        <argsstring>(const wxString &amp;text)</argsstring>
        <name>ReplaceTarget</name>
        <qualifiedname>wxStyledTextCtrl::ReplaceTarget</qualifiedname>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>text</declname>
        </param>
        <briefdescription>
<para>Replace the target text with the argument text. </para>
        </briefdescription>
        <detaileddescription>
<para>Text is counted so it can contain NULs. Returns the length of the replacement text. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3096" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ae6e45a7a50bb6e524b79fa3f730765e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::ReplaceTargetRE</definition>
        <argsstring>(const wxString &amp;text)</argsstring>
        <name>ReplaceTargetRE</name>
        <qualifiedname>wxStyledTextCtrl::ReplaceTargetRE</qualifiedname>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>text</declname>
        </param>
        <briefdescription>
<para>Replace the target text with the argument text after \d processing. </para>
        </briefdescription>
        <detaileddescription>
<para>Text is counted so it can contain NULs. Looks for \d where d is between 1 and 9 and replaces these with the strings matched in the last search operation which were surrounded by \( and \). Returns the length of the replacement text including any change caused by processing the \d patterns. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3106" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a741f27ac90f15b36c172708e6b2276da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::SearchInTarget</definition>
        <argsstring>(const wxString &amp;text)</argsstring>
        <name>SearchInTarget</name>
        <qualifiedname>wxStyledTextCtrl::SearchInTarget</qualifiedname>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>text</declname>
        </param>
        <briefdescription>
<para>Search for a counted string in the target and set the target to the found range. </para>
        </briefdescription>
        <detaileddescription>
<para>Text is counted so it can contain NULs. Returns length of range or -1 for failure in which case target is not moved. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3113" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a4c9ab04d802e5528fd21dcd5a84e1acb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetSearchFlags</definition>
        <argsstring>(int searchFlags)</argsstring>
        <name>SetSearchFlags</name>
        <qualifiedname>wxStyledTextCtrl::SetSearchFlags</qualifiedname>
        <param>
          <type>int</type>
          <declname>searchFlags</declname>
        </param>
        <briefdescription>
<para>Set the search flags used by SearchInTarget. </para>
        </briefdescription>
        <detaileddescription>
<para>The input should be a bit list containing one or more of the <ref refid="stc_8h_1a6bdd5cb2010c35c83e69d85079f5db33" kindref="member">wxSTC_FIND_* </ref> constants. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3121" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a307408094a533c536aab515ad4863a6b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetSearchFlags</definition>
        <argsstring>() const</argsstring>
        <name>GetSearchFlags</name>
        <qualifiedname>wxStyledTextCtrl::GetSearchFlags</qualifiedname>
        <briefdescription>
<para>Get the search flags used by SearchInTarget. </para>
        </briefdescription>
        <detaileddescription>
<para>The return value will be a bit list containing one or more of the <ref refid="stc_8h_1a6bdd5cb2010c35c83e69d85079f5db33" kindref="member">wxSTC_FIND_* </ref> constants. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3129" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a41bc40dbd76867fb64f4192ffde64d7b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>wxString wxStyledTextCtrl::GetTag</definition>
        <argsstring>(int tagNumber) const</argsstring>
        <name>GetTag</name>
        <qualifiedname>wxStyledTextCtrl::GetTag</qualifiedname>
        <param>
          <type>int</type>
          <declname>tagNumber</declname>
        </param>
        <briefdescription>
<para>Retrieve the value of a tag from a regular expression search. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3134" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a42100d4f60d5361099a18a036b2cbb06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SearchAnchor</definition>
        <argsstring>()</argsstring>
        <name>SearchAnchor</name>
        <qualifiedname>wxStyledTextCtrl::SearchAnchor</qualifiedname>
        <briefdescription>
<para>Sets the current caret position to be the search anchor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3139" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a69016a21d4b3e54cdaa9aeb803b5d1ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::SearchNext</definition>
        <argsstring>(int searchFlags, const wxString &amp;text)</argsstring>
        <name>SearchNext</name>
        <qualifiedname>wxStyledTextCtrl::SearchNext</qualifiedname>
        <param>
          <type>int</type>
          <declname>searchFlags</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>text</declname>
        </param>
        <briefdescription>
<para>Find some text starting at the search anchor. </para>
        </briefdescription>
        <detaileddescription>
<para>Does not ensure the selection is visible. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3145" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a1b465232d8f369f8e4b1d4024032c474" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::SearchPrev</definition>
        <argsstring>(int searchFlags, const wxString &amp;text)</argsstring>
        <name>SearchPrev</name>
        <qualifiedname>wxStyledTextCtrl::SearchPrev</qualifiedname>
        <param>
          <type>int</type>
          <declname>searchFlags</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>text</declname>
        </param>
        <briefdescription>
<para>Find some text starting at the search anchor and moving backwards. </para>
        </briefdescription>
        <detaileddescription>
<para>Does not ensure the selection is visible. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3151" column="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Overtype</header>
      <description><para><anchor id="classwx_styled_text_ctrl_1Overtype"/> </para>
</description>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a5ca5cba5aa0165ebfae99ad88dfef67d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetOvertype</definition>
        <argsstring>(bool overType)</argsstring>
        <name>SetOvertype</name>
        <qualifiedname>wxStyledTextCtrl::SetOvertype</qualifiedname>
        <param>
          <type>bool</type>
          <declname>overType</declname>
        </param>
        <briefdescription>
<para>Set to overtype (true) or insert mode. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3163" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a5ea3e1cbb839d6c85c814be50e83cecd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxStyledTextCtrl::GetOvertype</definition>
        <argsstring>() const</argsstring>
        <name>GetOvertype</name>
        <qualifiedname>wxStyledTextCtrl::GetOvertype</qualifiedname>
        <briefdescription>
<para>Returns true if overtype mode is active otherwise false is returned. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3168" column="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Cut copy and paste</header>
      <description><para><anchor id="classwx_styled_text_ctrl_1CutCopyAndPaste"/> </para>
</description>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a96bd42aef7ddb703a14867e9653d4258" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool wxStyledTextCtrl::CanPaste</definition>
        <argsstring>() const</argsstring>
        <name>CanPaste</name>
        <qualifiedname>wxStyledTextCtrl::CanPaste</qualifiedname>
        <reimplements refid="classwx_text_entry_1ae03fe0c746bd7230fc02eb7df8d7650c">CanPaste</reimplements>
        <briefdescription>
<para>Will a paste succeed? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3180" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a92e6e5e06f0a534444d632e4d78eb1ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::Cut</definition>
        <argsstring>()</argsstring>
        <name>Cut</name>
        <qualifiedname>wxStyledTextCtrl::Cut</qualifiedname>
        <reimplements refid="classwx_text_entry_1a571332a18ed5cdecd76a259ee97ae5a1">Cut</reimplements>
        <briefdescription>
<para>Cut the selection to the clipboard. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3185" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ae2d0815b70c661bd8480113dba59117e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::Copy</definition>
        <argsstring>()</argsstring>
        <name>Copy</name>
        <qualifiedname>wxStyledTextCtrl::Copy</qualifiedname>
        <reimplements refid="classwx_text_entry_1a94675646b91a2d5a18e3ca7395cafe77">Copy</reimplements>
        <briefdescription>
<para>Copy the selection to the clipboard. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3190" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ad6e87818b17d8977c31037376a079285" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::Paste</definition>
        <argsstring>()</argsstring>
        <name>Paste</name>
        <qualifiedname>wxStyledTextCtrl::Paste</qualifiedname>
        <reimplements refid="classwx_text_entry_1a5889d0d240e603e32c11bd580b65b3d7">Paste</reimplements>
        <briefdescription>
<para>Paste the contents of the clipboard into the document replacing the selection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3195" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a25370f4ee2751d73e7c2a4bfd944f519" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::Clear</definition>
        <argsstring>()</argsstring>
        <name>Clear</name>
        <qualifiedname>wxStyledTextCtrl::Clear</qualifiedname>
        <reimplements refid="classwx_text_entry_1a98b8e3fab8a5ac9944c2cefbb09ab3a7">Clear</reimplements>
        <briefdescription>
<para>Clear the selection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3200" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a305eccb44894029e809cfa31d68e91ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::CopyRange</definition>
        <argsstring>(int start, int end)</argsstring>
        <name>CopyRange</name>
        <qualifiedname>wxStyledTextCtrl::CopyRange</qualifiedname>
        <param>
          <type>int</type>
          <declname>start</declname>
        </param>
        <param>
          <type>int</type>
          <declname>end</declname>
        </param>
        <briefdescription>
<para>Copy a range of text to the clipboard. </para>
        </briefdescription>
        <detaileddescription>
<para>Positions are clipped into the document. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3205" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1aecbe5e763b12d7b744c1c77dbee2fe2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::CopyText</definition>
        <argsstring>(int length, const wxString &amp;text)</argsstring>
        <name>CopyText</name>
        <qualifiedname>wxStyledTextCtrl::CopyText</qualifiedname>
        <param>
          <type>int</type>
          <declname>length</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>text</declname>
        </param>
        <briefdescription>
<para>Copy argument text to the clipboard. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3210" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1abab994f4de37a9d7c7286351577d19ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetPasteConvertEndings</definition>
        <argsstring>(bool convert)</argsstring>
        <name>SetPasteConvertEndings</name>
        <qualifiedname>wxStyledTextCtrl::SetPasteConvertEndings</qualifiedname>
        <param>
          <type>bool</type>
          <declname>convert</declname>
        </param>
        <briefdescription>
<para>Enable/Disable convert-on-paste for line endings. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3215" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a090438e6ea980222f8df5733a10804c9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxStyledTextCtrl::GetPasteConvertEndings</definition>
        <argsstring>() const</argsstring>
        <name>GetPasteConvertEndings</name>
        <qualifiedname>wxStyledTextCtrl::GetPasteConvertEndings</qualifiedname>
        <briefdescription>
<para>Get convert-on-paste setting. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3220" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a6700ede8c3e6885f9bdd73039478ffe2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::CopyAllowLine</definition>
        <argsstring>()</argsstring>
        <name>CopyAllowLine</name>
        <qualifiedname>wxStyledTextCtrl::CopyAllowLine</qualifiedname>
        <briefdescription>
<para>Copy the selection, if selection empty copy the line with the caret. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3225" column="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Error handling</header>
      <description><para><anchor id="classwx_styled_text_ctrl_1ErrorHandling"/> </para>
</description>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a144d6a881ef6da1e89aca9d816bfcb9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetStatus</definition>
        <argsstring>(int status)</argsstring>
        <name>SetStatus</name>
        <qualifiedname>wxStyledTextCtrl::SetStatus</qualifiedname>
        <param>
          <type>int</type>
          <declname>status</declname>
        </param>
        <briefdescription>
<para>Change error status - 0 = OK. </para>
        </briefdescription>
        <detaileddescription>
<para>The input should be one of the <ref refid="stc_8h_1ab31bd30dbd67424cedffd693e3721b7e" kindref="member">wxSTC_STATUS_* </ref> constants. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3240" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1afa8f56574df9795b16222b1cdd50b616" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetStatus</definition>
        <argsstring>() const</argsstring>
        <name>GetStatus</name>
        <qualifiedname>wxStyledTextCtrl::GetStatus</qualifiedname>
        <briefdescription>
<para>Get error status. </para>
        </briefdescription>
        <detaileddescription>
<para>The return value will be one of the <ref refid="stc_8h_1ab31bd30dbd67424cedffd693e3721b7e" kindref="member">wxSTC_STATUS_* </ref> constants. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3248" column="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Undo and Redo</header>
      <description><para><anchor id="classwx_styled_text_ctrl_1UndoAndRedo"/> </para>
</description>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1aa58a2c1f83af5f7722defa6a1e8ab5dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::Redo</definition>
        <argsstring>()</argsstring>
        <name>Redo</name>
        <qualifiedname>wxStyledTextCtrl::Redo</qualifiedname>
        <reimplements refid="classwx_text_entry_1a3aa0d89ddb8a922c941818dafe4852a4">Redo</reimplements>
        <briefdescription>
<para>Redoes the next action on the undo history. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3260" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a67e1aba75c768fee4acf078ccf1b25f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetUndoCollection</definition>
        <argsstring>(bool collectUndo)</argsstring>
        <name>SetUndoCollection</name>
        <qualifiedname>wxStyledTextCtrl::SetUndoCollection</qualifiedname>
        <param>
          <type>bool</type>
          <declname>collectUndo</declname>
        </param>
        <briefdescription>
<para>Choose between collecting actions into the undo history and discarding them. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3266" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a0994684c0b44978000111fafd023389f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool wxStyledTextCtrl::CanRedo</definition>
        <argsstring>() const</argsstring>
        <name>CanRedo</name>
        <qualifiedname>wxStyledTextCtrl::CanRedo</qualifiedname>
        <reimplements refid="classwx_text_entry_1ab99240d67d8c82511ea3954a1c68ca77">CanRedo</reimplements>
        <briefdescription>
<para>Are there any redoable actions in the undo history? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3271" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1af248dffea3b88db5980a41780e02cf3a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxStyledTextCtrl::GetUndoCollection</definition>
        <argsstring>() const</argsstring>
        <name>GetUndoCollection</name>
        <qualifiedname>wxStyledTextCtrl::GetUndoCollection</qualifiedname>
        <briefdescription>
<para>Is undo history being collected? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3276" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a505c65bf4a294cfa33834027cdafa28f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::BeginUndoAction</definition>
        <argsstring>()</argsstring>
        <name>BeginUndoAction</name>
        <qualifiedname>wxStyledTextCtrl::BeginUndoAction</qualifiedname>
        <briefdescription>
<para>Start a sequence of actions that is undone and redone as a unit. </para>
        </briefdescription>
        <detaileddescription>
<para>May be nested. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3282" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1afe2fdcd1acd46e57cb26e8d4b16833a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::EndUndoAction</definition>
        <argsstring>()</argsstring>
        <name>EndUndoAction</name>
        <qualifiedname>wxStyledTextCtrl::EndUndoAction</qualifiedname>
        <briefdescription>
<para>End a sequence of actions that is undone and redone as a unit. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3287" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1afcfcf286bcc37c992da6fcb048b3c0bc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool wxStyledTextCtrl::CanUndo</definition>
        <argsstring>() const</argsstring>
        <name>CanUndo</name>
        <qualifiedname>wxStyledTextCtrl::CanUndo</qualifiedname>
        <reimplements refid="classwx_text_entry_1a7c7e533085c5e4cf61450ccf2ea7a5ed">CanUndo</reimplements>
        <briefdescription>
<para>Are there any undoable actions in the undo history? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3292" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1afa14ec48fb24337e74f1650fa16749ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::EmptyUndoBuffer</definition>
        <argsstring>()</argsstring>
        <name>EmptyUndoBuffer</name>
        <qualifiedname>wxStyledTextCtrl::EmptyUndoBuffer</qualifiedname>
        <briefdescription>
<para>Delete the undo history. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3297" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a49be0b2a034245563b214b3a27b19700" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::Undo</definition>
        <argsstring>()</argsstring>
        <name>Undo</name>
        <qualifiedname>wxStyledTextCtrl::Undo</qualifiedname>
        <reimplements refid="classwx_text_entry_1ad3784d539a2554c6eec76c80aa6d97de">Undo</reimplements>
        <briefdescription>
<para>Undo one action in the undo history. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3302" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a14353874dba30d73b1cde1f245e09c10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::AddUndoAction</definition>
        <argsstring>(int token, int flags)</argsstring>
        <name>AddUndoAction</name>
        <qualifiedname>wxStyledTextCtrl::AddUndoAction</qualifiedname>
        <param>
          <type>int</type>
          <declname>token</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Add a container action to the undo stack. </para>
        </briefdescription>
        <detaileddescription>
<para>The flags argument can be either 0 or wxSTC_UNDO_MAY_COALESCE. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3309" column="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Selection and information</header>
      <description><para><anchor id="classwx_styled_text_ctrl_1SelectionAndInformation"/> </para>
</description>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ad09b05ef8d6e484ea9b2707fa24c82ef" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetLength</definition>
        <argsstring>() const</argsstring>
        <name>GetLength</name>
        <qualifiedname>wxStyledTextCtrl::GetLength</qualifiedname>
        <briefdescription>
<para>Returns the number of bytes in the document. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3321" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a27fc5d7b9a2f1ef064e8fb5f53c5f2a8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetCurrentPos</definition>
        <argsstring>() const</argsstring>
        <name>GetCurrentPos</name>
        <qualifiedname>wxStyledTextCtrl::GetCurrentPos</qualifiedname>
        <briefdescription>
<para>Returns the position of the caret. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3326" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a26ba414ddca1dd797f27587788b56830" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetAnchor</definition>
        <argsstring>() const</argsstring>
        <name>GetAnchor</name>
        <qualifiedname>wxStyledTextCtrl::GetAnchor</qualifiedname>
        <briefdescription>
<para>Returns the position of the opposite end of the selection to the caret. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3331" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ae4b9f83f0dc460834b0533b26cc8314d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SelectAll</definition>
        <argsstring>()</argsstring>
        <name>SelectAll</name>
        <qualifiedname>wxStyledTextCtrl::SelectAll</qualifiedname>
        <reimplements refid="classwx_text_entry_1a2f7cb6fe4a1c2d1cd79edec6391ea91e">SelectAll</reimplements>
        <briefdescription>
<para>Select all the text in the document. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3336" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1abc0fdc802c9ce0c66b1b946e9ff85bdc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::PositionFromPoint</definition>
        <argsstring>(wxPoint pt) const</argsstring>
        <name>PositionFromPoint</name>
        <qualifiedname>wxStyledTextCtrl::PositionFromPoint</qualifiedname>
        <param>
          <type><ref refid="classwx_point" kindref="compound">wxPoint</ref></type>
          <declname>pt</declname>
        </param>
        <briefdescription>
<para>Find the position from a point within the window. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3341" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a892b27398a7b8d03923c86d1594280fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::PositionFromPointClose</definition>
        <argsstring>(int x, int y)</argsstring>
        <name>PositionFromPointClose</name>
        <qualifiedname>wxStyledTextCtrl::PositionFromPointClose</qualifiedname>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Find the position from a point within the window but return wxSTC_INVALID_POSITION if not close to text. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3347" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a36755313b796f113224095c17c344934" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::GotoLine</definition>
        <argsstring>(int line)</argsstring>
        <name>GotoLine</name>
        <qualifiedname>wxStyledTextCtrl::GotoLine</qualifiedname>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
<para>Set caret to start of a line and ensure it is visible. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3352" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1af5b04e788271c7c1e9c5bf61d3542d76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::GotoPos</definition>
        <argsstring>(int caret)</argsstring>
        <name>GotoPos</name>
        <qualifiedname>wxStyledTextCtrl::GotoPos</qualifiedname>
        <param>
          <type>int</type>
          <declname>caret</declname>
        </param>
        <briefdescription>
<para>Set caret to a position and ensure it is visible. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3357" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1adbb97bf1f2bccae59446386ecf435688" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetAnchor</definition>
        <argsstring>(int anchor)</argsstring>
        <name>SetAnchor</name>
        <qualifiedname>wxStyledTextCtrl::SetAnchor</qualifiedname>
        <param>
          <type>int</type>
          <declname>anchor</declname>
        </param>
        <briefdescription>
<para>Set the selection anchor to a position. </para>
        </briefdescription>
        <detaileddescription>
<para>The anchor is the opposite end of the selection from the caret. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3363" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1af8885aaddb96738b8a9c182655c1892a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>wxString wxStyledTextCtrl::GetCurLine</definition>
        <argsstring>(int *linePos=NULL)</argsstring>
        <name>GetCurLine</name>
        <qualifiedname>wxStyledTextCtrl::GetCurLine</qualifiedname>
        <param>
          <type>int *</type>
          <declname>linePos</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Retrieve the text of the line containing the caret. </para>
        </briefdescription>
        <detaileddescription>
<para>linePos can optionally be passed in to receive the index of the caret on the line. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3371" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1af934e01c609d03a4d75142e69a2beb03" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetColumn</definition>
        <argsstring>(int pos) const</argsstring>
        <name>GetColumn</name>
        <qualifiedname>wxStyledTextCtrl::GetColumn</qualifiedname>
        <param>
          <type>int</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
<para>Retrieve the column number of a position, taking tab width into account. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3376" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1abd2502125b20d3e84bb7860eea4aa7e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::CountCharacters</definition>
        <argsstring>(int start, int end)</argsstring>
        <name>CountCharacters</name>
        <qualifiedname>wxStyledTextCtrl::CountCharacters</qualifiedname>
        <param>
          <type>int</type>
          <declname>start</declname>
        </param>
        <param>
          <type>int</type>
          <declname>end</declname>
        </param>
        <briefdescription>
<para>Count characters between two positions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3381" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a6435175181a921194a9e92c3314c7949" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetLineEndPosition</definition>
        <argsstring>(int line) const</argsstring>
        <name>GetLineEndPosition</name>
        <qualifiedname>wxStyledTextCtrl::GetLineEndPosition</qualifiedname>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
<para>Get the position after the last visible characters on a line. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3386" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a6857e918f56681d9c0d1e37d5cc34500" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetCurrentPos</definition>
        <argsstring>(int caret)</argsstring>
        <name>SetCurrentPos</name>
        <qualifiedname>wxStyledTextCtrl::SetCurrentPos</qualifiedname>
        <param>
          <type>int</type>
          <declname>caret</declname>
        </param>
        <briefdescription>
<para>Sets the position of the caret. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3391" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1aad3decfccd35fe7a9425d55c6c75238b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetSelectionStart</definition>
        <argsstring>(int anchor)</argsstring>
        <name>SetSelectionStart</name>
        <qualifiedname>wxStyledTextCtrl::SetSelectionStart</qualifiedname>
        <param>
          <type>int</type>
          <declname>anchor</declname>
        </param>
        <briefdescription>
<para>Sets the position that starts the selection - this becomes the anchor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3396" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a55071a8a2ce6226a2625979fbe5090f9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetSelectionStart</definition>
        <argsstring>() const</argsstring>
        <name>GetSelectionStart</name>
        <qualifiedname>wxStyledTextCtrl::GetSelectionStart</qualifiedname>
        <briefdescription>
<para>Returns the position at the start of the selection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3401" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a0b322b46ca9fbbdaa924389c9dfbbc71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetSelectionEnd</definition>
        <argsstring>(int caret)</argsstring>
        <name>SetSelectionEnd</name>
        <qualifiedname>wxStyledTextCtrl::SetSelectionEnd</qualifiedname>
        <param>
          <type>int</type>
          <declname>caret</declname>
        </param>
        <briefdescription>
<para>Sets the position that ends the selection - this becomes the caret. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3406" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a4e7c3fa00f35f172aafb8a87e78253c1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetSelectionEnd</definition>
        <argsstring>() const</argsstring>
        <name>GetSelectionEnd</name>
        <qualifiedname>wxStyledTextCtrl::GetSelectionEnd</qualifiedname>
        <briefdescription>
<para>Returns the position at the end of the selection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3411" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1aef5e66efb42a810d802e8abd5a372477" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetEmptySelection</definition>
        <argsstring>(int caret)</argsstring>
        <name>SetEmptySelection</name>
        <qualifiedname>wxStyledTextCtrl::SetEmptySelection</qualifiedname>
        <param>
          <type>int</type>
          <declname>caret</declname>
        </param>
        <briefdescription>
<para>Set caret to a position, while removing any existing selection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3416" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1acf45a44489af565b924d230f81bee44d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetLineCount</definition>
        <argsstring>() const</argsstring>
        <name>GetLineCount</name>
        <qualifiedname>wxStyledTextCtrl::GetLineCount</qualifiedname>
        <briefdescription>
<para>Returns the number of lines in the document. </para>
        </briefdescription>
        <detaileddescription>
<para>There is always at least one. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3421" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a1809aa943816a1aca0913c1bd0cc41e7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxStyledTextCtrl::GetModify</definition>
        <argsstring>() const</argsstring>
        <name>GetModify</name>
        <qualifiedname>wxStyledTextCtrl::GetModify</qualifiedname>
        <briefdescription>
<para>Is the document different from when it was last saved? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3426" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1aeaa5b992311b6fd7ca4d5d18d19853d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>wxString wxStyledTextCtrl::GetSelectedText</definition>
        <argsstring>()</argsstring>
        <name>GetSelectedText</name>
        <qualifiedname>wxStyledTextCtrl::GetSelectedText</qualifiedname>
        <briefdescription>
<para>Retrieve the selected text. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3431" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a8212d30e6fad5e01e466e9ef65707d84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::HideSelection</definition>
        <argsstring>(bool hide)</argsstring>
        <name>HideSelection</name>
        <qualifiedname>wxStyledTextCtrl::HideSelection</qualifiedname>
        <param>
          <type>bool</type>
          <declname>hide</declname>
        </param>
        <briefdescription>
<para>Draw the selection in normal style or with selection highlighted. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3436" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a9501d7575194cce280cfd8c3aef6eb88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_point" kindref="compound">wxPoint</ref></type>
        <definition>wxPoint wxStyledTextCtrl::PointFromPosition</definition>
        <argsstring>(int pos)</argsstring>
        <name>PointFromPosition</name>
        <qualifiedname>wxStyledTextCtrl::PointFromPosition</qualifiedname>
        <param>
          <type>int</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
<para>Retrieve the point in the window where a position is displayed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3441" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a0da88686d74212b9f5ac481985ad2821" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::LineFromPosition</definition>
        <argsstring>(int pos) const</argsstring>
        <name>LineFromPosition</name>
        <qualifiedname>wxStyledTextCtrl::LineFromPosition</qualifiedname>
        <param>
          <type>int</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
<para>Retrieve the line containing a position. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3446" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a687e405d8433e99cb62a69ead33c62d2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::PositionFromLine</definition>
        <argsstring>(int line) const</argsstring>
        <name>PositionFromLine</name>
        <qualifiedname>wxStyledTextCtrl::PositionFromLine</qualifiedname>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
<para>Retrieve the position at the start of a line. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3451" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a10f7952a6e36b39ea8e7edb701b93df5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetTextLength</definition>
        <argsstring>() const</argsstring>
        <name>GetTextLength</name>
        <qualifiedname>wxStyledTextCtrl::GetTextLength</qualifiedname>
        <briefdescription>
<para>Retrieve the number of characters in the document. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3456" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a52586525a7af5c901828ca8a44ae71ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::TextWidth</definition>
        <argsstring>(int style, const wxString &amp;text)</argsstring>
        <name>TextWidth</name>
        <qualifiedname>wxStyledTextCtrl::TextWidth</qualifiedname>
        <param>
          <type>int</type>
          <declname>style</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>text</declname>
        </param>
        <briefdescription>
<para>Measure the pixel width of some text in a particular style. </para>
        </briefdescription>
        <detaileddescription>
<para>Does not handle tab or control characters. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3462" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ae955348ccf4efd231357c6d96f299589" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::TextHeight</definition>
        <argsstring>(int line)</argsstring>
        <name>TextHeight</name>
        <qualifiedname>wxStyledTextCtrl::TextHeight</qualifiedname>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
<para>Retrieve the height of a particular line of text in pixels. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3467" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a88b9b807e250da28f23f26bf4dba09ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::MoveCaretInsideView</definition>
        <argsstring>()</argsstring>
        <name>MoveCaretInsideView</name>
        <qualifiedname>wxStyledTextCtrl::MoveCaretInsideView</qualifiedname>
        <briefdescription>
<para>Move the caret inside current view if it&apos;s not there already. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3472" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a311d033fed21e6a4778df6b381bb3aad" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::LineLength</definition>
        <argsstring>(int line) const</argsstring>
        <name>LineLength</name>
        <qualifiedname>wxStyledTextCtrl::LineLength</qualifiedname>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
<para>How many characters are on a line, including end of line characters? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3477" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a0bde67749d764a4f5a14ca5f6c17fa85" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::LinesOnScreen</definition>
        <argsstring>() const</argsstring>
        <name>LinesOnScreen</name>
        <qualifiedname>wxStyledTextCtrl::LinesOnScreen</qualifiedname>
        <briefdescription>
<para>Retrieves the number of lines completely visible. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3482" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1acb93a3e90febbba396b2bf00e55c1d32" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxStyledTextCtrl::SelectionIsRectangle</definition>
        <argsstring>() const</argsstring>
        <name>SelectionIsRectangle</name>
        <qualifiedname>wxStyledTextCtrl::SelectionIsRectangle</qualifiedname>
        <briefdescription>
<para>Is the selection rectangular? The alternative is the more common stream selection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3487" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1af5b45963d561c61f8a983f6c6e3078ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::ChooseCaretX</definition>
        <argsstring>()</argsstring>
        <name>ChooseCaretX</name>
        <qualifiedname>wxStyledTextCtrl::ChooseCaretX</qualifiedname>
        <briefdescription>
<para>Set the last x chosen value to be the caret x position. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3492" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a1d494a1101f6983d01d4727af5371398" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::PositionBefore</definition>
        <argsstring>(int pos)</argsstring>
        <name>PositionBefore</name>
        <qualifiedname>wxStyledTextCtrl::PositionBefore</qualifiedname>
        <param>
          <type>int</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
<para>Given a valid document position, return the previous position taking code page into account. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns 0 if passed 0. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3498" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a028c1147afb93e729a44712b01668a1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::PositionAfter</definition>
        <argsstring>(int pos)</argsstring>
        <name>PositionAfter</name>
        <qualifiedname>wxStyledTextCtrl::PositionAfter</qualifiedname>
        <param>
          <type>int</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
<para>Given a valid document position, return the next position taking code page into account. </para>
        </briefdescription>
        <detaileddescription>
<para>Maximum value returned is the last position in the document. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3504" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a68877c2bef482d2abdbf5de49a3c541d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::PositionRelative</definition>
        <argsstring>(int pos, int relative)</argsstring>
        <name>PositionRelative</name>
        <qualifiedname>wxStyledTextCtrl::PositionRelative</qualifiedname>
        <param>
          <type>int</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>int</type>
          <declname>relative</declname>
        </param>
        <briefdescription>
<para>Given a valid document position, return a position that differs in a number of characters. </para>
        </briefdescription>
        <detaileddescription>
<para>Returned value is always between 0 and last position in document.</para>
<para><simplesect kind="since"><para>3.1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3512" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a53039e4255aa99b2706901c7d15b6d28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetSelectionMode</definition>
        <argsstring>(int selectionMode)</argsstring>
        <name>SetSelectionMode</name>
        <qualifiedname>wxStyledTextCtrl::SetSelectionMode</qualifiedname>
        <param>
          <type>int</type>
          <declname>selectionMode</declname>
        </param>
        <briefdescription>
<para>Set the selection mode to stream (wxSTC_SEL_STREAM) or rectangular (wxSTC_SEL_RECTANGLE/wxSTC_SEL_THIN) or by lines (wxSTC_SEL_LINES). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3518" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a3ab14f3c580e72a87ff067e7a9062bf5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetSelectionMode</definition>
        <argsstring>() const</argsstring>
        <name>GetSelectionMode</name>
        <qualifiedname>wxStyledTextCtrl::GetSelectionMode</qualifiedname>
        <briefdescription>
<para>Get the mode of the current selection. </para>
        </briefdescription>
        <detaileddescription>
<para>The return value will be one of the <ref refid="stc_8h_1a56dfcdc744923bf1dbd32876acc6f6ec" kindref="member">wxSTC_SEL_* </ref> constants. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3526" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a232d7a6bead8dfdd9923fd3f1777b1aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetLineSelStartPosition</definition>
        <argsstring>(int line)</argsstring>
        <name>GetLineSelStartPosition</name>
        <qualifiedname>wxStyledTextCtrl::GetLineSelStartPosition</qualifiedname>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
<para>Retrieve the position of the start of the selection at the given line (wxSTC_INVALID_POSITION if no selection on this line). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3531" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ad5eebf78698683d465a9be9819d7f8b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetLineSelEndPosition</definition>
        <argsstring>(int line)</argsstring>
        <name>GetLineSelEndPosition</name>
        <qualifiedname>wxStyledTextCtrl::GetLineSelEndPosition</qualifiedname>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
<para>Retrieve the position of the end of the selection at the given line (wxSTC_INVALID_POSITION if no selection on this line). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3536" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a35822757e5083cce51aa9ebb044d9187" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::FindColumn</definition>
        <argsstring>(int line, int column)</argsstring>
        <name>FindColumn</name>
        <qualifiedname>wxStyledTextCtrl::FindColumn</qualifiedname>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <param>
          <type>int</type>
          <declname>column</declname>
        </param>
        <briefdescription>
<para>Find the position of a column on a line taking into account tabs and multi-byte characters. </para>
        </briefdescription>
        <detaileddescription>
<para>If beyond end of line, return line end position. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3542" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a8f12562557819d7a5e00b3db2df5eee2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::CharPositionFromPoint</definition>
        <argsstring>(int x, int y)</argsstring>
        <name>CharPositionFromPoint</name>
        <qualifiedname>wxStyledTextCtrl::CharPositionFromPoint</qualifiedname>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Find the position of a character from a point within the window. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3547" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ae3a7cecfce77c22a8e1bc26393821125" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::CharPositionFromPointClose</definition>
        <argsstring>(int x, int y)</argsstring>
        <name>CharPositionFromPointClose</name>
        <qualifiedname>wxStyledTextCtrl::CharPositionFromPointClose</qualifiedname>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Find the position of a character from a point within the window. </para>
        </briefdescription>
        <detaileddescription>
<para>Return wxSTC_INVALID_POSITION if not close to text. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3553" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a34f58e6a43b6205a8c9a6be505e65bb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetMouseSelectionRectangularSwitch</definition>
        <argsstring>(bool mouseSelectionRectangularSwitch)</argsstring>
        <name>SetMouseSelectionRectangularSwitch</name>
        <qualifiedname>wxStyledTextCtrl::SetMouseSelectionRectangularSwitch</qualifiedname>
        <param>
          <type>bool</type>
          <declname>mouseSelectionRectangularSwitch</declname>
        </param>
        <briefdescription>
<para>Set whether switching to rectangular mode while selecting with the mouse is allowed. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>3.1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3560" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1afa4d8eca9a4c5a55ce36129200a1637b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxStyledTextCtrl::GetMouseSelectionRectangularSwitch</definition>
        <argsstring>() const</argsstring>
        <name>GetMouseSelectionRectangularSwitch</name>
        <qualifiedname>wxStyledTextCtrl::GetMouseSelectionRectangularSwitch</qualifiedname>
        <briefdescription>
<para>Whether switching to rectangular mode while selecting with the mouse is allowed. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>3.1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3567" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a505aaf57dfde28f24de8c01e8b5ea786" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::MoveSelectedLinesUp</definition>
        <argsstring>()</argsstring>
        <name>MoveSelectedLinesUp</name>
        <qualifiedname>wxStyledTextCtrl::MoveSelectedLinesUp</qualifiedname>
        <briefdescription>
<para>Move the selected lines up one line, shifting the line above after the selection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3572" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a167ff7a45de7fe4f5a4ed8080ad278ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::MoveSelectedLinesDown</definition>
        <argsstring>()</argsstring>
        <name>MoveSelectedLinesDown</name>
        <qualifiedname>wxStyledTextCtrl::MoveSelectedLinesDown</qualifiedname>
        <briefdescription>
<para>Move the selected lines down one line, shifting the line below before the selection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3577" column="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Multiple Selection and Virtual Space</header>
      <description><para><anchor id="classwx_styled_text_ctrl_1MultipleSelectionAndVirtualSpace"/> </para>
</description>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a4669a48353a4edeff84ab32c7b0aa002" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetMultiPaste</definition>
        <argsstring>(int multiPaste)</argsstring>
        <name>SetMultiPaste</name>
        <qualifiedname>wxStyledTextCtrl::SetMultiPaste</qualifiedname>
        <param>
          <type>int</type>
          <declname>multiPaste</declname>
        </param>
        <briefdescription>
<para>Change the effect of pasting when there are multiple selections. </para>
        </briefdescription>
        <detaileddescription>
<para>The input should be one of the <ref refid="stc_8h_1a150703cd522f37a307c73e4baf09ce25" kindref="member">wxSTC_MULTIPASTE_* </ref> constants. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3592" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a0289bede2026b5657f42c091bab069e2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetMultiPaste</definition>
        <argsstring>() const</argsstring>
        <name>GetMultiPaste</name>
        <qualifiedname>wxStyledTextCtrl::GetMultiPaste</qualifiedname>
        <briefdescription>
<para>Retrieve the effect of pasting when there are multiple selections. </para>
        </briefdescription>
        <detaileddescription>
<para>The return value will be one of the <ref refid="stc_8h_1a150703cd522f37a307c73e4baf09ce25" kindref="member">wxSTC_MULTIPASTE_* </ref> constants. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3600" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ab747e3dc90cc75b4d706c2e7ee2a102e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetMultipleSelection</definition>
        <argsstring>(bool multipleSelection)</argsstring>
        <name>SetMultipleSelection</name>
        <qualifiedname>wxStyledTextCtrl::SetMultipleSelection</qualifiedname>
        <param>
          <type>bool</type>
          <declname>multipleSelection</declname>
        </param>
        <briefdescription>
<para>Set whether multiple selections can be made. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3605" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a772b587dceda36cdaa93ff1aafb9aa03" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxStyledTextCtrl::GetMultipleSelection</definition>
        <argsstring>() const</argsstring>
        <name>GetMultipleSelection</name>
        <qualifiedname>wxStyledTextCtrl::GetMultipleSelection</qualifiedname>
        <briefdescription>
<para>Whether multiple selections can be made. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3610" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a0a915649ec8b7a95afa2eed7752804d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetAdditionalSelectionTyping</definition>
        <argsstring>(bool additionalSelectionTyping)</argsstring>
        <name>SetAdditionalSelectionTyping</name>
        <qualifiedname>wxStyledTextCtrl::SetAdditionalSelectionTyping</qualifiedname>
        <param>
          <type>bool</type>
          <declname>additionalSelectionTyping</declname>
        </param>
        <briefdescription>
<para>Set whether typing can be performed into multiple selections. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3615" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a550477461c0cd94ef8cb2b21b021c4b4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxStyledTextCtrl::GetAdditionalSelectionTyping</definition>
        <argsstring>() const</argsstring>
        <name>GetAdditionalSelectionTyping</name>
        <qualifiedname>wxStyledTextCtrl::GetAdditionalSelectionTyping</qualifiedname>
        <briefdescription>
<para>Whether typing can be performed into multiple selections. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3620" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a559040550cb01c794a3dd23942823e46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetAdditionalCaretsBlink</definition>
        <argsstring>(bool additionalCaretsBlink)</argsstring>
        <name>SetAdditionalCaretsBlink</name>
        <qualifiedname>wxStyledTextCtrl::SetAdditionalCaretsBlink</qualifiedname>
        <param>
          <type>bool</type>
          <declname>additionalCaretsBlink</declname>
        </param>
        <briefdescription>
<para>Set whether additional carets will blink. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3625" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a008dc45cad8d533cb52f0782ca8718c4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxStyledTextCtrl::GetAdditionalCaretsBlink</definition>
        <argsstring>() const</argsstring>
        <name>GetAdditionalCaretsBlink</name>
        <qualifiedname>wxStyledTextCtrl::GetAdditionalCaretsBlink</qualifiedname>
        <briefdescription>
<para>Whether additional carets will blink. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3630" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a5fa11d4e883de4e1779d44a58ca52da2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetAdditionalCaretsVisible</definition>
        <argsstring>(bool additionalCaretsVisible)</argsstring>
        <name>SetAdditionalCaretsVisible</name>
        <qualifiedname>wxStyledTextCtrl::SetAdditionalCaretsVisible</qualifiedname>
        <param>
          <type>bool</type>
          <declname>additionalCaretsVisible</declname>
        </param>
        <briefdescription>
<para>Set whether additional carets are visible. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3635" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1aa874691fb47de2fa87bea2532dd42dc8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxStyledTextCtrl::GetAdditionalCaretsVisible</definition>
        <argsstring>() const</argsstring>
        <name>GetAdditionalCaretsVisible</name>
        <qualifiedname>wxStyledTextCtrl::GetAdditionalCaretsVisible</qualifiedname>
        <briefdescription>
<para>Whether additional carets are visible. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3640" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a16174aad3eee2efaa499d60c5f181006" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetSelections</definition>
        <argsstring>() const</argsstring>
        <name>GetSelections</name>
        <qualifiedname>wxStyledTextCtrl::GetSelections</qualifiedname>
        <briefdescription>
<para>How many selections are there? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3645" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1adc4e468dfa5a658e74fafb93ced1eecb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxStyledTextCtrl::GetSelectionEmpty</definition>
        <argsstring>() const</argsstring>
        <name>GetSelectionEmpty</name>
        <qualifiedname>wxStyledTextCtrl::GetSelectionEmpty</qualifiedname>
        <briefdescription>
<para>Is every selected range empty? </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>3.1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3652" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a951210a57d6d2895e5977642007af9bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::ClearSelections</definition>
        <argsstring>()</argsstring>
        <name>ClearSelections</name>
        <qualifiedname>wxStyledTextCtrl::ClearSelections</qualifiedname>
        <briefdescription>
<para>Clear selections to a single empty stream selection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3657" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a07b961b15bbec1b9dd39b4a496052eb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::AddSelection</definition>
        <argsstring>(int caret, int anchor)</argsstring>
        <name>AddSelection</name>
        <qualifiedname>wxStyledTextCtrl::AddSelection</qualifiedname>
        <param>
          <type>int</type>
          <declname>caret</declname>
        </param>
        <param>
          <type>int</type>
          <declname>anchor</declname>
        </param>
        <briefdescription>
<para>Add a selection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3662" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1af472bf366b71904b24cda4b62a23076a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::DropSelectionN</definition>
        <argsstring>(int selection)</argsstring>
        <name>DropSelectionN</name>
        <qualifiedname>wxStyledTextCtrl::DropSelectionN</qualifiedname>
        <param>
          <type>int</type>
          <declname>selection</declname>
        </param>
        <briefdescription>
<para>Drop one selection. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>3.1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3669" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a4ebdadcd64a90f09c20ffc47226f4690" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetMainSelection</definition>
        <argsstring>(int selection)</argsstring>
        <name>SetMainSelection</name>
        <qualifiedname>wxStyledTextCtrl::SetMainSelection</qualifiedname>
        <param>
          <type>int</type>
          <declname>selection</declname>
        </param>
        <briefdescription>
<para>Set the main selection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3674" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a41d0d4bc1b380aad4a50dd1f442c51e6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetMainSelection</definition>
        <argsstring>() const</argsstring>
        <name>GetMainSelection</name>
        <qualifiedname>wxStyledTextCtrl::GetMainSelection</qualifiedname>
        <briefdescription>
<para>Which selection is the main selection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3679" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1af3ebbb4259208416e0ed08a6e9a38598" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetSelectionNCaret</definition>
        <argsstring>(int selection, int caret)</argsstring>
        <name>SetSelectionNCaret</name>
        <qualifiedname>wxStyledTextCtrl::SetSelectionNCaret</qualifiedname>
        <param>
          <type>int</type>
          <declname>selection</declname>
        </param>
        <param>
          <type>int</type>
          <declname>caret</declname>
        </param>
        <briefdescription>
<para>Set the caret position of the nth selection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3684" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a442ce4c0e51ec14265f1c1e3e902a8b6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetSelectionNCaret</definition>
        <argsstring>(int selection) const</argsstring>
        <name>GetSelectionNCaret</name>
        <qualifiedname>wxStyledTextCtrl::GetSelectionNCaret</qualifiedname>
        <param>
          <type>int</type>
          <declname>selection</declname>
        </param>
        <briefdescription>
<para>Return the caret position of the nth selection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3689" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a79ef17bbf643abeeceae4e88dbfeae6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetSelectionNAnchor</definition>
        <argsstring>(int selection, int anchor)</argsstring>
        <name>SetSelectionNAnchor</name>
        <qualifiedname>wxStyledTextCtrl::SetSelectionNAnchor</qualifiedname>
        <param>
          <type>int</type>
          <declname>selection</declname>
        </param>
        <param>
          <type>int</type>
          <declname>anchor</declname>
        </param>
        <briefdescription>
<para>Set the anchor position of the nth selection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3694" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a370b4a6b5108ce66d26832cc1546f2a0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetSelectionNAnchor</definition>
        <argsstring>(int selection) const</argsstring>
        <name>GetSelectionNAnchor</name>
        <qualifiedname>wxStyledTextCtrl::GetSelectionNAnchor</qualifiedname>
        <param>
          <type>int</type>
          <declname>selection</declname>
        </param>
        <briefdescription>
<para>Return the anchor position of the nth selection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3699" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ab287c51b65add3b900a23b11c4f2b04f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetSelectionNCaretVirtualSpace</definition>
        <argsstring>(int selection, int space)</argsstring>
        <name>SetSelectionNCaretVirtualSpace</name>
        <qualifiedname>wxStyledTextCtrl::SetSelectionNCaretVirtualSpace</qualifiedname>
        <param>
          <type>int</type>
          <declname>selection</declname>
        </param>
        <param>
          <type>int</type>
          <declname>space</declname>
        </param>
        <briefdescription>
<para>Set the virtual space of the caret of the nth selection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3704" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1aee8e3c82947e93c40eccd512073de406" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetSelectionNCaretVirtualSpace</definition>
        <argsstring>(int selection) const</argsstring>
        <name>GetSelectionNCaretVirtualSpace</name>
        <qualifiedname>wxStyledTextCtrl::GetSelectionNCaretVirtualSpace</qualifiedname>
        <param>
          <type>int</type>
          <declname>selection</declname>
        </param>
        <briefdescription>
<para>Return the virtual space of the caret of the nth selection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3709" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ac2be62fa3b37860deb4225fa45bb9205" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetSelectionNAnchorVirtualSpace</definition>
        <argsstring>(int selection, int space)</argsstring>
        <name>SetSelectionNAnchorVirtualSpace</name>
        <qualifiedname>wxStyledTextCtrl::SetSelectionNAnchorVirtualSpace</qualifiedname>
        <param>
          <type>int</type>
          <declname>selection</declname>
        </param>
        <param>
          <type>int</type>
          <declname>space</declname>
        </param>
        <briefdescription>
<para>Set the virtual space of the anchor of the nth selection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3714" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ab41ff02cc795d2ccb9bb13b6d9cb51c9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetSelectionNAnchorVirtualSpace</definition>
        <argsstring>(int selection) const</argsstring>
        <name>GetSelectionNAnchorVirtualSpace</name>
        <qualifiedname>wxStyledTextCtrl::GetSelectionNAnchorVirtualSpace</qualifiedname>
        <param>
          <type>int</type>
          <declname>selection</declname>
        </param>
        <briefdescription>
<para>Return the virtual space of the anchor of the nth selection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3719" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a56bdad9981537749f6fd720ddb9dfed4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetSelectionNStart</definition>
        <argsstring>(int selection, int anchor)</argsstring>
        <name>SetSelectionNStart</name>
        <qualifiedname>wxStyledTextCtrl::SetSelectionNStart</qualifiedname>
        <param>
          <type>int</type>
          <declname>selection</declname>
        </param>
        <param>
          <type>int</type>
          <declname>anchor</declname>
        </param>
        <briefdescription>
<para>Sets the position that starts the selection - this becomes the anchor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3724" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a1047240d39351a49da6b08d5669775ad" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetSelectionNStart</definition>
        <argsstring>(int selection) const</argsstring>
        <name>GetSelectionNStart</name>
        <qualifiedname>wxStyledTextCtrl::GetSelectionNStart</qualifiedname>
        <param>
          <type>int</type>
          <declname>selection</declname>
        </param>
        <briefdescription>
<para>Returns the position at the start of the selection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3729" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a3d38c0c1b103aca828eed93db8f1b45b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetSelectionNEnd</definition>
        <argsstring>(int selection, int caret)</argsstring>
        <name>SetSelectionNEnd</name>
        <qualifiedname>wxStyledTextCtrl::SetSelectionNEnd</qualifiedname>
        <param>
          <type>int</type>
          <declname>selection</declname>
        </param>
        <param>
          <type>int</type>
          <declname>caret</declname>
        </param>
        <briefdescription>
<para>Sets the position that ends the selection - this becomes the currentPosition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3734" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a58ec65d35f4c58c79f1a217bad2667fc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetSelectionNEnd</definition>
        <argsstring>(int selection) const</argsstring>
        <name>GetSelectionNEnd</name>
        <qualifiedname>wxStyledTextCtrl::GetSelectionNEnd</qualifiedname>
        <param>
          <type>int</type>
          <declname>selection</declname>
        </param>
        <briefdescription>
<para>Returns the position at the end of the selection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3739" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a849249d7dd413a896310c310e7ee205c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetRectangularSelectionCaret</definition>
        <argsstring>(int caret)</argsstring>
        <name>SetRectangularSelectionCaret</name>
        <qualifiedname>wxStyledTextCtrl::SetRectangularSelectionCaret</qualifiedname>
        <param>
          <type>int</type>
          <declname>caret</declname>
        </param>
        <briefdescription>
<para>Set the caret position of the rectangular selection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3744" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a6e0f84117a5942b08090d2007fac6243" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetRectangularSelectionCaret</definition>
        <argsstring>() const</argsstring>
        <name>GetRectangularSelectionCaret</name>
        <qualifiedname>wxStyledTextCtrl::GetRectangularSelectionCaret</qualifiedname>
        <briefdescription>
<para>Return the caret position of the rectangular selection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3749" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ab9985443e6f92ebdda0ac415888a28d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetRectangularSelectionAnchor</definition>
        <argsstring>(int anchor)</argsstring>
        <name>SetRectangularSelectionAnchor</name>
        <qualifiedname>wxStyledTextCtrl::SetRectangularSelectionAnchor</qualifiedname>
        <param>
          <type>int</type>
          <declname>anchor</declname>
        </param>
        <briefdescription>
<para>Set the anchor position of the rectangular selection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3754" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1aede3535adee53bd0eea9287cffa051dc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetRectangularSelectionAnchor</definition>
        <argsstring>() const</argsstring>
        <name>GetRectangularSelectionAnchor</name>
        <qualifiedname>wxStyledTextCtrl::GetRectangularSelectionAnchor</qualifiedname>
        <briefdescription>
<para>Return the anchor position of the rectangular selection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3759" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ad762ea42339e7d3faea6ff8b71773e39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetRectangularSelectionCaretVirtualSpace</definition>
        <argsstring>(int space)</argsstring>
        <name>SetRectangularSelectionCaretVirtualSpace</name>
        <qualifiedname>wxStyledTextCtrl::SetRectangularSelectionCaretVirtualSpace</qualifiedname>
        <param>
          <type>int</type>
          <declname>space</declname>
        </param>
        <briefdescription>
<para>Set the virtual space of the caret of the rectangular selection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3764" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1afff95da4940d0a2f44a1760d1b9fb562" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetRectangularSelectionCaretVirtualSpace</definition>
        <argsstring>() const</argsstring>
        <name>GetRectangularSelectionCaretVirtualSpace</name>
        <qualifiedname>wxStyledTextCtrl::GetRectangularSelectionCaretVirtualSpace</qualifiedname>
        <briefdescription>
<para>Return the virtual space of the caret of the rectangular selection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3769" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ab5fdb7c5973a2f4585027b426430c573" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetRectangularSelectionAnchorVirtualSpace</definition>
        <argsstring>(int space)</argsstring>
        <name>SetRectangularSelectionAnchorVirtualSpace</name>
        <qualifiedname>wxStyledTextCtrl::SetRectangularSelectionAnchorVirtualSpace</qualifiedname>
        <param>
          <type>int</type>
          <declname>space</declname>
        </param>
        <briefdescription>
<para>Set the virtual space of the anchor of the rectangular selection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3774" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1aec0eb4c4b4d5d3c5e3bc55307e883c19" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetRectangularSelectionAnchorVirtualSpace</definition>
        <argsstring>() const</argsstring>
        <name>GetRectangularSelectionAnchorVirtualSpace</name>
        <qualifiedname>wxStyledTextCtrl::GetRectangularSelectionAnchorVirtualSpace</qualifiedname>
        <briefdescription>
<para>Return the virtual space of the anchor of the rectangular selection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3779" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a555832e34d6394ca922dc9ad0341f84d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetVirtualSpaceOptions</definition>
        <argsstring>(int virtualSpaceOptions)</argsstring>
        <name>SetVirtualSpaceOptions</name>
        <qualifiedname>wxStyledTextCtrl::SetVirtualSpaceOptions</qualifiedname>
        <param>
          <type>int</type>
          <declname>virtualSpaceOptions</declname>
        </param>
        <briefdescription>
<para>Set options for virtual space behaviour. </para>
        </briefdescription>
        <detaileddescription>
<para>The input should be one of the <ref refid="stc_8h_1a151232ee00ad520c6231f00ac32ebaa2" kindref="member">wxSTC_VS_* </ref> constants. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3787" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ac4b6b8fd91c6aa2777eb2eeb906c2946" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetVirtualSpaceOptions</definition>
        <argsstring>() const</argsstring>
        <name>GetVirtualSpaceOptions</name>
        <qualifiedname>wxStyledTextCtrl::GetVirtualSpaceOptions</qualifiedname>
        <briefdescription>
<para>Return options for virtual space behaviour. </para>
        </briefdescription>
        <detaileddescription>
<para>The return value will be one of the <ref refid="stc_8h_1a151232ee00ad520c6231f00ac32ebaa2" kindref="member">wxSTC_VS_* </ref> constants. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3795" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a30441f30d7a1cce818205f819f1c7c91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetRectangularSelectionModifier</definition>
        <argsstring>(int modifier)</argsstring>
        <name>SetRectangularSelectionModifier</name>
        <qualifiedname>wxStyledTextCtrl::SetRectangularSelectionModifier</qualifiedname>
        <param>
          <type>int</type>
          <declname>modifier</declname>
        </param>
        <briefdescription>
<para>On GTK+, allow selecting the modifier key to use for mouse-based rectangular selection. </para>
        </briefdescription>
        <detaileddescription>
<para>Often the window manager requires Alt+Mouse Drag for moving windows. Valid values are wxSTC_KEYMOD_CTRL (default), wxSTC_KEYMOD_ALT, or wxSTC_KEYMOD_SUPER. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3803" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a2c4ebba6ed632b8581a43ea27d23cd34" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetRectangularSelectionModifier</definition>
        <argsstring>() const</argsstring>
        <name>GetRectangularSelectionModifier</name>
        <qualifiedname>wxStyledTextCtrl::GetRectangularSelectionModifier</qualifiedname>
        <briefdescription>
<para>Get the modifier key used for rectangular selection. </para>
        </briefdescription>
        <detaileddescription>
<para>The return value will be a bit list containing one or more of the <ref refid="stc_8h_1a66ddc49fa3c0e526fad53f627ee96bb2" kindref="member">wxSTC_KEYMOD_* </ref> constants. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3811" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a1db22a164853318d8f10e249651cc119" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetAdditionalSelForeground</definition>
        <argsstring>(const wxColour &amp;fore)</argsstring>
        <name>SetAdditionalSelForeground</name>
        <qualifiedname>wxStyledTextCtrl::SetAdditionalSelForeground</qualifiedname>
        <param>
          <type>const <ref refid="classwx_colour" kindref="compound">wxColour</ref> &amp;</type>
          <declname>fore</declname>
        </param>
        <briefdescription>
<para>Set the foreground colour of additional selections. </para>
        </briefdescription>
        <detaileddescription>
<para>Must have previously called SetSelFore with non-zero first argument for this to have an effect. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3817" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a4aec08b338247133812c9657483242f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetAdditionalSelBackground</definition>
        <argsstring>(const wxColour &amp;back)</argsstring>
        <name>SetAdditionalSelBackground</name>
        <qualifiedname>wxStyledTextCtrl::SetAdditionalSelBackground</qualifiedname>
        <param>
          <type>const <ref refid="classwx_colour" kindref="compound">wxColour</ref> &amp;</type>
          <declname>back</declname>
        </param>
        <briefdescription>
<para>Set the background colour of additional selections. </para>
        </briefdescription>
        <detaileddescription>
<para>Must have previously called SetSelBack with non-zero first argument for this to have an effect. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3823" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a3b87020382f1b185c30cb40acfcbe66c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetAdditionalSelAlpha</definition>
        <argsstring>(int alpha)</argsstring>
        <name>SetAdditionalSelAlpha</name>
        <qualifiedname>wxStyledTextCtrl::SetAdditionalSelAlpha</qualifiedname>
        <param>
          <type>int</type>
          <declname>alpha</declname>
        </param>
        <briefdescription>
<para>Set the alpha of the selection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3828" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a046290af28a6e298141a12e31c8b65e3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetAdditionalSelAlpha</definition>
        <argsstring>() const</argsstring>
        <name>GetAdditionalSelAlpha</name>
        <qualifiedname>wxStyledTextCtrl::GetAdditionalSelAlpha</qualifiedname>
        <briefdescription>
<para>Get the alpha of the selection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3833" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a3754bef6b4bcc2ab6929a63e864c35da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetAdditionalCaretForeground</definition>
        <argsstring>(const wxColour &amp;fore)</argsstring>
        <name>SetAdditionalCaretForeground</name>
        <qualifiedname>wxStyledTextCtrl::SetAdditionalCaretForeground</qualifiedname>
        <param>
          <type>const <ref refid="classwx_colour" kindref="compound">wxColour</ref> &amp;</type>
          <declname>fore</declname>
        </param>
        <briefdescription>
<para>Set the foreground colour of additional carets. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3838" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ab9e2884082a67fd3580c280dc8b09b0c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_colour" kindref="compound">wxColour</ref></type>
        <definition>wxColour wxStyledTextCtrl::GetAdditionalCaretForeground</definition>
        <argsstring>() const</argsstring>
        <name>GetAdditionalCaretForeground</name>
        <qualifiedname>wxStyledTextCtrl::GetAdditionalCaretForeground</qualifiedname>
        <briefdescription>
<para>Get the foreground colour of additional carets. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3843" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a152d87c865cd3683a018cbf6c9e4dfc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::RotateSelection</definition>
        <argsstring>()</argsstring>
        <name>RotateSelection</name>
        <qualifiedname>wxStyledTextCtrl::RotateSelection</qualifiedname>
        <briefdescription>
<para>Set the main selection to the next selection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3848" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1aa22a09d093a4ac8e91b1aa8dfc743ddb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SwapMainAnchorCaret</definition>
        <argsstring>()</argsstring>
        <name>SwapMainAnchorCaret</name>
        <qualifiedname>wxStyledTextCtrl::SwapMainAnchorCaret</qualifiedname>
        <briefdescription>
<para>Swap that caret and anchor of the main selection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3853" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a3b03bb6a75919b657cf889032fd8e1ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::MultipleSelectAddNext</definition>
        <argsstring>()</argsstring>
        <name>MultipleSelectAddNext</name>
        <qualifiedname>wxStyledTextCtrl::MultipleSelectAddNext</qualifiedname>
        <briefdescription>
<para>Add the next occurrence of the main selection to the set of selections as main. </para>
        </briefdescription>
        <detaileddescription>
<para>If the current selection is empty then select word around caret.</para>
<para><simplesect kind="since"><para>3.1.1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3861" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ae3a3655859cf211cb0e99837f8b2196d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::MultipleSelectAddEach</definition>
        <argsstring>()</argsstring>
        <name>MultipleSelectAddEach</name>
        <qualifiedname>wxStyledTextCtrl::MultipleSelectAddEach</qualifiedname>
        <briefdescription>
<para>Add each occurrence of the main selection in the target to the set of selections. </para>
        </briefdescription>
        <detaileddescription>
<para>If the current selection is empty then select word around caret.</para>
<para><simplesect kind="since"><para>3.1.1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3869" column="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Scrolling and automatic scrolling</header>
      <description><para><anchor id="classwx_styled_text_ctrl_1ScrollingAndAutomaticScrolling"/> </para>
</description>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a4a42e509c18a41f95d00cf57e231faea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetUseHorizontalScrollBar</definition>
        <argsstring>(bool visible)</argsstring>
        <name>SetUseHorizontalScrollBar</name>
        <qualifiedname>wxStyledTextCtrl::SetUseHorizontalScrollBar</qualifiedname>
        <param>
          <type>bool</type>
          <declname>visible</declname>
        </param>
        <briefdescription>
<para>Show or hide the horizontal scroll bar. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3881" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a42f2946e340ce605860ff22c2cb07e43" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxStyledTextCtrl::GetUseHorizontalScrollBar</definition>
        <argsstring>() const</argsstring>
        <name>GetUseHorizontalScrollBar</name>
        <qualifiedname>wxStyledTextCtrl::GetUseHorizontalScrollBar</qualifiedname>
        <briefdescription>
<para>Is the horizontal scroll bar visible? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3886" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ab9edf655eb6329b48de27f68757d0b65" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetFirstVisibleLine</definition>
        <argsstring>() const</argsstring>
        <name>GetFirstVisibleLine</name>
        <qualifiedname>wxStyledTextCtrl::GetFirstVisibleLine</qualifiedname>
        <briefdescription>
<para>Retrieve the display line at the top of the display. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3891" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a6368f884c5803294e3aedfe88fe3112a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::LineScroll</definition>
        <argsstring>(int columns, int lines)</argsstring>
        <name>LineScroll</name>
        <qualifiedname>wxStyledTextCtrl::LineScroll</qualifiedname>
        <param>
          <type>int</type>
          <declname>columns</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lines</declname>
        </param>
        <briefdescription>
<para>Scroll horizontally and vertically. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3896" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a9a2cc57b36779323a3b437ac2ff22015" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::EnsureCaretVisible</definition>
        <argsstring>()</argsstring>
        <name>EnsureCaretVisible</name>
        <qualifiedname>wxStyledTextCtrl::EnsureCaretVisible</qualifiedname>
        <briefdescription>
<para>Ensure the caret is visible. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3901" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a624d2e6f5d6a218d476239c11e68b305" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::ScrollRange</definition>
        <argsstring>(int secondary, int primary)</argsstring>
        <name>ScrollRange</name>
        <qualifiedname>wxStyledTextCtrl::ScrollRange</qualifiedname>
        <param>
          <type>int</type>
          <declname>secondary</declname>
        </param>
        <param>
          <type>int</type>
          <declname>primary</declname>
        </param>
        <briefdescription>
<para>Scroll the argument positions and the range between them into view giving priority to the primary position then the secondary position. </para>
        </briefdescription>
        <detaileddescription>
<para>This may be used to make a search match visible.</para>
<para><simplesect kind="since"><para>3.1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3910" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a8b1ad6a0f9d0b59e4b71f0b5eab69238" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetScrollWidth</definition>
        <argsstring>(int pixelWidth)</argsstring>
        <name>SetScrollWidth</name>
        <qualifiedname>wxStyledTextCtrl::SetScrollWidth</qualifiedname>
        <param>
          <type>int</type>
          <declname>pixelWidth</declname>
        </param>
        <briefdescription>
<para>Sets the document width assumed for scrolling. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3915" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a4cbbab7da74fa624865097b40e6d1a00" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetScrollWidth</definition>
        <argsstring>() const</argsstring>
        <name>GetScrollWidth</name>
        <qualifiedname>wxStyledTextCtrl::GetScrollWidth</qualifiedname>
        <briefdescription>
<para>Retrieve the document width assumed for scrolling. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3920" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a4473b4381123c859ab289fab0222dadd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetScrollWidthTracking</definition>
        <argsstring>(bool tracking)</argsstring>
        <name>SetScrollWidthTracking</name>
        <qualifiedname>wxStyledTextCtrl::SetScrollWidthTracking</qualifiedname>
        <param>
          <type>bool</type>
          <declname>tracking</declname>
        </param>
        <briefdescription>
<para>Sets whether the maximum width line displayed is used to set scroll width. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3925" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a12518113c2ca07b2cc031281c0ad44e9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxStyledTextCtrl::GetScrollWidthTracking</definition>
        <argsstring>() const</argsstring>
        <name>GetScrollWidthTracking</name>
        <qualifiedname>wxStyledTextCtrl::GetScrollWidthTracking</qualifiedname>
        <briefdescription>
<para>Retrieve whether the scroll width tracks wide lines. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3930" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a5af5606b6edbb85b554a03ecdfffa2db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetEndAtLastLine</definition>
        <argsstring>(bool endAtLastLine)</argsstring>
        <name>SetEndAtLastLine</name>
        <qualifiedname>wxStyledTextCtrl::SetEndAtLastLine</qualifiedname>
        <param>
          <type>bool</type>
          <declname>endAtLastLine</declname>
        </param>
        <briefdescription>
<para>Sets the scroll range so that maximum scroll position has the last line at the bottom of the view (default). </para>
        </briefdescription>
        <detaileddescription>
<para>Setting this to false allows scrolling one page below the last line. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3937" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a0260dd911c62d035868c787e0612a26f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxStyledTextCtrl::GetEndAtLastLine</definition>
        <argsstring>() const</argsstring>
        <name>GetEndAtLastLine</name>
        <qualifiedname>wxStyledTextCtrl::GetEndAtLastLine</qualifiedname>
        <briefdescription>
<para>Retrieve whether the maximum scroll position has the last line at the bottom of the view. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3943" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a18bb294e7c148aa924e7a31dad061553" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetUseVerticalScrollBar</definition>
        <argsstring>(bool visible)</argsstring>
        <name>SetUseVerticalScrollBar</name>
        <qualifiedname>wxStyledTextCtrl::SetUseVerticalScrollBar</qualifiedname>
        <param>
          <type>bool</type>
          <declname>visible</declname>
        </param>
        <briefdescription>
<para>Show or hide the vertical scroll bar. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3948" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a6cc056f37a07bc3f16c39b6a5afe1a09" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxStyledTextCtrl::GetUseVerticalScrollBar</definition>
        <argsstring>() const</argsstring>
        <name>GetUseVerticalScrollBar</name>
        <qualifiedname>wxStyledTextCtrl::GetUseVerticalScrollBar</qualifiedname>
        <briefdescription>
<para>Is the vertical scroll bar visible? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3953" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a1d6e2c34fdd96e949798c6f3f34eec3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetFirstVisibleLine</definition>
        <argsstring>(int displayLine)</argsstring>
        <name>SetFirstVisibleLine</name>
        <qualifiedname>wxStyledTextCtrl::SetFirstVisibleLine</qualifiedname>
        <param>
          <type>int</type>
          <declname>displayLine</declname>
        </param>
        <briefdescription>
<para>Scroll so that a display line is at the top of the display. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3958" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a1307ace5a86483b5c05dc6b980ec3b99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetVisiblePolicy</definition>
        <argsstring>(int visiblePolicy, int visibleSlop)</argsstring>
        <name>SetVisiblePolicy</name>
        <qualifiedname>wxStyledTextCtrl::SetVisiblePolicy</qualifiedname>
        <param>
          <type>int</type>
          <declname>visiblePolicy</declname>
        </param>
        <param>
          <type>int</type>
          <declname>visibleSlop</declname>
        </param>
        <briefdescription>
<para>Set the way the display area is determined when a particular line is to be moved to by Find, FindNext, GotoLine, etc. </para>
        </briefdescription>
        <detaileddescription>
<para>The first argument should be a bit list containing one or more of the <ref refid="stc_8h_1a200c3a597eb775798a3b6e5f64d65316" kindref="member">wxSTC_VISIBLE_* </ref> constants. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3967" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a1e5e2899f4a48eb2754a7fe1c111a011" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetXOffset</definition>
        <argsstring>(int xOffset)</argsstring>
        <name>SetXOffset</name>
        <qualifiedname>wxStyledTextCtrl::SetXOffset</qualifiedname>
        <param>
          <type>int</type>
          <declname>xOffset</declname>
        </param>
        <briefdescription>
<para>Set the xOffset (ie, horizontal scroll position). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3972" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1abd97680d0842f0ae829cad28b8e93a59" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetXOffset</definition>
        <argsstring>() const</argsstring>
        <name>GetXOffset</name>
        <qualifiedname>wxStyledTextCtrl::GetXOffset</qualifiedname>
        <briefdescription>
<para>Get the xOffset (ie, horizontal scroll position). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3977" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a675c4a537ad6f35101057a745ded1c66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetXCaretPolicy</definition>
        <argsstring>(int caretPolicy, int caretSlop)</argsstring>
        <name>SetXCaretPolicy</name>
        <qualifiedname>wxStyledTextCtrl::SetXCaretPolicy</qualifiedname>
        <param>
          <type>int</type>
          <declname>caretPolicy</declname>
        </param>
        <param>
          <type>int</type>
          <declname>caretSlop</declname>
        </param>
        <briefdescription>
<para>Set the way the caret is kept visible when going sideways. </para>
        </briefdescription>
        <detaileddescription>
<para>The exclusion zone is given in pixels.</para>
<para>The first argument should be a bit list containing one or more of the <ref refid="stc_8h_1af0c96063aa8c7a406548abd0d0774a91" kindref="member">wxSTC_CARET_* </ref> constants. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3986" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ab0105eadf06fb58b01eec70d1c5b3f2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetYCaretPolicy</definition>
        <argsstring>(int caretPolicy, int caretSlop)</argsstring>
        <name>SetYCaretPolicy</name>
        <qualifiedname>wxStyledTextCtrl::SetYCaretPolicy</qualifiedname>
        <param>
          <type>int</type>
          <declname>caretPolicy</declname>
        </param>
        <param>
          <type>int</type>
          <declname>caretSlop</declname>
        </param>
        <briefdescription>
<para>Set the way the line the caret is on is kept visible. </para>
        </briefdescription>
        <detaileddescription>
<para>The exclusion zone is given in lines.</para>
<para>The first argument should be a bit list containing one or more of the <ref refid="stc_8h_1af0c96063aa8c7a406548abd0d0774a91" kindref="member">wxSTC_CARET_* </ref> constants. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="3995" column="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>White space</header>
      <description><para><anchor id="classwx_styled_text_ctrl_1WhiteSpace"/> </para>
</description>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a2d30dad6b4485f6e89f10ee01542c442" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetViewWhiteSpace</definition>
        <argsstring>() const</argsstring>
        <name>GetViewWhiteSpace</name>
        <qualifiedname>wxStyledTextCtrl::GetViewWhiteSpace</qualifiedname>
        <briefdescription>
<para>Are white space characters currently visible? Returns one of wxSTC_WS_* constants. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4008" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a4fa5fc715d380567796e41f220729c16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetViewWhiteSpace</definition>
        <argsstring>(int viewWS)</argsstring>
        <name>SetViewWhiteSpace</name>
        <qualifiedname>wxStyledTextCtrl::SetViewWhiteSpace</qualifiedname>
        <param>
          <type>int</type>
          <declname>viewWS</declname>
        </param>
        <briefdescription>
<para>Make white space characters invisible, always visible or visible outside indentation. </para>
        </briefdescription>
        <detaileddescription>
<para>The input should be one of the <ref refid="stc_8h_1a2aff56617e0cf3c8fcccd3716b07a357" kindref="member">wxSTC_WS_* </ref> constants. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4016" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a12ddce84635635285f05f975d0778e51" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetTabDrawMode</definition>
        <argsstring>() const</argsstring>
        <name>GetTabDrawMode</name>
        <qualifiedname>wxStyledTextCtrl::GetTabDrawMode</qualifiedname>
        <briefdescription>
<para>Retrieve the current tab draw mode. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns one of wxSTC_TD_* constants.</para>
<para><simplesect kind="since"><para>3.1.1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4024" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1aee98a9098e7a78633c56f37325990d57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetTabDrawMode</definition>
        <argsstring>(int tabDrawMode)</argsstring>
        <name>SetTabDrawMode</name>
        <qualifiedname>wxStyledTextCtrl::SetTabDrawMode</qualifiedname>
        <param>
          <type>int</type>
          <declname>tabDrawMode</declname>
        </param>
        <briefdescription>
<para>Set how tabs are drawn when visible. </para>
        </briefdescription>
        <detaileddescription>
<para>The input should be one of the <ref refid="stc_8h_1ae179edd69b59b341526605b6295e0658" kindref="member">wxSTC_TD_* </ref> constants. <simplesect kind="since"><para>3.1.1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4033" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a503a80587f9ff5f2b96c2a1f0e294378" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetWhitespaceForeground</definition>
        <argsstring>(bool useSetting, const wxColour &amp;fore)</argsstring>
        <name>SetWhitespaceForeground</name>
        <qualifiedname>wxStyledTextCtrl::SetWhitespaceForeground</qualifiedname>
        <param>
          <type>bool</type>
          <declname>useSetting</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_colour" kindref="compound">wxColour</ref> &amp;</type>
          <declname>fore</declname>
        </param>
        <briefdescription>
<para>Set the foreground colour of all whitespace and whether to use this setting. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4038" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a2ac8e962f6d64eec9ca2402f805afc6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetWhitespaceBackground</definition>
        <argsstring>(bool useSetting, const wxColour &amp;back)</argsstring>
        <name>SetWhitespaceBackground</name>
        <qualifiedname>wxStyledTextCtrl::SetWhitespaceBackground</qualifiedname>
        <param>
          <type>bool</type>
          <declname>useSetting</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_colour" kindref="compound">wxColour</ref> &amp;</type>
          <declname>back</declname>
        </param>
        <briefdescription>
<para>Set the background colour of all whitespace and whether to use this setting. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4043" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ab58a13a90a65b2870dc7918aaf1c9f64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetWhitespaceSize</definition>
        <argsstring>(int size)</argsstring>
        <name>SetWhitespaceSize</name>
        <qualifiedname>wxStyledTextCtrl::SetWhitespaceSize</qualifiedname>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Set the size of the dots used to mark space characters. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4048" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ae336b4c8938f3e5ed7895d1c351419ef" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetWhitespaceSize</definition>
        <argsstring>() const</argsstring>
        <name>GetWhitespaceSize</name>
        <qualifiedname>wxStyledTextCtrl::GetWhitespaceSize</qualifiedname>
        <briefdescription>
<para>Get the size of the dots used to mark space characters. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4053" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a095a5dc7299ff340410621baf3636597" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetExtraAscent</definition>
        <argsstring>(int extraAscent)</argsstring>
        <name>SetExtraAscent</name>
        <qualifiedname>wxStyledTextCtrl::SetExtraAscent</qualifiedname>
        <param>
          <type>int</type>
          <declname>extraAscent</declname>
        </param>
        <briefdescription>
<para>Set extra ascent for each line. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4058" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1aabc0cf9d4ccdc93a0ef10268af07658b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetExtraAscent</definition>
        <argsstring>() const</argsstring>
        <name>GetExtraAscent</name>
        <qualifiedname>wxStyledTextCtrl::GetExtraAscent</qualifiedname>
        <briefdescription>
<para>Get extra ascent for each line. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4063" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1adbb77f11a6ada3ae989ea37e58f3b15e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetExtraDescent</definition>
        <argsstring>(int extraDescent)</argsstring>
        <name>SetExtraDescent</name>
        <qualifiedname>wxStyledTextCtrl::SetExtraDescent</qualifiedname>
        <param>
          <type>int</type>
          <declname>extraDescent</declname>
        </param>
        <briefdescription>
<para>Set extra descent for each line. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4068" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1aaf21180c92ca9589fd8ef9918cb1a947" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetExtraDescent</definition>
        <argsstring>() const</argsstring>
        <name>GetExtraDescent</name>
        <qualifiedname>wxStyledTextCtrl::GetExtraDescent</qualifiedname>
        <briefdescription>
<para>Get extra descent for each line. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4073" column="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Cursor</header>
      <description><para><anchor id="classwx_styled_text_ctrl_1Cursor"/> </para>
</description>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a05df936f0003d9df7a24762120901b96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetSTCCursor</definition>
        <argsstring>(int cursorType)</argsstring>
        <name>SetSTCCursor</name>
        <qualifiedname>wxStyledTextCtrl::SetSTCCursor</qualifiedname>
        <param>
          <type>int</type>
          <declname>cursorType</declname>
        </param>
        <briefdescription>
<para>Sets the cursor to one of the wxSTC_CURSOR* values. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4085" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a9944b7e5d03aa2e9ea0b55ef4e4fdb5b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetSTCCursor</definition>
        <argsstring>() const</argsstring>
        <name>GetSTCCursor</name>
        <qualifiedname>wxStyledTextCtrl::GetSTCCursor</qualifiedname>
        <briefdescription>
<para>Get cursor type. </para>
        </briefdescription>
        <detaileddescription>
<para>The return value will be one of the <ref refid="stc_8h_1a64451c1ed51b6e7887f3bbfff826a231" kindref="member">wxSTC_CURSOR* </ref> constants. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4093" column="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Mouse capture</header>
      <description><para><anchor id="classwx_styled_text_ctrl_1MouseCapture"/> </para>
</description>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1adb7c207ea2bc0d74eb96aef2075084df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetMouseDownCaptures</definition>
        <argsstring>(bool captures)</argsstring>
        <name>SetMouseDownCaptures</name>
        <qualifiedname>wxStyledTextCtrl::SetMouseDownCaptures</qualifiedname>
        <param>
          <type>bool</type>
          <declname>captures</declname>
        </param>
        <briefdescription>
<para>Set whether the mouse is captured when its button is pressed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4105" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a8f799414133ef53f641359296d06bed6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxStyledTextCtrl::GetMouseDownCaptures</definition>
        <argsstring>() const</argsstring>
        <name>GetMouseDownCaptures</name>
        <qualifiedname>wxStyledTextCtrl::GetMouseDownCaptures</qualifiedname>
        <briefdescription>
<para>Get whether mouse gets captured. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4110" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ad90c18d1a357c74311fedd4857042499" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetMouseWheelCaptures</definition>
        <argsstring>(bool captures)</argsstring>
        <name>SetMouseWheelCaptures</name>
        <qualifiedname>wxStyledTextCtrl::SetMouseWheelCaptures</qualifiedname>
        <param>
          <type>bool</type>
          <declname>captures</declname>
        </param>
        <briefdescription>
<para>Set whether the mouse wheel can be active outside the window. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>3.1.1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4117" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a4b51900ea2ec92810eafabf92c707f0d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxStyledTextCtrl::GetMouseWheelCaptures</definition>
        <argsstring>() const</argsstring>
        <name>GetMouseWheelCaptures</name>
        <qualifiedname>wxStyledTextCtrl::GetMouseWheelCaptures</qualifiedname>
        <briefdescription>
<para>Get whether mouse wheel can be active outside the window. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>3.1.1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4124" column="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Line endings</header>
      <description><para><anchor id="classwx_styled_text_ctrl_1LineEndings"/> </para>
</description>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a32d7242ddf6aa9c4e317821a30207550" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::ConvertEOLs</definition>
        <argsstring>(int eolMode)</argsstring>
        <name>ConvertEOLs</name>
        <qualifiedname>wxStyledTextCtrl::ConvertEOLs</qualifiedname>
        <param>
          <type>int</type>
          <declname>eolMode</declname>
        </param>
        <briefdescription>
<para>Convert all line endings in the document to one mode. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4136" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a7ad383881baadc0e3cf3b3d36ed3907e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetEOLMode</definition>
        <argsstring>() const</argsstring>
        <name>GetEOLMode</name>
        <qualifiedname>wxStyledTextCtrl::GetEOLMode</qualifiedname>
        <briefdescription>
<para>Retrieve the current end of line mode - one of wxSTC_EOL_CRLF, wxSTC_EOL_CR, or wxSTC_EOL_LF. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4141" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a9f2ea01c2fa3fdeb7021c071b1f0a7bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetEOLMode</definition>
        <argsstring>(int eolMode)</argsstring>
        <name>SetEOLMode</name>
        <qualifiedname>wxStyledTextCtrl::SetEOLMode</qualifiedname>
        <param>
          <type>int</type>
          <declname>eolMode</declname>
        </param>
        <briefdescription>
<para>Set the current end of line mode. </para>
        </briefdescription>
        <detaileddescription>
<para>The input should be one of the <ref refid="stc_8h_1ace38dc47f089886907b6853151e651a5" kindref="member">wxSTC_EOL_* </ref> constants. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4149" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ad89556dec83d42b81359a9c438c2d24e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxStyledTextCtrl::GetViewEOL</definition>
        <argsstring>() const</argsstring>
        <name>GetViewEOL</name>
        <qualifiedname>wxStyledTextCtrl::GetViewEOL</qualifiedname>
        <briefdescription>
<para>Are the end of line characters visible? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4154" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1abcdd147640044f0b589ad41e01de3b69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetViewEOL</definition>
        <argsstring>(bool visible)</argsstring>
        <name>SetViewEOL</name>
        <qualifiedname>wxStyledTextCtrl::SetViewEOL</qualifiedname>
        <param>
          <type>bool</type>
          <declname>visible</declname>
        </param>
        <briefdescription>
<para>Make the end of line characters visible or invisible. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4159" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a0b2339735930626bedf227c6c9c6e99c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetLineEndTypesAllowed</definition>
        <argsstring>(int lineEndBitSet)</argsstring>
        <name>SetLineEndTypesAllowed</name>
        <qualifiedname>wxStyledTextCtrl::SetLineEndTypesAllowed</qualifiedname>
        <param>
          <type>int</type>
          <declname>lineEndBitSet</declname>
        </param>
        <briefdescription>
<para>Set the line end types that the application wants to use. </para>
        </briefdescription>
        <detaileddescription>
<para>May not be used if incompatible with lexer or encoding.</para>
<para>The input should be one of the <ref refid="stc_8h_1aba92f40f677f2cb3148e0e2b3445c145" kindref="member">wxSTC_LINE_END_TYPE_* </ref> constants. <simplesect kind="since"><para>3.1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4168" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1aa3408902442f95849035060f6ea395e0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetLineEndTypesAllowed</definition>
        <argsstring>() const</argsstring>
        <name>GetLineEndTypesAllowed</name>
        <qualifiedname>wxStyledTextCtrl::GetLineEndTypesAllowed</qualifiedname>
        <briefdescription>
<para>Get the line end types currently allowed. </para>
        </briefdescription>
        <detaileddescription>
<para>The return value will be one of the <ref refid="stc_8h_1aba92f40f677f2cb3148e0e2b3445c145" kindref="member">wxSTC_LINE_END_TYPE_* </ref> constants. <simplesect kind="since"><para>3.1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4177" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a20246e4c39886ddd0e10502bb5abde13" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetLineEndTypesActive</definition>
        <argsstring>() const</argsstring>
        <name>GetLineEndTypesActive</name>
        <qualifiedname>wxStyledTextCtrl::GetLineEndTypesActive</qualifiedname>
        <briefdescription>
<para>Get the line end types currently recognised. </para>
        </briefdescription>
        <detaileddescription>
<para>May be a subset of the allowed types due to lexer limitation.</para>
<para>The return value will be one of the <ref refid="stc_8h_1aba92f40f677f2cb3148e0e2b3445c145" kindref="member">wxSTC_LINE_END_TYPE_* </ref> constants. <simplesect kind="since"><para>3.1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4186" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a082626ecfa0b98122021d660ed4ac502" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetLineEndTypesSupported</definition>
        <argsstring>() const</argsstring>
        <name>GetLineEndTypesSupported</name>
        <qualifiedname>wxStyledTextCtrl::GetLineEndTypesSupported</qualifiedname>
        <briefdescription>
<para>Bit set of LineEndType enumertion for which line ends beyond the standard LF, CR, and CRLF are supported by the lexer. </para>
        </briefdescription>
        <detaileddescription>
<para>The return value will be a bit list containing one or more of the <ref refid="stc_8h_1aba92f40f677f2cb3148e0e2b3445c145" kindref="member">wxSTC_LINE_END_TYPE_* </ref> constants. <simplesect kind="since"><para>3.1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4196" column="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Words</header>
      <description><para><anchor id="classwx_styled_text_ctrl_1Words"/> </para>
</description>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a91d5c9df3ecc79aa75a518cc4a4aa856" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetWordChars</definition>
        <argsstring>(const wxString &amp;characters)</argsstring>
        <name>SetWordChars</name>
        <qualifiedname>wxStyledTextCtrl::SetWordChars</qualifiedname>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>characters</declname>
        </param>
        <briefdescription>
<para>Set the set of characters making up words for when moving or selecting by word. </para>
        </briefdescription>
        <detaileddescription>
<para>First sets defaults like SetCharsDefault. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4209" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1af33fb89cc8edbd3dca0b943f5a81024b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>wxString wxStyledTextCtrl::GetWordChars</definition>
        <argsstring>() const</argsstring>
        <name>GetWordChars</name>
        <qualifiedname>wxStyledTextCtrl::GetWordChars</qualifiedname>
        <briefdescription>
<para>Get the set of characters making up words for when moving or selecting by word. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4214" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1aafea98346c64fce7375232412010adb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::WordStartPosition</definition>
        <argsstring>(int pos, bool onlyWordCharacters)</argsstring>
        <name>WordStartPosition</name>
        <qualifiedname>wxStyledTextCtrl::WordStartPosition</qualifiedname>
        <param>
          <type>int</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>onlyWordCharacters</declname>
        </param>
        <briefdescription>
<para>Get position of start of word. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4219" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a53f125206f4228bbd121cb2ff220b341" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::WordEndPosition</definition>
        <argsstring>(int pos, bool onlyWordCharacters)</argsstring>
        <name>WordEndPosition</name>
        <qualifiedname>wxStyledTextCtrl::WordEndPosition</qualifiedname>
        <param>
          <type>int</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>onlyWordCharacters</declname>
        </param>
        <briefdescription>
<para>Get position of end of word. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4224" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a6a25c8944371cfa6d501c10e63d74228" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxStyledTextCtrl::IsRangeWord</definition>
        <argsstring>(int start, int end)</argsstring>
        <name>IsRangeWord</name>
        <qualifiedname>wxStyledTextCtrl::IsRangeWord</qualifiedname>
        <param>
          <type>int</type>
          <declname>start</declname>
        </param>
        <param>
          <type>int</type>
          <declname>end</declname>
        </param>
        <briefdescription>
<para>Is the range start..end considered a word? </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>3.1.1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4231" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a90386e4db2515b09ad1927b4ee77a5ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetWhitespaceChars</definition>
        <argsstring>(const wxString &amp;characters)</argsstring>
        <name>SetWhitespaceChars</name>
        <qualifiedname>wxStyledTextCtrl::SetWhitespaceChars</qualifiedname>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>characters</declname>
        </param>
        <briefdescription>
<para>Set the set of characters making up whitespace for when moving or selecting by word. </para>
        </briefdescription>
        <detaileddescription>
<para>Should be called after SetWordChars. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4237" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a268854b3cea5cf81b22dbe4980d2ceba" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>wxString wxStyledTextCtrl::GetWhitespaceChars</definition>
        <argsstring>() const</argsstring>
        <name>GetWhitespaceChars</name>
        <qualifiedname>wxStyledTextCtrl::GetWhitespaceChars</qualifiedname>
        <briefdescription>
<para>Get the set of characters making up whitespace for when moving or selecting by word. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4242" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1add6ffd9469ad44e64de0823e6dc5e497" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetPunctuationChars</definition>
        <argsstring>(const wxString &amp;characters)</argsstring>
        <name>SetPunctuationChars</name>
        <qualifiedname>wxStyledTextCtrl::SetPunctuationChars</qualifiedname>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>characters</declname>
        </param>
        <briefdescription>
<para>Set the set of characters making up punctuation characters Should be called after SetWordChars. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4248" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1adf1c47e93d804c278dd2d8f0bba98ad0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>wxString wxStyledTextCtrl::GetPunctuationChars</definition>
        <argsstring>() const</argsstring>
        <name>GetPunctuationChars</name>
        <qualifiedname>wxStyledTextCtrl::GetPunctuationChars</qualifiedname>
        <briefdescription>
<para>Get the set of characters making up punctuation characters. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4253" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a76bbfb8faf5016f90aef3df1d068ad86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetCharsDefault</definition>
        <argsstring>()</argsstring>
        <name>SetCharsDefault</name>
        <qualifiedname>wxStyledTextCtrl::SetCharsDefault</qualifiedname>
        <briefdescription>
<para>Reset the set of characters for whitespace and word characters to the defaults. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4258" column="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Styling</header>
      <description><para><anchor id="classwx_styled_text_ctrl_1Styling"/> </para>
</description>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1af2e7845481a1d956e54b6856124c673a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetEndStyled</definition>
        <argsstring>() const</argsstring>
        <name>GetEndStyled</name>
        <qualifiedname>wxStyledTextCtrl::GetEndStyled</qualifiedname>
        <briefdescription>
<para>Retrieve the position of the last correctly styled character. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4270" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a0241ffbe1d8e4179d8b2ed453c4a4847" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::StartStyling</definition>
        <argsstring>(int start)</argsstring>
        <name>StartStyling</name>
        <qualifiedname>wxStyledTextCtrl::StartStyling</qualifiedname>
        <param>
          <type>int</type>
          <declname>start</declname>
        </param>
        <briefdescription>
<para>Set the current styling position to start. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4275" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a177842bba7bc31bf5a000382f2a258be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetStyling</definition>
        <argsstring>(int length, int style)</argsstring>
        <name>SetStyling</name>
        <qualifiedname>wxStyledTextCtrl::SetStyling</qualifiedname>
        <param>
          <type>int</type>
          <declname>length</declname>
        </param>
        <param>
          <type>int</type>
          <declname>style</declname>
        </param>
        <briefdescription>
<para>Change style from current styling position for length characters to a style and move the current styling position to after this newly styled segment. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4281" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a879088a9c2e207f2664b2b558eceabb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetStyleBytes</definition>
        <argsstring>(int length, char *styleBytes)</argsstring>
        <name>SetStyleBytes</name>
        <qualifiedname>wxStyledTextCtrl::SetStyleBytes</qualifiedname>
        <param>
          <type>int</type>
          <declname>length</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>styleBytes</declname>
        </param>
        <briefdescription>
<para>Set the styles for a segment of the document. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4286" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1af6a83c6573c60b12fd6aa3376349cf36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetLineState</definition>
        <argsstring>(int line, int state)</argsstring>
        <name>SetLineState</name>
        <qualifiedname>wxStyledTextCtrl::SetLineState</qualifiedname>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <param>
          <type>int</type>
          <declname>state</declname>
        </param>
        <briefdescription>
<para>Used to hold extra styling information for each line. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4291" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ab0cec9ab911e64b0ed4976fbadcab2e5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetLineState</definition>
        <argsstring>(int line) const</argsstring>
        <name>GetLineState</name>
        <qualifiedname>wxStyledTextCtrl::GetLineState</qualifiedname>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
<para>Retrieve the extra styling information for a line. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4296" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a997c39f2669c1083a014cbcf9b71edb3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetMaxLineState</definition>
        <argsstring>() const</argsstring>
        <name>GetMaxLineState</name>
        <qualifiedname>wxStyledTextCtrl::GetMaxLineState</qualifiedname>
        <briefdescription>
<para>Retrieve the last line number that has line state. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4301" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ac46d322b64eea27456a5a386c317d876" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetIdleStyling</definition>
        <argsstring>(int idleStyling)</argsstring>
        <name>SetIdleStyling</name>
        <qualifiedname>wxStyledTextCtrl::SetIdleStyling</qualifiedname>
        <param>
          <type>int</type>
          <declname>idleStyling</declname>
        </param>
        <briefdescription>
<para>Sets limits to idle styling. </para>
        </briefdescription>
        <detaileddescription>
<para>The input should be one of the <ref refid="stc_8h_1abba6f7d0b9cca5163e17b3dff65b071c" kindref="member">wxSTC_IDLESTYLING_* </ref> constants. <simplesect kind="since"><para>3.1.1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4310" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a2f7dfb1f0f58319f0508819bc7c644f0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetIdleStyling</definition>
        <argsstring>() const</argsstring>
        <name>GetIdleStyling</name>
        <qualifiedname>wxStyledTextCtrl::GetIdleStyling</qualifiedname>
        <briefdescription>
<para>Retrieve the limits to idle styling. </para>
        </briefdescription>
        <detaileddescription>
<para>The return value will be one of the <ref refid="stc_8h_1abba6f7d0b9cca5163e17b3dff65b071c" kindref="member">wxSTC_IDLESTYLING_* </ref> constants. <simplesect kind="since"><para>3.1.1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4319" column="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Style definition</header>
      <description><para><anchor id="classwx_styled_text_ctrl_1StyleDefinition"/> </para>
</description>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a599a5c4fcc4af55c173492d8b0839afd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::StyleClearAll</definition>
        <argsstring>()</argsstring>
        <name>StyleClearAll</name>
        <qualifiedname>wxStyledTextCtrl::StyleClearAll</qualifiedname>
        <briefdescription>
<para>Clear all the styles and make equivalent to the global default style. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4331" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a340519113f1ce71d5fbf5ad857fd2775" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::StyleSetForeground</definition>
        <argsstring>(int style, const wxColour &amp;fore)</argsstring>
        <name>StyleSetForeground</name>
        <qualifiedname>wxStyledTextCtrl::StyleSetForeground</qualifiedname>
        <param>
          <type>int</type>
          <declname>style</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_colour" kindref="compound">wxColour</ref> &amp;</type>
          <declname>fore</declname>
        </param>
        <briefdescription>
<para>Set the foreground colour of a style. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4336" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a5a5157388e230ccfe1cefeaa2334346e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::StyleSetBackground</definition>
        <argsstring>(int style, const wxColour &amp;back)</argsstring>
        <name>StyleSetBackground</name>
        <qualifiedname>wxStyledTextCtrl::StyleSetBackground</qualifiedname>
        <param>
          <type>int</type>
          <declname>style</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_colour" kindref="compound">wxColour</ref> &amp;</type>
          <declname>back</declname>
        </param>
        <briefdescription>
<para>Set the background colour of a style. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4341" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ab666a9627aef3a3fe7f0a67736f1c0e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::StyleSetBold</definition>
        <argsstring>(int style, bool bold)</argsstring>
        <name>StyleSetBold</name>
        <qualifiedname>wxStyledTextCtrl::StyleSetBold</qualifiedname>
        <param>
          <type>int</type>
          <declname>style</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bold</declname>
        </param>
        <briefdescription>
<para>Set a style to be bold or not. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4346" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a48e18a2aaa345af6d5c40b592aec496f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::StyleSetItalic</definition>
        <argsstring>(int style, bool italic)</argsstring>
        <name>StyleSetItalic</name>
        <qualifiedname>wxStyledTextCtrl::StyleSetItalic</qualifiedname>
        <param>
          <type>int</type>
          <declname>style</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>italic</declname>
        </param>
        <briefdescription>
<para>Set a style to be italic or not. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4351" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a9b620f2c97f5040a720fa41cecd83b8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::StyleSetSize</definition>
        <argsstring>(int style, int sizePoints)</argsstring>
        <name>StyleSetSize</name>
        <qualifiedname>wxStyledTextCtrl::StyleSetSize</qualifiedname>
        <param>
          <type>int</type>
          <declname>style</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sizePoints</declname>
        </param>
        <briefdescription>
<para>Set the size of characters of a style. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4356" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1aba42c64b450953bbdad03aee33b3730f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::StyleSetFaceName</definition>
        <argsstring>(int style, const wxString &amp;fontName)</argsstring>
        <name>StyleSetFaceName</name>
        <qualifiedname>wxStyledTextCtrl::StyleSetFaceName</qualifiedname>
        <param>
          <type>int</type>
          <declname>style</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>fontName</declname>
        </param>
        <briefdescription>
<para>Set the font of a style. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4361" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a4d849ae82005d3e11a82784658759b99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::StyleSetEOLFilled</definition>
        <argsstring>(int style, bool eolFilled)</argsstring>
        <name>StyleSetEOLFilled</name>
        <qualifiedname>wxStyledTextCtrl::StyleSetEOLFilled</qualifiedname>
        <param>
          <type>int</type>
          <declname>style</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>eolFilled</declname>
        </param>
        <briefdescription>
<para>Set a style to have its end of line filled or not. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4366" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1aa0a453c7c4fa4b65d4095d676d0831b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::StyleResetDefault</definition>
        <argsstring>()</argsstring>
        <name>StyleResetDefault</name>
        <qualifiedname>wxStyledTextCtrl::StyleResetDefault</qualifiedname>
        <briefdescription>
<para>Reset the default style to its state at startup. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4371" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a3e86b2923933019f77f0cc4c1d597ca8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::StyleSetUnderline</definition>
        <argsstring>(int style, bool underline)</argsstring>
        <name>StyleSetUnderline</name>
        <qualifiedname>wxStyledTextCtrl::StyleSetUnderline</qualifiedname>
        <param>
          <type>int</type>
          <declname>style</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>underline</declname>
        </param>
        <briefdescription>
<para>Set a style to be underlined or not. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4376" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a80c880ec503fe62eec696a9e5048b83b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_colour" kindref="compound">wxColour</ref></type>
        <definition>wxColour wxStyledTextCtrl::StyleGetForeground</definition>
        <argsstring>(int style) const</argsstring>
        <name>StyleGetForeground</name>
        <qualifiedname>wxStyledTextCtrl::StyleGetForeground</qualifiedname>
        <param>
          <type>int</type>
          <declname>style</declname>
        </param>
        <briefdescription>
<para>Get the foreground colour of a style. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4381" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ad937feb343920ed95da163004adcb5f4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_colour" kindref="compound">wxColour</ref></type>
        <definition>wxColour wxStyledTextCtrl::StyleGetBackground</definition>
        <argsstring>(int style) const</argsstring>
        <name>StyleGetBackground</name>
        <qualifiedname>wxStyledTextCtrl::StyleGetBackground</qualifiedname>
        <param>
          <type>int</type>
          <declname>style</declname>
        </param>
        <briefdescription>
<para>Get the background colour of a style. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4386" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ab185260b91c33448e2217da0c2e25012" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxStyledTextCtrl::StyleGetBold</definition>
        <argsstring>(int style) const</argsstring>
        <name>StyleGetBold</name>
        <qualifiedname>wxStyledTextCtrl::StyleGetBold</qualifiedname>
        <param>
          <type>int</type>
          <declname>style</declname>
        </param>
        <briefdescription>
<para>Get is a style bold or not. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4391" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a7c3e3c076825d6355cfcf0d4f735c406" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxStyledTextCtrl::StyleGetItalic</definition>
        <argsstring>(int style) const</argsstring>
        <name>StyleGetItalic</name>
        <qualifiedname>wxStyledTextCtrl::StyleGetItalic</qualifiedname>
        <param>
          <type>int</type>
          <declname>style</declname>
        </param>
        <briefdescription>
<para>Get is a style italic or not. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4396" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1aa9f5878c84f6cd45e696b3a2d196d444" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::StyleGetSize</definition>
        <argsstring>(int style) const</argsstring>
        <name>StyleGetSize</name>
        <qualifiedname>wxStyledTextCtrl::StyleGetSize</qualifiedname>
        <param>
          <type>int</type>
          <declname>style</declname>
        </param>
        <briefdescription>
<para>Get the size of characters of a style. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4401" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a016e4efc8657d1c9db08592264ea75f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>wxString wxStyledTextCtrl::StyleGetFaceName</definition>
        <argsstring>(int style)</argsstring>
        <name>StyleGetFaceName</name>
        <qualifiedname>wxStyledTextCtrl::StyleGetFaceName</qualifiedname>
        <param>
          <type>int</type>
          <declname>style</declname>
        </param>
        <briefdescription>
<para>Get the font facename of a style. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4406" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a90a12872fd1f69efaf9f406738807e0d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxStyledTextCtrl::StyleGetEOLFilled</definition>
        <argsstring>(int style) const</argsstring>
        <name>StyleGetEOLFilled</name>
        <qualifiedname>wxStyledTextCtrl::StyleGetEOLFilled</qualifiedname>
        <param>
          <type>int</type>
          <declname>style</declname>
        </param>
        <briefdescription>
<para>Get is a style to have its end of line filled or not. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4411" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a1364c50535e648edf5b39fa0b737014a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxStyledTextCtrl::StyleGetUnderline</definition>
        <argsstring>(int style) const</argsstring>
        <name>StyleGetUnderline</name>
        <qualifiedname>wxStyledTextCtrl::StyleGetUnderline</qualifiedname>
        <param>
          <type>int</type>
          <declname>style</declname>
        </param>
        <briefdescription>
<para>Get is a style underlined or not. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4416" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a47634e06fcff7602c9025212f6c59124" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::StyleGetCase</definition>
        <argsstring>(int style) const</argsstring>
        <name>StyleGetCase</name>
        <qualifiedname>wxStyledTextCtrl::StyleGetCase</qualifiedname>
        <param>
          <type>int</type>
          <declname>style</declname>
        </param>
        <briefdescription>
<para>Get is a style mixed case, or to force upper or lower case. </para>
        </briefdescription>
        <detaileddescription>
<para>The return value will be one of the <ref refid="stc_8h_1a063f31f792a7ba6dcf44f59330afdfce" kindref="member">wxSTC_CASE_* </ref> constants. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4424" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a4077fdc5442b73a8c6ee0a29ef1364ee" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::StyleGetCharacterSet</definition>
        <argsstring>(int style) const</argsstring>
        <name>StyleGetCharacterSet</name>
        <qualifiedname>wxStyledTextCtrl::StyleGetCharacterSet</qualifiedname>
        <param>
          <type>int</type>
          <declname>style</declname>
        </param>
        <briefdescription>
<para>Get the character get of the font in a style. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4429" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a96afcffd96b80cd5b6c108d8a3dae5ca" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxStyledTextCtrl::StyleGetVisible</definition>
        <argsstring>(int style) const</argsstring>
        <name>StyleGetVisible</name>
        <qualifiedname>wxStyledTextCtrl::StyleGetVisible</qualifiedname>
        <param>
          <type>int</type>
          <declname>style</declname>
        </param>
        <briefdescription>
<para>Get is a style visible or not. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4434" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a210b37647678008a834d67563da825a2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxStyledTextCtrl::StyleGetChangeable</definition>
        <argsstring>(int style) const</argsstring>
        <name>StyleGetChangeable</name>
        <qualifiedname>wxStyledTextCtrl::StyleGetChangeable</qualifiedname>
        <param>
          <type>int</type>
          <declname>style</declname>
        </param>
        <briefdescription>
<para>Get is a style changeable or not (read only). </para>
        </briefdescription>
        <detaileddescription>
<para>Experimental feature, currently buggy. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4440" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1adc8373a5c8f2d13e2006290a6d5737cd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxStyledTextCtrl::StyleGetHotSpot</definition>
        <argsstring>(int style) const</argsstring>
        <name>StyleGetHotSpot</name>
        <qualifiedname>wxStyledTextCtrl::StyleGetHotSpot</qualifiedname>
        <param>
          <type>int</type>
          <declname>style</declname>
        </param>
        <briefdescription>
<para>Get is a style a hotspot or not. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4445" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1aa2d66c1de1d223467f9865c734a459bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::StyleSetCase</definition>
        <argsstring>(int style, int caseVisible)</argsstring>
        <name>StyleSetCase</name>
        <qualifiedname>wxStyledTextCtrl::StyleSetCase</qualifiedname>
        <param>
          <type>int</type>
          <declname>style</declname>
        </param>
        <param>
          <type>int</type>
          <declname>caseVisible</declname>
        </param>
        <briefdescription>
<para>Set a style to be mixed case, or to force upper or lower case. </para>
        </briefdescription>
        <detaileddescription>
<para>The second argument should be one of the <ref refid="stc_8h_1a063f31f792a7ba6dcf44f59330afdfce" kindref="member">wxSTC_CASE_* </ref> constants. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4453" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1aa0a94cd12373e60bfd227fefb00c07cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::StyleSetSizeFractional</definition>
        <argsstring>(int style, int sizeHundredthPoints)</argsstring>
        <name>StyleSetSizeFractional</name>
        <qualifiedname>wxStyledTextCtrl::StyleSetSizeFractional</qualifiedname>
        <param>
          <type>int</type>
          <declname>style</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sizeHundredthPoints</declname>
        </param>
        <briefdescription>
<para>Set the size of characters of a style. </para>
        </briefdescription>
        <detaileddescription>
<para>Size is in points multiplied by 100. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4458" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1afe439dfc527a6afe5e11e8d5515e10a6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::StyleGetSizeFractional</definition>
        <argsstring>(int style) const</argsstring>
        <name>StyleGetSizeFractional</name>
        <qualifiedname>wxStyledTextCtrl::StyleGetSizeFractional</qualifiedname>
        <param>
          <type>int</type>
          <declname>style</declname>
        </param>
        <briefdescription>
<para>Get the size of characters of a style in points multiplied by 100. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4463" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ae27e2b9b1326c04d5a0f5eee4d02ca13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::StyleSetWeight</definition>
        <argsstring>(int style, int weight)</argsstring>
        <name>StyleSetWeight</name>
        <qualifiedname>wxStyledTextCtrl::StyleSetWeight</qualifiedname>
        <param>
          <type>int</type>
          <declname>style</declname>
        </param>
        <param>
          <type>int</type>
          <declname>weight</declname>
        </param>
        <briefdescription>
<para>Set the weight of characters of a style. </para>
        </briefdescription>
        <detaileddescription>
<para>The second argument can be an integer or one of the <ref refid="stc_8h_1ad6db3e31b1c86858f10677e44a24dc86" kindref="member">wxSTC_WEIGHT_* </ref> constants. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4471" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1aee78d40b1e6a398fd70f2fc602e7b480" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::StyleGetWeight</definition>
        <argsstring>(int style) const</argsstring>
        <name>StyleGetWeight</name>
        <qualifiedname>wxStyledTextCtrl::StyleGetWeight</qualifiedname>
        <param>
          <type>int</type>
          <declname>style</declname>
        </param>
        <briefdescription>
<para>Get the weight of characters of a style. </para>
        </briefdescription>
        <detaileddescription>
<para>The return value will be an integer that is possibly one of the <ref refid="stc_8h_1ad6db3e31b1c86858f10677e44a24dc86" kindref="member">wxSTC_WEIGHT_* </ref> constants. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4479" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a8e9996a37a1c1a93a39a29f928fc87ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::StyleSetCharacterSet</definition>
        <argsstring>(int style, int characterSet)</argsstring>
        <name>StyleSetCharacterSet</name>
        <qualifiedname>wxStyledTextCtrl::StyleSetCharacterSet</qualifiedname>
        <param>
          <type>int</type>
          <declname>style</declname>
        </param>
        <param>
          <type>int</type>
          <declname>characterSet</declname>
        </param>
        <briefdescription>
<para>Set the character set of the font in a style. </para>
        </briefdescription>
        <detaileddescription>
<para>Converts the Scintilla character set values to a wxFontEncoding. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4486" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1aa4445d605000f0da8f45c3fa6ee693f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::StyleSetHotSpot</definition>
        <argsstring>(int style, bool hotspot)</argsstring>
        <name>StyleSetHotSpot</name>
        <qualifiedname>wxStyledTextCtrl::StyleSetHotSpot</qualifiedname>
        <param>
          <type>int</type>
          <declname>style</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>hotspot</declname>
        </param>
        <briefdescription>
<para>Set a style to be a hotspot or not. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4491" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ade9c9f8dedd0a1501368b1c04c6f487b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::StyleSetVisible</definition>
        <argsstring>(int style, bool visible)</argsstring>
        <name>StyleSetVisible</name>
        <qualifiedname>wxStyledTextCtrl::StyleSetVisible</qualifiedname>
        <param>
          <type>int</type>
          <declname>style</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>visible</declname>
        </param>
        <briefdescription>
<para>Set a style to be visible or not. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4496" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a34ce1df694a712a9ad19227b19d82f09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::StyleSetChangeable</definition>
        <argsstring>(int style, bool changeable)</argsstring>
        <name>StyleSetChangeable</name>
        <qualifiedname>wxStyledTextCtrl::StyleSetChangeable</qualifiedname>
        <param>
          <type>int</type>
          <declname>style</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>changeable</declname>
        </param>
        <briefdescription>
<para>Set a style to be changeable or not (read only). </para>
        </briefdescription>
        <detaileddescription>
<para>Experimental feature, currently buggy. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4502" column="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Caret selection and hotspot styles</header>
      <description><para><anchor id="classwx_styled_text_ctrl_1CaretAndSelectionStyles"/> </para>
</description>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a8700f308a77dc08a2cd857e44ee0a194" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetSelForeground</definition>
        <argsstring>(bool useSetting, const wxColour &amp;fore)</argsstring>
        <name>SetSelForeground</name>
        <qualifiedname>wxStyledTextCtrl::SetSelForeground</qualifiedname>
        <param>
          <type>bool</type>
          <declname>useSetting</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_colour" kindref="compound">wxColour</ref> &amp;</type>
          <declname>fore</declname>
        </param>
        <briefdescription>
<para>Set the foreground colour of the main and additional selections and whether to use this setting. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4514" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a22825ff4a852af2798dffca897b3063f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetSelBackground</definition>
        <argsstring>(bool useSetting, const wxColour &amp;back)</argsstring>
        <name>SetSelBackground</name>
        <qualifiedname>wxStyledTextCtrl::SetSelBackground</qualifiedname>
        <param>
          <type>bool</type>
          <declname>useSetting</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_colour" kindref="compound">wxColour</ref> &amp;</type>
          <declname>back</declname>
        </param>
        <briefdescription>
<para>Set the background colour of the main and additional selections and whether to use this setting. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4519" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a4560d6d26b3b8a879f5c4813b1f6c329" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetSelAlpha</definition>
        <argsstring>() const</argsstring>
        <name>GetSelAlpha</name>
        <qualifiedname>wxStyledTextCtrl::GetSelAlpha</qualifiedname>
        <briefdescription>
<para>Get the alpha of the selection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4524" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1aff181c7ff3f55b66d1cd1fc2b9fb4b4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetSelAlpha</definition>
        <argsstring>(int alpha)</argsstring>
        <name>SetSelAlpha</name>
        <qualifiedname>wxStyledTextCtrl::SetSelAlpha</qualifiedname>
        <param>
          <type>int</type>
          <declname>alpha</declname>
        </param>
        <briefdescription>
<para>Set the alpha of the selection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4529" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a44c9d12feb083793f9b74d92e91b2524" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxStyledTextCtrl::GetSelEOLFilled</definition>
        <argsstring>() const</argsstring>
        <name>GetSelEOLFilled</name>
        <qualifiedname>wxStyledTextCtrl::GetSelEOLFilled</qualifiedname>
        <briefdescription>
<para>Is the selection end of line filled? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4534" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a4286e5874826de7abf1d25cf05032396" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetSelEOLFilled</definition>
        <argsstring>(bool filled)</argsstring>
        <name>SetSelEOLFilled</name>
        <qualifiedname>wxStyledTextCtrl::SetSelEOLFilled</qualifiedname>
        <param>
          <type>bool</type>
          <declname>filled</declname>
        </param>
        <briefdescription>
<para>Set the selection to have its end of line filled or not. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4539" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a8b9df9c761aac1e0b7ef2457b09415d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetCaretForeground</definition>
        <argsstring>(const wxColour &amp;fore)</argsstring>
        <name>SetCaretForeground</name>
        <qualifiedname>wxStyledTextCtrl::SetCaretForeground</qualifiedname>
        <param>
          <type>const <ref refid="classwx_colour" kindref="compound">wxColour</ref> &amp;</type>
          <declname>fore</declname>
        </param>
        <briefdescription>
<para>Set the foreground colour of the caret. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4544" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1aa14b80637fb9bc1fca8040af93dd02a1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetCaretPeriod</definition>
        <argsstring>() const</argsstring>
        <name>GetCaretPeriod</name>
        <qualifiedname>wxStyledTextCtrl::GetCaretPeriod</qualifiedname>
        <briefdescription>
<para>Get the time in milliseconds that the caret is on and off. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4549" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1aad5817f223b594770fec0cc83fcd88e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetCaretPeriod</definition>
        <argsstring>(int periodMilliseconds)</argsstring>
        <name>SetCaretPeriod</name>
        <qualifiedname>wxStyledTextCtrl::SetCaretPeriod</qualifiedname>
        <param>
          <type>int</type>
          <declname>periodMilliseconds</declname>
        </param>
        <briefdescription>
<para>Get the time in milliseconds that the caret is on and off. </para>
        </briefdescription>
        <detaileddescription>
<para>0 = steady on. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4554" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1aa4df7bf66d4fbd0e23a938494f0d1568" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxStyledTextCtrl::GetCaretLineVisible</definition>
        <argsstring>() const</argsstring>
        <name>GetCaretLineVisible</name>
        <qualifiedname>wxStyledTextCtrl::GetCaretLineVisible</qualifiedname>
        <briefdescription>
<para>Is the background of the line containing the caret in a different colour? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4559" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1af1ed9a3be0fdda376f6b4ab819508f4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetCaretLineVisible</definition>
        <argsstring>(bool show)</argsstring>
        <name>SetCaretLineVisible</name>
        <qualifiedname>wxStyledTextCtrl::SetCaretLineVisible</qualifiedname>
        <param>
          <type>bool</type>
          <declname>show</declname>
        </param>
        <briefdescription>
<para>Display the background of the line containing the caret in a different colour. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4564" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a89bf3a508db714431b7c21309b28f4b3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_colour" kindref="compound">wxColour</ref></type>
        <definition>wxColour wxStyledTextCtrl::GetCaretLineBackground</definition>
        <argsstring>() const</argsstring>
        <name>GetCaretLineBackground</name>
        <qualifiedname>wxStyledTextCtrl::GetCaretLineBackground</qualifiedname>
        <briefdescription>
<para>Get the colour of the background of the line containing the caret. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4569" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a10b9b644790f1a9ca287df6f527d6e63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetCaretLineBackground</definition>
        <argsstring>(const wxColour &amp;back)</argsstring>
        <name>SetCaretLineBackground</name>
        <qualifiedname>wxStyledTextCtrl::SetCaretLineBackground</qualifiedname>
        <param>
          <type>const <ref refid="classwx_colour" kindref="compound">wxColour</ref> &amp;</type>
          <declname>back</declname>
        </param>
        <briefdescription>
<para>Set the colour of the background of the line containing the caret. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4574" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ac5e3ee6a48e2a095e8b475e4d2b2e490" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_colour" kindref="compound">wxColour</ref></type>
        <definition>wxColour wxStyledTextCtrl::GetCaretForeground</definition>
        <argsstring>() const</argsstring>
        <name>GetCaretForeground</name>
        <qualifiedname>wxStyledTextCtrl::GetCaretForeground</qualifiedname>
        <briefdescription>
<para>Get the foreground colour of the caret. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4579" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a9c89012c8781311f4aa8d8bb0e78a087" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetCaretWidth</definition>
        <argsstring>(int pixelWidth)</argsstring>
        <name>SetCaretWidth</name>
        <qualifiedname>wxStyledTextCtrl::SetCaretWidth</qualifiedname>
        <param>
          <type>int</type>
          <declname>pixelWidth</declname>
        </param>
        <briefdescription>
<para>Set the width of the insert mode caret. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4584" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a589b8ffe3bc1b0d719f80df0d301dcfc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetCaretWidth</definition>
        <argsstring>() const</argsstring>
        <name>GetCaretWidth</name>
        <qualifiedname>wxStyledTextCtrl::GetCaretWidth</qualifiedname>
        <briefdescription>
<para>Returns the width of the insert mode caret. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4589" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a0f9e6a38b3f57612406f587dce145a31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetHotspotActiveForeground</definition>
        <argsstring>(bool useSetting, const wxColour &amp;fore)</argsstring>
        <name>SetHotspotActiveForeground</name>
        <qualifiedname>wxStyledTextCtrl::SetHotspotActiveForeground</qualifiedname>
        <param>
          <type>bool</type>
          <declname>useSetting</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_colour" kindref="compound">wxColour</ref> &amp;</type>
          <declname>fore</declname>
        </param>
        <briefdescription>
<para>Set a fore colour for active hotspots. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4594" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1afa1a9baaa6684db218fb26a81d9139a2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_colour" kindref="compound">wxColour</ref></type>
        <definition>wxColour wxStyledTextCtrl::GetHotspotActiveForeground</definition>
        <argsstring>() const</argsstring>
        <name>GetHotspotActiveForeground</name>
        <qualifiedname>wxStyledTextCtrl::GetHotspotActiveForeground</qualifiedname>
        <briefdescription>
<para>Get the fore colour for active hotspots. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4599" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1aa3697a1a89bff16a98fc4b648d2a25ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetHotspotActiveBackground</definition>
        <argsstring>(bool useSetting, const wxColour &amp;back)</argsstring>
        <name>SetHotspotActiveBackground</name>
        <qualifiedname>wxStyledTextCtrl::SetHotspotActiveBackground</qualifiedname>
        <param>
          <type>bool</type>
          <declname>useSetting</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_colour" kindref="compound">wxColour</ref> &amp;</type>
          <declname>back</declname>
        </param>
        <briefdescription>
<para>Set a back colour for active hotspots. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4604" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a6b6ed70614d813c4ce11eee04f05d5d1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_colour" kindref="compound">wxColour</ref></type>
        <definition>wxColour wxStyledTextCtrl::GetHotspotActiveBackground</definition>
        <argsstring>() const</argsstring>
        <name>GetHotspotActiveBackground</name>
        <qualifiedname>wxStyledTextCtrl::GetHotspotActiveBackground</qualifiedname>
        <briefdescription>
<para>Get the back colour for active hotspots. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4609" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a543946a4c1705ea1f94fbc7b3b901239" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetHotspotActiveUnderline</definition>
        <argsstring>(bool underline)</argsstring>
        <name>SetHotspotActiveUnderline</name>
        <qualifiedname>wxStyledTextCtrl::SetHotspotActiveUnderline</qualifiedname>
        <param>
          <type>bool</type>
          <declname>underline</declname>
        </param>
        <briefdescription>
<para>Enable / Disable underlining active hotspots. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4614" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a5b780ee0de750d2c04f0d29148ee690c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxStyledTextCtrl::GetHotspotActiveUnderline</definition>
        <argsstring>() const</argsstring>
        <name>GetHotspotActiveUnderline</name>
        <qualifiedname>wxStyledTextCtrl::GetHotspotActiveUnderline</qualifiedname>
        <briefdescription>
<para>Get whether underlining for active hotspots. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4619" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a905c2e7323b7712084f84cb37399ea4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetHotspotSingleLine</definition>
        <argsstring>(bool singleLine)</argsstring>
        <name>SetHotspotSingleLine</name>
        <qualifiedname>wxStyledTextCtrl::SetHotspotSingleLine</qualifiedname>
        <param>
          <type>bool</type>
          <declname>singleLine</declname>
        </param>
        <briefdescription>
<para>Limit hotspots to single line so hotspots on two lines don&apos;t merge. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4624" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a4fe99f0ae2e201e592fc7dc22b644461" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxStyledTextCtrl::GetHotspotSingleLine</definition>
        <argsstring>() const</argsstring>
        <name>GetHotspotSingleLine</name>
        <qualifiedname>wxStyledTextCtrl::GetHotspotSingleLine</qualifiedname>
        <briefdescription>
<para>Get the HotspotSingleLine property. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4629" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1aaeb60783c884bd85a2bd7b73bfbcd1c1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetCaretSticky</definition>
        <argsstring>() const</argsstring>
        <name>GetCaretSticky</name>
        <qualifiedname>wxStyledTextCtrl::GetCaretSticky</qualifiedname>
        <briefdescription>
<para>Can the caret preferred x position only be changed by explicit movement commands? </para>
        </briefdescription>
        <detaileddescription>
<para>The return value will be one of the <ref refid="stc_8h_1acf8f3492dc1bde051a278118e629a86c" kindref="member">wxSTC_CARETSTICKY_* </ref> constants. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4637" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ab65625d51bcf1d035022bc781a1c6795" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetCaretSticky</definition>
        <argsstring>(int useCaretStickyBehaviour)</argsstring>
        <name>SetCaretSticky</name>
        <qualifiedname>wxStyledTextCtrl::SetCaretSticky</qualifiedname>
        <param>
          <type>int</type>
          <declname>useCaretStickyBehaviour</declname>
        </param>
        <briefdescription>
<para>Stop the caret preferred x position changing when the user types. </para>
        </briefdescription>
        <detaileddescription>
<para>The input should be one of the <ref refid="stc_8h_1acf8f3492dc1bde051a278118e629a86c" kindref="member">wxSTC_CARETSTICKY_* </ref> constants. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4645" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1adfc2b57b5e8d2f1fb512437344aab923" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::ToggleCaretSticky</definition>
        <argsstring>()</argsstring>
        <name>ToggleCaretSticky</name>
        <qualifiedname>wxStyledTextCtrl::ToggleCaretSticky</qualifiedname>
        <briefdescription>
<para>Switch between sticky and non-sticky: meant to be bound to a key. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4650" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ac5979bd0c78c7cd6176b1294ea620027" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetCaretLineBackAlpha</definition>
        <argsstring>(int alpha)</argsstring>
        <name>SetCaretLineBackAlpha</name>
        <qualifiedname>wxStyledTextCtrl::SetCaretLineBackAlpha</qualifiedname>
        <param>
          <type>int</type>
          <declname>alpha</declname>
        </param>
        <briefdescription>
<para>Set background alpha of the caret line. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4655" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a6593f7d73d126046c4da0bfb40a638ae" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetCaretLineBackAlpha</definition>
        <argsstring>() const</argsstring>
        <name>GetCaretLineBackAlpha</name>
        <qualifiedname>wxStyledTextCtrl::GetCaretLineBackAlpha</qualifiedname>
        <briefdescription>
<para>Get the background alpha of the caret line. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4660" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a24a7af61b419546d4f0504ac366fd341" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetCaretStyle</definition>
        <argsstring>(int caretStyle)</argsstring>
        <name>SetCaretStyle</name>
        <qualifiedname>wxStyledTextCtrl::SetCaretStyle</qualifiedname>
        <param>
          <type>int</type>
          <declname>caretStyle</declname>
        </param>
        <briefdescription>
<para>Set the style of the caret to be drawn. </para>
        </briefdescription>
        <detaileddescription>
<para>The input should be one of the <ref refid="stc_8h_1aa90caf4d547ff44ae9d5872e9d1b4cb1" kindref="member">wxSTC_CARETSTYLE_* </ref> constants. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4668" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a454f2c99e7ff5f0ef46d1c8e0e7c4994" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetCaretStyle</definition>
        <argsstring>() const</argsstring>
        <name>GetCaretStyle</name>
        <qualifiedname>wxStyledTextCtrl::GetCaretStyle</qualifiedname>
        <briefdescription>
<para>Returns the current style of the caret. </para>
        </briefdescription>
        <detaileddescription>
<para>The return value will be one of the <ref refid="stc_8h_1aa90caf4d547ff44ae9d5872e9d1b4cb1" kindref="member">wxSTC_CARETSTYLE_* </ref> constants. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4676" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a091ce6a7dbc201757d6fab9d267ffc81" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxStyledTextCtrl::GetCaretLineVisibleAlways</definition>
        <argsstring>() const</argsstring>
        <name>GetCaretLineVisibleAlways</name>
        <qualifiedname>wxStyledTextCtrl::GetCaretLineVisibleAlways</qualifiedname>
        <briefdescription>
<para>Is the caret line always visible? </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>3.1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4683" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a8e950b38090971056e918165c3b68e53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetCaretLineVisibleAlways</definition>
        <argsstring>(bool alwaysVisible)</argsstring>
        <name>SetCaretLineVisibleAlways</name>
        <qualifiedname>wxStyledTextCtrl::SetCaretLineVisibleAlways</qualifiedname>
        <param>
          <type>bool</type>
          <declname>alwaysVisible</declname>
        </param>
        <briefdescription>
<para>Sets the caret line to always visible. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>3.1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4690" column="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Character representations</header>
      <description><para><anchor id="classwx_styled_text_ctrl_1CharacterRepresentations"/> </para>
</description>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a65eeb943df8d89628c047caeb89c4413" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetControlCharSymbol</definition>
        <argsstring>(int symbol)</argsstring>
        <name>SetControlCharSymbol</name>
        <qualifiedname>wxStyledTextCtrl::SetControlCharSymbol</qualifiedname>
        <param>
          <type>int</type>
          <declname>symbol</declname>
        </param>
        <briefdescription>
<para>Change the way control characters are displayed: If symbol is &lt; 32, keep the drawn way, else, use the given character. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4703" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ac3a377c0dcfec693f97c3acafa645faa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetControlCharSymbol</definition>
        <argsstring>() const</argsstring>
        <name>GetControlCharSymbol</name>
        <qualifiedname>wxStyledTextCtrl::GetControlCharSymbol</qualifiedname>
        <briefdescription>
<para>Get the way control characters are displayed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4708" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a7f1517d7a693a8c9a93a206678ec0d09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetRepresentation</definition>
        <argsstring>(const wxString &amp;encodedCharacter, const wxString &amp;representation)</argsstring>
        <name>SetRepresentation</name>
        <qualifiedname>wxStyledTextCtrl::SetRepresentation</qualifiedname>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>encodedCharacter</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>representation</declname>
        </param>
        <briefdescription>
<para>Set the way a character is drawn. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>3.1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4715" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a9ac11d7b69b5c140be0662f5b6f69374" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>wxString wxStyledTextCtrl::GetRepresentation</definition>
        <argsstring>(const wxString &amp;encodedCharacter) const</argsstring>
        <name>GetRepresentation</name>
        <qualifiedname>wxStyledTextCtrl::GetRepresentation</qualifiedname>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>encodedCharacter</declname>
        </param>
        <briefdescription>
<para>Set the way a character is drawn. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>3.1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4722" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a10f5b499d686e35e52ef2706a991436c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::ClearRepresentation</definition>
        <argsstring>(const wxString &amp;encodedCharacter)</argsstring>
        <name>ClearRepresentation</name>
        <qualifiedname>wxStyledTextCtrl::ClearRepresentation</qualifiedname>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>encodedCharacter</declname>
        </param>
        <briefdescription>
<para>Remove a character representation. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>3.1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4729" column="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Margins</header>
      <description><para><anchor id="classwx_styled_text_ctrl_1Margins"/> </para>
</description>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a79eaf23fc0c1b80a6b3cf4e9dc928461" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetMarginType</definition>
        <argsstring>(int margin, int marginType)</argsstring>
        <name>SetMarginType</name>
        <qualifiedname>wxStyledTextCtrl::SetMarginType</qualifiedname>
        <param>
          <type>int</type>
          <declname>margin</declname>
        </param>
        <param>
          <type>int</type>
          <declname>marginType</declname>
        </param>
        <briefdescription>
<para>Set a margin to be either numeric or symbolic. </para>
        </briefdescription>
        <detaileddescription>
<para>The second argument should be one of the <ref refid="stc_8h_1ae06ddfcd40e34f7e0e7829e3f1d039b4" kindref="member">wxSTC_MARGIN_* </ref> constants. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4744" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1acb25159991103ae1b8b364316f6fe70b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetMarginType</definition>
        <argsstring>(int margin) const</argsstring>
        <name>GetMarginType</name>
        <qualifiedname>wxStyledTextCtrl::GetMarginType</qualifiedname>
        <param>
          <type>int</type>
          <declname>margin</declname>
        </param>
        <briefdescription>
<para>Retrieve the type of a margin. </para>
        </briefdescription>
        <detaileddescription>
<para>The return value will be one of the <ref refid="stc_8h_1ae06ddfcd40e34f7e0e7829e3f1d039b4" kindref="member">wxSTC_MARGIN_* </ref> constants. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4752" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ab506524159db11a54ffd3fde2e4f601d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetMarginWidth</definition>
        <argsstring>(int margin, int pixelWidth)</argsstring>
        <name>SetMarginWidth</name>
        <qualifiedname>wxStyledTextCtrl::SetMarginWidth</qualifiedname>
        <param>
          <type>int</type>
          <declname>margin</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pixelWidth</declname>
        </param>
        <briefdescription>
<para>Set the width of a margin to a width expressed in pixels. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4757" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ac3b9760a825a8cfca4c634ccc788341e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetMarginWidth</definition>
        <argsstring>(int margin) const</argsstring>
        <name>GetMarginWidth</name>
        <qualifiedname>wxStyledTextCtrl::GetMarginWidth</qualifiedname>
        <param>
          <type>int</type>
          <declname>margin</declname>
        </param>
        <briefdescription>
<para>Retrieve the width of a margin in pixels. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4762" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a6e164c4c454eb75d9082c55159572fcd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetMarginMask</definition>
        <argsstring>(int margin, int mask)</argsstring>
        <name>SetMarginMask</name>
        <qualifiedname>wxStyledTextCtrl::SetMarginMask</qualifiedname>
        <param>
          <type>int</type>
          <declname>margin</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Set a mask that determines which markers are displayed in a margin. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4767" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ad887d592fd27a1fc9a4e59df8742ff6f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetMarginMask</definition>
        <argsstring>(int margin) const</argsstring>
        <name>GetMarginMask</name>
        <qualifiedname>wxStyledTextCtrl::GetMarginMask</qualifiedname>
        <param>
          <type>int</type>
          <declname>margin</declname>
        </param>
        <briefdescription>
<para>Retrieve the marker mask of a margin. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4772" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ae70bbd7ab233d7d8b3ffc6b7e8de1920" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetMarginSensitive</definition>
        <argsstring>(int margin, bool sensitive)</argsstring>
        <name>SetMarginSensitive</name>
        <qualifiedname>wxStyledTextCtrl::SetMarginSensitive</qualifiedname>
        <param>
          <type>int</type>
          <declname>margin</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>sensitive</declname>
        </param>
        <briefdescription>
<para>Make a margin sensitive or insensitive to mouse clicks. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4777" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1aecc809428050a2668b89396166504a7b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxStyledTextCtrl::GetMarginSensitive</definition>
        <argsstring>(int margin) const</argsstring>
        <name>GetMarginSensitive</name>
        <qualifiedname>wxStyledTextCtrl::GetMarginSensitive</qualifiedname>
        <param>
          <type>int</type>
          <declname>margin</declname>
        </param>
        <briefdescription>
<para>Retrieve the mouse click sensitivity of a margin. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4782" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a049faa89af6f89789e5f6f670e704816" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetMarginCursor</definition>
        <argsstring>(int margin, int cursor)</argsstring>
        <name>SetMarginCursor</name>
        <qualifiedname>wxStyledTextCtrl::SetMarginCursor</qualifiedname>
        <param>
          <type>int</type>
          <declname>margin</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cursor</declname>
        </param>
        <briefdescription>
<para>Set the cursor shown when the mouse is inside a margin. </para>
        </briefdescription>
        <detaileddescription>
<para>The second argument should be one of the <ref refid="stc_8h_1a64451c1ed51b6e7887f3bbfff826a231" kindref="member">wxSTC_CURSOR* </ref> constants. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4790" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a1479b4bbffd3f8be4de1e371e699f0bd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetMarginCursor</definition>
        <argsstring>(int margin) const</argsstring>
        <name>GetMarginCursor</name>
        <qualifiedname>wxStyledTextCtrl::GetMarginCursor</qualifiedname>
        <param>
          <type>int</type>
          <declname>margin</declname>
        </param>
        <briefdescription>
<para>Retrieve the cursor shown in a margin. </para>
        </briefdescription>
        <detaileddescription>
<para>The return value will be one of the <ref refid="stc_8h_1a64451c1ed51b6e7887f3bbfff826a231" kindref="member">wxSTC_CURSOR* </ref> constants. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4798" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a26d6eb811bebd9f97b35efeb5741e13e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetMarginBackground</definition>
        <argsstring>(int margin, const wxColour &amp;back)</argsstring>
        <name>SetMarginBackground</name>
        <qualifiedname>wxStyledTextCtrl::SetMarginBackground</qualifiedname>
        <param>
          <type>int</type>
          <declname>margin</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_colour" kindref="compound">wxColour</ref> &amp;</type>
          <declname>back</declname>
        </param>
        <briefdescription>
<para>Set the background colour of a margin. </para>
        </briefdescription>
        <detaileddescription>
<para>Only visible for wxSTC_MARGIN_COLOUR.</para>
<para><simplesect kind="since"><para>3.1.1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4805" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ad649a9374c63d2072f1f5c22db02651d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_colour" kindref="compound">wxColour</ref></type>
        <definition>wxColour wxStyledTextCtrl::GetMarginBackground</definition>
        <argsstring>(int margin) const</argsstring>
        <name>GetMarginBackground</name>
        <qualifiedname>wxStyledTextCtrl::GetMarginBackground</qualifiedname>
        <param>
          <type>int</type>
          <declname>margin</declname>
        </param>
        <briefdescription>
<para>Retrieve the background colour of a margin. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>3.1.1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4812" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1acadadd922d7ee403ca01d008b7c5df51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetMarginCount</definition>
        <argsstring>(int margins)</argsstring>
        <name>SetMarginCount</name>
        <qualifiedname>wxStyledTextCtrl::SetMarginCount</qualifiedname>
        <param>
          <type>int</type>
          <declname>margins</declname>
        </param>
        <briefdescription>
<para>Allocate a non-standard number of margins. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>3.1.1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4819" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a71d7e3cc468b2f5ad5902371d9fbd579" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetMarginCount</definition>
        <argsstring>() const</argsstring>
        <name>GetMarginCount</name>
        <qualifiedname>wxStyledTextCtrl::GetMarginCount</qualifiedname>
        <briefdescription>
<para>How many margins are there?. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>3.1.1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4826" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a66195611508b5ca6f3a191b4e5433fd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetMarginLeft</definition>
        <argsstring>(int pixelWidth)</argsstring>
        <name>SetMarginLeft</name>
        <qualifiedname>wxStyledTextCtrl::SetMarginLeft</qualifiedname>
        <param>
          <type>int</type>
          <declname>pixelWidth</declname>
        </param>
        <briefdescription>
<para>Sets the size in pixels of the left margin. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4831" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1aeb80a279307de5abf270f24028ba29c1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetMarginLeft</definition>
        <argsstring>() const</argsstring>
        <name>GetMarginLeft</name>
        <qualifiedname>wxStyledTextCtrl::GetMarginLeft</qualifiedname>
        <briefdescription>
<para>Returns the size in pixels of the left margin. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4836" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a20a270a0adafd05fdac58bb34e6748da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetMarginRight</definition>
        <argsstring>(int pixelWidth)</argsstring>
        <name>SetMarginRight</name>
        <qualifiedname>wxStyledTextCtrl::SetMarginRight</qualifiedname>
        <param>
          <type>int</type>
          <declname>pixelWidth</declname>
        </param>
        <briefdescription>
<para>Sets the size in pixels of the right margin. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4841" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a9fcc2f3bafbda637b44c3dbc0a527fdb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetMarginRight</definition>
        <argsstring>() const</argsstring>
        <name>GetMarginRight</name>
        <qualifiedname>wxStyledTextCtrl::GetMarginRight</qualifiedname>
        <briefdescription>
<para>Returns the size in pixels of the right margin. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4846" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a213204145ccb740cca7eb816210e6ebe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetFoldMarginColour</definition>
        <argsstring>(bool useSetting, const wxColour &amp;back)</argsstring>
        <name>SetFoldMarginColour</name>
        <qualifiedname>wxStyledTextCtrl::SetFoldMarginColour</qualifiedname>
        <param>
          <type>bool</type>
          <declname>useSetting</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_colour" kindref="compound">wxColour</ref> &amp;</type>
          <declname>back</declname>
        </param>
        <briefdescription>
<para>Set one of the colours used as a chequerboard pattern in the fold margin. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4851" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a318338d67d375dd4408b281b55fd3699" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetFoldMarginHiColour</definition>
        <argsstring>(bool useSetting, const wxColour &amp;fore)</argsstring>
        <name>SetFoldMarginHiColour</name>
        <qualifiedname>wxStyledTextCtrl::SetFoldMarginHiColour</qualifiedname>
        <param>
          <type>bool</type>
          <declname>useSetting</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_colour" kindref="compound">wxColour</ref> &amp;</type>
          <declname>fore</declname>
        </param>
        <briefdescription>
<para>Set the other colour used as a chequerboard pattern in the fold margin. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4856" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ad66c7d820d12a5cc6f82aa72935fbbea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::MarginSetText</definition>
        <argsstring>(int line, const wxString &amp;text)</argsstring>
        <name>MarginSetText</name>
        <qualifiedname>wxStyledTextCtrl::MarginSetText</qualifiedname>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>text</declname>
        </param>
        <briefdescription>
<para>Set the text in the text margin for a line. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4861" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a17654d6fa430fb1a5c948a8ebcc50ab1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>wxString wxStyledTextCtrl::MarginGetText</definition>
        <argsstring>(int line) const</argsstring>
        <name>MarginGetText</name>
        <qualifiedname>wxStyledTextCtrl::MarginGetText</qualifiedname>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
<para>Get the text in the text margin for a line. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4866" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ae552ef3d00be362facd155efdbb06644" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::MarginSetStyle</definition>
        <argsstring>(int line, int style)</argsstring>
        <name>MarginSetStyle</name>
        <qualifiedname>wxStyledTextCtrl::MarginSetStyle</qualifiedname>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <param>
          <type>int</type>
          <declname>style</declname>
        </param>
        <briefdescription>
<para>Set the style number for the text margin for a line. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4871" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a16a8bfe44398120a02088faec8977fc4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::MarginGetStyle</definition>
        <argsstring>(int line) const</argsstring>
        <name>MarginGetStyle</name>
        <qualifiedname>wxStyledTextCtrl::MarginGetStyle</qualifiedname>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
<para>Get the style number for the text margin for a line. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4876" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a9b5d745fe8da43d83fed85baa7bfe0f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::MarginSetStyles</definition>
        <argsstring>(int line, const wxString &amp;styles)</argsstring>
        <name>MarginSetStyles</name>
        <qualifiedname>wxStyledTextCtrl::MarginSetStyles</qualifiedname>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>styles</declname>
        </param>
        <briefdescription>
<para>Set the style in the text margin for a line. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4881" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a9d95c87d79aa5aac50884c321b4806b8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>wxString wxStyledTextCtrl::MarginGetStyles</definition>
        <argsstring>(int line) const</argsstring>
        <name>MarginGetStyles</name>
        <qualifiedname>wxStyledTextCtrl::MarginGetStyles</qualifiedname>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
<para>Get the styles in the text margin for a line. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4886" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ade9ece6d3f3a4373283c12b77f6469c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::MarginTextClearAll</definition>
        <argsstring>()</argsstring>
        <name>MarginTextClearAll</name>
        <qualifiedname>wxStyledTextCtrl::MarginTextClearAll</qualifiedname>
        <briefdescription>
<para>Clear the margin text on all lines. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4891" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a07193d7b379e085991b840344293f4b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::MarginSetStyleOffset</definition>
        <argsstring>(int style)</argsstring>
        <name>MarginSetStyleOffset</name>
        <qualifiedname>wxStyledTextCtrl::MarginSetStyleOffset</qualifiedname>
        <param>
          <type>int</type>
          <declname>style</declname>
        </param>
        <briefdescription>
<para>Get the start of the range of style numbers used for margin text. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4896" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a79410f1238549876fb06e181772d933b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::MarginGetStyleOffset</definition>
        <argsstring>() const</argsstring>
        <name>MarginGetStyleOffset</name>
        <qualifiedname>wxStyledTextCtrl::MarginGetStyleOffset</qualifiedname>
        <briefdescription>
<para>Get the start of the range of style numbers used for margin text. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4901" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a56a7d1113ca8964b35f549fecae59076" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetMarginOptions</definition>
        <argsstring>(int marginOptions)</argsstring>
        <name>SetMarginOptions</name>
        <qualifiedname>wxStyledTextCtrl::SetMarginOptions</qualifiedname>
        <param>
          <type>int</type>
          <declname>marginOptions</declname>
        </param>
        <briefdescription>
<para>Set the margin options. </para>
        </briefdescription>
        <detaileddescription>
<para>The input should be one of the <ref refid="stc_8h_1a1b5a6f7ed19b45cd5eba468371ef223c" kindref="member">wxSTC_MARGINOPTION_* </ref> constants. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4909" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ac82528c63722ddadbe7e30a74d272e06" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetMarginOptions</definition>
        <argsstring>() const</argsstring>
        <name>GetMarginOptions</name>
        <qualifiedname>wxStyledTextCtrl::GetMarginOptions</qualifiedname>
        <briefdescription>
<para>Get the margin options. </para>
        </briefdescription>
        <detaileddescription>
<para>The return value will be one of the <ref refid="stc_8h_1a1b5a6f7ed19b45cd5eba468371ef223c" kindref="member">wxSTC_MARGINOPTION_* </ref> constants. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4917" column="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Annotations</header>
      <description><para><anchor id="classwx_styled_text_ctrl_1Annotations"/> </para>
</description>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1aecd0b63c51816832642ecd2f44b00a87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::AnnotationSetText</definition>
        <argsstring>(int line, const wxString &amp;text)</argsstring>
        <name>AnnotationSetText</name>
        <qualifiedname>wxStyledTextCtrl::AnnotationSetText</qualifiedname>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>text</declname>
        </param>
        <briefdescription>
<para>Set the annotation text for a line. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4929" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1af0b87546e61d4b467de787f049ec21f3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>wxString wxStyledTextCtrl::AnnotationGetText</definition>
        <argsstring>(int line) const</argsstring>
        <name>AnnotationGetText</name>
        <qualifiedname>wxStyledTextCtrl::AnnotationGetText</qualifiedname>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
<para>Get the annotation text for a line. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4934" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a67bfcd63c3e377996de8e0f6cea79494" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::AnnotationSetStyle</definition>
        <argsstring>(int line, int style)</argsstring>
        <name>AnnotationSetStyle</name>
        <qualifiedname>wxStyledTextCtrl::AnnotationSetStyle</qualifiedname>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <param>
          <type>int</type>
          <declname>style</declname>
        </param>
        <briefdescription>
<para>Set the style number for the annotations for a line. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4939" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a4c39973c09932da41829b8bcf339f1e4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::AnnotationGetStyle</definition>
        <argsstring>(int line) const</argsstring>
        <name>AnnotationGetStyle</name>
        <qualifiedname>wxStyledTextCtrl::AnnotationGetStyle</qualifiedname>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
<para>Get the style number for the annotations for a line. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4944" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a8644662a623a35c6f8970119cbc891ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::AnnotationSetStyles</definition>
        <argsstring>(int line, const wxString &amp;styles)</argsstring>
        <name>AnnotationSetStyles</name>
        <qualifiedname>wxStyledTextCtrl::AnnotationSetStyles</qualifiedname>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>styles</declname>
        </param>
        <briefdescription>
<para>Set the annotation styles for a line. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4949" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a403958f2d5303a8e571c734fada0dcdb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>wxString wxStyledTextCtrl::AnnotationGetStyles</definition>
        <argsstring>(int line) const</argsstring>
        <name>AnnotationGetStyles</name>
        <qualifiedname>wxStyledTextCtrl::AnnotationGetStyles</qualifiedname>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
<para>Get the annotation styles for a line. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4954" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ac14e4b69b1204121c09b73f4bca5cb36" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::AnnotationGetLines</definition>
        <argsstring>(int line) const</argsstring>
        <name>AnnotationGetLines</name>
        <qualifiedname>wxStyledTextCtrl::AnnotationGetLines</qualifiedname>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
<para>Get the number of annotation lines for a line. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4959" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ae5b50b8811ea4dca4fce022dcf97b457" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::AnnotationClearAll</definition>
        <argsstring>()</argsstring>
        <name>AnnotationClearAll</name>
        <qualifiedname>wxStyledTextCtrl::AnnotationClearAll</qualifiedname>
        <briefdescription>
<para>Clear the annotations from all lines. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4964" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a6e2c50e5cbc7de59f25bc4c00662c90d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::AnnotationSetVisible</definition>
        <argsstring>(int visible)</argsstring>
        <name>AnnotationSetVisible</name>
        <qualifiedname>wxStyledTextCtrl::AnnotationSetVisible</qualifiedname>
        <param>
          <type>int</type>
          <declname>visible</declname>
        </param>
        <briefdescription>
<para>Set the visibility for the annotations for a view. </para>
        </briefdescription>
        <detaileddescription>
<para>The input should be one of the <ref refid="stc_8h_1ae076589e57cc7b605f5c6aa2118e8795" kindref="member">wxSTC_ANNOTATION_* </ref> constants. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4972" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a87f11eb914e0fe18ee3450e63ef3a489" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::AnnotationGetVisible</definition>
        <argsstring>() const</argsstring>
        <name>AnnotationGetVisible</name>
        <qualifiedname>wxStyledTextCtrl::AnnotationGetVisible</qualifiedname>
        <briefdescription>
<para>Get the visibility for the annotations for a view. </para>
        </briefdescription>
        <detaileddescription>
<para>The return value will be one of the <ref refid="stc_8h_1ae076589e57cc7b605f5c6aa2118e8795" kindref="member">wxSTC_ANNOTATION_* </ref> constants. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4980" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1af526a69f258363d5e6db9d75be291cdd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::AnnotationSetStyleOffset</definition>
        <argsstring>(int style)</argsstring>
        <name>AnnotationSetStyleOffset</name>
        <qualifiedname>wxStyledTextCtrl::AnnotationSetStyleOffset</qualifiedname>
        <param>
          <type>int</type>
          <declname>style</declname>
        </param>
        <briefdescription>
<para>Get the start of the range of style numbers used for annotations. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4985" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a417b873745afb481d849beb75d79e99f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::AnnotationGetStyleOffset</definition>
        <argsstring>() const</argsstring>
        <name>AnnotationGetStyleOffset</name>
        <qualifiedname>wxStyledTextCtrl::AnnotationGetStyleOffset</qualifiedname>
        <briefdescription>
<para>Get the start of the range of style numbers used for annotations. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="4990" column="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Other settings</header>
      <description><para><anchor id="classwx_styled_text_ctrl_1OtherSettings"/> </para>
</description>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1acc774671fab54041b5add6fe4f6ca84e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxStyledTextCtrl::GetBufferedDraw</definition>
        <argsstring>() const</argsstring>
        <name>GetBufferedDraw</name>
        <qualifiedname>wxStyledTextCtrl::GetBufferedDraw</qualifiedname>
        <briefdescription>
<para>Is drawing done first into a buffer or direct to the screen? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5002" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a625ec429c30103b60c3c3683008b98ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetBufferedDraw</definition>
        <argsstring>(bool buffered)</argsstring>
        <name>SetBufferedDraw</name>
        <qualifiedname>wxStyledTextCtrl::SetBufferedDraw</qualifiedname>
        <param>
          <type>bool</type>
          <declname>buffered</declname>
        </param>
        <briefdescription>
<para>If drawing is buffered then each line of text is drawn into a bitmap buffer before drawing it to the screen to avoid flicker. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5008" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a1f453da45a1621528f258700cf462a6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetCodePage</definition>
        <argsstring>(int codePage)</argsstring>
        <name>SetCodePage</name>
        <qualifiedname>wxStyledTextCtrl::SetCodePage</qualifiedname>
        <param>
          <type>int</type>
          <declname>codePage</declname>
        </param>
        <briefdescription>
<para>Set the code page used to interpret the bytes of the document as characters. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5013" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ac9fe968f930a168681e601b326b984eb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetIMEInteraction</definition>
        <argsstring>() const</argsstring>
        <name>GetIMEInteraction</name>
        <qualifiedname>wxStyledTextCtrl::GetIMEInteraction</qualifiedname>
        <briefdescription>
<para>Is the IME displayed in a window or inline? </para>
        </briefdescription>
        <detaileddescription>
<para>The return value will be one of the <ref refid="stc_8h_1abb7cdee2d731ed08bbf6de8c961ee950" kindref="member">wxSTC_IME_* </ref> constants. <simplesect kind="since"><para>3.1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5022" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ab46b922c269d8ef479eeffd6d5af59e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetIMEInteraction</definition>
        <argsstring>(int imeInteraction)</argsstring>
        <name>SetIMEInteraction</name>
        <qualifiedname>wxStyledTextCtrl::SetIMEInteraction</qualifiedname>
        <param>
          <type>int</type>
          <declname>imeInteraction</declname>
        </param>
        <briefdescription>
<para>Choose to display the IME in a winow or inline. </para>
        </briefdescription>
        <detaileddescription>
<para>The input should be one of the <ref refid="stc_8h_1abb7cdee2d731ed08bbf6de8c961ee950" kindref="member">wxSTC_IME_* </ref> constants. <simplesect kind="since"><para>3.1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5031" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a990c4a3f6948e5b64769bd068efab8a3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetCodePage</definition>
        <argsstring>() const</argsstring>
        <name>GetCodePage</name>
        <qualifiedname>wxStyledTextCtrl::GetCodePage</qualifiedname>
        <briefdescription>
<para>Get the code page used to interpret the bytes of the document as characters. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5036" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a289ba2116e82cacee2d4c5156caa560e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetLayoutCache</definition>
        <argsstring>(int cacheMode)</argsstring>
        <name>SetLayoutCache</name>
        <qualifiedname>wxStyledTextCtrl::SetLayoutCache</qualifiedname>
        <param>
          <type>int</type>
          <declname>cacheMode</declname>
        </param>
        <briefdescription>
<para>Sets the degree of caching of layout information. </para>
        </briefdescription>
        <detaileddescription>
<para>The input should be one of the <ref refid="stc_8h_1add34868590ac29cdda08938a3f326bef" kindref="member">wxSTC_CACHE_* </ref> constants. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5044" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ab94170cb2610390cd554b10f89d2c1e5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxStyledTextCtrl::GetTwoPhaseDraw</definition>
        <argsstring>() const</argsstring>
        <name>GetTwoPhaseDraw</name>
        <qualifiedname>wxStyledTextCtrl::GetTwoPhaseDraw</qualifiedname>
        <briefdescription>
<para>Is drawing done in two phases with backgrounds drawn before foregrounds? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5049" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a905908a4ba6cb09a938c42e8b1b58142" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetTwoPhaseDraw</definition>
        <argsstring>(bool twoPhase)</argsstring>
        <name>SetTwoPhaseDraw</name>
        <qualifiedname>wxStyledTextCtrl::SetTwoPhaseDraw</qualifiedname>
        <param>
          <type>bool</type>
          <declname>twoPhase</declname>
        </param>
        <briefdescription>
<para>In twoPhaseDraw mode, drawing is performed in two phases, first the background and then the foreground. </para>
        </briefdescription>
        <detaileddescription>
<para>This avoids chopping off characters that overlap the next run. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5055" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a7a32e42c0868fae4868b852c19dcc397" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetPhasesDraw</definition>
        <argsstring>() const</argsstring>
        <name>GetPhasesDraw</name>
        <qualifiedname>wxStyledTextCtrl::GetPhasesDraw</qualifiedname>
        <briefdescription>
<para>How many phases is drawing done in? </para>
        </briefdescription>
        <detaileddescription>
<para>The return value will be one of the <ref refid="stc_8h_1a4d1c4364e03e7de1e637c5019c5044fe" kindref="member">wxSTC_PHASES_* </ref> constants. <simplesect kind="since"><para>3.1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5064" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a102de2a8c1e972cc324fb9054b0b3121" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetPhasesDraw</definition>
        <argsstring>(int phases)</argsstring>
        <name>SetPhasesDraw</name>
        <qualifiedname>wxStyledTextCtrl::SetPhasesDraw</qualifiedname>
        <param>
          <type>int</type>
          <declname>phases</declname>
        </param>
        <briefdescription>
<para>In one phase draw, text is drawn in a series of rectangular blocks with no overlap. </para>
        </briefdescription>
        <detaileddescription>
<para>In two phase draw, text is drawn in a series of lines allowing runs to overlap horizontally. In multiple phase draw, each element is drawn over the whole drawing area, allowing text to overlap from one line to the next.</para>
<para>The input should be one of the <ref refid="stc_8h_1a4d1c4364e03e7de1e637c5019c5044fe" kindref="member">wxSTC_PHASES_* </ref> constants. <simplesect kind="since"><para>3.1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5076" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a5074462fc14fe2c6ad199c1f91144e23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetFontQuality</definition>
        <argsstring>(int fontQuality)</argsstring>
        <name>SetFontQuality</name>
        <qualifiedname>wxStyledTextCtrl::SetFontQuality</qualifiedname>
        <param>
          <type>int</type>
          <declname>fontQuality</declname>
        </param>
        <briefdescription>
<para>Choose the quality level for text. </para>
        </briefdescription>
        <detaileddescription>
<para>The input should be one of the <ref refid="stc_8h_1a22ee486334aeb6b3b9f83973738b22f3" kindref="member">wxSTC_EFF_QUALITY_* </ref> constants. <simplesect kind="remark"><para>This method only has any effect with the wxMSW port and when technology has been set to wxSTC_TECHNOLOGY_DIRECTWRITE. </para>
</simplesect>
<simplesect kind="since"><para>3.1.1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5088" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1af91e4bf0b10421433f1ae562b0df2c13" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetFontQuality</definition>
        <argsstring>() const</argsstring>
        <name>GetFontQuality</name>
        <qualifiedname>wxStyledTextCtrl::GetFontQuality</qualifiedname>
        <briefdescription>
<para>Retrieve the quality level for text. </para>
        </briefdescription>
        <detaileddescription>
<para>The return value will be one of the <ref refid="stc_8h_1a22ee486334aeb6b3b9f83973738b22f3" kindref="member">wxSTC_EFF_QUALITY_* </ref> constants. <simplesect kind="since"><para>3.1.1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5097" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a6b835a56a1a870fc46e3b8bc005bcc07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetSTCFocus</definition>
        <argsstring>(bool focus)</argsstring>
        <name>SetSTCFocus</name>
        <qualifiedname>wxStyledTextCtrl::SetSTCFocus</qualifiedname>
        <param>
          <type>bool</type>
          <declname>focus</declname>
        </param>
        <briefdescription>
<para>Change internal focus flag. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5102" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a1daa6796572d39774bae11dc392641f2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxStyledTextCtrl::GetSTCFocus</definition>
        <argsstring>() const</argsstring>
        <name>GetSTCFocus</name>
        <qualifiedname>wxStyledTextCtrl::GetSTCFocus</qualifiedname>
        <briefdescription>
<para>Get internal focus flag. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5107" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ada976c35b7d00207b6967825dda05358" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetTechnology</definition>
        <argsstring>(int technology)</argsstring>
        <name>SetTechnology</name>
        <qualifiedname>wxStyledTextCtrl::SetTechnology</qualifiedname>
        <param>
          <type>int</type>
          <declname>technology</declname>
        </param>
        <briefdescription>
<para>Set the technology used. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>For the wxMSW port, the input can be either wxSTC_TECHNOLOGY_DEFAULT or wxSTC_TECHNOLOGY_DIRECTWRITE. With other ports, this method has no effect. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5117" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ac05437a568314c4aeb6106ed2ec572dc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetTechnology</definition>
        <argsstring>() const</argsstring>
        <name>GetTechnology</name>
        <qualifiedname>wxStyledTextCtrl::GetTechnology</qualifiedname>
        <briefdescription>
<para>Get the tech. </para>
        </briefdescription>
        <detaileddescription>
<para>The return value will be one of the <ref refid="stc_8h_1aa24614a3faf3eb0bf3e9a29d259fb08f" kindref="member">wxSTC_TECHNOLOGY_* </ref> constants. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5125" column="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Brace highlighting</header>
      <description><para><anchor id="classwx_styled_text_ctrl_1BraceHighlighting"/> </para>
</description>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ab53b6a583c2abd1c6c506a987c52dc8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::BraceHighlight</definition>
        <argsstring>(int posA, int posB)</argsstring>
        <name>BraceHighlight</name>
        <qualifiedname>wxStyledTextCtrl::BraceHighlight</qualifiedname>
        <param>
          <type>int</type>
          <declname>posA</declname>
        </param>
        <param>
          <type>int</type>
          <declname>posB</declname>
        </param>
        <briefdescription>
<para>Highlight the characters at two positions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5137" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a7b686df5f891ec8959cd56b2a48f99d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::BraceHighlightIndicator</definition>
        <argsstring>(bool useSetting, int indicator)</argsstring>
        <name>BraceHighlightIndicator</name>
        <qualifiedname>wxStyledTextCtrl::BraceHighlightIndicator</qualifiedname>
        <param>
          <type>bool</type>
          <declname>useSetting</declname>
        </param>
        <param>
          <type>int</type>
          <declname>indicator</declname>
        </param>
        <briefdescription>
<para>Use specified indicator to highlight matching braces instead of changing their style. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5142" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1abe05b7096219a2224bad2225eed45263" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::BraceBadLight</definition>
        <argsstring>(int pos)</argsstring>
        <name>BraceBadLight</name>
        <qualifiedname>wxStyledTextCtrl::BraceBadLight</qualifiedname>
        <param>
          <type>int</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
<para>Highlight the character at a position indicating there is no matching brace. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5147" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ae36d3d19d73fd5ea921031c36074afae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::BraceBadLightIndicator</definition>
        <argsstring>(bool useSetting, int indicator)</argsstring>
        <name>BraceBadLightIndicator</name>
        <qualifiedname>wxStyledTextCtrl::BraceBadLightIndicator</qualifiedname>
        <param>
          <type>bool</type>
          <declname>useSetting</declname>
        </param>
        <param>
          <type>int</type>
          <declname>indicator</declname>
        </param>
        <briefdescription>
<para>Use specified indicator to highlight non matching brace instead of changing its style. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5152" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1afc9e6ae20efc1f41c5fec94113be2338" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::BraceMatch</definition>
        <argsstring>(int pos, int maxReStyle=0)</argsstring>
        <name>BraceMatch</name>
        <qualifiedname>wxStyledTextCtrl::BraceMatch</qualifiedname>
        <param>
          <type>int</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>int</type>
          <declname>maxReStyle</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Find the position of a matching brace or wxSTC_INVALID_POSITION if no match. </para>
        </briefdescription>
        <detaileddescription>
<para>The maxReStyle must be 0 for now. It may be defined in a future release. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5158" column="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Tabs and Indentation Guides</header>
      <description><para><anchor id="classwx_styled_text_ctrl_1TabsAndIndentationGuides"/> </para>
</description>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a3b762d0f295c136f78826335c871fabb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetTabWidth</definition>
        <argsstring>(int tabWidth)</argsstring>
        <name>SetTabWidth</name>
        <qualifiedname>wxStyledTextCtrl::SetTabWidth</qualifiedname>
        <param>
          <type>int</type>
          <declname>tabWidth</declname>
        </param>
        <briefdescription>
<para>Change the visible size of a tab to be a multiple of the width of a space character. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5170" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ac8bc9e802f79bc486a65f4e18847d375" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetTabWidth</definition>
        <argsstring>() const</argsstring>
        <name>GetTabWidth</name>
        <qualifiedname>wxStyledTextCtrl::GetTabWidth</qualifiedname>
        <briefdescription>
<para>Retrieve the visible size of a tab. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5175" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a2425d6520ea70d288af8355949223e67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::ClearTabStops</definition>
        <argsstring>(int line)</argsstring>
        <name>ClearTabStops</name>
        <qualifiedname>wxStyledTextCtrl::ClearTabStops</qualifiedname>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
<para>Clear explicit tabstops on a line. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>3.1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5182" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a47c95cfc227c228768f8732b95f21251" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::AddTabStop</definition>
        <argsstring>(int line, int x)</argsstring>
        <name>AddTabStop</name>
        <qualifiedname>wxStyledTextCtrl::AddTabStop</qualifiedname>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Add an explicit tab stop for a line. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>3.1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5189" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a2b3407d6f88c564bcd230801b92082f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetNextTabStop</definition>
        <argsstring>(int line, int x)</argsstring>
        <name>GetNextTabStop</name>
        <qualifiedname>wxStyledTextCtrl::GetNextTabStop</qualifiedname>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Find the next explicit tab stop position on a line after a position. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>3.1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5196" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ab0a658b03734d81d23d4654b35e88785" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetIndent</definition>
        <argsstring>(int indentSize)</argsstring>
        <name>SetIndent</name>
        <qualifiedname>wxStyledTextCtrl::SetIndent</qualifiedname>
        <param>
          <type>int</type>
          <declname>indentSize</declname>
        </param>
        <briefdescription>
<para>Set the number of spaces used for one level of indentation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5201" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a93bd054ef1b6b1298fc50466756dcbd1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetIndent</definition>
        <argsstring>() const</argsstring>
        <name>GetIndent</name>
        <qualifiedname>wxStyledTextCtrl::GetIndent</qualifiedname>
        <briefdescription>
<para>Retrieve indentation size. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5206" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a0ed22fd1d4945a917156b4b53d8829b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetUseTabs</definition>
        <argsstring>(bool useTabs)</argsstring>
        <name>SetUseTabs</name>
        <qualifiedname>wxStyledTextCtrl::SetUseTabs</qualifiedname>
        <param>
          <type>bool</type>
          <declname>useTabs</declname>
        </param>
        <briefdescription>
<para>Indentation will only use space characters if useTabs is false, otherwise it will use a combination of tabs and spaces. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5212" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a2e7dd7e8cccc41e90edfed00be1ee578" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxStyledTextCtrl::GetUseTabs</definition>
        <argsstring>() const</argsstring>
        <name>GetUseTabs</name>
        <qualifiedname>wxStyledTextCtrl::GetUseTabs</qualifiedname>
        <briefdescription>
<para>Retrieve whether tabs will be used in indentation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5217" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1aa4a5ff4a0663dfd24ef5b9d7f2e4ec8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetLineIndentation</definition>
        <argsstring>(int line, int indentation)</argsstring>
        <name>SetLineIndentation</name>
        <qualifiedname>wxStyledTextCtrl::SetLineIndentation</qualifiedname>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <param>
          <type>int</type>
          <declname>indentation</declname>
        </param>
        <briefdescription>
<para>Change the indentation of a line to a number of columns. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5222" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a2c784b3372538e6e532ee011ba706ae0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetLineIndentation</definition>
        <argsstring>(int line) const</argsstring>
        <name>GetLineIndentation</name>
        <qualifiedname>wxStyledTextCtrl::GetLineIndentation</qualifiedname>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
<para>Retrieve the number of columns that a line is indented. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5227" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a6b7acdda75ce75443f58cd2c03171460" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetLineIndentPosition</definition>
        <argsstring>(int line) const</argsstring>
        <name>GetLineIndentPosition</name>
        <qualifiedname>wxStyledTextCtrl::GetLineIndentPosition</qualifiedname>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
<para>Retrieve the position before the first non indentation character on a line. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5232" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ac4ed86f4730dcbcd2a8272f33f74778b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetIndentationGuides</definition>
        <argsstring>(int indentView)</argsstring>
        <name>SetIndentationGuides</name>
        <qualifiedname>wxStyledTextCtrl::SetIndentationGuides</qualifiedname>
        <param>
          <type>int</type>
          <declname>indentView</declname>
        </param>
        <briefdescription>
<para>Show or hide indentation guides. </para>
        </briefdescription>
        <detaileddescription>
<para>The input should be one of the <ref refid="stc_8h_1ac109057c8f2e422ac12861683c13984c" kindref="member">wxSTC_IV_* </ref> constants. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5240" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1aa82401ddb97cf1a478899074572e4e3c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetIndentationGuides</definition>
        <argsstring>() const</argsstring>
        <name>GetIndentationGuides</name>
        <qualifiedname>wxStyledTextCtrl::GetIndentationGuides</qualifiedname>
        <briefdescription>
<para>Are the indentation guides visible? </para>
        </briefdescription>
        <detaileddescription>
<para>The return value will be one of the <ref refid="stc_8h_1ac109057c8f2e422ac12861683c13984c" kindref="member">wxSTC_IV_* </ref> constants. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5248" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ab7a2411d02d4fb900f7847f81a0bf9cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetHighlightGuide</definition>
        <argsstring>(int column)</argsstring>
        <name>SetHighlightGuide</name>
        <qualifiedname>wxStyledTextCtrl::SetHighlightGuide</qualifiedname>
        <param>
          <type>int</type>
          <declname>column</declname>
        </param>
        <briefdescription>
<para>Set the highlighted indentation guide column. </para>
        </briefdescription>
        <detaileddescription>
<para>0 = no highlighted guide. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5254" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a5e87fe8b4eb4084b2dd70c4fed04c56b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetHighlightGuide</definition>
        <argsstring>() const</argsstring>
        <name>GetHighlightGuide</name>
        <qualifiedname>wxStyledTextCtrl::GetHighlightGuide</qualifiedname>
        <briefdescription>
<para>Get the highlighted indentation guide column. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5259" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a7180670a48c8e3512a7b81fbfe4534c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetTabIndents</definition>
        <argsstring>(bool tabIndents)</argsstring>
        <name>SetTabIndents</name>
        <qualifiedname>wxStyledTextCtrl::SetTabIndents</qualifiedname>
        <param>
          <type>bool</type>
          <declname>tabIndents</declname>
        </param>
        <briefdescription>
<para>Sets whether a tab pressed when caret is within indentation indents. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5264" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a8b6b15d2550b7a10d988fecd89f0e50b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxStyledTextCtrl::GetTabIndents</definition>
        <argsstring>() const</argsstring>
        <name>GetTabIndents</name>
        <qualifiedname>wxStyledTextCtrl::GetTabIndents</qualifiedname>
        <briefdescription>
<para>Does a tab pressed when caret is within indentation indent? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5269" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1acb9871f499cc49f222199ce17858be78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetBackSpaceUnIndents</definition>
        <argsstring>(bool bsUnIndents)</argsstring>
        <name>SetBackSpaceUnIndents</name>
        <qualifiedname>wxStyledTextCtrl::SetBackSpaceUnIndents</qualifiedname>
        <param>
          <type>bool</type>
          <declname>bsUnIndents</declname>
        </param>
        <briefdescription>
<para>Sets whether a backspace pressed when caret is within indentation unindents. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5274" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a51477171fd688ab05bf2ab8e46bc6975" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxStyledTextCtrl::GetBackSpaceUnIndents</definition>
        <argsstring>() const</argsstring>
        <name>GetBackSpaceUnIndents</name>
        <qualifiedname>wxStyledTextCtrl::GetBackSpaceUnIndents</qualifiedname>
        <briefdescription>
<para>Does a backspace pressed when caret is within indentation unindent? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5279" column="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Markers</header>
      <description><para><anchor id="classwx_styled_text_ctrl_1Markers"/></para>
<para><simplesect kind="see"><para><ref refid="classwx_styled_text_ctrl_1adeefe5392b7394fb98ebf0291385c76a" kindref="member">MarkerDefineBitmap</ref> </para>
</simplesect>
</para>
</description>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a679def8173ab4be57bd6b108a5b3bc4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::MarkerLineFromHandle</definition>
        <argsstring>(int markerHandle)</argsstring>
        <name>MarkerLineFromHandle</name>
        <qualifiedname>wxStyledTextCtrl::MarkerLineFromHandle</qualifiedname>
        <param>
          <type>int</type>
          <declname>markerHandle</declname>
        </param>
        <briefdescription>
<para>Retrieve the line number at which a particular marker is located. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5293" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a80b4fd17bec7bcf6bd69a356b451b270" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::MarkerDeleteHandle</definition>
        <argsstring>(int markerHandle)</argsstring>
        <name>MarkerDeleteHandle</name>
        <qualifiedname>wxStyledTextCtrl::MarkerDeleteHandle</qualifiedname>
        <param>
          <type>int</type>
          <declname>markerHandle</declname>
        </param>
        <briefdescription>
<para>Delete a marker. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5298" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1af4aff2744a8d3fc28f8f6f126e6da49b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::MarkerDefine</definition>
        <argsstring>(int markerNumber, int markerSymbol, const wxColour &amp;foreground=wxNullColour, const wxColour &amp;background=wxNullColour)</argsstring>
        <name>MarkerDefine</name>
        <qualifiedname>wxStyledTextCtrl::MarkerDefine</qualifiedname>
        <param>
          <type>int</type>
          <declname>markerNumber</declname>
        </param>
        <param>
          <type>int</type>
          <declname>markerSymbol</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_colour" kindref="compound">wxColour</ref> &amp;</type>
          <declname>foreground</declname>
          <defval><ref refid="colour_8h_1a882fc9395ce82080f0c2c91ca04731d6" kindref="member">wxNullColour</ref></defval>
        </param>
        <param>
          <type>const <ref refid="classwx_colour" kindref="compound">wxColour</ref> &amp;</type>
          <declname>background</declname>
          <defval><ref refid="colour_8h_1a882fc9395ce82080f0c2c91ca04731d6" kindref="member">wxNullColour</ref></defval>
        </param>
        <briefdescription>
<para>Set the symbol used for a particular marker number, and optionally the fore and background colours. </para>
        </briefdescription>
        <detaileddescription>
<para>The second argument should be one of the <ref refid="stc_8h_1ae6097990ee7704efec47e7995d8f9fc1" kindref="member">wxSTC_MARK_* </ref> constants. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5307" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a7b038202798c153f2ba6c454dfa9f92b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::MarkerSetForeground</definition>
        <argsstring>(int markerNumber, const wxColour &amp;fore)</argsstring>
        <name>MarkerSetForeground</name>
        <qualifiedname>wxStyledTextCtrl::MarkerSetForeground</qualifiedname>
        <param>
          <type>int</type>
          <declname>markerNumber</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_colour" kindref="compound">wxColour</ref> &amp;</type>
          <declname>fore</declname>
        </param>
        <briefdescription>
<para>Set the foreground colour used for a particular marker number. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5314" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ad11e02f4a07cdbd45c3627a0ce8fa5e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::MarkerSetBackground</definition>
        <argsstring>(int markerNumber, const wxColour &amp;back)</argsstring>
        <name>MarkerSetBackground</name>
        <qualifiedname>wxStyledTextCtrl::MarkerSetBackground</qualifiedname>
        <param>
          <type>int</type>
          <declname>markerNumber</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_colour" kindref="compound">wxColour</ref> &amp;</type>
          <declname>back</declname>
        </param>
        <briefdescription>
<para>Set the background colour used for a particular marker number. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5319" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a482ffb91166637376590f3f6a6c63b2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::MarkerSetBackgroundSelected</definition>
        <argsstring>(int markerNumber, const wxColour &amp;back)</argsstring>
        <name>MarkerSetBackgroundSelected</name>
        <qualifiedname>wxStyledTextCtrl::MarkerSetBackgroundSelected</qualifiedname>
        <param>
          <type>int</type>
          <declname>markerNumber</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_colour" kindref="compound">wxColour</ref> &amp;</type>
          <declname>back</declname>
        </param>
        <briefdescription>
<para>Set the background colour used for a particular marker number when its folding block is selected. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5324" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1aba8bda36ef191f934608aa4a4280ee44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::MarkerEnableHighlight</definition>
        <argsstring>(bool enabled)</argsstring>
        <name>MarkerEnableHighlight</name>
        <qualifiedname>wxStyledTextCtrl::MarkerEnableHighlight</qualifiedname>
        <param>
          <type>bool</type>
          <declname>enabled</declname>
        </param>
        <briefdescription>
<para>Enable/disable highlight for current folding block (smallest one that contains the caret) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5329" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a2bce811d7d23416b4aed7068f55f48a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::MarkerAdd</definition>
        <argsstring>(int line, int markerNumber)</argsstring>
        <name>MarkerAdd</name>
        <qualifiedname>wxStyledTextCtrl::MarkerAdd</qualifiedname>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <param>
          <type>int</type>
          <declname>markerNumber</declname>
        </param>
        <briefdescription>
<para>Add a marker to a line, returning an ID which can be used to find or delete the marker. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5334" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1aea89da40e6dfdaa26a9a74a1067f651f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::MarkerDelete</definition>
        <argsstring>(int line, int markerNumber)</argsstring>
        <name>MarkerDelete</name>
        <qualifiedname>wxStyledTextCtrl::MarkerDelete</qualifiedname>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <param>
          <type>int</type>
          <declname>markerNumber</declname>
        </param>
        <briefdescription>
<para>Delete a marker from a line. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5339" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a59e91381c363f396bd0c26ef9574515d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::MarkerDeleteAll</definition>
        <argsstring>(int markerNumber)</argsstring>
        <name>MarkerDeleteAll</name>
        <qualifiedname>wxStyledTextCtrl::MarkerDeleteAll</qualifiedname>
        <param>
          <type>int</type>
          <declname>markerNumber</declname>
        </param>
        <briefdescription>
<para>Delete all markers with a particular number from all lines. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5344" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a681d408ab69cd6e63204b8359bb44605" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::MarkerGet</definition>
        <argsstring>(int line)</argsstring>
        <name>MarkerGet</name>
        <qualifiedname>wxStyledTextCtrl::MarkerGet</qualifiedname>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
<para>Get a bit mask of all the markers set on a line. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5349" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ad2fed626190435a772aa5b00f725d2ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::MarkerNext</definition>
        <argsstring>(int lineStart, int markerMask)</argsstring>
        <name>MarkerNext</name>
        <qualifiedname>wxStyledTextCtrl::MarkerNext</qualifiedname>
        <param>
          <type>int</type>
          <declname>lineStart</declname>
        </param>
        <param>
          <type>int</type>
          <declname>markerMask</declname>
        </param>
        <briefdescription>
<para>Find the next line at or after lineStart that includes a marker in mask. </para>
        </briefdescription>
        <detaileddescription>
<para>Return -1 when no more lines. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5355" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a5dba6328004c17faaecacc2647ac043d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::MarkerPrevious</definition>
        <argsstring>(int lineStart, int markerMask)</argsstring>
        <name>MarkerPrevious</name>
        <qualifiedname>wxStyledTextCtrl::MarkerPrevious</qualifiedname>
        <param>
          <type>int</type>
          <declname>lineStart</declname>
        </param>
        <param>
          <type>int</type>
          <declname>markerMask</declname>
        </param>
        <briefdescription>
<para>Find the previous line before lineStart that includes a marker in mask. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5360" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1aa4f6c087aeaaff7b4e838b1f9b580a28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::MarkerDefinePixmap</definition>
        <argsstring>(int markerNumber, const char *const *xpmData)</argsstring>
        <name>MarkerDefinePixmap</name>
        <qualifiedname>wxStyledTextCtrl::MarkerDefinePixmap</qualifiedname>
        <param>
          <type>int</type>
          <declname>markerNumber</declname>
        </param>
        <param>
          <type>const char *const *</type>
          <declname>xpmData</declname>
        </param>
        <briefdescription>
<para>Define a marker from a bitmap. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>3.1.3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5367" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a540695f8e117aa2f9da6b880d5439dbb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::MarkerAddSet</definition>
        <argsstring>(int line, int markerSet)</argsstring>
        <name>MarkerAddSet</name>
        <qualifiedname>wxStyledTextCtrl::MarkerAddSet</qualifiedname>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <param>
          <type>int</type>
          <declname>markerSet</declname>
        </param>
        <briefdescription>
<para>Add a set of markers to a line. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5372" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ae3d48bdff0d995bfbf35ea29cff7b5bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::MarkerSetAlpha</definition>
        <argsstring>(int markerNumber, int alpha)</argsstring>
        <name>MarkerSetAlpha</name>
        <qualifiedname>wxStyledTextCtrl::MarkerSetAlpha</qualifiedname>
        <param>
          <type>int</type>
          <declname>markerNumber</declname>
        </param>
        <param>
          <type>int</type>
          <declname>alpha</declname>
        </param>
        <briefdescription>
<para>Set the alpha used for a marker that is drawn in the text area, not the margin. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5377" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a835511306369b74750c9421e7717a84d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetMarkerSymbolDefined</definition>
        <argsstring>(int markerNumber)</argsstring>
        <name>GetMarkerSymbolDefined</name>
        <qualifiedname>wxStyledTextCtrl::GetMarkerSymbolDefined</qualifiedname>
        <param>
          <type>int</type>
          <declname>markerNumber</declname>
        </param>
        <briefdescription>
<para>Which symbol was defined for markerNumber with MarkerDefine. </para>
        </briefdescription>
        <detaileddescription>
<para>The return value will be one of the <ref refid="stc_8h_1ae6097990ee7704efec47e7995d8f9fc1" kindref="member">wxSTC_MARK_* </ref> constants. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5385" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a7b42aabe1e22822e47a1c5734948f8c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::RGBAImageSetWidth</definition>
        <argsstring>(int width)</argsstring>
        <name>RGBAImageSetWidth</name>
        <qualifiedname>wxStyledTextCtrl::RGBAImageSetWidth</qualifiedname>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <briefdescription>
<para>Set the width for future RGBA image data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5390" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1aa24589388ac05d2306498cbe11ae60ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::RGBAImageSetHeight</definition>
        <argsstring>(int height)</argsstring>
        <name>RGBAImageSetHeight</name>
        <qualifiedname>wxStyledTextCtrl::RGBAImageSetHeight</qualifiedname>
        <param>
          <type>int</type>
          <declname>height</declname>
        </param>
        <briefdescription>
<para>Set the height for future RGBA image data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5395" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a854360c82bc680c4247e97f460a39826" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::RGBAImageSetScale</definition>
        <argsstring>(int scalePercent)</argsstring>
        <name>RGBAImageSetScale</name>
        <qualifiedname>wxStyledTextCtrl::RGBAImageSetScale</qualifiedname>
        <param>
          <type>int</type>
          <declname>scalePercent</declname>
        </param>
        <briefdescription>
<para>Set the scale factor in percent for future RGBA image data. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>3.1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5402" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a7549a152211af4fba9ec09627bf64c2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::MarkerDefineRGBAImage</definition>
        <argsstring>(int markerNumber, const unsigned char *pixels)</argsstring>
        <name>MarkerDefineRGBAImage</name>
        <qualifiedname>wxStyledTextCtrl::MarkerDefineRGBAImage</qualifiedname>
        <param>
          <type>int</type>
          <declname>markerNumber</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>pixels</declname>
        </param>
        <briefdescription>
<para>Define a marker from RGBA data. </para>
        </briefdescription>
        <detaileddescription>
<para>It has the width and height from RGBAImageSetWidth/Height </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5408" column="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Indicators</header>
      <description><para><anchor id="classwx_styled_text_ctrl_1Indicators"/> </para>
</description>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a86cb0dc3ac8d5318b5393c843827d90a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::IndicatorSetStyle</definition>
        <argsstring>(int indicator, int indicatorStyle)</argsstring>
        <name>IndicatorSetStyle</name>
        <qualifiedname>wxStyledTextCtrl::IndicatorSetStyle</qualifiedname>
        <param>
          <type>int</type>
          <declname>indicator</declname>
        </param>
        <param>
          <type>int</type>
          <declname>indicatorStyle</declname>
        </param>
        <briefdescription>
<para>Set an indicator to plain, squiggle or TT. </para>
        </briefdescription>
        <detaileddescription>
<para>The second argument should be one of the <ref refid="stc_8h_1a56450707ee11070b135a1f6542e57475" kindref="member">wxSTC_INDIC_* </ref> constants. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5423" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1affabc61aefde258dd405cf8c6ea6f0b3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::IndicatorGetStyle</definition>
        <argsstring>(int indicator) const</argsstring>
        <name>IndicatorGetStyle</name>
        <qualifiedname>wxStyledTextCtrl::IndicatorGetStyle</qualifiedname>
        <param>
          <type>int</type>
          <declname>indicator</declname>
        </param>
        <briefdescription>
<para>Retrieve the style of an indicator. </para>
        </briefdescription>
        <detaileddescription>
<para>The return value will be one of the <ref refid="stc_8h_1a56450707ee11070b135a1f6542e57475" kindref="member">wxSTC_INDIC_* </ref> constants. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5431" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1acafa578ba7bc93fec23ca4b275cfd9d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::IndicatorSetForeground</definition>
        <argsstring>(int indicator, const wxColour &amp;fore)</argsstring>
        <name>IndicatorSetForeground</name>
        <qualifiedname>wxStyledTextCtrl::IndicatorSetForeground</qualifiedname>
        <param>
          <type>int</type>
          <declname>indicator</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_colour" kindref="compound">wxColour</ref> &amp;</type>
          <declname>fore</declname>
        </param>
        <briefdescription>
<para>Set the foreground colour of an indicator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5436" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1aba482f03fb8cf1953b443fe754ff0ef0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_colour" kindref="compound">wxColour</ref></type>
        <definition>wxColour wxStyledTextCtrl::IndicatorGetForeground</definition>
        <argsstring>(int indicator) const</argsstring>
        <name>IndicatorGetForeground</name>
        <qualifiedname>wxStyledTextCtrl::IndicatorGetForeground</qualifiedname>
        <param>
          <type>int</type>
          <declname>indicator</declname>
        </param>
        <briefdescription>
<para>Retrieve the foreground colour of an indicator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5441" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a9d0e550d1c55d51e6f7c2e0918b63a65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::IndicatorSetUnder</definition>
        <argsstring>(int indicator, bool under)</argsstring>
        <name>IndicatorSetUnder</name>
        <qualifiedname>wxStyledTextCtrl::IndicatorSetUnder</qualifiedname>
        <param>
          <type>int</type>
          <declname>indicator</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>under</declname>
        </param>
        <briefdescription>
<para>Set an indicator to draw under text or over(default). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5446" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a5a87775d670b4dbb5f9d7a3eaf0b10e9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxStyledTextCtrl::IndicatorGetUnder</definition>
        <argsstring>(int indicator) const</argsstring>
        <name>IndicatorGetUnder</name>
        <qualifiedname>wxStyledTextCtrl::IndicatorGetUnder</qualifiedname>
        <param>
          <type>int</type>
          <declname>indicator</declname>
        </param>
        <briefdescription>
<para>Retrieve whether indicator drawn under or over text. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5451" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a88ffec2de149ff6378f0a08633450a07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::IndicatorSetHoverStyle</definition>
        <argsstring>(int indicator, int indicatorStyle)</argsstring>
        <name>IndicatorSetHoverStyle</name>
        <qualifiedname>wxStyledTextCtrl::IndicatorSetHoverStyle</qualifiedname>
        <param>
          <type>int</type>
          <declname>indicator</declname>
        </param>
        <param>
          <type>int</type>
          <declname>indicatorStyle</declname>
        </param>
        <briefdescription>
<para>Set a hover indicator to plain, squiggle or TT. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>3.1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5458" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1abe6cab783491ec28f03f8feab4c8317c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::IndicatorGetHoverStyle</definition>
        <argsstring>(int indicator) const</argsstring>
        <name>IndicatorGetHoverStyle</name>
        <qualifiedname>wxStyledTextCtrl::IndicatorGetHoverStyle</qualifiedname>
        <param>
          <type>int</type>
          <declname>indicator</declname>
        </param>
        <briefdescription>
<para>Retrieve the hover style of an indicator. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>3.1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5465" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ad545109f5bf5e0201a35c0f998a6c57f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::IndicatorSetHoverForeground</definition>
        <argsstring>(int indicator, const wxColour &amp;fore)</argsstring>
        <name>IndicatorSetHoverForeground</name>
        <qualifiedname>wxStyledTextCtrl::IndicatorSetHoverForeground</qualifiedname>
        <param>
          <type>int</type>
          <declname>indicator</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_colour" kindref="compound">wxColour</ref> &amp;</type>
          <declname>fore</declname>
        </param>
        <briefdescription>
<para>Set the foreground hover colour of an indicator. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>3.1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5472" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ac2d50a694b7215cc911b622b20e1b24f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_colour" kindref="compound">wxColour</ref></type>
        <definition>wxColour wxStyledTextCtrl::IndicatorGetHoverForeground</definition>
        <argsstring>(int indicator) const</argsstring>
        <name>IndicatorGetHoverForeground</name>
        <qualifiedname>wxStyledTextCtrl::IndicatorGetHoverForeground</qualifiedname>
        <param>
          <type>int</type>
          <declname>indicator</declname>
        </param>
        <briefdescription>
<para>Retrieve the foreground hover colour of an indicator. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>3.1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5479" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a19fd00deeae35cf9173bb2c9b9568805" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::IndicatorSetFlags</definition>
        <argsstring>(int indicator, int flags)</argsstring>
        <name>IndicatorSetFlags</name>
        <qualifiedname>wxStyledTextCtrl::IndicatorSetFlags</qualifiedname>
        <param>
          <type>int</type>
          <declname>indicator</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Set the attributes of an indicator. </para>
        </briefdescription>
        <detaileddescription>
<para>The second argument should be a bit list containing one or more of the <ref refid="stc_8h_1ad9149bcea260c124a59aacca1723f495" kindref="member">wxSTC_INDICFLAG_* </ref> constants. <simplesect kind="since"><para>3.1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5488" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1aee413fec79dc04d07ce70429f7004723" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::IndicatorGetFlags</definition>
        <argsstring>(int indicator) const</argsstring>
        <name>IndicatorGetFlags</name>
        <qualifiedname>wxStyledTextCtrl::IndicatorGetFlags</qualifiedname>
        <param>
          <type>int</type>
          <declname>indicator</declname>
        </param>
        <briefdescription>
<para>Retrieve the attributes of an indicator. </para>
        </briefdescription>
        <detaileddescription>
<para>The return value will be a bit list containing one or more of the <ref refid="stc_8h_1ad9149bcea260c124a59aacca1723f495" kindref="member">wxSTC_INDICFLAG_* </ref> constants. <simplesect kind="since"><para>3.1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5497" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a38f449ba47f9852c05b81721608dc2f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetIndicatorCurrent</definition>
        <argsstring>(int indicator)</argsstring>
        <name>SetIndicatorCurrent</name>
        <qualifiedname>wxStyledTextCtrl::SetIndicatorCurrent</qualifiedname>
        <param>
          <type>int</type>
          <declname>indicator</declname>
        </param>
        <briefdescription>
<para>Set the indicator used for IndicatorFillRange and IndicatorClearRange. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5502" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a78603770934e6f40b2fe90a72f92e408" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetIndicatorCurrent</definition>
        <argsstring>() const</argsstring>
        <name>GetIndicatorCurrent</name>
        <qualifiedname>wxStyledTextCtrl::GetIndicatorCurrent</qualifiedname>
        <briefdescription>
<para>Get the current indicator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5507" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a9d05b5d7a042e34a952a407ea86848c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetIndicatorValue</definition>
        <argsstring>(int value)</argsstring>
        <name>SetIndicatorValue</name>
        <qualifiedname>wxStyledTextCtrl::SetIndicatorValue</qualifiedname>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the value used for IndicatorFillRange. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5512" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1acfed3ff1980aa23d29544cdf25811f20" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetIndicatorValue</definition>
        <argsstring>() const</argsstring>
        <name>GetIndicatorValue</name>
        <qualifiedname>wxStyledTextCtrl::GetIndicatorValue</qualifiedname>
        <briefdescription>
<para>Get the current indicator value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5517" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a4366ead8891a895f14f389f9b87a8152" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::IndicatorFillRange</definition>
        <argsstring>(int start, int lengthFill)</argsstring>
        <name>IndicatorFillRange</name>
        <qualifiedname>wxStyledTextCtrl::IndicatorFillRange</qualifiedname>
        <param>
          <type>int</type>
          <declname>start</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lengthFill</declname>
        </param>
        <briefdescription>
<para>Turn an indicator on over a range. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5522" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a8dd3ca90a383d05bbdbcdc488ed94e80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::IndicatorClearRange</definition>
        <argsstring>(int start, int lengthClear)</argsstring>
        <name>IndicatorClearRange</name>
        <qualifiedname>wxStyledTextCtrl::IndicatorClearRange</qualifiedname>
        <param>
          <type>int</type>
          <declname>start</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lengthClear</declname>
        </param>
        <briefdescription>
<para>Turn an indicator off over a range. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5527" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1af356b43acd66de6bbba4606763bca987" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::IndicatorAllOnFor</definition>
        <argsstring>(int pos)</argsstring>
        <name>IndicatorAllOnFor</name>
        <qualifiedname>wxStyledTextCtrl::IndicatorAllOnFor</qualifiedname>
        <param>
          <type>int</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
<para>Are any indicators present at pos? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5532" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a0ce16f764d524249e9ad5d2367a0d7d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::IndicatorValueAt</definition>
        <argsstring>(int indicator, int pos)</argsstring>
        <name>IndicatorValueAt</name>
        <qualifiedname>wxStyledTextCtrl::IndicatorValueAt</qualifiedname>
        <param>
          <type>int</type>
          <declname>indicator</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
<para>What value does a particular indicator have at a position? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5537" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a8b0f1668bfa011f196ff83030d9552f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::IndicatorStart</definition>
        <argsstring>(int indicator, int pos)</argsstring>
        <name>IndicatorStart</name>
        <qualifiedname>wxStyledTextCtrl::IndicatorStart</qualifiedname>
        <param>
          <type>int</type>
          <declname>indicator</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
<para>Where does a particular indicator start? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5542" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a7ed1ce1926f45bc345efba834ef2ddbb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::IndicatorEnd</definition>
        <argsstring>(int indicator, int pos)</argsstring>
        <name>IndicatorEnd</name>
        <qualifiedname>wxStyledTextCtrl::IndicatorEnd</qualifiedname>
        <param>
          <type>int</type>
          <declname>indicator</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
<para>Where does a particular indicator end? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5547" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1aa5a90e1fec271eb4a6be5da6739d7d48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::IndicatorSetAlpha</definition>
        <argsstring>(int indicator, int alpha)</argsstring>
        <name>IndicatorSetAlpha</name>
        <qualifiedname>wxStyledTextCtrl::IndicatorSetAlpha</qualifiedname>
        <param>
          <type>int</type>
          <declname>indicator</declname>
        </param>
        <param>
          <type>int</type>
          <declname>alpha</declname>
        </param>
        <briefdescription>
<para>Set the alpha fill colour of the given indicator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5552" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ad2c55f753689cb4b16e22311b6cb4ec0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::IndicatorGetAlpha</definition>
        <argsstring>(int indicator) const</argsstring>
        <name>IndicatorGetAlpha</name>
        <qualifiedname>wxStyledTextCtrl::IndicatorGetAlpha</qualifiedname>
        <param>
          <type>int</type>
          <declname>indicator</declname>
        </param>
        <briefdescription>
<para>Get the alpha fill colour of the given indicator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5557" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ae6d824e3107b182d360a8e4ce89e9c24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::IndicatorSetOutlineAlpha</definition>
        <argsstring>(int indicator, int alpha)</argsstring>
        <name>IndicatorSetOutlineAlpha</name>
        <qualifiedname>wxStyledTextCtrl::IndicatorSetOutlineAlpha</qualifiedname>
        <param>
          <type>int</type>
          <declname>indicator</declname>
        </param>
        <param>
          <type>int</type>
          <declname>alpha</declname>
        </param>
        <briefdescription>
<para>Set the alpha outline colour of the given indicator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5562" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a65a4a93b088d6a653c388e99f9305fcb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::IndicatorGetOutlineAlpha</definition>
        <argsstring>(int indicator) const</argsstring>
        <name>IndicatorGetOutlineAlpha</name>
        <qualifiedname>wxStyledTextCtrl::IndicatorGetOutlineAlpha</qualifiedname>
        <param>
          <type>int</type>
          <declname>indicator</declname>
        </param>
        <briefdescription>
<para>Get the alpha outline colour of the given indicator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5567" column="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Autocompletion</header>
      <description><para><anchor id="classwx_styled_text_ctrl_1Autocompletion"/></para>
<para><simplesect kind="see"><para><ref refid="classwx_styled_text_ctrl_1a002a95831ec96515101922756d4d99e0" kindref="member">RegisterImage(int, const wxBitmap&amp;)</ref> </para>
</simplesect>
</para>
</description>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1aa4456a1fe3726f63c7a8227f6875b386" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::AutoCompShow</definition>
        <argsstring>(int lengthEntered, const wxString &amp;itemList)</argsstring>
        <name>AutoCompShow</name>
        <qualifiedname>wxStyledTextCtrl::AutoCompShow</qualifiedname>
        <param>
          <type>int</type>
          <declname>lengthEntered</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>itemList</declname>
        </param>
        <briefdescription>
<para>Display an auto-completion list. </para>
        </briefdescription>
        <detaileddescription>
<para>The lengthEntered parameter indicates how many characters before the caret should be used to provide context. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5583" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a67a96291c515f843bdb50ff2befbe04e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::AutoCompCancel</definition>
        <argsstring>()</argsstring>
        <name>AutoCompCancel</name>
        <qualifiedname>wxStyledTextCtrl::AutoCompCancel</qualifiedname>
        <briefdescription>
<para>Remove the auto-completion list from the screen. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5588" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a0f42da320f51676cefb9c96a50076a3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxStyledTextCtrl::AutoCompActive</definition>
        <argsstring>()</argsstring>
        <name>AutoCompActive</name>
        <qualifiedname>wxStyledTextCtrl::AutoCompActive</qualifiedname>
        <briefdescription>
<para>Is there an auto-completion list visible? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5593" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ab26825a33c6bc6a7c301a8406c5c6f0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::AutoCompPosStart</definition>
        <argsstring>()</argsstring>
        <name>AutoCompPosStart</name>
        <qualifiedname>wxStyledTextCtrl::AutoCompPosStart</qualifiedname>
        <briefdescription>
<para>Retrieve the position of the caret when the auto-completion list was displayed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5598" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ae73acee3f1f2e5009574a4d58dc30899" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::AutoCompComplete</definition>
        <argsstring>()</argsstring>
        <name>AutoCompComplete</name>
        <qualifiedname>wxStyledTextCtrl::AutoCompComplete</qualifiedname>
        <briefdescription>
<para>User has selected an item so remove the list and insert the selection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5603" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a521ecbc5dd6a7d3127b48b52ea4abd76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::AutoCompStops</definition>
        <argsstring>(const wxString &amp;characterSet)</argsstring>
        <name>AutoCompStops</name>
        <qualifiedname>wxStyledTextCtrl::AutoCompStops</qualifiedname>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>characterSet</declname>
        </param>
        <briefdescription>
<para>Define a set of character that when typed cancel the auto-completion list. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5608" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a82e788eb1f8ddfaf57250e6a08f952c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::AutoCompSetSeparator</definition>
        <argsstring>(int separatorCharacter)</argsstring>
        <name>AutoCompSetSeparator</name>
        <qualifiedname>wxStyledTextCtrl::AutoCompSetSeparator</qualifiedname>
        <param>
          <type>int</type>
          <declname>separatorCharacter</declname>
        </param>
        <briefdescription>
<para>Change the separator character in the string setting up an auto-completion list. </para>
        </briefdescription>
        <detaileddescription>
<para>Default is space but can be changed if items contain space. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5614" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a9696d73befa0ee5d6fadc73f3064ba29" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::AutoCompGetSeparator</definition>
        <argsstring>() const</argsstring>
        <name>AutoCompGetSeparator</name>
        <qualifiedname>wxStyledTextCtrl::AutoCompGetSeparator</qualifiedname>
        <briefdescription>
<para>Retrieve the auto-completion list separator character. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5619" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1afd112f42500f9a6c8a68033393573342" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::AutoCompSelect</definition>
        <argsstring>(const wxString &amp;select)</argsstring>
        <name>AutoCompSelect</name>
        <qualifiedname>wxStyledTextCtrl::AutoCompSelect</qualifiedname>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>select</declname>
        </param>
        <briefdescription>
<para>Select the item in the auto-completion list that starts with a string. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5624" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a1296efd068f325b21941c9cad968edd5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::AutoCompSetCancelAtStart</definition>
        <argsstring>(bool cancel)</argsstring>
        <name>AutoCompSetCancelAtStart</name>
        <qualifiedname>wxStyledTextCtrl::AutoCompSetCancelAtStart</qualifiedname>
        <param>
          <type>bool</type>
          <declname>cancel</declname>
        </param>
        <briefdescription>
<para>Should the auto-completion list be cancelled if the user backspaces to a position before where the box was created. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5630" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ade2847f7e21ef063a2dd01beaeb1295d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxStyledTextCtrl::AutoCompGetCancelAtStart</definition>
        <argsstring>() const</argsstring>
        <name>AutoCompGetCancelAtStart</name>
        <qualifiedname>wxStyledTextCtrl::AutoCompGetCancelAtStart</qualifiedname>
        <briefdescription>
<para>Retrieve whether auto-completion cancelled by backspacing before start. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5635" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a17a74347096943bda00e5e091b264483" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::AutoCompSetFillUps</definition>
        <argsstring>(const wxString &amp;characterSet)</argsstring>
        <name>AutoCompSetFillUps</name>
        <qualifiedname>wxStyledTextCtrl::AutoCompSetFillUps</qualifiedname>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>characterSet</declname>
        </param>
        <briefdescription>
<para>Define a set of characters that when typed will cause the autocompletion to choose the selected item. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5641" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a14bef81d58d81c83e65e3aa2c2b07ce5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::AutoCompSetChooseSingle</definition>
        <argsstring>(bool chooseSingle)</argsstring>
        <name>AutoCompSetChooseSingle</name>
        <qualifiedname>wxStyledTextCtrl::AutoCompSetChooseSingle</qualifiedname>
        <param>
          <type>bool</type>
          <declname>chooseSingle</declname>
        </param>
        <briefdescription>
<para>Should a single item auto-completion list automatically choose the item. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5646" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1aa6518f0ccc4db9e13db64f7d0f4c0e7d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxStyledTextCtrl::AutoCompGetChooseSingle</definition>
        <argsstring>() const</argsstring>
        <name>AutoCompGetChooseSingle</name>
        <qualifiedname>wxStyledTextCtrl::AutoCompGetChooseSingle</qualifiedname>
        <briefdescription>
<para>Retrieve whether a single item auto-completion list automatically choose the item. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5651" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1abe46b21c1195b2c81166f39d771b3335" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::AutoCompSetIgnoreCase</definition>
        <argsstring>(bool ignoreCase)</argsstring>
        <name>AutoCompSetIgnoreCase</name>
        <qualifiedname>wxStyledTextCtrl::AutoCompSetIgnoreCase</qualifiedname>
        <param>
          <type>bool</type>
          <declname>ignoreCase</declname>
        </param>
        <briefdescription>
<para>Set whether case is significant when performing auto-completion searches. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5656" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1afcf0c878929be55bce00568888267fd1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxStyledTextCtrl::AutoCompGetIgnoreCase</definition>
        <argsstring>() const</argsstring>
        <name>AutoCompGetIgnoreCase</name>
        <qualifiedname>wxStyledTextCtrl::AutoCompGetIgnoreCase</qualifiedname>
        <briefdescription>
<para>Retrieve state of ignore case flag. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5661" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a3f11adf70e6e0ee121d3375cdfb4c455" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::AutoCompSetAutoHide</definition>
        <argsstring>(bool autoHide)</argsstring>
        <name>AutoCompSetAutoHide</name>
        <qualifiedname>wxStyledTextCtrl::AutoCompSetAutoHide</qualifiedname>
        <param>
          <type>bool</type>
          <declname>autoHide</declname>
        </param>
        <briefdescription>
<para>Set whether or not autocompletion is hidden automatically when nothing matches. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5666" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a0f88adfb702b9e01bf3a81c955defe36" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxStyledTextCtrl::AutoCompGetAutoHide</definition>
        <argsstring>() const</argsstring>
        <name>AutoCompGetAutoHide</name>
        <qualifiedname>wxStyledTextCtrl::AutoCompGetAutoHide</qualifiedname>
        <briefdescription>
<para>Retrieve whether or not autocompletion is hidden automatically when nothing matches. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5671" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a9430ffe5d457d8c2c168863a6c87cb0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::AutoCompSetDropRestOfWord</definition>
        <argsstring>(bool dropRestOfWord)</argsstring>
        <name>AutoCompSetDropRestOfWord</name>
        <qualifiedname>wxStyledTextCtrl::AutoCompSetDropRestOfWord</qualifiedname>
        <param>
          <type>bool</type>
          <declname>dropRestOfWord</declname>
        </param>
        <briefdescription>
<para>Set whether or not autocompletion deletes any word characters after the inserted text upon completion. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5677" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ae86a095ce3fc6f639cde04eebf86be31" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxStyledTextCtrl::AutoCompGetDropRestOfWord</definition>
        <argsstring>() const</argsstring>
        <name>AutoCompGetDropRestOfWord</name>
        <qualifiedname>wxStyledTextCtrl::AutoCompGetDropRestOfWord</qualifiedname>
        <briefdescription>
<para>Retrieve whether or not autocompletion deletes any word characters after the inserted text upon completion. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5683" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1aad1a1d7f2d9474a3344ff25e2dd916d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::RegisterImage</definition>
        <argsstring>(int type, const char *const *xpmData)</argsstring>
        <name>RegisterImage</name>
        <qualifiedname>wxStyledTextCtrl::RegisterImage</qualifiedname>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const char *const *</type>
          <declname>xpmData</declname>
        </param>
        <briefdescription>
<para>Register an image for use in autocompletion lists. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>3.1.3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5690" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ae93ebfa2f583e576482cf10c8307250e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::ClearRegisteredImages</definition>
        <argsstring>()</argsstring>
        <name>ClearRegisteredImages</name>
        <qualifiedname>wxStyledTextCtrl::ClearRegisteredImages</qualifiedname>
        <briefdescription>
<para>Clear all the registered images. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5695" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a63f1f16acc00377a4806babbb2a62a18" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::AutoCompGetTypeSeparator</definition>
        <argsstring>() const</argsstring>
        <name>AutoCompGetTypeSeparator</name>
        <qualifiedname>wxStyledTextCtrl::AutoCompGetTypeSeparator</qualifiedname>
        <briefdescription>
<para>Retrieve the auto-completion list type-separator character. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5700" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ad4b09dc62d17ca6b4edcdb6cf8347ab2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::AutoCompSetTypeSeparator</definition>
        <argsstring>(int separatorCharacter)</argsstring>
        <name>AutoCompSetTypeSeparator</name>
        <qualifiedname>wxStyledTextCtrl::AutoCompSetTypeSeparator</qualifiedname>
        <param>
          <type>int</type>
          <declname>separatorCharacter</declname>
        </param>
        <briefdescription>
<para>Change the type-separator character in the string setting up an auto-completion list. </para>
        </briefdescription>
        <detaileddescription>
<para>Default is &apos;?&apos; but can be changed if items contain &apos;?&apos;. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5706" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a97b1dc83f63df3d5cff55e98ac8d8f42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::AutoCompSetMaxWidth</definition>
        <argsstring>(int characterCount)</argsstring>
        <name>AutoCompSetMaxWidth</name>
        <qualifiedname>wxStyledTextCtrl::AutoCompSetMaxWidth</qualifiedname>
        <param>
          <type>int</type>
          <declname>characterCount</declname>
        </param>
        <briefdescription>
<para>Set the maximum width, in characters, of auto-completion and user lists. </para>
        </briefdescription>
        <detaileddescription>
<para>Set to 0 to autosize to fit longest item, which is the default. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5712" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1af7ed86d2c623d255ee08ea346b705a97" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::AutoCompGetMaxWidth</definition>
        <argsstring>() const</argsstring>
        <name>AutoCompGetMaxWidth</name>
        <qualifiedname>wxStyledTextCtrl::AutoCompGetMaxWidth</qualifiedname>
        <briefdescription>
<para>Get the maximum width, in characters, of auto-completion and user lists. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5717" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a3a39dd3ef96c7953bd9aa7fdfbc8943d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::AutoCompSetMaxHeight</definition>
        <argsstring>(int rowCount)</argsstring>
        <name>AutoCompSetMaxHeight</name>
        <qualifiedname>wxStyledTextCtrl::AutoCompSetMaxHeight</qualifiedname>
        <param>
          <type>int</type>
          <declname>rowCount</declname>
        </param>
        <briefdescription>
<para>Set the maximum height, in rows, of auto-completion and user lists. </para>
        </briefdescription>
        <detaileddescription>
<para>The default is 5 rows. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5723" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1abcbef12fad2e2a5293df23223e5bd5db" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::AutoCompGetMaxHeight</definition>
        <argsstring>() const</argsstring>
        <name>AutoCompGetMaxHeight</name>
        <qualifiedname>wxStyledTextCtrl::AutoCompGetMaxHeight</qualifiedname>
        <briefdescription>
<para>Set the maximum height, in rows, of auto-completion and user lists. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5728" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a8f6c1ccf1999787ad73ce164a1583465" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::AutoCompGetCurrent</definition>
        <argsstring>() const</argsstring>
        <name>AutoCompGetCurrent</name>
        <qualifiedname>wxStyledTextCtrl::AutoCompGetCurrent</qualifiedname>
        <briefdescription>
<para>Get currently selected item position in the auto-completion list. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5733" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a23776389fc828485d49cae08c2c9c356" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>wxString wxStyledTextCtrl::AutoCompGetCurrentText</definition>
        <argsstring>() const</argsstring>
        <name>AutoCompGetCurrentText</name>
        <qualifiedname>wxStyledTextCtrl::AutoCompGetCurrentText</qualifiedname>
        <briefdescription>
<para>Get currently selected item text in the auto-completion list. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>3.1.1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5740" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a77c6a53caaacc0d5bfcbb768ee828227" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::AutoCompSetCaseInsensitiveBehaviour</definition>
        <argsstring>(int behaviour)</argsstring>
        <name>AutoCompSetCaseInsensitiveBehaviour</name>
        <qualifiedname>wxStyledTextCtrl::AutoCompSetCaseInsensitiveBehaviour</qualifiedname>
        <param>
          <type>int</type>
          <declname>behaviour</declname>
        </param>
        <briefdescription>
<para>Set auto-completion case insensitive behaviour to either prefer case-sensitive matches or have no preference. </para>
        </briefdescription>
        <detaileddescription>
<para>The input should be one of the <ref refid="stc_8h_1a0ff1c86a935f9d9ca6afe086ee68dc3a" kindref="member">wxSTC_CASEINSENSITIVEBEHAVIOUR_* </ref> constants. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5748" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a6d27d2dc06b838b316072966174d3fa5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::AutoCompGetCaseInsensitiveBehaviour</definition>
        <argsstring>() const</argsstring>
        <name>AutoCompGetCaseInsensitiveBehaviour</name>
        <qualifiedname>wxStyledTextCtrl::AutoCompGetCaseInsensitiveBehaviour</qualifiedname>
        <briefdescription>
<para>Get auto-completion case insensitive behaviour. </para>
        </briefdescription>
        <detaileddescription>
<para>The return value will be one of the <ref refid="stc_8h_1a0ff1c86a935f9d9ca6afe086ee68dc3a" kindref="member">wxSTC_CASEINSENSITIVEBEHAVIOUR_* </ref> constants. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5756" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a89fbbde1f42d11d31b32ce4b3787c523" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::AutoCompSetMulti</definition>
        <argsstring>(int multi)</argsstring>
        <name>AutoCompSetMulti</name>
        <qualifiedname>wxStyledTextCtrl::AutoCompSetMulti</qualifiedname>
        <param>
          <type>int</type>
          <declname>multi</declname>
        </param>
        <briefdescription>
<para>Change the effect of autocompleting when there are multiple selections. </para>
        </briefdescription>
        <detaileddescription>
<para>The input should be one of the <ref refid="stc_8h_1a8135968060ab548ee7846f60a8327983" kindref="member">wxSTC_MULTIAUTOC_* </ref> constants. <simplesect kind="since"><para>3.1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5765" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ab4c67a981ff3a8ee69e44ee37a865751" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::AutoCompGetMulti</definition>
        <argsstring>() const</argsstring>
        <name>AutoCompGetMulti</name>
        <qualifiedname>wxStyledTextCtrl::AutoCompGetMulti</qualifiedname>
        <briefdescription>
<para>Retrieve the effect of autocompleting when there are multiple selections. </para>
        </briefdescription>
        <detaileddescription>
<para>The return value will be one of the <ref refid="stc_8h_1a8135968060ab548ee7846f60a8327983" kindref="member">wxSTC_MULTIAUTOC_* </ref> constants. <simplesect kind="since"><para>3.1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5774" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1af7ce6b376622dcbfcf71d3d32ad330e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::AutoCompSetOrder</definition>
        <argsstring>(int order)</argsstring>
        <name>AutoCompSetOrder</name>
        <qualifiedname>wxStyledTextCtrl::AutoCompSetOrder</qualifiedname>
        <param>
          <type>int</type>
          <declname>order</declname>
        </param>
        <briefdescription>
<para>Set the way autocompletion lists are ordered. </para>
        </briefdescription>
        <detaileddescription>
<para>The input should be one of the <ref refid="stc_8h_1ab88024c702a5bce77bccb4eae7a15ad2" kindref="member">wxSTC_ORDER_* </ref> constants. <simplesect kind="since"><para>3.1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5783" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a82f6d9cb2c710ff41e06e553838b165b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::AutoCompGetOrder</definition>
        <argsstring>() const</argsstring>
        <name>AutoCompGetOrder</name>
        <qualifiedname>wxStyledTextCtrl::AutoCompGetOrder</qualifiedname>
        <briefdescription>
<para>Get the way autocompletion lists are ordered. </para>
        </briefdescription>
        <detaileddescription>
<para>The return value will be one of the <ref refid="stc_8h_1ab88024c702a5bce77bccb4eae7a15ad2" kindref="member">wxSTC_ORDER_* </ref> constants. <simplesect kind="since"><para>3.1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5792" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a9b4fca5b8f14db0f4c23b0c03e40eb8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::RegisterRGBAImage</definition>
        <argsstring>(int type, const unsigned char *pixels)</argsstring>
        <name>RegisterRGBAImage</name>
        <qualifiedname>wxStyledTextCtrl::RegisterRGBAImage</qualifiedname>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>pixels</declname>
        </param>
        <briefdescription>
<para>Register an RGBA image for use in autocompletion lists. </para>
        </briefdescription>
        <detaileddescription>
<para>It has the width and height from RGBAImageSetWidth/Height </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5798" column="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>User lists</header>
      <description><para><anchor id="classwx_styled_text_ctrl_1UserLists"/> </para>
</description>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1aca26323e7a482fb4fe2651ef2158f2c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::UserListShow</definition>
        <argsstring>(int listType, const wxString &amp;itemList)</argsstring>
        <name>UserListShow</name>
        <qualifiedname>wxStyledTextCtrl::UserListShow</qualifiedname>
        <param>
          <type>int</type>
          <declname>listType</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>itemList</declname>
        </param>
        <briefdescription>
<para>Display a list of strings and send notification when user chooses one. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5810" column="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Call tips</header>
      <description><para><anchor id="classwx_styled_text_ctrl_1CallTips"/> </para>
</description>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a8a21bb9df8e5116b7230c545f54cf9f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::CallTipShow</definition>
        <argsstring>(int pos, const wxString &amp;definition)</argsstring>
        <name>CallTipShow</name>
        <qualifiedname>wxStyledTextCtrl::CallTipShow</qualifiedname>
        <param>
          <type>int</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>definition</declname>
        </param>
        <briefdescription>
<para>Show a call tip containing a definition near position pos. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5822" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a9340360cc2e7c12ee9d16c1993390c1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::CallTipCancel</definition>
        <argsstring>()</argsstring>
        <name>CallTipCancel</name>
        <qualifiedname>wxStyledTextCtrl::CallTipCancel</qualifiedname>
        <briefdescription>
<para>Remove the call tip from the screen. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5827" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1aa984b16dce33a4aa9547c2bc7fe22fd3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxStyledTextCtrl::CallTipActive</definition>
        <argsstring>()</argsstring>
        <name>CallTipActive</name>
        <qualifiedname>wxStyledTextCtrl::CallTipActive</qualifiedname>
        <briefdescription>
<para>Is there an active call tip? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5832" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a672c4eff3e808305adfb02b5894e4f61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::CallTipPosAtStart</definition>
        <argsstring>()</argsstring>
        <name>CallTipPosAtStart</name>
        <qualifiedname>wxStyledTextCtrl::CallTipPosAtStart</qualifiedname>
        <briefdescription>
<para>Retrieve the position where the caret was before displaying the call tip. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>3.1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5839" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a397bcf611d6f653e2bf430e63a827786" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::CallTipSetPosAtStart</definition>
        <argsstring>(int posStart)</argsstring>
        <name>CallTipSetPosAtStart</name>
        <qualifiedname>wxStyledTextCtrl::CallTipSetPosAtStart</qualifiedname>
        <param>
          <type>int</type>
          <declname>posStart</declname>
        </param>
        <briefdescription>
<para>Set the start position in order to change when backspacing removes the calltip. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5844" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a8d40fa59e7fc70b7211f3bd7c85e6cb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::CallTipSetHighlight</definition>
        <argsstring>(int highlightStart, int highlightEnd)</argsstring>
        <name>CallTipSetHighlight</name>
        <qualifiedname>wxStyledTextCtrl::CallTipSetHighlight</qualifiedname>
        <param>
          <type>int</type>
          <declname>highlightStart</declname>
        </param>
        <param>
          <type>int</type>
          <declname>highlightEnd</declname>
        </param>
        <briefdescription>
<para>Highlight a segment of the definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5849" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a02818a9bd35154feea5ac55dbf9358df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::CallTipSetBackground</definition>
        <argsstring>(const wxColour &amp;back)</argsstring>
        <name>CallTipSetBackground</name>
        <qualifiedname>wxStyledTextCtrl::CallTipSetBackground</qualifiedname>
        <param>
          <type>const <ref refid="classwx_colour" kindref="compound">wxColour</ref> &amp;</type>
          <declname>back</declname>
        </param>
        <briefdescription>
<para>Set the background colour for the call tip. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5854" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a103c96e588c40600d360f0fc04496123" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::CallTipSetForeground</definition>
        <argsstring>(const wxColour &amp;fore)</argsstring>
        <name>CallTipSetForeground</name>
        <qualifiedname>wxStyledTextCtrl::CallTipSetForeground</qualifiedname>
        <param>
          <type>const <ref refid="classwx_colour" kindref="compound">wxColour</ref> &amp;</type>
          <declname>fore</declname>
        </param>
        <briefdescription>
<para>Set the foreground colour for the call tip. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5859" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1afc1fa68a4f485d169fa664c9fc9d8d64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::CallTipSetForegroundHighlight</definition>
        <argsstring>(const wxColour &amp;fore)</argsstring>
        <name>CallTipSetForegroundHighlight</name>
        <qualifiedname>wxStyledTextCtrl::CallTipSetForegroundHighlight</qualifiedname>
        <param>
          <type>const <ref refid="classwx_colour" kindref="compound">wxColour</ref> &amp;</type>
          <declname>fore</declname>
        </param>
        <briefdescription>
<para>Set the foreground colour for the highlighted part of the call tip. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5864" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1aee7c127fb40e52bbaa3b374ebe8e1668" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::CallTipUseStyle</definition>
        <argsstring>(int tabSize)</argsstring>
        <name>CallTipUseStyle</name>
        <qualifiedname>wxStyledTextCtrl::CallTipUseStyle</qualifiedname>
        <param>
          <type>int</type>
          <declname>tabSize</declname>
        </param>
        <briefdescription>
<para>Enable use of wxSTC_STYLE_CALLTIP and set call tip tab size in pixels. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5869" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a7c24bea1e6b731ce4f3cba3a4e5368bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::CallTipSetPosition</definition>
        <argsstring>(bool above)</argsstring>
        <name>CallTipSetPosition</name>
        <qualifiedname>wxStyledTextCtrl::CallTipSetPosition</qualifiedname>
        <param>
          <type>bool</type>
          <declname>above</declname>
        </param>
        <briefdescription>
<para>Set position of calltip, above or below text. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5874" column="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Keyboard commands</header>
      <description><para><anchor id="classwx_styled_text_ctrl_1KeyboardCommands"/> </para>
</description>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ac9515ecb49c5649c282222e5ca475d19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::LineDown</definition>
        <argsstring>()</argsstring>
        <name>LineDown</name>
        <qualifiedname>wxStyledTextCtrl::LineDown</qualifiedname>
        <briefdescription>
<para>Move caret down one line. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5886" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a0845a980da1cd5bb7d3aa075ddc17da4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::LineDownExtend</definition>
        <argsstring>()</argsstring>
        <name>LineDownExtend</name>
        <qualifiedname>wxStyledTextCtrl::LineDownExtend</qualifiedname>
        <briefdescription>
<para>Move caret down one line extending selection to new caret position. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5891" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a495f22e16a3471147b1cb925e8ce0ca5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::LineUp</definition>
        <argsstring>()</argsstring>
        <name>LineUp</name>
        <qualifiedname>wxStyledTextCtrl::LineUp</qualifiedname>
        <briefdescription>
<para>Move caret up one line. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5896" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a597babc365b24614d5a2998f25fa4458" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::LineUpExtend</definition>
        <argsstring>()</argsstring>
        <name>LineUpExtend</name>
        <qualifiedname>wxStyledTextCtrl::LineUpExtend</qualifiedname>
        <briefdescription>
<para>Move caret up one line extending selection to new caret position. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5901" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a2c98ff8de0fcb3c59aae4df1013cbf49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::CharLeft</definition>
        <argsstring>()</argsstring>
        <name>CharLeft</name>
        <qualifiedname>wxStyledTextCtrl::CharLeft</qualifiedname>
        <briefdescription>
<para>Move caret left one character. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5906" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ad7d6edfd400aa811567c301789f3f99f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::CharLeftExtend</definition>
        <argsstring>()</argsstring>
        <name>CharLeftExtend</name>
        <qualifiedname>wxStyledTextCtrl::CharLeftExtend</qualifiedname>
        <briefdescription>
<para>Move caret left one character extending selection to new caret position. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5911" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1aa3e5fe3051d46c097b0610ae4b66775e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::CharRight</definition>
        <argsstring>()</argsstring>
        <name>CharRight</name>
        <qualifiedname>wxStyledTextCtrl::CharRight</qualifiedname>
        <briefdescription>
<para>Move caret right one character. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5916" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a15f0635c531037dda30bc140041e2476" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::CharRightExtend</definition>
        <argsstring>()</argsstring>
        <name>CharRightExtend</name>
        <qualifiedname>wxStyledTextCtrl::CharRightExtend</qualifiedname>
        <briefdescription>
<para>Move caret right one character extending selection to new caret position. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5921" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a4ca6f1c3ca419de400ebe39ab35f51f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::WordLeft</definition>
        <argsstring>()</argsstring>
        <name>WordLeft</name>
        <qualifiedname>wxStyledTextCtrl::WordLeft</qualifiedname>
        <briefdescription>
<para>Move caret left one word. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5926" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a3fd89d0457dba6ec11dc251084b023ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::WordLeftExtend</definition>
        <argsstring>()</argsstring>
        <name>WordLeftExtend</name>
        <qualifiedname>wxStyledTextCtrl::WordLeftExtend</qualifiedname>
        <briefdescription>
<para>Move caret left one word extending selection to new caret position. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5931" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ab2d591e26e64d471b6bf23670747f7a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::WordRight</definition>
        <argsstring>()</argsstring>
        <name>WordRight</name>
        <qualifiedname>wxStyledTextCtrl::WordRight</qualifiedname>
        <briefdescription>
<para>Move caret right one word. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5936" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a0bb6af61d66ca7459d52ed451aad939a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::WordRightExtend</definition>
        <argsstring>()</argsstring>
        <name>WordRightExtend</name>
        <qualifiedname>wxStyledTextCtrl::WordRightExtend</qualifiedname>
        <briefdescription>
<para>Move caret right one word extending selection to new caret position. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5941" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a81cc40177c35e47daa1cff8c0ba205cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::Home</definition>
        <argsstring>()</argsstring>
        <name>Home</name>
        <qualifiedname>wxStyledTextCtrl::Home</qualifiedname>
        <briefdescription>
<para>Move caret to first position on line. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5946" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ac86adda825a69f315a433f72c65a26a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::HomeExtend</definition>
        <argsstring>()</argsstring>
        <name>HomeExtend</name>
        <qualifiedname>wxStyledTextCtrl::HomeExtend</qualifiedname>
        <briefdescription>
<para>Move caret to first position on line extending selection to new caret position. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5951" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a9b8793a79c0f76d377df68e7b5bd26ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::LineEnd</definition>
        <argsstring>()</argsstring>
        <name>LineEnd</name>
        <qualifiedname>wxStyledTextCtrl::LineEnd</qualifiedname>
        <briefdescription>
<para>Move caret to last position on line. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5956" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a43f776d94819c2a4eed79adc62795b66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::LineEndExtend</definition>
        <argsstring>()</argsstring>
        <name>LineEndExtend</name>
        <qualifiedname>wxStyledTextCtrl::LineEndExtend</qualifiedname>
        <briefdescription>
<para>Move caret to last position on line extending selection to new caret position. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5961" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ab53f0b56e7826c6f4e7753ddbced0e15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::DocumentStart</definition>
        <argsstring>()</argsstring>
        <name>DocumentStart</name>
        <qualifiedname>wxStyledTextCtrl::DocumentStart</qualifiedname>
        <briefdescription>
<para>Move caret to first position in document. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5966" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a7d0ba468af83c82dcad8265b1d6670b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::DocumentStartExtend</definition>
        <argsstring>()</argsstring>
        <name>DocumentStartExtend</name>
        <qualifiedname>wxStyledTextCtrl::DocumentStartExtend</qualifiedname>
        <briefdescription>
<para>Move caret to first position in document extending selection to new caret position. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5971" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1adefe3471b22ee1df8982d62a2fd45029" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::DocumentEnd</definition>
        <argsstring>()</argsstring>
        <name>DocumentEnd</name>
        <qualifiedname>wxStyledTextCtrl::DocumentEnd</qualifiedname>
        <briefdescription>
<para>Move caret to last position in document. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5976" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a59425a502218d7aa9b7b5ac857602cf6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::DocumentEndExtend</definition>
        <argsstring>()</argsstring>
        <name>DocumentEndExtend</name>
        <qualifiedname>wxStyledTextCtrl::DocumentEndExtend</qualifiedname>
        <briefdescription>
<para>Move caret to last position in document extending selection to new caret position. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5981" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a51017ad326b639f505d0b2007d6fe0b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::PageUp</definition>
        <argsstring>()</argsstring>
        <name>PageUp</name>
        <qualifiedname>wxStyledTextCtrl::PageUp</qualifiedname>
        <briefdescription>
<para>Move caret one page up. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5986" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a41f991d2cf74d9695e3fb5ac2a00ca80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::PageUpExtend</definition>
        <argsstring>()</argsstring>
        <name>PageUpExtend</name>
        <qualifiedname>wxStyledTextCtrl::PageUpExtend</qualifiedname>
        <briefdescription>
<para>Move caret one page up extending selection to new caret position. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5991" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ae42da911681afee75d2782b410a8da6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::PageDown</definition>
        <argsstring>()</argsstring>
        <name>PageDown</name>
        <qualifiedname>wxStyledTextCtrl::PageDown</qualifiedname>
        <briefdescription>
<para>Move caret one page down. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="5996" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a11834c1cd84c602aa2cd09a525ebb3cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::PageDownExtend</definition>
        <argsstring>()</argsstring>
        <name>PageDownExtend</name>
        <qualifiedname>wxStyledTextCtrl::PageDownExtend</qualifiedname>
        <briefdescription>
<para>Move caret one page down extending selection to new caret position. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6001" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a76148bfd7624f43735dccc69a378ee29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::EditToggleOvertype</definition>
        <argsstring>()</argsstring>
        <name>EditToggleOvertype</name>
        <qualifiedname>wxStyledTextCtrl::EditToggleOvertype</qualifiedname>
        <briefdescription>
<para>Switch from insert to overtype mode or the reverse. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6006" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a9c91e02fc109334ba435b2fca8422508" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::Cancel</definition>
        <argsstring>()</argsstring>
        <name>Cancel</name>
        <qualifiedname>wxStyledTextCtrl::Cancel</qualifiedname>
        <briefdescription>
<para>Cancel any modes such as call tip or auto-completion list display. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6011" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a229e837b1bc6e3b3b713eb8e83650812" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::DeleteBack</definition>
        <argsstring>()</argsstring>
        <name>DeleteBack</name>
        <qualifiedname>wxStyledTextCtrl::DeleteBack</qualifiedname>
        <briefdescription>
<para>Delete the selection or if no selection, the character before the caret. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6016" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a2e1952f8b5c3dff0c1522465bc9ae109" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::Tab</definition>
        <argsstring>()</argsstring>
        <name>Tab</name>
        <qualifiedname>wxStyledTextCtrl::Tab</qualifiedname>
        <briefdescription>
<para>If selection is empty or all on one line replace the selection with a tab character. </para>
        </briefdescription>
        <detaileddescription>
<para>If more than one line selected, indent the lines. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6022" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a5d3e32e591c11634eeaf5e912b922b36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::BackTab</definition>
        <argsstring>()</argsstring>
        <name>BackTab</name>
        <qualifiedname>wxStyledTextCtrl::BackTab</qualifiedname>
        <briefdescription>
<para>Dedent the selected lines. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6027" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1aafe614a7f6032598933112f1c6e4fb67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::NewLine</definition>
        <argsstring>()</argsstring>
        <name>NewLine</name>
        <qualifiedname>wxStyledTextCtrl::NewLine</qualifiedname>
        <briefdescription>
<para>Insert a new line, may use a CRLF, CR or LF depending on EOL mode. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6032" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ae22b3a855f2c6f545ea15fbfb3399b79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::FormFeed</definition>
        <argsstring>()</argsstring>
        <name>FormFeed</name>
        <qualifiedname>wxStyledTextCtrl::FormFeed</qualifiedname>
        <briefdescription>
<para>Insert a Form Feed character. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6037" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a7f1a7f3ea35f58e5b9bc5227f5833400" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::VCHome</definition>
        <argsstring>()</argsstring>
        <name>VCHome</name>
        <qualifiedname>wxStyledTextCtrl::VCHome</qualifiedname>
        <briefdescription>
<para>Move caret to before first visible character on line. </para>
        </briefdescription>
        <detaileddescription>
<para>If already there move to first character on line. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6043" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1af4e34f2bbdca94ccbd89960a7e765dd5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::VCHomeExtend</definition>
        <argsstring>()</argsstring>
        <name>VCHomeExtend</name>
        <qualifiedname>wxStyledTextCtrl::VCHomeExtend</qualifiedname>
        <briefdescription>
<para>Like VCHome but extending selection to new caret position. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6048" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ace37594e87afefdd579f7a20444e2898" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::DelWordLeft</definition>
        <argsstring>()</argsstring>
        <name>DelWordLeft</name>
        <qualifiedname>wxStyledTextCtrl::DelWordLeft</qualifiedname>
        <briefdescription>
<para>Delete the word to the left of the caret. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6053" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a6d59400c2bf5dc56876e5f51e9ae4059" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::DelWordRight</definition>
        <argsstring>()</argsstring>
        <name>DelWordRight</name>
        <qualifiedname>wxStyledTextCtrl::DelWordRight</qualifiedname>
        <briefdescription>
<para>Delete the word to the right of the caret. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6058" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1abded1c14c94a9b20e9de202c875d52c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::DelWordRightEnd</definition>
        <argsstring>()</argsstring>
        <name>DelWordRightEnd</name>
        <qualifiedname>wxStyledTextCtrl::DelWordRightEnd</qualifiedname>
        <briefdescription>
<para>Delete the word to the right of the caret, but not the trailing non-word characters. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6063" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1aa2afa8f527045e387838ca9465ae62c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::LineCut</definition>
        <argsstring>()</argsstring>
        <name>LineCut</name>
        <qualifiedname>wxStyledTextCtrl::LineCut</qualifiedname>
        <briefdescription>
<para>Cut the line containing the caret. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6068" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a7973166dc3a25e59f6da2679c40a0e77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::LineDelete</definition>
        <argsstring>()</argsstring>
        <name>LineDelete</name>
        <qualifiedname>wxStyledTextCtrl::LineDelete</qualifiedname>
        <briefdescription>
<para>Delete the line containing the caret. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6073" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1abcf0762da43a7f95b3fc2c5f9937614e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::LineTranspose</definition>
        <argsstring>()</argsstring>
        <name>LineTranspose</name>
        <qualifiedname>wxStyledTextCtrl::LineTranspose</qualifiedname>
        <briefdescription>
<para>Switch the current line with the previous. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6078" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a2313db2853adf1c0845e930edabae12c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::LineDuplicate</definition>
        <argsstring>()</argsstring>
        <name>LineDuplicate</name>
        <qualifiedname>wxStyledTextCtrl::LineDuplicate</qualifiedname>
        <briefdescription>
<para>Duplicate the current line. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6083" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a69e0875a6d000351f6c6498de6310f4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::LowerCase</definition>
        <argsstring>()</argsstring>
        <name>LowerCase</name>
        <qualifiedname>wxStyledTextCtrl::LowerCase</qualifiedname>
        <briefdescription>
<para>Transform the selection to lower case. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6088" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ab33c702836fe7f5bd001f9750781c8fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::UpperCase</definition>
        <argsstring>()</argsstring>
        <name>UpperCase</name>
        <qualifiedname>wxStyledTextCtrl::UpperCase</qualifiedname>
        <briefdescription>
<para>Transform the selection to upper case. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6093" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a9b53d6cfccf347333995a9a48c36029e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::LineScrollDown</definition>
        <argsstring>()</argsstring>
        <name>LineScrollDown</name>
        <qualifiedname>wxStyledTextCtrl::LineScrollDown</qualifiedname>
        <briefdescription>
<para>Scroll the document down, keeping the caret visible. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6098" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1aab817bec123fc7ee32eb8dcbbfdc55a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::LineScrollUp</definition>
        <argsstring>()</argsstring>
        <name>LineScrollUp</name>
        <qualifiedname>wxStyledTextCtrl::LineScrollUp</qualifiedname>
        <briefdescription>
<para>Scroll the document up, keeping the caret visible. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6103" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a9085f5a5a938ac29aa3a6b47c4f13a22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::DeleteBackNotLine</definition>
        <argsstring>()</argsstring>
        <name>DeleteBackNotLine</name>
        <qualifiedname>wxStyledTextCtrl::DeleteBackNotLine</qualifiedname>
        <briefdescription>
<para>Delete the selection or if no selection, the character before the caret. </para>
        </briefdescription>
        <detaileddescription>
<para>Will not delete the character before at the start of a line. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6109" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a86da232f299722eb400c3169fc5cf5b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::HomeDisplay</definition>
        <argsstring>()</argsstring>
        <name>HomeDisplay</name>
        <qualifiedname>wxStyledTextCtrl::HomeDisplay</qualifiedname>
        <briefdescription>
<para>Move caret to first position on display line. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6114" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ae249dee11bd5ec8ac1bf7295996d0e1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::HomeDisplayExtend</definition>
        <argsstring>()</argsstring>
        <name>HomeDisplayExtend</name>
        <qualifiedname>wxStyledTextCtrl::HomeDisplayExtend</qualifiedname>
        <briefdescription>
<para>Move caret to first position on display line extending selection to new caret position. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6120" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a46f1b649c7c10362e2c03405300c71fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::LineEndDisplay</definition>
        <argsstring>()</argsstring>
        <name>LineEndDisplay</name>
        <qualifiedname>wxStyledTextCtrl::LineEndDisplay</qualifiedname>
        <briefdescription>
<para>Move caret to last position on display line. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6125" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1afedadbabcd1c1b2467a695130b933393" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::LineEndDisplayExtend</definition>
        <argsstring>()</argsstring>
        <name>LineEndDisplayExtend</name>
        <qualifiedname>wxStyledTextCtrl::LineEndDisplayExtend</qualifiedname>
        <briefdescription>
<para>Move caret to last position on display line extending selection to new caret position. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6131" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1aa9435194013564156570a17593883c7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::HomeWrap</definition>
        <argsstring>()</argsstring>
        <name>HomeWrap</name>
        <qualifiedname>wxStyledTextCtrl::HomeWrap</qualifiedname>
        <briefdescription>
<para>Like Home but when word-wrap is enabled goes first to start of display line HomeDisplay, then to start of document line Home. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6137" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a2faea08698aba4ff0d35e82a7637a911" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::HomeWrapExtend</definition>
        <argsstring>()</argsstring>
        <name>HomeWrapExtend</name>
        <qualifiedname>wxStyledTextCtrl::HomeWrapExtend</qualifiedname>
        <briefdescription>
<para>Like HomeExtend but when word-wrap is enabled extends first to start of display line HomeDisplayExtend, then to start of document line HomeExtend. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6143" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ac8281133453c747409b60dc5acc3758a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::LineEndWrap</definition>
        <argsstring>()</argsstring>
        <name>LineEndWrap</name>
        <qualifiedname>wxStyledTextCtrl::LineEndWrap</qualifiedname>
        <briefdescription>
<para>Like LineEnd but when word-wrap is enabled goes first to end of display line LineEndDisplay, then to start of document line LineEnd. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6149" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a8f52104fcc9e05711a864896475c7ad5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::LineEndWrapExtend</definition>
        <argsstring>()</argsstring>
        <name>LineEndWrapExtend</name>
        <qualifiedname>wxStyledTextCtrl::LineEndWrapExtend</qualifiedname>
        <briefdescription>
<para>Like LineEndExtend but when word-wrap is enabled extends first to end of display line LineEndDisplayExtend, then to start of document line LineEndExtend. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6155" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ae2ae99a185d56fe6b9b631c099e1ca55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::VCHomeWrap</definition>
        <argsstring>()</argsstring>
        <name>VCHomeWrap</name>
        <qualifiedname>wxStyledTextCtrl::VCHomeWrap</qualifiedname>
        <briefdescription>
<para>Like VCHome but when word-wrap is enabled goes first to start of display line VCHomeDisplay, then behaves like VCHome. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6161" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ae56149308008de97ad52f2cc0fbc3834" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::VCHomeWrapExtend</definition>
        <argsstring>()</argsstring>
        <name>VCHomeWrapExtend</name>
        <qualifiedname>wxStyledTextCtrl::VCHomeWrapExtend</qualifiedname>
        <briefdescription>
<para>Like VCHomeExtend but when word-wrap is enabled extends first to start of display line VCHomeDisplayExtend, then behaves like VCHomeExtend. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6167" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a65413d4c086ae8c0ef8380cff55773e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::LineCopy</definition>
        <argsstring>()</argsstring>
        <name>LineCopy</name>
        <qualifiedname>wxStyledTextCtrl::LineCopy</qualifiedname>
        <briefdescription>
<para>Copy the line containing the caret. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6172" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a7a0cd4c5aa77fc3b9a4e64a56075a22c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::WordPartLeft</definition>
        <argsstring>()</argsstring>
        <name>WordPartLeft</name>
        <qualifiedname>wxStyledTextCtrl::WordPartLeft</qualifiedname>
        <briefdescription>
<para>Move to the previous change in capitalisation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6177" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a542c023362fd69ed830312205d1765b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::WordPartLeftExtend</definition>
        <argsstring>()</argsstring>
        <name>WordPartLeftExtend</name>
        <qualifiedname>wxStyledTextCtrl::WordPartLeftExtend</qualifiedname>
        <briefdescription>
<para>Move to the previous change in capitalisation extending selection to new caret position. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6183" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a17f07b597ba6f78edba3299d55cd8f0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::WordPartRight</definition>
        <argsstring>()</argsstring>
        <name>WordPartRight</name>
        <qualifiedname>wxStyledTextCtrl::WordPartRight</qualifiedname>
        <briefdescription>
<para>Move to the change next in capitalisation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6188" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a2fc12c9c741688bde4aaebb31c72e5d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::WordPartRightExtend</definition>
        <argsstring>()</argsstring>
        <name>WordPartRightExtend</name>
        <qualifiedname>wxStyledTextCtrl::WordPartRightExtend</qualifiedname>
        <briefdescription>
<para>Move to the next change in capitalisation extending selection to new caret position. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6194" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a703b45e05f6be8ae614ca60a5b36177d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::DelLineLeft</definition>
        <argsstring>()</argsstring>
        <name>DelLineLeft</name>
        <qualifiedname>wxStyledTextCtrl::DelLineLeft</qualifiedname>
        <briefdescription>
<para>Delete back from the current position to the start of the line. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6199" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1abd5b23cb5d54f06928002b50e96313ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::DelLineRight</definition>
        <argsstring>()</argsstring>
        <name>DelLineRight</name>
        <qualifiedname>wxStyledTextCtrl::DelLineRight</qualifiedname>
        <briefdescription>
<para>Delete forwards from the current position to the end of the line. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6204" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1aedfdbc2b174fdb0c229eec4d7a39961b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::ParaDown</definition>
        <argsstring>()</argsstring>
        <name>ParaDown</name>
        <qualifiedname>wxStyledTextCtrl::ParaDown</qualifiedname>
        <briefdescription>
<para>Move caret down one paragraph (delimited by empty lines). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6209" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1afff9fd76f788b03f1d88d4cf374ebd7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::ParaDownExtend</definition>
        <argsstring>()</argsstring>
        <name>ParaDownExtend</name>
        <qualifiedname>wxStyledTextCtrl::ParaDownExtend</qualifiedname>
        <briefdescription>
<para>Extend selection down one paragraph (delimited by empty lines). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6214" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1aead8c88e661579be7481fda7816aa569" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::ParaUp</definition>
        <argsstring>()</argsstring>
        <name>ParaUp</name>
        <qualifiedname>wxStyledTextCtrl::ParaUp</qualifiedname>
        <briefdescription>
<para>Move caret up one paragraph (delimited by empty lines). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6219" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a85ff441f893aefba1fbbcf994eaa78b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::ParaUpExtend</definition>
        <argsstring>()</argsstring>
        <name>ParaUpExtend</name>
        <qualifiedname>wxStyledTextCtrl::ParaUpExtend</qualifiedname>
        <briefdescription>
<para>Extend selection up one paragraph (delimited by empty lines). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6224" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a532132fa839732be1c4eb9cc60d8f9a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::LineDownRectExtend</definition>
        <argsstring>()</argsstring>
        <name>LineDownRectExtend</name>
        <qualifiedname>wxStyledTextCtrl::LineDownRectExtend</qualifiedname>
        <briefdescription>
<para>Move caret down one line, extending rectangular selection to new caret position. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6229" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1aa74a9c0c48e4176bdd70d261637bb9c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::LineUpRectExtend</definition>
        <argsstring>()</argsstring>
        <name>LineUpRectExtend</name>
        <qualifiedname>wxStyledTextCtrl::LineUpRectExtend</qualifiedname>
        <briefdescription>
<para>Move caret up one line, extending rectangular selection to new caret position. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6234" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ab8c7c791c37ad158fa356a6c2385d5b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::CharLeftRectExtend</definition>
        <argsstring>()</argsstring>
        <name>CharLeftRectExtend</name>
        <qualifiedname>wxStyledTextCtrl::CharLeftRectExtend</qualifiedname>
        <briefdescription>
<para>Move caret left one character, extending rectangular selection to new caret position. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6239" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a6f3e1f21338c2389db68efcdd94868de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::CharRightRectExtend</definition>
        <argsstring>()</argsstring>
        <name>CharRightRectExtend</name>
        <qualifiedname>wxStyledTextCtrl::CharRightRectExtend</qualifiedname>
        <briefdescription>
<para>Move caret right one character, extending rectangular selection to new caret position. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6244" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a09eda26be0d53e59128af4f8c3ce163d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::HomeRectExtend</definition>
        <argsstring>()</argsstring>
        <name>HomeRectExtend</name>
        <qualifiedname>wxStyledTextCtrl::HomeRectExtend</qualifiedname>
        <briefdescription>
<para>Move caret to first position on line, extending rectangular selection to new caret position. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6249" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a7675ef1a8905fad08e50d1c72fdfdfa5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::VCHomeRectExtend</definition>
        <argsstring>()</argsstring>
        <name>VCHomeRectExtend</name>
        <qualifiedname>wxStyledTextCtrl::VCHomeRectExtend</qualifiedname>
        <briefdescription>
<para>Move caret to before first visible character on line. </para>
        </briefdescription>
        <detaileddescription>
<para>If already there move to first character on line. In either case, extend rectangular selection to new caret position. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6256" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a3a1eb6fee3a2192ec1d08ca26703e7fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::LineEndRectExtend</definition>
        <argsstring>()</argsstring>
        <name>LineEndRectExtend</name>
        <qualifiedname>wxStyledTextCtrl::LineEndRectExtend</qualifiedname>
        <briefdescription>
<para>Move caret to last position on line, extending rectangular selection to new caret position. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6261" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a221fa3ba9842f8bca1698e5f228210ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::PageUpRectExtend</definition>
        <argsstring>()</argsstring>
        <name>PageUpRectExtend</name>
        <qualifiedname>wxStyledTextCtrl::PageUpRectExtend</qualifiedname>
        <briefdescription>
<para>Move caret one page up, extending rectangular selection to new caret position. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6266" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a34ecf284fc1437ec8e57bc488c0e882d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::PageDownRectExtend</definition>
        <argsstring>()</argsstring>
        <name>PageDownRectExtend</name>
        <qualifiedname>wxStyledTextCtrl::PageDownRectExtend</qualifiedname>
        <briefdescription>
<para>Move caret one page down, extending rectangular selection to new caret position. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6271" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a52ae7d5d4cb62bfc9fdf01eb1855dc5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::StutteredPageUp</definition>
        <argsstring>()</argsstring>
        <name>StutteredPageUp</name>
        <qualifiedname>wxStyledTextCtrl::StutteredPageUp</qualifiedname>
        <briefdescription>
<para>Move caret to top of page, or one page up if already at top of page. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6276" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a15f422b87392daaae228fdf5a305a780" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::StutteredPageUpExtend</definition>
        <argsstring>()</argsstring>
        <name>StutteredPageUpExtend</name>
        <qualifiedname>wxStyledTextCtrl::StutteredPageUpExtend</qualifiedname>
        <briefdescription>
<para>Move caret to top of page, or one page up if already at top of page, extending selection to new caret position. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6281" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a007d2175a04dedd349cf44a7625ca72d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::StutteredPageDown</definition>
        <argsstring>()</argsstring>
        <name>StutteredPageDown</name>
        <qualifiedname>wxStyledTextCtrl::StutteredPageDown</qualifiedname>
        <briefdescription>
<para>Move caret to bottom of page, or one page down if already at bottom of page. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6286" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ac42d4ddbb20357422e2581e054f1e6b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::StutteredPageDownExtend</definition>
        <argsstring>()</argsstring>
        <name>StutteredPageDownExtend</name>
        <qualifiedname>wxStyledTextCtrl::StutteredPageDownExtend</qualifiedname>
        <briefdescription>
<para>Move caret to bottom of page, or one page down if already at bottom of page, extending selection to new caret position. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6291" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a1c6fa64a1f9cd980d1788113a54d27ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::WordLeftEnd</definition>
        <argsstring>()</argsstring>
        <name>WordLeftEnd</name>
        <qualifiedname>wxStyledTextCtrl::WordLeftEnd</qualifiedname>
        <briefdescription>
<para>Move caret left one word, position cursor at end of word. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6296" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1af8aa311e02e87ce6afc74168253b5926" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::WordLeftEndExtend</definition>
        <argsstring>()</argsstring>
        <name>WordLeftEndExtend</name>
        <qualifiedname>wxStyledTextCtrl::WordLeftEndExtend</qualifiedname>
        <briefdescription>
<para>Move caret left one word, position cursor at end of word, extending selection to new caret position. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6301" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a76f215ddde10790de36f62b2075dc169" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::WordRightEnd</definition>
        <argsstring>()</argsstring>
        <name>WordRightEnd</name>
        <qualifiedname>wxStyledTextCtrl::WordRightEnd</qualifiedname>
        <briefdescription>
<para>Move caret right one word, position cursor at end of word. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6306" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a94e2562fd4feb6c60aef3b84ed672e01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::WordRightEndExtend</definition>
        <argsstring>()</argsstring>
        <name>WordRightEndExtend</name>
        <qualifiedname>wxStyledTextCtrl::WordRightEndExtend</qualifiedname>
        <briefdescription>
<para>Move caret right one word, position cursor at end of word, extending selection to new caret position. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6311" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a4e384ad9646e25cf253b5c9bc611e5e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SelectionDuplicate</definition>
        <argsstring>()</argsstring>
        <name>SelectionDuplicate</name>
        <qualifiedname>wxStyledTextCtrl::SelectionDuplicate</qualifiedname>
        <briefdescription>
<para>Duplicate the selection. </para>
        </briefdescription>
        <detaileddescription>
<para>If selection empty duplicate the line containing the caret. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6316" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a80613b707f38ea1652460abbc8eb3ec0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::VerticalCentreCaret</definition>
        <argsstring>()</argsstring>
        <name>VerticalCentreCaret</name>
        <qualifiedname>wxStyledTextCtrl::VerticalCentreCaret</qualifiedname>
        <briefdescription>
<para>Centre current line in window. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6321" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a6b2a606d96a4a57341615cb638a5f959" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::ScrollToStart</definition>
        <argsstring>()</argsstring>
        <name>ScrollToStart</name>
        <qualifiedname>wxStyledTextCtrl::ScrollToStart</qualifiedname>
        <briefdescription>
<para>Scroll to start of document. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6326" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a8974ab996333b9e6ed5fe6f5ee180e76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::ScrollToEnd</definition>
        <argsstring>()</argsstring>
        <name>ScrollToEnd</name>
        <qualifiedname>wxStyledTextCtrl::ScrollToEnd</qualifiedname>
        <briefdescription>
<para>Scroll to end of document. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6331" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a1d2cb8b1b0cf64e96f56674678eec841" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::VCHomeDisplay</definition>
        <argsstring>()</argsstring>
        <name>VCHomeDisplay</name>
        <qualifiedname>wxStyledTextCtrl::VCHomeDisplay</qualifiedname>
        <briefdescription>
<para>Move caret to before first visible character on display line. </para>
        </briefdescription>
        <detaileddescription>
<para>If already there move to first character on display line.</para>
<para><simplesect kind="since"><para>3.1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6339" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a68fcb72c91829dd5d6d2235003bcd8f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::VCHomeDisplayExtend</definition>
        <argsstring>()</argsstring>
        <name>VCHomeDisplayExtend</name>
        <qualifiedname>wxStyledTextCtrl::VCHomeDisplayExtend</qualifiedname>
        <briefdescription>
<para>Like VCHomeDisplay but extending selection to new caret position. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>3.1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6346" column="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Key bindings</header>
      <description><para><anchor id="classwx_styled_text_ctrl_1KeyBindings"/> </para>
</description>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1abf78d20a413c8e95c97ede19e27fcbe9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::CmdKeyAssign</definition>
        <argsstring>(int key, int modifiers, int cmd)</argsstring>
        <name>CmdKeyAssign</name>
        <qualifiedname>wxStyledTextCtrl::CmdKeyAssign</qualifiedname>
        <param>
          <type>int</type>
          <declname>key</declname>
        </param>
        <param>
          <type>int</type>
          <declname>modifiers</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cmd</declname>
        </param>
        <briefdescription>
<para>When key+modifier combination keyDefinition is pressed perform sciCommand. </para>
        </briefdescription>
        <detaileddescription>
<para>The second argument should be a bit list containing one or more of the <ref refid="stc_8h_1a66ddc49fa3c0e526fad53f627ee96bb2" kindref="member">wxSTC_KEYMOD_* </ref> constants and the third argument should be one of the <ref refid="stc_8h_1a191561f00e4d48b0fd89a506ddd195e8" kindref="member">wxSTC_CMD_* </ref> constants. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6363" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a661022247d0eab8d150641e7d5a66665" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::CmdKeyClear</definition>
        <argsstring>(int key, int modifiers)</argsstring>
        <name>CmdKeyClear</name>
        <qualifiedname>wxStyledTextCtrl::CmdKeyClear</qualifiedname>
        <param>
          <type>int</type>
          <declname>key</declname>
        </param>
        <param>
          <type>int</type>
          <declname>modifiers</declname>
        </param>
        <briefdescription>
<para>When key+modifier combination keyDefinition is pressed do nothing. </para>
        </briefdescription>
        <detaileddescription>
<para>The second argument should be a bit list containing one or more of the <ref refid="stc_8h_1a66ddc49fa3c0e526fad53f627ee96bb2" kindref="member">wxSTC_KEYMOD_* </ref> constants. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6371" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1afa77c7e8cda7cc91a3480a54cecf4504" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::CmdKeyClearAll</definition>
        <argsstring>()</argsstring>
        <name>CmdKeyClearAll</name>
        <qualifiedname>wxStyledTextCtrl::CmdKeyClearAll</qualifiedname>
        <briefdescription>
<para>Drop all key mappings. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6376" column="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Popup edit menu</header>
      <description><para><anchor id="classwx_styled_text_ctrl_1PopupEditMenu"/> </para>
</description>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a21f4a52864fcc3810bb803ff5a482968" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::UsePopUp</definition>
        <argsstring>(int popUpMode)</argsstring>
        <name>UsePopUp</name>
        <qualifiedname>wxStyledTextCtrl::UsePopUp</qualifiedname>
        <param>
          <type>int</type>
          <declname>popUpMode</declname>
        </param>
        <briefdescription>
<para>Set whether a pop up menu is displayed automatically when the user presses the wrong mouse button on certain areas. </para>
        </briefdescription>
        <detaileddescription>
<para>The input should be one of the <ref refid="stc_8h_1a8dfdae807fe7e79e7ab56c44dac92146" kindref="member">wxSTC_POPUP_* </ref> constants. <simplesect kind="remark"><para>When <ref refid="classwx_context_menu_event" kindref="compound">wxContextMenuEvent</ref> is used to create a custom popup menu, this function should be called with wxSTC_POPUP_NEVER. Otherwise the default menu will be shown instead of the custom one. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6396" column="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Macro recording</header>
      <description><para><anchor id="classwx_styled_text_ctrl_1MacroRecording"/> </para>
</description>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a3d712a9a418ef6d8de896bd5a39375db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::StartRecord</definition>
        <argsstring>()</argsstring>
        <name>StartRecord</name>
        <qualifiedname>wxStyledTextCtrl::StartRecord</qualifiedname>
        <briefdescription>
<para>Start notifying the container of all key presses and commands. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6408" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a27ad57e2f03a339b2759f1cae22b1651" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::StopRecord</definition>
        <argsstring>()</argsstring>
        <name>StopRecord</name>
        <qualifiedname>wxStyledTextCtrl::StopRecord</qualifiedname>
        <briefdescription>
<para>Stop notifying the container of all key presses and commands. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6413" column="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Printing</header>
      <description><para><anchor id="classwx_styled_text_ctrl_1Printing"/> </para>
</description>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a9dfa04a9474c70abc36af50eca990883" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetPrintMagnification</definition>
        <argsstring>(int magnification)</argsstring>
        <name>SetPrintMagnification</name>
        <qualifiedname>wxStyledTextCtrl::SetPrintMagnification</qualifiedname>
        <param>
          <type>int</type>
          <declname>magnification</declname>
        </param>
        <briefdescription>
<para>Sets the print magnification added to the point size of each style for printing. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6425" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a89e4f16573e99c782b292fc71a3adb96" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetPrintMagnification</definition>
        <argsstring>() const</argsstring>
        <name>GetPrintMagnification</name>
        <qualifiedname>wxStyledTextCtrl::GetPrintMagnification</qualifiedname>
        <briefdescription>
<para>Returns the print magnification. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6430" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a8422f36721ddac36265458c447125cbb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetPrintColourMode</definition>
        <argsstring>(int mode)</argsstring>
        <name>SetPrintColourMode</name>
        <qualifiedname>wxStyledTextCtrl::SetPrintColourMode</qualifiedname>
        <param>
          <type>int</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Modify colours when printing for clearer printed text. </para>
        </briefdescription>
        <detaileddescription>
<para>The input should be one of the <ref refid="stc_8h_1a36a8a3061c7953c5cec5f9b10e50bf8c" kindref="member">wxSTC_PRINT_* </ref> constants. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6438" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1aba43b86bbde63c0db6362434e648912b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetPrintColourMode</definition>
        <argsstring>() const</argsstring>
        <name>GetPrintColourMode</name>
        <qualifiedname>wxStyledTextCtrl::GetPrintColourMode</qualifiedname>
        <briefdescription>
<para>Returns the print colour mode. </para>
        </briefdescription>
        <detaileddescription>
<para>The return value will be one of the <ref refid="stc_8h_1a36a8a3061c7953c5cec5f9b10e50bf8c" kindref="member">wxSTC_PRINT_* </ref> constants. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6446" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a0796d66bc19de243e7b5f684cfca5d52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::FormatRange</definition>
        <argsstring>(bool doDraw, int startPos, int endPos, wxDC *draw, wxDC *target, wxRect renderRect, wxRect pageRect)</argsstring>
        <name>FormatRange</name>
        <qualifiedname>wxStyledTextCtrl::FormatRange</qualifiedname>
        <param>
          <type>bool</type>
          <declname>doDraw</declname>
        </param>
        <param>
          <type>int</type>
          <declname>startPos</declname>
        </param>
        <param>
          <type>int</type>
          <declname>endPos</declname>
        </param>
        <param>
          <type><ref refid="classwx_d_c" kindref="compound">wxDC</ref> *</type>
          <declname>draw</declname>
        </param>
        <param>
          <type><ref refid="classwx_d_c" kindref="compound">wxDC</ref> *</type>
          <declname>target</declname>
        </param>
        <param>
          <type><ref refid="classwx_rect" kindref="compound">wxRect</ref></type>
          <declname>renderRect</declname>
        </param>
        <param>
          <type><ref refid="classwx_rect" kindref="compound">wxRect</ref></type>
          <declname>pageRect</declname>
        </param>
        <briefdescription>
<para>On Windows, will draw the document into a display context such as a printer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6451" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a441bb4886f3078ca90cfe4c1077961c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetPrintWrapMode</definition>
        <argsstring>(int wrapMode)</argsstring>
        <name>SetPrintWrapMode</name>
        <qualifiedname>wxStyledTextCtrl::SetPrintWrapMode</qualifiedname>
        <param>
          <type>int</type>
          <declname>wrapMode</declname>
        </param>
        <briefdescription>
<para>Set printing to line wrapped (wxSTC_WRAP_WORD) or not line wrapped (wxSTC_WRAP_NONE). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6462" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a1989e506202621595ef76359d94d3e9e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetPrintWrapMode</definition>
        <argsstring>() const</argsstring>
        <name>GetPrintWrapMode</name>
        <qualifiedname>wxStyledTextCtrl::GetPrintWrapMode</qualifiedname>
        <briefdescription>
<para>Is printing line wrapped? </para>
        </briefdescription>
        <detaileddescription>
<para>The return value will be one of the <ref refid="stc_8h_1a13e73c3bef1a7b6487f13ed4082516e4" kindref="member">wxSTC_WRAP_* </ref> constants. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6470" column="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Direct access</header>
      <description><para><anchor id="classwx_styled_text_ctrl_1DirectAccess"/> </para>
</description>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a581b0c5c57fbe940c537710feeb555d6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * wxStyledTextCtrl::GetDirectFunction</definition>
        <argsstring>() const</argsstring>
        <name>GetDirectFunction</name>
        <qualifiedname>wxStyledTextCtrl::GetDirectFunction</qualifiedname>
        <briefdescription>
<para>Retrieve a pointer to a function that processes messages for this Scintilla. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>3.1.1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6484" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a741a401da4bcf7ccd038b3291b6b4ee1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * wxStyledTextCtrl::GetDirectPointer</definition>
        <argsstring>() const</argsstring>
        <name>GetDirectPointer</name>
        <qualifiedname>wxStyledTextCtrl::GetDirectPointer</qualifiedname>
        <briefdescription>
<para>Retrieve a pointer value to use as the first argument when calling the function returned by GetDirectFunction. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>3.1.1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6492" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a972fe50009a5591c23ac8a8759f932d1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * wxStyledTextCtrl::GetCharacterPointer</definition>
        <argsstring>() const</argsstring>
        <name>GetCharacterPointer</name>
        <qualifiedname>wxStyledTextCtrl::GetCharacterPointer</qualifiedname>
        <briefdescription>
<para>Compact the document buffer and return a read-only pointer to the characters in the document. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6498" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1acbff2f0eadc9ab11cfd70ff9e9634549" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * wxStyledTextCtrl::GetRangePointer</definition>
        <argsstring>(int position, int rangeLength) const</argsstring>
        <name>GetRangePointer</name>
        <qualifiedname>wxStyledTextCtrl::GetRangePointer</qualifiedname>
        <param>
          <type>int</type>
          <declname>position</declname>
        </param>
        <param>
          <type>int</type>
          <declname>rangeLength</declname>
        </param>
        <briefdescription>
<para>Return a read-only pointer to a range of characters in the document. </para>
        </briefdescription>
        <detaileddescription>
<para>May move the gap so that the range is contiguous, but will only move up to lengthRange bytes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6505" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ae1594aeb27b874448be5025cf392596b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetGapPosition</definition>
        <argsstring>() const</argsstring>
        <name>GetGapPosition</name>
        <qualifiedname>wxStyledTextCtrl::GetGapPosition</qualifiedname>
        <briefdescription>
<para>Return a position which, to avoid performance costs, should not be within the range of a call to GetRangePointer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6511" column="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Multiple views</header>
      <description><para><anchor id="classwx_styled_text_ctrl_1MultipleViews"/> </para>
</description>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a5c99f78b5dfb97c4773b8dedcb89650e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * wxStyledTextCtrl::GetDocPointer</definition>
        <argsstring>()</argsstring>
        <name>GetDocPointer</name>
        <qualifiedname>wxStyledTextCtrl::GetDocPointer</qualifiedname>
        <briefdescription>
<para>Retrieve a pointer to the document object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6523" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1aab3d63cf95c36142160589ee9a8fbcde" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetDocPointer</definition>
        <argsstring>(void *docPointer)</argsstring>
        <name>SetDocPointer</name>
        <qualifiedname>wxStyledTextCtrl::SetDocPointer</qualifiedname>
        <param>
          <type>void *</type>
          <declname>docPointer</declname>
        </param>
        <briefdescription>
<para>Change the document object used. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6528" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a3cf273d4371ccadbf9bbb44e8f4670e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * wxStyledTextCtrl::CreateDocument</definition>
        <argsstring>()</argsstring>
        <name>CreateDocument</name>
        <qualifiedname>wxStyledTextCtrl::CreateDocument</qualifiedname>
        <briefdescription>
<para>Create a new document object. </para>
        </briefdescription>
        <detaileddescription>
<para>Starts with reference count of 1 and not selected into editor. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6534" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a253764689ee3a0448c159f05b683c050" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::AddRefDocument</definition>
        <argsstring>(void *docPointer)</argsstring>
        <name>AddRefDocument</name>
        <qualifiedname>wxStyledTextCtrl::AddRefDocument</qualifiedname>
        <param>
          <type>void *</type>
          <declname>docPointer</declname>
        </param>
        <briefdescription>
<para>Extend life of document. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6539" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a3b8edb39e182b3d095f5f5d4728319e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::ReleaseDocument</definition>
        <argsstring>(void *docPointer)</argsstring>
        <name>ReleaseDocument</name>
        <qualifiedname>wxStyledTextCtrl::ReleaseDocument</qualifiedname>
        <param>
          <type>void *</type>
          <declname>docPointer</declname>
        </param>
        <briefdescription>
<para>Release a reference to the document, deleting document if it fades to black. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6544" column="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Background loading and saving</header>
      <description><para><anchor id="classwx_styled_text_ctrl_1BackgroundLoadSave"/> </para>
</description>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1aeafc7637605c607cca71f033c8665add" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * wxStyledTextCtrl::CreateLoader</definition>
        <argsstring>(int bytes) const</argsstring>
        <name>CreateLoader</name>
        <qualifiedname>wxStyledTextCtrl::CreateLoader</qualifiedname>
        <param>
          <type>int</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
<para>Create an ILoader*. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6556" column="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Folding</header>
      <description><para><anchor id="classwx_styled_text_ctrl_1Folding"/> </para>
</description>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ae3589335b9ba731a080589d80925188b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::VisibleFromDocLine</definition>
        <argsstring>(int docLine)</argsstring>
        <name>VisibleFromDocLine</name>
        <qualifiedname>wxStyledTextCtrl::VisibleFromDocLine</qualifiedname>
        <param>
          <type>int</type>
          <declname>docLine</declname>
        </param>
        <briefdescription>
<para>Find the display line of a document line taking hidden lines into account. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6568" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ab3b57f532cff469b8433835edf5b9228" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::DocLineFromVisible</definition>
        <argsstring>(int displayLine)</argsstring>
        <name>DocLineFromVisible</name>
        <qualifiedname>wxStyledTextCtrl::DocLineFromVisible</qualifiedname>
        <param>
          <type>int</type>
          <declname>displayLine</declname>
        </param>
        <briefdescription>
<para>Find the document line of a display line taking hidden lines into account. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6573" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a3a7717a0e33eac50428ea764786c3e1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetFoldLevel</definition>
        <argsstring>(int line, int level)</argsstring>
        <name>SetFoldLevel</name>
        <qualifiedname>wxStyledTextCtrl::SetFoldLevel</qualifiedname>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <briefdescription>
<para>Set the fold level of a line. </para>
        </briefdescription>
        <detaileddescription>
<para>This encodes an integer level along with flags indicating whether the line is a header and whether it is effectively white space. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6580" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a783bf4141739e562211a991633633891" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetFoldLevel</definition>
        <argsstring>(int line) const</argsstring>
        <name>GetFoldLevel</name>
        <qualifiedname>wxStyledTextCtrl::GetFoldLevel</qualifiedname>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
<para>Retrieve the fold level of a line. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6585" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a618aca45a8352eb81b99da03f5864aca" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetLastChild</definition>
        <argsstring>(int line, int level) const</argsstring>
        <name>GetLastChild</name>
        <qualifiedname>wxStyledTextCtrl::GetLastChild</qualifiedname>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <briefdescription>
<para>Find the last child line of a header line. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6590" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a7d3682924c02dbd55118c85ac8607749" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetFoldParent</definition>
        <argsstring>(int line) const</argsstring>
        <name>GetFoldParent</name>
        <qualifiedname>wxStyledTextCtrl::GetFoldParent</qualifiedname>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
<para>Find the parent line of a child line. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6595" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a6c1bc19d97321b1bfa272f8e9b07b75c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::ShowLines</definition>
        <argsstring>(int lineStart, int lineEnd)</argsstring>
        <name>ShowLines</name>
        <qualifiedname>wxStyledTextCtrl::ShowLines</qualifiedname>
        <param>
          <type>int</type>
          <declname>lineStart</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lineEnd</declname>
        </param>
        <briefdescription>
<para>Make a range of lines visible. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6600" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a586b008abbe3b5030f0e877a5449f292" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::HideLines</definition>
        <argsstring>(int lineStart, int lineEnd)</argsstring>
        <name>HideLines</name>
        <qualifiedname>wxStyledTextCtrl::HideLines</qualifiedname>
        <param>
          <type>int</type>
          <declname>lineStart</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lineEnd</declname>
        </param>
        <briefdescription>
<para>Make a range of lines invisible. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6605" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1afbf2468d7377c32305ba48a3d39fb6b3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxStyledTextCtrl::GetLineVisible</definition>
        <argsstring>(int line) const</argsstring>
        <name>GetLineVisible</name>
        <qualifiedname>wxStyledTextCtrl::GetLineVisible</qualifiedname>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
<para>Is a line visible? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6610" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a6efbf431a54aaedd0ced1ea7114e4f6e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxStyledTextCtrl::GetAllLinesVisible</definition>
        <argsstring>() const</argsstring>
        <name>GetAllLinesVisible</name>
        <qualifiedname>wxStyledTextCtrl::GetAllLinesVisible</qualifiedname>
        <briefdescription>
<para>Are all lines visible? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6615" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a36532e6641aafb97a7254ab285896ff2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetFoldExpanded</definition>
        <argsstring>(int line, bool expanded)</argsstring>
        <name>SetFoldExpanded</name>
        <qualifiedname>wxStyledTextCtrl::SetFoldExpanded</qualifiedname>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>expanded</declname>
        </param>
        <briefdescription>
<para>Show the children of a header line. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6620" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ac66f9d5c34c884327ca4d2d909326cf7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxStyledTextCtrl::GetFoldExpanded</definition>
        <argsstring>(int line) const</argsstring>
        <name>GetFoldExpanded</name>
        <qualifiedname>wxStyledTextCtrl::GetFoldExpanded</qualifiedname>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
<para>Is a header line expanded? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6625" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a41820dbb85f0b04756552982f276e621" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::ToggleFold</definition>
        <argsstring>(int line)</argsstring>
        <name>ToggleFold</name>
        <qualifiedname>wxStyledTextCtrl::ToggleFold</qualifiedname>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
<para>Switch a header line between expanded and contracted. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6630" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1aafbee0d71a24e45d5f56480b1d99f3a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::ToggleFoldShowText</definition>
        <argsstring>(int line, const wxString &amp;text)</argsstring>
        <name>ToggleFoldShowText</name>
        <qualifiedname>wxStyledTextCtrl::ToggleFoldShowText</qualifiedname>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>text</declname>
        </param>
        <briefdescription>
<para>Switch a header line between expanded and contracted and show some text after the line. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>3.1.1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6637" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ab41d9ea7837f11e409feb2d4b4341db9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::FoldDisplayTextSetStyle</definition>
        <argsstring>(int style)</argsstring>
        <name>FoldDisplayTextSetStyle</name>
        <qualifiedname>wxStyledTextCtrl::FoldDisplayTextSetStyle</qualifiedname>
        <param>
          <type>int</type>
          <declname>style</declname>
        </param>
        <briefdescription>
<para>Set the style of fold display text. </para>
        </briefdescription>
        <detaileddescription>
<para>The input should be one of the <ref refid="stc_8h_1af17238ae899fb10112fd61348f515fa7" kindref="member">wxSTC_FOLDDISPLAYTEXT_* </ref> constants. <simplesect kind="since"><para>3.1.1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6646" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a0f6495921bd68e3a239f9981b01e2181" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::FoldLine</definition>
        <argsstring>(int line, int action)</argsstring>
        <name>FoldLine</name>
        <qualifiedname>wxStyledTextCtrl::FoldLine</qualifiedname>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <param>
          <type>int</type>
          <declname>action</declname>
        </param>
        <briefdescription>
<para>Expand or contract a fold header. </para>
        </briefdescription>
        <detaileddescription>
<para>The second argument should be one of the <ref refid="stc_8h_1a56a7dbfa6eb74b53eac179686a37a4c0" kindref="member">wxSTC_FOLDACTION_* </ref> constants. <simplesect kind="since"><para>3.1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6655" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a78917a4eeef262bf38919567b0207200" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::FoldChildren</definition>
        <argsstring>(int line, int action)</argsstring>
        <name>FoldChildren</name>
        <qualifiedname>wxStyledTextCtrl::FoldChildren</qualifiedname>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <param>
          <type>int</type>
          <declname>action</declname>
        </param>
        <briefdescription>
<para>Expand or contract a fold header and its children. </para>
        </briefdescription>
        <detaileddescription>
<para>The second argument should be one of the <ref refid="stc_8h_1a56a7dbfa6eb74b53eac179686a37a4c0" kindref="member">wxSTC_FOLDACTION_* </ref> constants. <simplesect kind="since"><para>3.1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6664" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1adaf1664929c8e069c5c5730ad3080e5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::ExpandChildren</definition>
        <argsstring>(int line, int level)</argsstring>
        <name>ExpandChildren</name>
        <qualifiedname>wxStyledTextCtrl::ExpandChildren</qualifiedname>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <briefdescription>
<para>Expand a fold header and all children. </para>
        </briefdescription>
        <detaileddescription>
<para>Use the level argument instead of the line&apos;s current level.</para>
<para><simplesect kind="since"><para>3.1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6671" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a7bbcdca1ee86977a57c702062d5d3432" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::FoldAll</definition>
        <argsstring>(int action)</argsstring>
        <name>FoldAll</name>
        <qualifiedname>wxStyledTextCtrl::FoldAll</qualifiedname>
        <param>
          <type>int</type>
          <declname>action</declname>
        </param>
        <briefdescription>
<para>Expand or contract all fold headers. </para>
        </briefdescription>
        <detaileddescription>
<para>The input should be one of the <ref refid="stc_8h_1a56a7dbfa6eb74b53eac179686a37a4c0" kindref="member">wxSTC_FOLDACTION_* </ref> constants. <simplesect kind="since"><para>3.1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6680" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a9a9b1eb223a5d1d27eb9a36cc8784eda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::EnsureVisible</definition>
        <argsstring>(int line)</argsstring>
        <name>EnsureVisible</name>
        <qualifiedname>wxStyledTextCtrl::EnsureVisible</qualifiedname>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
<para>Ensure a particular line is visible by expanding any header line hiding it. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6685" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1af68129e5957351c54769ce1b37d935c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetAutomaticFold</definition>
        <argsstring>(int automaticFold)</argsstring>
        <name>SetAutomaticFold</name>
        <qualifiedname>wxStyledTextCtrl::SetAutomaticFold</qualifiedname>
        <param>
          <type>int</type>
          <declname>automaticFold</declname>
        </param>
        <briefdescription>
<para>Set automatic folding behaviours. </para>
        </briefdescription>
        <detaileddescription>
<para>The input should be a bit list containing one or more of the <ref refid="stc_8h_1a0729cb08276e821d50d998deee0e1da7" kindref="member">wxSTC_AUTOMATICFOLD_* </ref> constants. <simplesect kind="since"><para>3.1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6694" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a35638ecf5ff69ad350d49fa3d524e6e1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetAutomaticFold</definition>
        <argsstring>() const</argsstring>
        <name>GetAutomaticFold</name>
        <qualifiedname>wxStyledTextCtrl::GetAutomaticFold</qualifiedname>
        <briefdescription>
<para>Get automatic folding behaviours. </para>
        </briefdescription>
        <detaileddescription>
<para>The return value will be a bit list containing one or more of the <ref refid="stc_8h_1a0729cb08276e821d50d998deee0e1da7" kindref="member">wxSTC_AUTOMATICFOLD_* </ref> constants. <simplesect kind="since"><para>3.1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6703" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a9f8281c84a1f6c945f4b41e566ec3b47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetFoldFlags</definition>
        <argsstring>(int flags)</argsstring>
        <name>SetFoldFlags</name>
        <qualifiedname>wxStyledTextCtrl::SetFoldFlags</qualifiedname>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Set some style options for folding. </para>
        </briefdescription>
        <detaileddescription>
<para>The second argument should be a bit list containing one or more of the <ref refid="stc_8h_1ae9a03ddaac255e91998f9a94b3418e65" kindref="member">wxSTC_FOLDFLAG_* </ref> constants. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6711" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a6adbabfa94312f36411ef5cb11ef02b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::EnsureVisibleEnforcePolicy</definition>
        <argsstring>(int line)</argsstring>
        <name>EnsureVisibleEnforcePolicy</name>
        <qualifiedname>wxStyledTextCtrl::EnsureVisibleEnforcePolicy</qualifiedname>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
<para>Ensure a particular line is visible by expanding any header line hiding it. </para>
        </briefdescription>
        <detaileddescription>
<para>Use the currently set visibility policy to determine which range to display. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6717" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a4795a56b5d5937e1ccf00501ca48645e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::ContractedFoldNext</definition>
        <argsstring>(int lineStart)</argsstring>
        <name>ContractedFoldNext</name>
        <qualifiedname>wxStyledTextCtrl::ContractedFoldNext</qualifiedname>
        <param>
          <type>int</type>
          <declname>lineStart</declname>
        </param>
        <briefdescription>
<para>Find the next line at or after lineStart that is a contracted fold header line. </para>
        </briefdescription>
        <detaileddescription>
<para>Return -1 when no more lines. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6723" column="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Line wrapping</header>
      <description><para><anchor id="classwx_styled_text_ctrl_1LineWrapping"/> </para>
</description>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a7e320f478b9bb1e274679302ec77c868" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::WrapCount</definition>
        <argsstring>(int docLine)</argsstring>
        <name>WrapCount</name>
        <qualifiedname>wxStyledTextCtrl::WrapCount</qualifiedname>
        <param>
          <type>int</type>
          <declname>docLine</declname>
        </param>
        <briefdescription>
<para>The number of display lines needed to wrap a document line. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6735" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ae8c35c2476ecf5887112830771f0cfd8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetWrapMode</definition>
        <argsstring>(int wrapMode)</argsstring>
        <name>SetWrapMode</name>
        <qualifiedname>wxStyledTextCtrl::SetWrapMode</qualifiedname>
        <param>
          <type>int</type>
          <declname>wrapMode</declname>
        </param>
        <briefdescription>
<para>Sets whether text is word wrapped. </para>
        </briefdescription>
        <detaileddescription>
<para>The input should be one of the <ref refid="stc_8h_1a13e73c3bef1a7b6487f13ed4082516e4" kindref="member">wxSTC_WRAP_* </ref> constants. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6743" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a406df5c19f25bbea26fab7c7d9b6ce24" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetWrapMode</definition>
        <argsstring>() const</argsstring>
        <name>GetWrapMode</name>
        <qualifiedname>wxStyledTextCtrl::GetWrapMode</qualifiedname>
        <briefdescription>
<para>Retrieve whether text is word wrapped. </para>
        </briefdescription>
        <detaileddescription>
<para>The return value will be one of the <ref refid="stc_8h_1a13e73c3bef1a7b6487f13ed4082516e4" kindref="member">wxSTC_WRAP_* </ref> constants. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6751" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1af7b68c16eadf74c929a0a14923cfe785" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetWrapVisualFlags</definition>
        <argsstring>(int wrapVisualFlags)</argsstring>
        <name>SetWrapVisualFlags</name>
        <qualifiedname>wxStyledTextCtrl::SetWrapVisualFlags</qualifiedname>
        <param>
          <type>int</type>
          <declname>wrapVisualFlags</declname>
        </param>
        <briefdescription>
<para>Set the display mode of visual flags for wrapped lines. </para>
        </briefdescription>
        <detaileddescription>
<para>The input should be a bit list containing one or more of the <ref refid="stc_8h_1a9bb3266e9c83107ad3944a7f750b4655" kindref="member">wxSTC_WRAPVISUALFLAG_* </ref> constants. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6759" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ab7099957fefdc87cf05268bdb672914d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetWrapVisualFlags</definition>
        <argsstring>() const</argsstring>
        <name>GetWrapVisualFlags</name>
        <qualifiedname>wxStyledTextCtrl::GetWrapVisualFlags</qualifiedname>
        <briefdescription>
<para>Retrieve the display mode of visual flags for wrapped lines. </para>
        </briefdescription>
        <detaileddescription>
<para>The return value will be a bit list containing one or more of the <ref refid="stc_8h_1a9bb3266e9c83107ad3944a7f750b4655" kindref="member">wxSTC_WRAPVISUALFLAG_* </ref> constants. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6767" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a5910f52bfa080616ca49306b73725c86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetWrapVisualFlagsLocation</definition>
        <argsstring>(int wrapVisualFlagsLocation)</argsstring>
        <name>SetWrapVisualFlagsLocation</name>
        <qualifiedname>wxStyledTextCtrl::SetWrapVisualFlagsLocation</qualifiedname>
        <param>
          <type>int</type>
          <declname>wrapVisualFlagsLocation</declname>
        </param>
        <briefdescription>
<para>Set the location of visual flags for wrapped lines. </para>
        </briefdescription>
        <detaileddescription>
<para>The input should be a bit list containing one or more of the <ref refid="stc_8h_1a6d38f25a64588e0dc78aea08079c1ca6" kindref="member">wxSTC_WRAPVISUALFLAGLOC_* </ref> constants. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6775" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a392f1d848b1fb8e28ec672fb91a41ab6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetWrapVisualFlagsLocation</definition>
        <argsstring>() const</argsstring>
        <name>GetWrapVisualFlagsLocation</name>
        <qualifiedname>wxStyledTextCtrl::GetWrapVisualFlagsLocation</qualifiedname>
        <briefdescription>
<para>Retrieve the location of visual flags for wrapped lines. </para>
        </briefdescription>
        <detaileddescription>
<para>The return value will be a bit list containing one or more of the <ref refid="stc_8h_1a6d38f25a64588e0dc78aea08079c1ca6" kindref="member">wxSTC_WRAPVISUALFLAGLOC_* </ref> constants. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6783" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ae69e2a7978cfe4ab7ff843f6bf59ef77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetWrapStartIndent</definition>
        <argsstring>(int indent)</argsstring>
        <name>SetWrapStartIndent</name>
        <qualifiedname>wxStyledTextCtrl::SetWrapStartIndent</qualifiedname>
        <param>
          <type>int</type>
          <declname>indent</declname>
        </param>
        <briefdescription>
<para>Set the start indent for wrapped lines. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6788" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a4d09e70f5d243c5225f87b7ad8443fcc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetWrapStartIndent</definition>
        <argsstring>() const</argsstring>
        <name>GetWrapStartIndent</name>
        <qualifiedname>wxStyledTextCtrl::GetWrapStartIndent</qualifiedname>
        <briefdescription>
<para>Retrieve the start indent for wrapped lines. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6793" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a00401ea9fdcc0a5b13315ca77a8b3a71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetWrapIndentMode</definition>
        <argsstring>(int wrapIndentMode)</argsstring>
        <name>SetWrapIndentMode</name>
        <qualifiedname>wxStyledTextCtrl::SetWrapIndentMode</qualifiedname>
        <param>
          <type>int</type>
          <declname>wrapIndentMode</declname>
        </param>
        <briefdescription>
<para>Sets how wrapped sublines are placed. </para>
        </briefdescription>
        <detaileddescription>
<para>Default is wxSTC_WRAPINDENT_FIXED.</para>
<para>The input should be one of the <ref refid="stc_8h_1a3ecdb6811771fa4492004c51bc7a1ce6" kindref="member">wxSTC_WRAPINDENT_* </ref> constants. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6801" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a1f6b79808652ace85f3d43ef85156353" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetWrapIndentMode</definition>
        <argsstring>() const</argsstring>
        <name>GetWrapIndentMode</name>
        <qualifiedname>wxStyledTextCtrl::GetWrapIndentMode</qualifiedname>
        <briefdescription>
<para>Retrieve how wrapped sublines are placed. </para>
        </briefdescription>
        <detaileddescription>
<para>Default is wxSTC_WRAPINDENT_FIXED.</para>
<para>The return value will be one of the <ref refid="stc_8h_1a3ecdb6811771fa4492004c51bc7a1ce6" kindref="member">wxSTC_WRAPINDENT_* </ref> constants. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6809" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ad4f418ca23806eeb990cbc0f6d9a5869" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetLayoutCache</definition>
        <argsstring>() const</argsstring>
        <name>GetLayoutCache</name>
        <qualifiedname>wxStyledTextCtrl::GetLayoutCache</qualifiedname>
        <briefdescription>
<para>Retrieve the degree of caching of layout information. </para>
        </briefdescription>
        <detaileddescription>
<para>The return value will be one of the <ref refid="stc_8h_1add34868590ac29cdda08938a3f326bef" kindref="member">wxSTC_CACHE_* </ref> constants. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6817" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a3f24817be6a8af9aa560fd1ee7c05b85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::LinesJoin</definition>
        <argsstring>()</argsstring>
        <name>LinesJoin</name>
        <qualifiedname>wxStyledTextCtrl::LinesJoin</qualifiedname>
        <briefdescription>
<para>Join the lines in the target. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6822" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a591959bfee0a8353f70b1306ca7fe2eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::LinesSplit</definition>
        <argsstring>(int pixelWidth)</argsstring>
        <name>LinesSplit</name>
        <qualifiedname>wxStyledTextCtrl::LinesSplit</qualifiedname>
        <param>
          <type>int</type>
          <declname>pixelWidth</declname>
        </param>
        <briefdescription>
<para>Split the lines in the target into lines that are less wide than pixelWidth where possible. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6828" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a76fcffe74085de759fcec36aebb23c34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetPositionCacheSize</definition>
        <argsstring>(int size)</argsstring>
        <name>SetPositionCacheSize</name>
        <qualifiedname>wxStyledTextCtrl::SetPositionCacheSize</qualifiedname>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Set number of entries in position cache. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6833" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ad4723c5e7d75521d11a9cd3c5532423d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetPositionCacheSize</definition>
        <argsstring>() const</argsstring>
        <name>GetPositionCacheSize</name>
        <qualifiedname>wxStyledTextCtrl::GetPositionCacheSize</qualifiedname>
        <briefdescription>
<para>How many entries are allocated to the position cache? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6838" column="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Zooming</header>
      <description><para><anchor id="classwx_styled_text_ctrl_1Zooming"/> </para>
</description>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ad5d6fc9fc4a1362dfb1d048d77e0210b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::ZoomIn</definition>
        <argsstring>()</argsstring>
        <name>ZoomIn</name>
        <qualifiedname>wxStyledTextCtrl::ZoomIn</qualifiedname>
        <briefdescription>
<para>Magnify the displayed text by increasing the sizes by 1 point. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6850" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a08c90b90ddb67c6bdb362474e294eba6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::ZoomOut</definition>
        <argsstring>()</argsstring>
        <name>ZoomOut</name>
        <qualifiedname>wxStyledTextCtrl::ZoomOut</qualifiedname>
        <briefdescription>
<para>Make the displayed text smaller by decreasing the sizes by 1 point. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6855" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a408c1026e9cebd99b139dcaded7b1df0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetZoom</definition>
        <argsstring>(int zoomInPoints)</argsstring>
        <name>SetZoom</name>
        <qualifiedname>wxStyledTextCtrl::SetZoom</qualifiedname>
        <param>
          <type>int</type>
          <declname>zoomInPoints</declname>
        </param>
        <briefdescription>
<para>Set the zoom level. </para>
        </briefdescription>
        <detaileddescription>
<para>This number of points is added to the size of all fonts. It may be positive to magnify or negative to reduce. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6861" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a0c6545c73591ec23589ee1479254c0a9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetZoom</definition>
        <argsstring>() const</argsstring>
        <name>GetZoom</name>
        <qualifiedname>wxStyledTextCtrl::GetZoom</qualifiedname>
        <briefdescription>
<para>Retrieve the zoom level. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6866" column="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Long lines</header>
      <description><para><anchor id="classwx_styled_text_ctrl_1LongLines"/> </para>
</description>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1afc3563a6ced22ce37d299d440fbc3e8b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetEdgeColumn</definition>
        <argsstring>() const</argsstring>
        <name>GetEdgeColumn</name>
        <qualifiedname>wxStyledTextCtrl::GetEdgeColumn</qualifiedname>
        <briefdescription>
<para>Retrieve the column number which text should be kept within. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6878" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a5bcd5249910c4c7c41118da5d49858b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetEdgeColumn</definition>
        <argsstring>(int column)</argsstring>
        <name>SetEdgeColumn</name>
        <qualifiedname>wxStyledTextCtrl::SetEdgeColumn</qualifiedname>
        <param>
          <type>int</type>
          <declname>column</declname>
        </param>
        <briefdescription>
<para>Set the column number of the edge. </para>
        </briefdescription>
        <detaileddescription>
<para>If text goes past the edge then it is highlighted. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6884" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1aed89c4c83faa556d3ce2f8e26e5d3fd2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetEdgeMode</definition>
        <argsstring>() const</argsstring>
        <name>GetEdgeMode</name>
        <qualifiedname>wxStyledTextCtrl::GetEdgeMode</qualifiedname>
        <briefdescription>
<para>Retrieve the edge highlight mode. </para>
        </briefdescription>
        <detaileddescription>
<para>The return value will be one of the <ref refid="stc_8h_1a02e2dd4f5555188058af921a092cea6c" kindref="member">wxSTC_EDGE_* </ref> constants. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6892" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ae4099c6385087472987d7e935f800d8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetEdgeMode</definition>
        <argsstring>(int edgeMode)</argsstring>
        <name>SetEdgeMode</name>
        <qualifiedname>wxStyledTextCtrl::SetEdgeMode</qualifiedname>
        <param>
          <type>int</type>
          <declname>edgeMode</declname>
        </param>
        <briefdescription>
<para>The edge may be displayed by a line (wxSTC_EDGE_LINE/wxSTC_EDGE_MULTILINE) or by highlighting text that goes beyond it (wxSTC_EDGE_BACKGROUND) or not displayed at all (wxSTC_EDGE_NONE). </para>
        </briefdescription>
        <detaileddescription>
<para>The input should be one of the <ref refid="stc_8h_1a02e2dd4f5555188058af921a092cea6c" kindref="member">wxSTC_EDGE_* </ref> constants. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6901" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a8b8ddd6e88ad222163df1df452f90677" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_colour" kindref="compound">wxColour</ref></type>
        <definition>wxColour wxStyledTextCtrl::GetEdgeColour</definition>
        <argsstring>() const</argsstring>
        <name>GetEdgeColour</name>
        <qualifiedname>wxStyledTextCtrl::GetEdgeColour</qualifiedname>
        <briefdescription>
<para>Retrieve the colour used in edge indication. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6906" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a9118716e17cfe2de2390be4b784f5d28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetEdgeColour</definition>
        <argsstring>(const wxColour &amp;edgeColour)</argsstring>
        <name>SetEdgeColour</name>
        <qualifiedname>wxStyledTextCtrl::SetEdgeColour</qualifiedname>
        <param>
          <type>const <ref refid="classwx_colour" kindref="compound">wxColour</ref> &amp;</type>
          <declname>edgeColour</declname>
        </param>
        <briefdescription>
<para>Change the colour used in edge indication. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6911" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a8a9a807538d28b4b8b67162bf136677f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::MultiEdgeAddLine</definition>
        <argsstring>(int column, const wxColour &amp;edgeColour)</argsstring>
        <name>MultiEdgeAddLine</name>
        <qualifiedname>wxStyledTextCtrl::MultiEdgeAddLine</qualifiedname>
        <param>
          <type>int</type>
          <declname>column</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_colour" kindref="compound">wxColour</ref> &amp;</type>
          <declname>edgeColour</declname>
        </param>
        <briefdescription>
<para>Add a new vertical edge to the view. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>3.1.1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6918" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a79e5180200dd05ddf462e515a26f4228" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::MultiEdgeClearAll</definition>
        <argsstring>()</argsstring>
        <name>MultiEdgeClearAll</name>
        <qualifiedname>wxStyledTextCtrl::MultiEdgeClearAll</qualifiedname>
        <briefdescription>
<para>Clear all vertical edges. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>3.1.1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6925" column="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Lexer</header>
      <description><para><anchor id="classwx_styled_text_ctrl_1Lexer"/> </para>
</description>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a35b67ddcd7711e71feab536d10b6dd8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::ChangeLexerState</definition>
        <argsstring>(int start, int end)</argsstring>
        <name>ChangeLexerState</name>
        <qualifiedname>wxStyledTextCtrl::ChangeLexerState</qualifiedname>
        <param>
          <type>int</type>
          <declname>start</declname>
        </param>
        <param>
          <type>int</type>
          <declname>end</declname>
        </param>
        <briefdescription>
<para>Indicate that the internal state of a lexer has changed over a range and therefore there may be a need to redraw. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6938" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ac19aeb2585c3794168611a9c097a00c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetLexer</definition>
        <argsstring>(int lexer)</argsstring>
        <name>SetLexer</name>
        <qualifiedname>wxStyledTextCtrl::SetLexer</qualifiedname>
        <param>
          <type>int</type>
          <declname>lexer</declname>
        </param>
        <briefdescription>
<para>Set the lexing language of the document. </para>
        </briefdescription>
        <detaileddescription>
<para>The input should be one of the <ref refid="stc_8h_1a1372eb8d2ae4381a2f9730454b53914c" kindref="member">wxSTC_LEX_* </ref> constants. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6946" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a63bf5a38cadf37af8fa654edffd5918c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetLexer</definition>
        <argsstring>() const</argsstring>
        <name>GetLexer</name>
        <qualifiedname>wxStyledTextCtrl::GetLexer</qualifiedname>
        <briefdescription>
<para>Retrieve the lexing language of the document. </para>
        </briefdescription>
        <detaileddescription>
<para>The return value will be one of the <ref refid="stc_8h_1a1372eb8d2ae4381a2f9730454b53914c" kindref="member">wxSTC_LEX_* </ref> constants. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6954" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ac6c7f32218faea6b29168464479f6816" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::Colourise</definition>
        <argsstring>(int start, int end)</argsstring>
        <name>Colourise</name>
        <qualifiedname>wxStyledTextCtrl::Colourise</qualifiedname>
        <param>
          <type>int</type>
          <declname>start</declname>
        </param>
        <param>
          <type>int</type>
          <declname>end</declname>
        </param>
        <briefdescription>
<para>Colourise a segment of the document using the current lexing language. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6959" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a503b51248a736de0aace8cac98cdd634" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetProperty</definition>
        <argsstring>(const wxString &amp;key, const wxString &amp;value)</argsstring>
        <name>SetProperty</name>
        <qualifiedname>wxStyledTextCtrl::SetProperty</qualifiedname>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set up a value that may be used by a lexer for some optional feature. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6964" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a9243e321f9de9f3d33ce80366a5f9ec0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetKeyWords</definition>
        <argsstring>(int keyWordSet, const wxString &amp;keyWords)</argsstring>
        <name>SetKeyWords</name>
        <qualifiedname>wxStyledTextCtrl::SetKeyWords</qualifiedname>
        <param>
          <type>int</type>
          <declname>keyWordSet</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>keyWords</declname>
        </param>
        <briefdescription>
<para>Set up the key words used by the lexer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6969" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1aa55e15f075e652c051ed9f1ad4d2f4c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetLexerLanguage</definition>
        <argsstring>(const wxString &amp;language)</argsstring>
        <name>SetLexerLanguage</name>
        <qualifiedname>wxStyledTextCtrl::SetLexerLanguage</qualifiedname>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>language</declname>
        </param>
        <briefdescription>
<para>Set the lexing language of the document based on string name. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6974" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1abfde2eca1e4979bd497617ade2f69a44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::LoadLexerLibrary</definition>
        <argsstring>(const wxString &amp;path)</argsstring>
        <name>LoadLexerLibrary</name>
        <qualifiedname>wxStyledTextCtrl::LoadLexerLibrary</qualifiedname>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Load a lexer library (dll / so). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>3.1.1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6981" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a38337213208bf9d17d30b62561f9aff8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>wxString wxStyledTextCtrl::GetProperty</definition>
        <argsstring>(const wxString &amp;key)</argsstring>
        <name>GetProperty</name>
        <qualifiedname>wxStyledTextCtrl::GetProperty</qualifiedname>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Retrieve a &quot;property&quot; value previously set with SetProperty. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6986" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a51bce2c376bd674f31a84c9b7977082c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>wxString wxStyledTextCtrl::GetPropertyExpanded</definition>
        <argsstring>(const wxString &amp;key)</argsstring>
        <name>GetPropertyExpanded</name>
        <qualifiedname>wxStyledTextCtrl::GetPropertyExpanded</qualifiedname>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Retrieve a &quot;property&quot; value previously set with SetProperty, with &quot;$()&quot; variable replacement on returned buffer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6992" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ac8b6baa5a399a23392d0d16e2bb35754" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetPropertyInt</definition>
        <argsstring>(const wxString &amp;key, int defaultValue=0) const</argsstring>
        <name>GetPropertyInt</name>
        <qualifiedname>wxStyledTextCtrl::GetPropertyInt</qualifiedname>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>int</type>
          <declname>defaultValue</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Retrieve a &quot;property&quot; value previously set with SetProperty, interpreted as an int AFTER any &quot;$()&quot; variable replacement. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="6998" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a6901c5ac21129de6ae0005f3ff307922" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>wxString wxStyledTextCtrl::GetLexerLanguage</definition>
        <argsstring>() const</argsstring>
        <name>GetLexerLanguage</name>
        <qualifiedname>wxStyledTextCtrl::GetLexerLanguage</qualifiedname>
        <briefdescription>
<para>Retrieve the lexing language of the document. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>3.1.1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="7005" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ab779aa9eee53771e24a98a89c6d0765f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * wxStyledTextCtrl::PrivateLexerCall</definition>
        <argsstring>(int operation, void *pointer)</argsstring>
        <name>PrivateLexerCall</name>
        <qualifiedname>wxStyledTextCtrl::PrivateLexerCall</qualifiedname>
        <param>
          <type>int</type>
          <declname>operation</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>pointer</declname>
        </param>
        <briefdescription>
<para>For private communication between an application and a known lexer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="7010" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1aa52845ca9877ec3d4dee71434343f496" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>wxString wxStyledTextCtrl::PropertyNames</definition>
        <argsstring>() const</argsstring>
        <name>PropertyNames</name>
        <qualifiedname>wxStyledTextCtrl::PropertyNames</qualifiedname>
        <briefdescription>
<para>Retrieve a &apos;\n&apos; separated list of properties understood by the current lexer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="7015" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a0b57c3aaf9c61f30da61d316c0b899ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::PropertyType</definition>
        <argsstring>(const wxString &amp;name)</argsstring>
        <name>PropertyType</name>
        <qualifiedname>wxStyledTextCtrl::PropertyType</qualifiedname>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Retrieve the type of a property. </para>
        </briefdescription>
        <detaileddescription>
<para>The return value will be one of the <ref refid="stc_8h_1a5b58ddda399e1a34b0477c3912f1d11a" kindref="member">wxSTC_TYPE_* </ref> constants. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="7023" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a3901eb0e1309e76d120c3d527ed1394a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>wxString wxStyledTextCtrl::DescribeProperty</definition>
        <argsstring>(const wxString &amp;name) const</argsstring>
        <name>DescribeProperty</name>
        <qualifiedname>wxStyledTextCtrl::DescribeProperty</qualifiedname>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Describe a property. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="7028" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ac7b6dad3282bdec3bf13da4afd75ab10" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>wxString wxStyledTextCtrl::DescribeKeyWordSets</definition>
        <argsstring>() const</argsstring>
        <name>DescribeKeyWordSets</name>
        <qualifiedname>wxStyledTextCtrl::DescribeKeyWordSets</qualifiedname>
        <briefdescription>
<para>Retrieve a &apos;\n&apos; separated list of descriptions of the keyword sets understood by the current lexer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="7033" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1adf989687025050dee6472c1e5e6e59cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::AllocateSubStyles</definition>
        <argsstring>(int styleBase, int numberStyles)</argsstring>
        <name>AllocateSubStyles</name>
        <qualifiedname>wxStyledTextCtrl::AllocateSubStyles</qualifiedname>
        <param>
          <type>int</type>
          <declname>styleBase</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numberStyles</declname>
        </param>
        <briefdescription>
<para>Allocate a set of sub styles for a particular base style, returning start of range. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>3.1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="7040" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a033f8cb545a283013dde12d21e37d63d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetSubStylesStart</definition>
        <argsstring>(int styleBase) const</argsstring>
        <name>GetSubStylesStart</name>
        <qualifiedname>wxStyledTextCtrl::GetSubStylesStart</qualifiedname>
        <param>
          <type>int</type>
          <declname>styleBase</declname>
        </param>
        <briefdescription>
<para>The starting style number for the sub styles associated with a base style. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>3.1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="7047" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ae6ef28d9d06d8bf6752ce1b9a6e4ac4b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetSubStylesLength</definition>
        <argsstring>(int styleBase) const</argsstring>
        <name>GetSubStylesLength</name>
        <qualifiedname>wxStyledTextCtrl::GetSubStylesLength</qualifiedname>
        <param>
          <type>int</type>
          <declname>styleBase</declname>
        </param>
        <briefdescription>
<para>The number of sub styles associated with a base style. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>3.1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="7054" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ab4bf2fcf086314c9c45d312115a2c684" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetStyleFromSubStyle</definition>
        <argsstring>(int subStyle) const</argsstring>
        <name>GetStyleFromSubStyle</name>
        <qualifiedname>wxStyledTextCtrl::GetStyleFromSubStyle</qualifiedname>
        <param>
          <type>int</type>
          <declname>subStyle</declname>
        </param>
        <briefdescription>
<para>For a sub style, return the base style, else return the argument. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>3.1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="7061" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a5b31aa20c17ee92b487df5d5e8a11763" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetPrimaryStyleFromStyle</definition>
        <argsstring>(int style) const</argsstring>
        <name>GetPrimaryStyleFromStyle</name>
        <qualifiedname>wxStyledTextCtrl::GetPrimaryStyleFromStyle</qualifiedname>
        <param>
          <type>int</type>
          <declname>style</declname>
        </param>
        <briefdescription>
<para>For a secondary style, return the primary style, else return the argument. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>3.1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="7068" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ade2c997934846468d1284382abb03ed4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::FreeSubStyles</definition>
        <argsstring>()</argsstring>
        <name>FreeSubStyles</name>
        <qualifiedname>wxStyledTextCtrl::FreeSubStyles</qualifiedname>
        <briefdescription>
<para>Free allocated sub styles. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>3.1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="7075" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a31691d5ae45fc9fb9533c5251fe1783c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetIdentifiers</definition>
        <argsstring>(int style, const wxString &amp;identifiers)</argsstring>
        <name>SetIdentifiers</name>
        <qualifiedname>wxStyledTextCtrl::SetIdentifiers</qualifiedname>
        <param>
          <type>int</type>
          <declname>style</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>identifiers</declname>
        </param>
        <briefdescription>
<para>Set the identifiers that are shown in a particular style. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>3.1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="7082" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1aeebe092121b6ef057dea78424ae51706" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::DistanceToSecondaryStyles</definition>
        <argsstring>() const</argsstring>
        <name>DistanceToSecondaryStyles</name>
        <qualifiedname>wxStyledTextCtrl::DistanceToSecondaryStyles</qualifiedname>
        <briefdescription>
<para>Where styles are duplicated by a feature such as active/inactive code return the distance between the two types. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>3.1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="7090" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1af8fa73815958634c3d30a8adf2d4ad10" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>wxString wxStyledTextCtrl::GetSubStyleBases</definition>
        <argsstring>() const</argsstring>
        <name>GetSubStyleBases</name>
        <qualifiedname>wxStyledTextCtrl::GetSubStyleBases</qualifiedname>
        <briefdescription>
<para>Get the set of base styles that can be extended with sub styles. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>3.1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="7097" column="14"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Event related items</header>
      <description><para><anchor id="classwx_styled_text_ctrl_1Notifications"/> </para>
</description>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a8cbdb87eac5f4edd2bf78703192255fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetMouseDwellTime</definition>
        <argsstring>(int periodMilliseconds)</argsstring>
        <name>SetMouseDwellTime</name>
        <qualifiedname>wxStyledTextCtrl::SetMouseDwellTime</qualifiedname>
        <param>
          <type>int</type>
          <declname>periodMilliseconds</declname>
        </param>
        <briefdescription>
<para>Sets the time the mouse must sit still to generate a mouse dwell event. </para>
        </briefdescription>
        <detaileddescription>
<para>The input should be a time in milliseconds or wxSTC_TIME_FOREVER. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="7111" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a45b624a04aad6191e71ba311aa614b96" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetMouseDwellTime</definition>
        <argsstring>() const</argsstring>
        <name>GetMouseDwellTime</name>
        <qualifiedname>wxStyledTextCtrl::GetMouseDwellTime</qualifiedname>
        <briefdescription>
<para>Retrieve the time the mouse must sit still to generate a mouse dwell event. </para>
        </briefdescription>
        <detaileddescription>
<para>The return value will be a time in milliseconds or wxSTC_TIME_FOREVER. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="7118" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ad6f8f2e9579776a26d34e08326158f42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetModEventMask</definition>
        <argsstring>(int eventMask)</argsstring>
        <name>SetModEventMask</name>
        <qualifiedname>wxStyledTextCtrl::SetModEventMask</qualifiedname>
        <param>
          <type>int</type>
          <declname>eventMask</declname>
        </param>
        <briefdescription>
<para>Set which document modification events are sent to the container. </para>
        </briefdescription>
        <detaileddescription>
<para>The input should be a bit list containing one or more of the <ref refid="stc_8h_1a4a559742eca2e154bbafce4e406c8ba3" kindref="member">wxSTC_MOD_* </ref> constants, the <ref refid="stc_8h_1a27464beda1d135e680ebfa10a9df34f2" kindref="member">wxSTC_PERFORMED_* </ref> constants, wxSTC_STARTACTION, wxSTC_MULTILINEUNDOREDO, wxSTC_MULTISTEPUNDOREDO, and wxSTC_LASTSTEPINUNDOREDO. The input can also be wxSTC_MODEVENTMASKALL to indicate that all changes should generate events. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="7130" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1af735cd86702d565a31e4d98b26a5d1d1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetModEventMask</definition>
        <argsstring>() const</argsstring>
        <name>GetModEventMask</name>
        <qualifiedname>wxStyledTextCtrl::GetModEventMask</qualifiedname>
        <briefdescription>
<para>Get which document modification events are sent to the container. </para>
        </briefdescription>
        <detaileddescription>
<para>The return value will wxSTC_MODEVENTMASKALL if all changes generate events. Otherwise it will be a bit list containing one or more of the <ref refid="stc_8h_1a4a559742eca2e154bbafce4e406c8ba3" kindref="member">wxSTC_MOD_* </ref> constants, the <ref refid="stc_8h_1a27464beda1d135e680ebfa10a9df34f2" kindref="member">wxSTC_PERFORMED_* </ref> constants, wxSTC_STARTACTION, wxSTC_MULTILINEUNDOREDO, wxSTC_MULTISTEPUNDOREDO, and wxSTC_LASTSTEPINUNDOREDO. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="7141" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a72bcde4632b23c6886fe45275322f41a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetIdentifier</definition>
        <argsstring>(int identifier)</argsstring>
        <name>SetIdentifier</name>
        <qualifiedname>wxStyledTextCtrl::SetIdentifier</qualifiedname>
        <param>
          <type>int</type>
          <declname>identifier</declname>
        </param>
        <briefdescription>
<para>Set the identifier reported as idFrom in notification messages. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="7146" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a8f34f590fa6dab70325a9513dec439e0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetIdentifier</definition>
        <argsstring>() const</argsstring>
        <name>GetIdentifier</name>
        <qualifiedname>wxStyledTextCtrl::GetIdentifier</qualifiedname>
        <briefdescription>
<para>Get the identifier. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="7151" column="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Deprecated items</header>
      <description><para><anchor id="classwx_styled_text_ctrl_1DeprecatedMessages"/></para>
<para>These methods should not be used in new code. </para>
</description>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a9d9f2fc0cc7f4f10e437139602f69b18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetStyleBits</definition>
        <argsstring>(int bits)</argsstring>
        <name>SetStyleBits</name>
        <qualifiedname>wxStyledTextCtrl::SetStyleBits</qualifiedname>
        <param>
          <type>int</type>
          <declname>bits</declname>
        </param>
        <briefdescription>
<para>Divide each styling byte into lexical class bits (default: 5) and indicator bits (default: 3). </para>
        </briefdescription>
        <detaileddescription>
<para>If a lexer requires more than 32 lexical states, then this is used to expand the possible states.</para>
<para><xrefsect id="deprecated_1_deprecated000075"><xreftitle>Deprecated</xreftitle><xrefdescription></xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="7169" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a84a5736b6e7c2def386362cd51fa5881" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetStyleBits</definition>
        <argsstring>() const</argsstring>
        <name>GetStyleBits</name>
        <qualifiedname>wxStyledTextCtrl::GetStyleBits</qualifiedname>
        <briefdescription>
<para>Retrieve number of bits in style bytes used to hold the lexical state. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000076"><xreftitle>Deprecated</xreftitle><xrefdescription></xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="7176" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ae20fc9ec35cd194e2f98b223b5c333f4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetStyleBitsNeeded</definition>
        <argsstring>() const</argsstring>
        <name>GetStyleBitsNeeded</name>
        <qualifiedname>wxStyledTextCtrl::GetStyleBitsNeeded</qualifiedname>
        <briefdescription>
<para>Retrieve the number of bits the current lexer needs for styling. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000077"><xreftitle>Deprecated</xreftitle><xrefdescription></xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="7183" column="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Additional wxStyledTextCtrl methods</header>
      <description><para><anchor id="classwx_styled_text_ctrl_1additional_methods"/></para>
<para>In addition to the standard Scintilla functions, <ref refid="classwx_styled_text_ctrl" kindref="compound">wxStyledTextCtrl</ref> includes the following functions to simplify some tasks. </para>
</description>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ade127ac090240c41077de95ed8867462" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::GetCurrentLine</definition>
        <argsstring>()</argsstring>
        <name>GetCurrentLine</name>
        <qualifiedname>wxStyledTextCtrl::GetCurrentLine</qualifiedname>
        <briefdescription>
<para>Returns the line number of the line with the caret. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="7203" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ae2e8e43d16a25898b11972de8772044e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::StyleSetSpec</definition>
        <argsstring>(int styleNum, const wxString &amp;spec)</argsstring>
        <name>StyleSetSpec</name>
        <qualifiedname>wxStyledTextCtrl::StyleSetSpec</qualifiedname>
        <param>
          <type>int</type>
          <declname>styleNum</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>spec</declname>
        </param>
        <briefdescription>
<para>Extract style settings from a spec-string which is composed of one or more of the following comma separated elements: </para>
        </briefdescription>
        <detaileddescription>
<para>bold turns on bold italic turns on italics fore:[name or #RRGGBB] sets the foreground colour back:[name or #RRGGBB] sets the background colour face:[facename] sets the font face name to use size:[num] sets the font size in points eol turns on eol filling underline turns on underlining </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="7218" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1aec38e96092be763b4309f638e126f6f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_font" kindref="compound">wxFont</ref></type>
        <definition>wxFont wxStyledTextCtrl::StyleGetFont</definition>
        <argsstring>(int style)</argsstring>
        <name>StyleGetFont</name>
        <qualifiedname>wxStyledTextCtrl::StyleGetFont</qualifiedname>
        <param>
          <type>int</type>
          <declname>style</declname>
        </param>
        <briefdescription>
<para>Get the font of a style. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="7223" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a23bcfd5c7d2c1e445cf801b77217531f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::StyleSetFont</definition>
        <argsstring>(int styleNum, wxFont &amp;font)</argsstring>
        <name>StyleSetFont</name>
        <qualifiedname>wxStyledTextCtrl::StyleSetFont</qualifiedname>
        <param>
          <type>int</type>
          <declname>styleNum</declname>
        </param>
        <param>
          <type><ref refid="classwx_font" kindref="compound">wxFont</ref> &amp;</type>
          <declname>font</declname>
        </param>
        <briefdescription>
<para>Set style size, face, bold, italic, and underline attributes from a <ref refid="classwx_font" kindref="compound">wxFont</ref>&apos;s attributes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="7229" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a5eb90aa07d1eb7b08b17b0865a9a9f7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::StyleSetFontAttr</definition>
        <argsstring>(int styleNum, int size, const wxString &amp;faceName, bool bold, bool italic, bool underline, wxFontEncoding encoding=wxFONTENCODING_DEFAULT)</argsstring>
        <name>StyleSetFontAttr</name>
        <qualifiedname>wxStyledTextCtrl::StyleSetFontAttr</qualifiedname>
        <param>
          <type>int</type>
          <declname>styleNum</declname>
        </param>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>faceName</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bold</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>italic</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>underline</declname>
        </param>
        <param>
          <type><ref refid="interface_2wx_2font_8h_1a09016a7497d1ec6defdf13fd6439acca" kindref="member">wxFontEncoding</ref></type>
          <declname>encoding</declname>
          <defval><ref refid="interface_2wx_2font_8h_1a09016a7497d1ec6defdf13fd6439accaa8830ac2e2c3770c7a46be31c5340687f" kindref="member">wxFONTENCODING_DEFAULT</ref></defval>
        </param>
        <briefdescription>
<para>Set all font style attributes at once. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="7234" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ab5305d9d20766a67a040325cd2140b25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::StyleSetFontEncoding</definition>
        <argsstring>(int style, wxFontEncoding encoding)</argsstring>
        <name>StyleSetFontEncoding</name>
        <qualifiedname>wxStyledTextCtrl::StyleSetFontEncoding</qualifiedname>
        <param>
          <type>int</type>
          <declname>style</declname>
        </param>
        <param>
          <type><ref refid="interface_2wx_2font_8h_1a09016a7497d1ec6defdf13fd6439acca" kindref="member">wxFontEncoding</ref></type>
          <declname>encoding</declname>
        </param>
        <briefdescription>
<para>Set the font encoding to be used by a style. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="7243" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a248fc7296e539353e5617940685bea49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::CmdKeyExecute</definition>
        <argsstring>(int cmd)</argsstring>
        <name>CmdKeyExecute</name>
        <qualifiedname>wxStyledTextCtrl::CmdKeyExecute</qualifiedname>
        <param>
          <type>int</type>
          <declname>cmd</declname>
        </param>
        <briefdescription>
<para>Perform one of the operations defined by the wxSTC_CMD_* constants. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="7248" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a18a3037d50ee82d355294c8c347a08c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetMargins</definition>
        <argsstring>(int left, int right)</argsstring>
        <name>SetMargins</name>
        <qualifiedname>wxStyledTextCtrl::SetMargins</qualifiedname>
        <param>
          <type>int</type>
          <declname>left</declname>
        </param>
        <param>
          <type>int</type>
          <declname>right</declname>
        </param>
        <briefdescription>
<para>Set the left and right margin in the edit area, measured in pixels. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="7253" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ac56e5bf9181625fe4b5b227c7f2b6920" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::ScrollToLine</definition>
        <argsstring>(int line)</argsstring>
        <name>ScrollToLine</name>
        <qualifiedname>wxStyledTextCtrl::ScrollToLine</qualifiedname>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
<para>Scroll enough to make the given line visible. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="7258" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a4045083b0cd2cd28125d0f28d6734d6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::ScrollToColumn</definition>
        <argsstring>(int column)</argsstring>
        <name>ScrollToColumn</name>
        <qualifiedname>wxStyledTextCtrl::ScrollToColumn</qualifiedname>
        <param>
          <type>int</type>
          <declname>column</declname>
        </param>
        <briefdescription>
<para>Scroll enough to make the given column visible. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="7263" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a675b0a668ea88028ffd38f9728751c6e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1adc7fafddfefae454021d2e0660c96487" kindref="member">wxIntPtr</ref></type>
        <definition>wxIntPtr wxStyledTextCtrl::SendMsg</definition>
        <argsstring>(int msg, wxUIntPtr wp=0, wxIntPtr lp=0) const</argsstring>
        <name>SendMsg</name>
        <qualifiedname>wxStyledTextCtrl::SendMsg</qualifiedname>
        <param>
          <type>int</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="defs_8h_1a74cc3a4753ec135e9e2ee6b155c97216" kindref="member">wxUIntPtr</ref></type>
          <declname>wp</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="defs_8h_1adc7fafddfefae454021d2e0660c96487" kindref="member">wxIntPtr</ref></type>
          <declname>lp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Scintilla API call. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="7268" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a44acbd82ce7e4c351a6f7dec387769e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetVScrollBar</definition>
        <argsstring>(wxScrollBar *bar)</argsstring>
        <name>SetVScrollBar</name>
        <qualifiedname>wxStyledTextCtrl::SetVScrollBar</qualifiedname>
        <param>
          <type><ref refid="classwx_scroll_bar" kindref="compound">wxScrollBar</ref> *</type>
          <declname>bar</declname>
        </param>
        <briefdescription>
<para>Set the vertical scrollbar to use instead of the one that&apos;s built-in. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="7273" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a8a41c511c916ac59c486900eabfac5b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetHScrollBar</definition>
        <argsstring>(wxScrollBar *bar)</argsstring>
        <name>SetHScrollBar</name>
        <qualifiedname>wxStyledTextCtrl::SetHScrollBar</qualifiedname>
        <param>
          <type><ref refid="classwx_scroll_bar" kindref="compound">wxScrollBar</ref> *</type>
          <declname>bar</declname>
        </param>
        <briefdescription>
<para>Set the horizontal scrollbar to use instead of the one that&apos;s built-in. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="7278" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1af742c2d4f39e67c156c91eb90ffb32a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxStyledTextCtrl::GetLastKeydownProcessed</definition>
        <argsstring>()</argsstring>
        <name>GetLastKeydownProcessed</name>
        <qualifiedname>wxStyledTextCtrl::GetLastKeydownProcessed</qualifiedname>
        <briefdescription>
<para>Can be used to prevent the EVT_CHAR handler from adding the char. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="7283" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ac810f3a881221a261d95d701d080dda7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetLastKeydownProcessed</definition>
        <argsstring>(bool val)</argsstring>
        <name>SetLastKeydownProcessed</name>
        <qualifiedname>wxStyledTextCtrl::SetLastKeydownProcessed</qualifiedname>
        <param>
          <type>bool</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Returns the line number of the line with the caret. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="7284" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1aad9d4397adfc741c8a25066a6cdc8c9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxStyledTextCtrl::SaveFile</definition>
        <argsstring>(const wxString &amp;filename)</argsstring>
        <name>SaveFile</name>
        <qualifiedname>wxStyledTextCtrl::SaveFile</qualifiedname>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Write the contents of the editor to filename. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="7289" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a459d332b6b70aa24b8be88303c35e5a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxStyledTextCtrl::LoadFile</definition>
        <argsstring>(const wxString &amp;filename)</argsstring>
        <name>LoadFile</name>
        <qualifiedname>wxStyledTextCtrl::LoadFile</qualifiedname>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Load the contents of filename into the editor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="7294" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a2ff9aab06e206bafe2aecd3e240eabb9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="interface_2wx_2dnd_8h_1adbd4b292582eebbc9a6ce3dee31c2afb" kindref="member">wxDragResult</ref></type>
        <definition>wxDragResult wxStyledTextCtrl::DoDragEnter</definition>
        <argsstring>(wxCoord x, wxCoord y, wxDragResult defaultRes)</argsstring>
        <name>DoDragEnter</name>
        <qualifiedname>wxStyledTextCtrl::DoDragEnter</qualifiedname>
        <param>
          <type><ref refid="defs_8h_1a11f6efc0e8d8d680f3ec8e82aa4f1770" kindref="member">wxCoord</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="defs_8h_1a11f6efc0e8d8d680f3ec8e82aa4f1770" kindref="member">wxCoord</ref></type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="interface_2wx_2dnd_8h_1adbd4b292582eebbc9a6ce3dee31c2afb" kindref="member">wxDragResult</ref></type>
          <declname>defaultRes</declname>
        </param>
        <briefdescription>
<para>Allow for simulating a DnD DragEnter. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>3.1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="7301" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a249400fac1967c76dbb69f7b564dc893" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="interface_2wx_2dnd_8h_1adbd4b292582eebbc9a6ce3dee31c2afb" kindref="member">wxDragResult</ref></type>
        <definition>wxDragResult wxStyledTextCtrl::DoDragOver</definition>
        <argsstring>(wxCoord x, wxCoord y, wxDragResult defaultRes)</argsstring>
        <name>DoDragOver</name>
        <qualifiedname>wxStyledTextCtrl::DoDragOver</qualifiedname>
        <param>
          <type><ref refid="defs_8h_1a11f6efc0e8d8d680f3ec8e82aa4f1770" kindref="member">wxCoord</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="defs_8h_1a11f6efc0e8d8d680f3ec8e82aa4f1770" kindref="member">wxCoord</ref></type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="interface_2wx_2dnd_8h_1adbd4b292582eebbc9a6ce3dee31c2afb" kindref="member">wxDragResult</ref></type>
          <declname>defaultRes</declname>
        </param>
        <briefdescription>
<para>Allow for simulating a DnD DragOver. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="7306" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a0ca6205e2a95ff15351e165fdd5ece76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::DoDragLeave</definition>
        <argsstring>()</argsstring>
        <name>DoDragLeave</name>
        <qualifiedname>wxStyledTextCtrl::DoDragLeave</qualifiedname>
        <briefdescription>
<para>Allow for simulating a DnD DragLeave. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>3.1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="7313" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a8e8fa7c1cc7da1fddf51c8715f1db178" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxStyledTextCtrl::DoDropText</definition>
        <argsstring>(long x, long y, const wxString &amp;data)</argsstring>
        <name>DoDropText</name>
        <qualifiedname>wxStyledTextCtrl::DoDropText</qualifiedname>
        <param>
          <type>long</type>
          <declname>x</declname>
        </param>
        <param>
          <type>long</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Allow for simulating a DnD DropText. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="7318" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a9c2d1af466e2e5279215b90ca02c2d88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetUseAntiAliasing</definition>
        <argsstring>(bool useAA)</argsstring>
        <name>SetUseAntiAliasing</name>
        <qualifiedname>wxStyledTextCtrl::SetUseAntiAliasing</qualifiedname>
        <param>
          <type>bool</type>
          <declname>useAA</declname>
        </param>
        <briefdescription>
<para>Specify whether anti-aliased fonts should be used. </para>
        </briefdescription>
        <detaileddescription>
<para>This will have no effect on some platforms, but on some (wxMac for example) can greatly improve performance. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="7326" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a65f22f8fa3b367846cd798be26815b68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxStyledTextCtrl::GetUseAntiAliasing</definition>
        <argsstring>()</argsstring>
        <name>GetUseAntiAliasing</name>
        <qualifiedname>wxStyledTextCtrl::GetUseAntiAliasing</qualifiedname>
        <briefdescription>
<para>Returns the current UseAntiAliasing setting. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="7331" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1aa871705a656e0fbdf204a2a5a64e6f20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::AnnotationClearLine</definition>
        <argsstring>(int line)</argsstring>
        <name>AnnotationClearLine</name>
        <qualifiedname>wxStyledTextCtrl::AnnotationClearLine</qualifiedname>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
<para>Clear annotations from the given line. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="7336" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1adeefe5392b7394fb98ebf0291385c76a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::MarkerDefineBitmap</definition>
        <argsstring>(int markerNumber, const wxBitmap &amp;bmp)</argsstring>
        <name>MarkerDefineBitmap</name>
        <qualifiedname>wxStyledTextCtrl::MarkerDefineBitmap</qualifiedname>
        <param>
          <type>int</type>
          <declname>markerNumber</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_bitmap" kindref="compound">wxBitmap</ref> &amp;</type>
          <declname>bmp</declname>
        </param>
        <briefdescription>
<para>Define a marker with a <ref refid="classwx_bitmap" kindref="compound">wxBitmap</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="7341" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a002a95831ec96515101922756d4d99e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::RegisterImage</definition>
        <argsstring>(int type, const wxBitmap &amp;bmp)</argsstring>
        <name>RegisterImage</name>
        <qualifiedname>wxStyledTextCtrl::RegisterImage</qualifiedname>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_bitmap" kindref="compound">wxBitmap</ref> &amp;</type>
          <declname>bmp</declname>
        </param>
        <briefdescription>
<para>Register an image for use in autocompletion lists. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="7346" column="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Raw variants  &lt;br&gt;</header>
      <description><para><anchor id="_1raw_variants "/></para>
<para>These methods allow data to be sent to or received from the control using character buffers instead of using a <ref refid="classwx_string" kindref="compound">wxString</ref>. </para>
</description>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1aff7ad6c266575377b69a94dc115ed10a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::AddTextRaw</definition>
        <argsstring>(const char *text, int length=-1)</argsstring>
        <name>AddTextRaw</name>
        <qualifiedname>wxStyledTextCtrl::AddTextRaw</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>text</declname>
        </param>
        <param>
          <type>int</type>
          <declname>length</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
<para>Add text to the document at current position. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="7364" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a04ac8c4c6e4cc8978b325f62e3991830" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::InsertTextRaw</definition>
        <argsstring>(int pos, const char *text)</argsstring>
        <name>InsertTextRaw</name>
        <qualifiedname>wxStyledTextCtrl::InsertTextRaw</qualifiedname>
        <param>
          <type>int</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>text</declname>
        </param>
        <briefdescription>
<para>Insert string at a position. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="7369" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a5229698886cd28f260bc14bd96b5ba93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_char_buffer" kindref="compound">wxCharBuffer</ref></type>
        <definition>wxCharBuffer wxStyledTextCtrl::GetCurLineRaw</definition>
        <argsstring>(int *linePos=NULL)</argsstring>
        <name>GetCurLineRaw</name>
        <qualifiedname>wxStyledTextCtrl::GetCurLineRaw</qualifiedname>
        <param>
          <type>int *</type>
          <declname>linePos</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Retrieve the text of the line containing the caret. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns the index of the caret on the line. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="7375" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1aa2440e99edc0184e6027227dfa58b86e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_char_buffer" kindref="compound">wxCharBuffer</ref></type>
        <definition>wxCharBuffer wxStyledTextCtrl::GetLineRaw</definition>
        <argsstring>(int line)</argsstring>
        <name>GetLineRaw</name>
        <qualifiedname>wxStyledTextCtrl::GetLineRaw</qualifiedname>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
<para>Retrieve the contents of a line. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="7380" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a740113ad3a6dbfbcb2627c70907f4455" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_char_buffer" kindref="compound">wxCharBuffer</ref></type>
        <definition>wxCharBuffer wxStyledTextCtrl::GetSelectedTextRaw</definition>
        <argsstring>()</argsstring>
        <name>GetSelectedTextRaw</name>
        <qualifiedname>wxStyledTextCtrl::GetSelectedTextRaw</qualifiedname>
        <briefdescription>
<para>Retrieve the selected text. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="7385" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a2101f87082ffc43380d63cce45ee727e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_char_buffer" kindref="compound">wxCharBuffer</ref></type>
        <definition>wxCharBuffer wxStyledTextCtrl::GetTargetTextRaw</definition>
        <argsstring>()</argsstring>
        <name>GetTargetTextRaw</name>
        <qualifiedname>wxStyledTextCtrl::GetTargetTextRaw</qualifiedname>
        <briefdescription>
<para>Retrieve the target text. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>3.1.1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="7392" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a88be62c7ec2c2d0075df9b4b35cbd1b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_char_buffer" kindref="compound">wxCharBuffer</ref></type>
        <definition>wxCharBuffer wxStyledTextCtrl::GetTextRangeRaw</definition>
        <argsstring>(int startPos, int endPos)</argsstring>
        <name>GetTextRangeRaw</name>
        <qualifiedname>wxStyledTextCtrl::GetTextRangeRaw</qualifiedname>
        <param>
          <type>int</type>
          <declname>startPos</declname>
        </param>
        <param>
          <type>int</type>
          <declname>endPos</declname>
        </param>
        <briefdescription>
<para>Retrieve a range of text. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="7397" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a393c04f71bc68ec711a82232d440d4bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::SetTextRaw</definition>
        <argsstring>(const char *text)</argsstring>
        <name>SetTextRaw</name>
        <qualifiedname>wxStyledTextCtrl::SetTextRaw</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>text</declname>
        </param>
        <briefdescription>
<para>Replace the contents of the document with the argument text. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="7402" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ace83fdced1ffe0cdf7e7fa5b13f53add" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_char_buffer" kindref="compound">wxCharBuffer</ref></type>
        <definition>wxCharBuffer wxStyledTextCtrl::GetTextRaw</definition>
        <argsstring>()</argsstring>
        <name>GetTextRaw</name>
        <qualifiedname>wxStyledTextCtrl::GetTextRaw</qualifiedname>
        <briefdescription>
<para>Retrieve all the text in the document. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="7407" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a44c5ff0ac81ff7496e84e8eb4e691091" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::AppendTextRaw</definition>
        <argsstring>(const char *text, int length=-1)</argsstring>
        <name>AppendTextRaw</name>
        <qualifiedname>wxStyledTextCtrl::AppendTextRaw</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>text</declname>
        </param>
        <param>
          <type>int</type>
          <declname>length</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
<para>Append a string to the end of the document without changing the selection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="7412" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a0180e3bf5fa3dba2a0701586cb5181f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStyledTextCtrl::ReplaceSelectionRaw</definition>
        <argsstring>(const char *text)</argsstring>
        <name>ReplaceSelectionRaw</name>
        <qualifiedname>wxStyledTextCtrl::ReplaceSelectionRaw</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>text</declname>
        </param>
        <briefdescription>
<para>Replace the current selection with text. </para>
        </briefdescription>
        <detaileddescription>
<para>If there is no current selection, text is inserted at the current caret position.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>text</parametername>
</parameternamelist>
<parameterdescription>
<para>The null terminated string used for the replacement.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>3.1.3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="7423" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a40762f96805cbe76a7a4bc82d8e32a5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::ReplaceTargetRaw</definition>
        <argsstring>(const char *text, int length=-1)</argsstring>
        <name>ReplaceTargetRaw</name>
        <qualifiedname>wxStyledTextCtrl::ReplaceTargetRaw</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>text</declname>
        </param>
        <param>
          <type>int</type>
          <declname>length</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
<para>Replace the current target with text. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The return value is the length of the replacement string.</para>
</simplesect>
<simplesect kind="remark"><para>If length=-1, text must be null terminated.</para>
</simplesect>
<simplesect kind="since"><para>3.1.3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="7436" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1af6445ec09cf1318b02e846bfe1d9c639" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxStyledTextCtrl::ReplaceTargetRERaw</definition>
        <argsstring>(const char *text, int length=-1)</argsstring>
        <name>ReplaceTargetRERaw</name>
        <qualifiedname>wxStyledTextCtrl::ReplaceTargetRERaw</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>text</declname>
        </param>
        <param>
          <type>int</type>
          <declname>length</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
<para>Replace the current target with text using regular expressions. </para>
        </briefdescription>
        <detaileddescription>
<para>The replacement string will be formed from text with any occurrences &apos;\1&apos; through &apos;\9&apos; replaced by tagged matches from the most recent regular expression search. In addition, any occurrences of &apos;\0&apos; will be replaced with all the matched text from the most recent search. After replacement, the target range refers to the replacement text.</para>
<para><simplesect kind="return"><para>The return value is the length of the replacement string.</para>
</simplesect>
<simplesect kind="remark"><para>If length=-1, text must be null terminated.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classwx_styled_text_ctrl_1a741f27ac90f15b36c172708e6b2276da" kindref="member">SearchInTarget()</ref></para>
</simplesect>
<simplesect kind="since"><para>3.1.3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="7458" column="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Text entry methods</header>
      <description><para><anchor id="classwx_styled_text_ctrl_1text_entry"/> </para>
</description>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a7d448aa395a6947d8615dcba0f4058b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void wxStyledTextCtrl::WriteText</definition>
        <argsstring>(const wxString &amp;text)</argsstring>
        <name>WriteText</name>
        <qualifiedname>wxStyledTextCtrl::WriteText</qualifiedname>
        <reimplements refid="classwx_text_entry_1aa1b9419f95878c44234ff812b528c17b">WriteText</reimplements>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>text</declname>
        </param>
        <briefdescription>
<para>Writes the text into the text control at the current insertion position. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>text</parametername>
</parameternamelist>
<parameterdescription>
<para>Text to write to the text control.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>Newlines in the text string are the only control characters allowed, and they will cause appropriate line breaks. See operator&lt;&lt;() and <ref refid="classwx_styled_text_ctrl_1a1122175b8fc2860c8d929908e2eed8aa" kindref="member">AppendText()</ref> for more convenient ways of writing to the window. After the write operation, the insertion point will be at the end of the inserted text, so subsequent write operations will be appended. To append text after the user may have interacted with the control, call <ref refid="classwx_text_entry_1a954a065a2f20da350ae830faff1fff95" kindref="member">wxTextCtrl::SetInsertionPointEnd()</ref> before writing. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="7484" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ac1c227e4d69c32c24538fb4f38a7517c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void wxStyledTextCtrl::Remove</definition>
        <argsstring>(long from, long to)</argsstring>
        <name>Remove</name>
        <qualifiedname>wxStyledTextCtrl::Remove</qualifiedname>
        <reimplements refid="classwx_text_entry_1ab38f2786becabdacf27c7e31a2922bcc">Remove</reimplements>
        <param>
          <type>long</type>
          <declname>from</declname>
        </param>
        <param>
          <type>long</type>
          <declname>to</declname>
        </param>
        <briefdescription>
<para>Removes the text starting at the first given position up to (but not including) the character at the last position. </para>
        </briefdescription>
        <detaileddescription>
<para>This function puts the current insertion point position at <emphasis>to</emphasis> as a side effect.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>from</parametername>
</parameternamelist>
<parameterdescription>
<para>The first position. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>to</parametername>
</parameternamelist>
<parameterdescription>
<para>The last position. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="7498" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a29f8d25326e67fe4493039ed1eb15743" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void wxStyledTextCtrl::Replace</definition>
        <argsstring>(long from, long to, const wxString &amp;value)</argsstring>
        <name>Replace</name>
        <qualifiedname>wxStyledTextCtrl::Replace</qualifiedname>
        <reimplements refid="classwx_text_entry_1a1fb3ac76d270b2c64cff595497815f8d">Replace</reimplements>
        <param>
          <type>long</type>
          <declname>from</declname>
        </param>
        <param>
          <type>long</type>
          <declname>to</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Replaces the text starting at the first position up to (but not including) the character at the last position with the given text. </para>
        </briefdescription>
        <detaileddescription>
<para>This function puts the current insertion point position at <emphasis>to</emphasis> as a side effect.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>from</parametername>
</parameternamelist>
<parameterdescription>
<para>The first position. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>to</parametername>
</parameternamelist>
<parameterdescription>
<para>The last position. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to replace the existing text with. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="7514" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a6500b9ff29b3ebbf30acdbd65a3fa500" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void wxStyledTextCtrl::SetInsertionPoint</definition>
        <argsstring>(long pos)</argsstring>
        <name>SetInsertionPoint</name>
        <qualifiedname>wxStyledTextCtrl::SetInsertionPoint</qualifiedname>
        <reimplements refid="classwx_text_entry_1a6e5460ec6e893ecb3e3ce90300373de8">SetInsertionPoint</reimplements>
        <param>
          <type>long</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
<para>Sets the insertion point at the given position. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>Position to set, in the range from 0 to <ref refid="classwx_styled_text_ctrl_1ad073bdc1cfe078456f7a5039aab3507f" kindref="member">GetLastPosition()</ref> inclusive. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="7522" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a5699823b511fd13e653647791a9b84c8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>long</type>
        <definition>virtual long wxStyledTextCtrl::GetInsertionPoint</definition>
        <argsstring>() const</argsstring>
        <name>GetInsertionPoint</name>
        <qualifiedname>wxStyledTextCtrl::GetInsertionPoint</qualifiedname>
        <reimplements refid="classwx_text_entry_1aec1a523f158549abdef5271c55906902">GetInsertionPoint</reimplements>
        <briefdescription>
<para>Returns the insertion point, or cursor, position. </para>
        </briefdescription>
        <detaileddescription>
<para>This is defined as the zero based index of the character position to the right of the insertion point. For example, if the insertion point is at the end of the single-line text control, it is equal to <ref refid="classwx_styled_text_ctrl_1ad073bdc1cfe078456f7a5039aab3507f" kindref="member">GetLastPosition()</ref>.</para>
<para>Notice that insertion position is, in general, different from the index of the character the cursor position at in the string returned by <ref refid="classwx_text_entry_1a39335d9009b2053b5daf850c7b9d2974" kindref="member">GetValue()</ref>. While this is always the case for the single line controls, multi-line controls can use two characters <computeroutput>&quot;\\r\\n&quot;</computeroutput> as line separator (this is notably the case under MSW) meaning that indices in the control and its string value are offset by 1 for every line.</para>
<para>Hence to correctly get the character at the current cursor position, taking into account that there can be none if the cursor is at the end of the string, you could do the following:</para>
<para><programlisting><codeline><highlight class="normal"><ref refid="classwx_string" kindref="compound">wxString</ref><sp/>GetCurrentChar(<ref refid="classwx_text_ctrl" kindref="compound">wxTextCtrl</ref><sp/>*tc)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>pos<sp/>=<sp/>tc-&gt;<ref refid="classwx_text_entry_1aec1a523f158549abdef5271c55906902" kindref="member">GetInsertionPoint</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>pos<sp/>==<sp/>tc-&gt;<ref refid="classwx_text_entry_1a31f2b491c3039f038a5084da777c9af0" kindref="member">GetLastPosition</ref>()<sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classwx_string" kindref="compound">wxString</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tc-&gt;<ref refid="classwx_text_entry_1ae568ccd892e44bf89f9918f9ed187af3" kindref="member">GetRange</ref>(pos,<sp/>pos<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="7554" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ad073bdc1cfe078456f7a5039aab3507f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>long</type>
        <definition>virtual long wxStyledTextCtrl::GetLastPosition</definition>
        <argsstring>() const</argsstring>
        <name>GetLastPosition</name>
        <qualifiedname>wxStyledTextCtrl::GetLastPosition</qualifiedname>
        <reimplements refid="classwx_text_entry_1a31f2b491c3039f038a5084da777c9af0">GetLastPosition</reimplements>
        <briefdescription>
<para>Returns the zero based index of the last position in the text control, which is equal to the number of characters in the control. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="7560" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a93a0b8b0c54846b064f010ae999296d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void wxStyledTextCtrl::SetSelection</definition>
        <argsstring>(long from, long to)</argsstring>
        <name>SetSelection</name>
        <qualifiedname>wxStyledTextCtrl::SetSelection</qualifiedname>
        <reimplements refid="classwx_text_entry_1af7e298bc2a34bd646328f53efab766aa">SetSelection</reimplements>
        <param>
          <type>long</type>
          <declname>from</declname>
        </param>
        <param>
          <type>long</type>
          <declname>to</declname>
        </param>
        <briefdescription>
<para>Selects the text starting at the first position up to (but not including) the character at the last position. </para>
        </briefdescription>
        <detaileddescription>
<para>If both parameters are equal to -1 all text in the control is selected.</para>
<para>Notice that the insertion point will be moved to <emphasis>from</emphasis> by this function.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>from</parametername>
</parameternamelist>
<parameterdescription>
<para>The first position. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>to</parametername>
</parameternamelist>
<parameterdescription>
<para>The last position.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classwx_styled_text_ctrl_1ae4b9f83f0dc460834b0533b26cc8314d" kindref="member">SelectAll()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="7578" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1ad1c7adb764ec66083a1f9e90efd611e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void wxStyledTextCtrl::SelectNone</definition>
        <argsstring>()</argsstring>
        <name>SelectNone</name>
        <qualifiedname>wxStyledTextCtrl::SelectNone</qualifiedname>
        <reimplements refid="classwx_text_entry_1a7ab161521fee2982118f109cfeaa4f22">SelectNone</reimplements>
        <briefdescription>
<para>Deselects selected text in the control. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>2.9.5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="7585" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1abc740d16be2106807f00b56590bab7a1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void wxStyledTextCtrl::GetSelection</definition>
        <argsstring>(long *from, long *to) const</argsstring>
        <name>GetSelection</name>
        <qualifiedname>wxStyledTextCtrl::GetSelection</qualifiedname>
        <reimplements refid="classwx_text_entry_1af8d6ff4ff8376bb762987069a69b984b">GetSelection</reimplements>
        <param>
          <type>long *</type>
          <declname>from</declname>
        </param>
        <param>
          <type>long *</type>
          <declname>to</declname>
        </param>
        <briefdescription>
<para>Gets the current selection span. </para>
        </briefdescription>
        <detaileddescription>
<para>If the returned values are equal, there was no selection. Please note that the indices returned may be used with the other <ref refid="classwx_text_ctrl" kindref="compound">wxTextCtrl</ref> methods but don&apos;t necessarily represent the correct indices into the string returned by <ref refid="classwx_text_entry_1a39335d9009b2053b5daf850c7b9d2974" kindref="member">GetValue()</ref> for multiline controls under Windows (at least,) you should use <ref refid="classwx_text_entry_1adac8cae1eef10e198d3f8777d91b2607" kindref="member">GetStringSelection()</ref> to get the selected text.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>from</parametername>
</parameternamelist>
<parameterdescription>
<para>The returned first position. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>to</parametername>
</parameternamelist>
<parameterdescription>
<para>The returned last position.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>wxPerl Note:</bold> In wxPerl this method takes no parameters and returns a 2-element list (from, to).  </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="7606" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a5861b08a438b0cfc35cfc188d5cea59f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool wxStyledTextCtrl::IsEditable</definition>
        <argsstring>() const</argsstring>
        <name>IsEditable</name>
        <qualifiedname>wxStyledTextCtrl::IsEditable</qualifiedname>
        <reimplements refid="classwx_text_entry_1ac7191f01863c91397ac844883e588b43">IsEditable</reimplements>
        <briefdescription>
<para>Returns true if the controls contents may be edited by user (note that it always can be changed by the program). </para>
        </briefdescription>
        <detaileddescription>
<para>In other words, this functions returns true if the control hasn&apos;t been put in read-only mode by a previous call to <ref refid="classwx_styled_text_ctrl_1a8329f77d4bd850ce21beeba410625c97" kindref="member">SetEditable()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="7615" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a8329f77d4bd850ce21beeba410625c97" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void wxStyledTextCtrl::SetEditable</definition>
        <argsstring>(bool editable)</argsstring>
        <name>SetEditable</name>
        <qualifiedname>wxStyledTextCtrl::SetEditable</qualifiedname>
        <reimplements refid="classwx_text_entry_1a7d95c0f42b5e1dc0559ae1ec56cb8b86">SetEditable</reimplements>
        <param>
          <type>bool</type>
          <declname>editable</declname>
        </param>
        <briefdescription>
<para>Makes the text item editable or read-only, overriding the <bold>wxTE_READONLY</bold> flag. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>editable</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, the control is editable. If false, the control is read-only.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classwx_styled_text_ctrl_1a5861b08a438b0cfc35cfc188d5cea59f" kindref="member">IsEditable()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="7627" column="18"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Text area methods</header>
      <description><para><anchor id="classwx_styled_text_ctrl_1text_area"/> </para>
</description>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1af3bd87bdcd57d3d31d35ec4dec74d0e6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>int</type>
        <definition>virtual int wxStyledTextCtrl::GetLineLength</definition>
        <argsstring>(long lineNo) const</argsstring>
        <name>GetLineLength</name>
        <qualifiedname>wxStyledTextCtrl::GetLineLength</qualifiedname>
        <param>
          <type>long</type>
          <declname>lineNo</declname>
        </param>
        <briefdescription>
<para>Gets the length of the specified line, not including any trailing newline character(s). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lineNo</parametername>
</parameternamelist>
<parameterdescription>
<para>Line number (starting from zero).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The length of the line, or -1 if <emphasis>lineNo</emphasis> was invalid. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="7647" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a04b4a35a666e3708c4296073d2d05b3b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>virtual wxString wxStyledTextCtrl::GetLineText</definition>
        <argsstring>(long lineNo) const</argsstring>
        <name>GetLineText</name>
        <qualifiedname>wxStyledTextCtrl::GetLineText</qualifiedname>
        <param>
          <type>long</type>
          <declname>lineNo</declname>
        </param>
        <briefdescription>
<para>Returns the contents of a given line in the text control, not including any trailing newline character(s). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lineNo</parametername>
</parameternamelist>
<parameterdescription>
<para>The line number, starting from zero.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The contents of the line. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="7659" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a6ad731d2f2ce69288383102a53221f98" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>int</type>
        <definition>virtual int wxStyledTextCtrl::GetNumberOfLines</definition>
        <argsstring>() const</argsstring>
        <name>GetNumberOfLines</name>
        <qualifiedname>wxStyledTextCtrl::GetNumberOfLines</qualifiedname>
        <briefdescription>
<para>Returns the number of lines in the text control buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>The returned number is the number of logical lines, i.e. just the count of the number of newline characters in the control + 1, for wxGTK and wxOSX/Cocoa ports while it is the number of physical lines, i.e. the count of lines actually shown in the control, in wxMSW. Because of this discrepancy, it is not recommended to use this function.</para>
<para><simplesect kind="remark"><para>Note that even empty text controls have one line (where the insertion point is), so <ref refid="classwx_styled_text_ctrl_1a6ad731d2f2ce69288383102a53221f98" kindref="member">GetNumberOfLines()</ref> never returns 0. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="7674" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1aef6259020fc4747d8f3092bcf89f75cf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool wxStyledTextCtrl::IsModified</definition>
        <argsstring>() const</argsstring>
        <name>IsModified</name>
        <qualifiedname>wxStyledTextCtrl::IsModified</qualifiedname>
        <briefdescription>
<para>Returns true if the text has been modified by user. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that calling <ref refid="classwx_text_entry_1a90f876b2dd83ba5c97ba0c193b386e9f" kindref="member">SetValue()</ref> doesn&apos;t make the control modified.</para>
<para><simplesect kind="see"><para><ref refid="classwx_styled_text_ctrl_1a1e2fd82c4b7d4c87fa0ad2e2d92abc95" kindref="member">MarkDirty()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="7683" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a1e2fd82c4b7d4c87fa0ad2e2d92abc95" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void wxStyledTextCtrl::MarkDirty</definition>
        <argsstring>()</argsstring>
        <name>MarkDirty</name>
        <qualifiedname>wxStyledTextCtrl::MarkDirty</qualifiedname>
        <briefdescription>
<para>Mark text as modified (dirty). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classwx_styled_text_ctrl_1aef6259020fc4747d8f3092bcf89f75cf" kindref="member">IsModified()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="7690" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a0c113a56c8ba929a44f34a15d8d68bd5" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void wxStyledTextCtrl::DiscardEdits</definition>
        <argsstring>()</argsstring>
        <name>DiscardEdits</name>
        <qualifiedname>wxStyledTextCtrl::DiscardEdits</qualifiedname>
        <briefdescription>
<para>Resets the internal modified flag as if the current changes had been saved. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="7696" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1acd19cd142b2df3ef3e445e09eb12713a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool wxStyledTextCtrl::SetStyle</definition>
        <argsstring>(long start, long end, const wxTextAttr &amp;style)</argsstring>
        <name>SetStyle</name>
        <qualifiedname>wxStyledTextCtrl::SetStyle</qualifiedname>
        <param>
          <type>long</type>
          <declname>start</declname>
        </param>
        <param>
          <type>long</type>
          <declname>end</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_text_attr" kindref="compound">wxTextAttr</ref> &amp;</type>
          <declname>style</declname>
        </param>
        <briefdescription>
<para>This method is inherited from wxTextAreaBase but is not implemented in <ref refid="classwx_styled_text_ctrl" kindref="compound">wxStyledTextCtrl</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="7702" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a6c4597647017cab178fc81c6b9ea72d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool wxStyledTextCtrl::GetStyle</definition>
        <argsstring>(long position, wxTextAttr &amp;style)</argsstring>
        <name>GetStyle</name>
        <qualifiedname>wxStyledTextCtrl::GetStyle</qualifiedname>
        <param>
          <type>long</type>
          <declname>position</declname>
        </param>
        <param>
          <type><ref refid="classwx_text_attr" kindref="compound">wxTextAttr</ref> &amp;</type>
          <declname>style</declname>
        </param>
        <briefdescription>
<para>This method is inherited from wxTextAreaBase but is not implemented in <ref refid="classwx_styled_text_ctrl" kindref="compound">wxStyledTextCtrl</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="7708" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a4d9838a7c92d2f28afe4d6ec122a48fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool wxStyledTextCtrl::SetDefaultStyle</definition>
        <argsstring>(const wxTextAttr &amp;style)</argsstring>
        <name>SetDefaultStyle</name>
        <qualifiedname>wxStyledTextCtrl::SetDefaultStyle</qualifiedname>
        <param>
          <type>const <ref refid="classwx_text_attr" kindref="compound">wxTextAttr</ref> &amp;</type>
          <declname>style</declname>
        </param>
        <briefdescription>
<para>This method is inherited from wxTextAreaBase but is not implemented in <ref refid="classwx_styled_text_ctrl" kindref="compound">wxStyledTextCtrl</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="7714" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1af08acc57c0ee7eb6e54efc7f8bc8ce1b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>long</type>
        <definition>virtual long wxStyledTextCtrl::XYToPosition</definition>
        <argsstring>(long x, long y) const</argsstring>
        <name>XYToPosition</name>
        <qualifiedname>wxStyledTextCtrl::XYToPosition</qualifiedname>
        <param>
          <type>long</type>
          <declname>x</declname>
        </param>
        <param>
          <type>long</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Converts the given zero based column and line number to a position. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The column number. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>The line number.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The position value, or -1 if x or y was invalid. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="7727" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1afb206422b8f73bdad7a1726dbe831d4a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool wxStyledTextCtrl::PositionToXY</definition>
        <argsstring>(long pos, long *x, long *y) const</argsstring>
        <name>PositionToXY</name>
        <qualifiedname>wxStyledTextCtrl::PositionToXY</qualifiedname>
        <param>
          <type>long</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>long *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>long *</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Converts given position to a zero-based column, line number pair. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>Position. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Receives zero based column number. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Receives zero based line number.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true on success, false on failure (most likely due to a too large position parameter).</para>
</simplesect>
<bold>wxPerl Note:</bold> In wxPerl this function takes only the <emphasis>pos</emphasis> argument and returns a 2-element list (x, y). </para>
<para><simplesect kind="see"><para><ref refid="classwx_styled_text_ctrl_1af08acc57c0ee7eb6e54efc7f8bc8ce1b" kindref="member">XYToPosition()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="7750" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a6a458124a712a1ff1d810f5e7d767f3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void wxStyledTextCtrl::ShowPosition</definition>
        <argsstring>(long pos)</argsstring>
        <name>ShowPosition</name>
        <qualifiedname>wxStyledTextCtrl::ShowPosition</qualifiedname>
        <param>
          <type>long</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
<para>Makes the line containing the given position visible. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>The position that should be visible. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="7758" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a3c35b86bffe8836129551ee2c620e1a5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="textctrl_8h_1a0ca70276b66011b1ca0a120b8c20fd16" kindref="member">wxTextCtrlHitTestResult</ref></type>
        <definition>virtual wxTextCtrlHitTestResult wxStyledTextCtrl::HitTest</definition>
        <argsstring>(const wxPoint &amp;pt, long *pos) const</argsstring>
        <name>HitTest</name>
        <qualifiedname>wxStyledTextCtrl::HitTest</qualifiedname>
        <param>
          <type>const <ref refid="classwx_point" kindref="compound">wxPoint</ref> &amp;</type>
          <declname>pt</declname>
        </param>
        <param>
          <type>long *</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
<para>Finds the position of the character at the specified point. </para>
        </briefdescription>
        <detaileddescription>
<para>If the return code is not <computeroutput>wxTE_HT_UNKNOWN</computeroutput> the row and column of the character closest to this position are returned, otherwise the output parameters are not modified.</para>
<para>Please note that this function is currently only implemented in wxUniv, wxMSW and wxGTK2 ports and always returns <computeroutput>wxTE_HT_UNKNOWN</computeroutput> in the other ports.</para>
<para><bold>wxPerl Note:</bold> In wxPerl this function takes only the <emphasis>pt</emphasis> argument and returns a 3-element list (result, col, row). </para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pt</parametername>
</parameternamelist>
<parameterdescription>
<para>The position of the point to check, in window device coordinates. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>Receives the position of the character at the given position. May be NULL.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classwx_styled_text_ctrl_1afb206422b8f73bdad7a1726dbe831d4a" kindref="member">PositionToXY()</ref>, <ref refid="classwx_styled_text_ctrl_1af08acc57c0ee7eb6e54efc7f8bc8ce1b" kindref="member">XYToPosition()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="7784" column="37"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1aeded1fde5410fe4e4e2cf2ba468c121a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="textctrl_8h_1a0ca70276b66011b1ca0a120b8c20fd16" kindref="member">wxTextCtrlHitTestResult</ref></type>
        <definition>virtual wxTextCtrlHitTestResult wxStyledTextCtrl::HitTest</definition>
        <argsstring>(const wxPoint &amp;pt, wxTextCoord *col, wxTextCoord *row) const</argsstring>
        <name>HitTest</name>
        <qualifiedname>wxStyledTextCtrl::HitTest</qualifiedname>
        <param>
          <type>const <ref refid="classwx_point" kindref="compound">wxPoint</ref> &amp;</type>
          <declname>pt</declname>
        </param>
        <param>
          <type><ref refid="textctrl_8h_1ac7f269c911c1d23b7d9eb782a02129be" kindref="member">wxTextCoord</ref> *</type>
          <declname>col</declname>
        </param>
        <param>
          <type><ref refid="textctrl_8h_1ac7f269c911c1d23b7d9eb782a02129be" kindref="member">wxTextCoord</ref> *</type>
          <declname>row</declname>
        </param>
        <briefdescription>
<para>Finds the row and column of the character at the specified point. </para>
        </briefdescription>
        <detaileddescription>
<para>If the return code is not <computeroutput>wxTE_HT_UNKNOWN</computeroutput> the row and column of the character closest to this position are returned, otherwise the output parameters are not modified.</para>
<para>Please note that this function is currently only implemented in wxUniv, wxMSW and wxGTK2 ports and always returns <computeroutput>wxTE_HT_UNKNOWN</computeroutput> in the other ports.</para>
<para><bold>wxPerl Note:</bold> In wxPerl this function takes only the <emphasis>pt</emphasis> argument and returns a 3-element list (result, col, row). </para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pt</parametername>
</parameternamelist>
<parameterdescription>
<para>The position of the point to check, in window device coordinates. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>col</parametername>
</parameternamelist>
<parameterdescription>
<para>Receives the column of the character at the given position. May be NULL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>row</parametername>
</parameternamelist>
<parameterdescription>
<para>Receives the row of the character at the given position. May be NULL.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classwx_styled_text_ctrl_1afb206422b8f73bdad7a1726dbe831d4a" kindref="member">PositionToXY()</ref>, <ref refid="classwx_styled_text_ctrl_1af08acc57c0ee7eb6e54efc7f8bc8ce1b" kindref="member">XYToPosition()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="7813" column="37"/>
      </memberdef>
      <memberdef kind="function" id="classwx_styled_text_ctrl_1a79969628d9be422e5af9735e1aafdc00" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_version_info" kindref="compound">wxVersionInfo</ref></type>
        <definition>static wxVersionInfo wxStyledTextCtrl::GetLibraryVersionInfo</definition>
        <argsstring>()</argsstring>
        <name>GetLibraryVersionInfo</name>
        <qualifiedname>wxStyledTextCtrl::GetLibraryVersionInfo</qualifiedname>
        <briefdescription>
<para>Returns the version of the Scintilla library used by this control. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stc/stc.h" line="7825" column="26"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A wxWidgets implementation of the Scintilla source code editing component. </para>
    </briefdescription>
    <detaileddescription>
<para>As well as features found in standard text editing components, Scintilla includes features especially useful when editing and debugging source code. These include support for syntax styling, error indicators, code completion and call tips.</para>
<para>The selection margin can contain markers like those used in debuggers to indicate breakpoints and the current line. Styling choices are more open than with many editors, allowing the use of proportional fonts, bold and italics, multiple foreground and background colours and multiple fonts.</para>
<para><ref refid="classwx_styled_text_ctrl" kindref="compound">wxStyledTextCtrl</ref> is a 1 to 1 mapping of &quot;raw&quot; scintilla interface, whose documentation can be found in the Scintilla website (<ulink url="http://www.scintilla.org/">http://www.scintilla.org/</ulink>).</para>
<para>Please see <ref refid="classwx_styled_text_event" kindref="compound">wxStyledTextEvent</ref> for the documentation of all event types you can use with <ref refid="classwx_styled_text_ctrl" kindref="compound">wxStyledTextCtrl</ref>.</para>
<sect1 id="classwx_styled_text_ctrl_1stc_index">
<title>Index of the member groups</title>
<para>Links for quick access to the various categories of <ref refid="classwx_styled_text_ctrl" kindref="compound">wxStyledTextCtrl</ref> functions:<itemizedlist>
<listitem><para><ulink url="#ctor">Constructors and related methods</ulink></para>
</listitem><listitem><para><ulink url="#TextRetrievalAndModification">Text retrieval and modification</ulink></para>
</listitem><listitem><para><ulink url="#Searching">Searching and replacing</ulink></para>
</listitem><listitem><para><ulink url="#Overtype">Overtype</ulink></para>
</listitem><listitem><para><ulink url="#CutCopyAndPaste">Cut copy and paste</ulink></para>
</listitem><listitem><para><ulink url="#ErrorHandling">Error handling</ulink></para>
</listitem><listitem><para><ulink url="#UndoAndRedo">Undo and Redo</ulink></para>
</listitem><listitem><para><ulink url="#SelectionAndInformation">Selection and information</ulink></para>
</listitem><listitem><para><ulink url="#MultipleSelectionAndVirtualSpace">Multiple Selection and Virtual Space</ulink></para>
</listitem><listitem><para><ulink url="#ScrollingAndAutomaticScrolling">Scrolling and automatic scrolling</ulink></para>
</listitem><listitem><para><ulink url="#WhiteSpace">White space</ulink></para>
</listitem><listitem><para><ulink url="#Cursor">Cursor</ulink></para>
</listitem><listitem><para><ulink url="#MouseCapture">Mouse capture</ulink></para>
</listitem><listitem><para><ulink url="#LineEndings">Line endings</ulink></para>
</listitem><listitem><para><ulink url="#Words">Words</ulink></para>
</listitem><listitem><para><ulink url="#Styling">Styling</ulink></para>
</listitem><listitem><para><ulink url="#StyleDefinition">Style definition</ulink></para>
</listitem><listitem><para><ulink url="#CaretAndSelectionStyles">Caret selection and hotspot styles</ulink></para>
</listitem><listitem><para><ulink url="#CharacterRepresentations">Character representations</ulink></para>
</listitem><listitem><para><ulink url="#Margins">Margins</ulink></para>
</listitem><listitem><para><ulink url="#Annotations">Annotations</ulink></para>
</listitem><listitem><para><ulink url="#OtherSettings">Other settings</ulink></para>
</listitem><listitem><para><ulink url="#BraceHighlighting">Brace highlighting</ulink></para>
</listitem><listitem><para><ulink url="#TabsAndIndentationGuides">Tabs and Indentation Guides</ulink></para>
</listitem><listitem><para><ulink url="#Markers">Markers</ulink></para>
</listitem><listitem><para><ulink url="#Indicators">Indicators</ulink></para>
</listitem><listitem><para><ulink url="#Autocompletion">Autocompletion</ulink></para>
</listitem><listitem><para><ulink url="#UserLists">User lists</ulink></para>
</listitem><listitem><para><ulink url="#CallTips">Call tips</ulink></para>
</listitem><listitem><para><ulink url="#KeyboardCommands">Keyboard commands</ulink></para>
</listitem><listitem><para><ulink url="#KeyBindings">Key bindings</ulink></para>
</listitem><listitem><para><ulink url="#PopupEditMenu">Popup edit menu</ulink></para>
</listitem><listitem><para><ulink url="#MacroRecording">Macro recording</ulink></para>
</listitem><listitem><para><ulink url="#Printing">Printing</ulink></para>
</listitem><listitem><para><ulink url="#DirectAccess">Direct access</ulink></para>
</listitem><listitem><para><ulink url="#MultipleViews">Multiple views</ulink></para>
</listitem><listitem><para><ulink url="#BackgroundLoadSave">Background loading and saving</ulink></para>
</listitem><listitem><para><ulink url="#Folding">Folding</ulink></para>
</listitem><listitem><para><ulink url="#LineWrapping">Line wrapping</ulink></para>
</listitem><listitem><para><ulink url="#Zooming">Zooming</ulink></para>
</listitem><listitem><para><ulink url="#LongLines">Long lines</ulink></para>
</listitem><listitem><para><ulink url="#Lexer">Lexer</ulink></para>
</listitem><listitem><para><ulink url="#Notifications">Event related items</ulink></para>
</listitem><listitem><para><ulink url="#DeprecatedMessages">Deprecated items</ulink></para>
</listitem><listitem><para><ulink url="#additional_methods">Additional wxStyledTextCtrl methods</ulink></para>
</listitem><listitem><para><ulink url="#raw_variants ">Raw variants</ulink></para>
</listitem><listitem><para><ulink url="#text_entry">Text entry methods</ulink></para>
</listitem><listitem><para><ulink url="#text_area">Text area methods</ulink></para>
</listitem></itemizedlist>
</para>
<para><heading level="2"></heading>
</para>
<para>Library:<nonbreakablespace/><nonbreakablespace/><ref refid="page_libs_1page_libs_wxstc" kindref="member">wxSTC</ref></para>
<para>Category:<nonbreakablespace/><nonbreakablespace/><ref refid="group__group__class__stc" kindref="compound">Scintilla Text Editor</ref></para>
<para><simplesect kind="see"><para><ref refid="classwx_styled_text_event" kindref="compound">wxStyledTextEvent</ref> </para>
</simplesect>
</para>
</sect1>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>wxControl</label>
        <link refid="classwx_control"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>wxEvtHandler</label>
        <link refid="classwx_evt_handler"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>wxObject</label>
        <link refid="classwx_object"/>
      </node>
      <node id="1">
        <label>wxStyledTextCtrl</label>
        <link refid="classwx_styled_text_ctrl"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>wxTextEntry</label>
        <link refid="classwx_text_entry"/>
      </node>
      <node id="6">
        <label>wxTrackable</label>
        <link refid="classwx_trackable"/>
      </node>
      <node id="3">
        <label>wxWindow</label>
        <link refid="classwx_window"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>wxControl</label>
        <link refid="classwx_control"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>wxEvtHandler</label>
        <link refid="classwx_evt_handler"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>wxObject</label>
        <link refid="classwx_object"/>
        <childnode refid="6" relation="usage">
          <edgelabel>m_refData</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>wxObjectRefData</label>
        <link refid="classwx_object_ref_data"/>
      </node>
      <node id="1">
        <label>wxStyledTextCtrl</label>
        <link refid="classwx_styled_text_ctrl"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>wxTextEntry</label>
        <link refid="classwx_text_entry"/>
      </node>
      <node id="7">
        <label>wxTrackable</label>
        <link refid="classwx_trackable"/>
      </node>
      <node id="3">
        <label>wxWindow</label>
        <link refid="classwx_window"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="interface/wx/stc/stc.h" line="2841" column="1" bodyfile="interface/wx/stc/stc.h" bodystart="2842" bodyend="7827"/>
    <listofallmembers>
      <member refid="classwx_window_1a1da8baa734b9872d0c085b86a7b5d817" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>AcceptsFocus</name></member>
      <member refid="classwx_window_1a3a0cb3bd5e82462b19df9f24ad6d9ac4" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>AcceptsFocusFromKeyboard</name></member>
      <member refid="classwx_window_1af0c30b930ecf57f94b8cfc8871e8fd94" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>AcceptsFocusRecursively</name></member>
      <member refid="classwx_window_1abf60159278059a5bb397eb8647227bb3" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>AddChild</name></member>
      <member refid="classwx_evt_handler_1a7dc3c701781f4044372049de5004137e" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>AddFilter</name></member>
      <member refid="classwx_window_1a774b5b5548a6258727b5e2099e63ae9a" prot="protected" virt="virtual"><scope>wxStyledTextCtrl</scope><name>AddPendingEvent</name></member>
      <member refid="classwx_styled_text_ctrl_1a253764689ee3a0448c159f05b683c050" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>AddRefDocument</name></member>
      <member refid="classwx_styled_text_ctrl_1a07b961b15bbec1b9dd39b4a496052eb8" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>AddSelection</name></member>
      <member refid="classwx_styled_text_ctrl_1acf84b22ebe77e57927ac9bcbcec09a5e" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>AddStyledText</name></member>
      <member refid="classwx_styled_text_ctrl_1a47c95cfc227c228768f8732b95f21251" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>AddTabStop</name></member>
      <member refid="classwx_styled_text_ctrl_1ae6a49933178e52a9312741c06a7bcfb3" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>AddText</name></member>
      <member refid="classwx_styled_text_ctrl_1aff7ad6c266575377b69a94dc115ed10a" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>AddTextRaw</name></member>
      <member refid="classwx_styled_text_ctrl_1a14353874dba30d73b1cde1f245e09c10" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>AddUndoAction</name></member>
      <member refid="classwx_window_1a71d1daa71f1ad1f6cbaac54db7e71af3" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>AdjustForLayoutDirection</name></member>
      <member refid="classwx_styled_text_ctrl_1a4af0b26e83a158ba2d444bcb42fe90be" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>Allocate</name></member>
      <member refid="classwx_styled_text_ctrl_1a25caac69af890b5750a05dd3c9ce3cb0" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>AllocateExtendedStyles</name></member>
      <member refid="classwx_styled_text_ctrl_1adf989687025050dee6472c1e5e6e59cd" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>AllocateSubStyles</name></member>
      <member refid="classwx_object_1a60204063f3cc3aa2fa1c7ff5bda9eb13" prot="protected" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>AllocExclusive</name></member>
      <member refid="classwx_window_1aae29552806a328c6a55ef8f07647f5ba" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>AlwaysShowScrollbars</name></member>
      <member refid="classwx_styled_text_ctrl_1ae5b50b8811ea4dca4fce022dcf97b457" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>AnnotationClearAll</name></member>
      <member refid="classwx_styled_text_ctrl_1aa871705a656e0fbdf204a2a5a64e6f20" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>AnnotationClearLine</name></member>
      <member refid="classwx_styled_text_ctrl_1ac14e4b69b1204121c09b73f4bca5cb36" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>AnnotationGetLines</name></member>
      <member refid="classwx_styled_text_ctrl_1a4c39973c09932da41829b8bcf339f1e4" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>AnnotationGetStyle</name></member>
      <member refid="classwx_styled_text_ctrl_1a417b873745afb481d849beb75d79e99f" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>AnnotationGetStyleOffset</name></member>
      <member refid="classwx_styled_text_ctrl_1a403958f2d5303a8e571c734fada0dcdb" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>AnnotationGetStyles</name></member>
      <member refid="classwx_styled_text_ctrl_1af0b87546e61d4b467de787f049ec21f3" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>AnnotationGetText</name></member>
      <member refid="classwx_styled_text_ctrl_1a87f11eb914e0fe18ee3450e63ef3a489" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>AnnotationGetVisible</name></member>
      <member refid="classwx_styled_text_ctrl_1a67bfcd63c3e377996de8e0f6cea79494" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>AnnotationSetStyle</name></member>
      <member refid="classwx_styled_text_ctrl_1af526a69f258363d5e6db9d75be291cdd" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>AnnotationSetStyleOffset</name></member>
      <member refid="classwx_styled_text_ctrl_1a8644662a623a35c6f8970119cbc891ed" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>AnnotationSetStyles</name></member>
      <member refid="classwx_styled_text_ctrl_1aecd0b63c51816832642ecd2f44b00a87" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>AnnotationSetText</name></member>
      <member refid="classwx_styled_text_ctrl_1a6e2c50e5cbc7de59f25bc4c00662c90d" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>AnnotationSetVisible</name></member>
      <member refid="classwx_styled_text_ctrl_1a1122175b8fc2860c8d929908e2eed8aa" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>AppendText</name></member>
      <member refid="classwx_styled_text_ctrl_1a44c5ff0ac81ff7496e84e8eb4e691091" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>AppendTextRaw</name></member>
      <member refid="classwx_styled_text_ctrl_1a0f42da320f51676cefb9c96a50076a3e" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>AutoCompActive</name></member>
      <member refid="classwx_styled_text_ctrl_1a67a96291c515f843bdb50ff2befbe04e" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>AutoCompCancel</name></member>
      <member refid="classwx_styled_text_ctrl_1ae73acee3f1f2e5009574a4d58dc30899" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>AutoCompComplete</name></member>
      <member refid="classwx_styled_text_ctrl_1a0f88adfb702b9e01bf3a81c955defe36" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>AutoCompGetAutoHide</name></member>
      <member refid="classwx_styled_text_ctrl_1ade2847f7e21ef063a2dd01beaeb1295d" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>AutoCompGetCancelAtStart</name></member>
      <member refid="classwx_styled_text_ctrl_1a6d27d2dc06b838b316072966174d3fa5" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>AutoCompGetCaseInsensitiveBehaviour</name></member>
      <member refid="classwx_styled_text_ctrl_1aa6518f0ccc4db9e13db64f7d0f4c0e7d" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>AutoCompGetChooseSingle</name></member>
      <member refid="classwx_styled_text_ctrl_1a8f6c1ccf1999787ad73ce164a1583465" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>AutoCompGetCurrent</name></member>
      <member refid="classwx_styled_text_ctrl_1a23776389fc828485d49cae08c2c9c356" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>AutoCompGetCurrentText</name></member>
      <member refid="classwx_styled_text_ctrl_1ae86a095ce3fc6f639cde04eebf86be31" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>AutoCompGetDropRestOfWord</name></member>
      <member refid="classwx_styled_text_ctrl_1afcf0c878929be55bce00568888267fd1" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>AutoCompGetIgnoreCase</name></member>
      <member refid="classwx_styled_text_ctrl_1abcbef12fad2e2a5293df23223e5bd5db" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>AutoCompGetMaxHeight</name></member>
      <member refid="classwx_styled_text_ctrl_1af7ed86d2c623d255ee08ea346b705a97" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>AutoCompGetMaxWidth</name></member>
      <member refid="classwx_styled_text_ctrl_1ab4c67a981ff3a8ee69e44ee37a865751" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>AutoCompGetMulti</name></member>
      <member refid="classwx_styled_text_ctrl_1a82f6d9cb2c710ff41e06e553838b165b" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>AutoCompGetOrder</name></member>
      <member refid="classwx_styled_text_ctrl_1a9696d73befa0ee5d6fadc73f3064ba29" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>AutoCompGetSeparator</name></member>
      <member refid="classwx_styled_text_ctrl_1a63f1f16acc00377a4806babbb2a62a18" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>AutoCompGetTypeSeparator</name></member>
      <member refid="classwx_text_entry_1ad911d59d6b381a20b0a6c34df2ac1d9f" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>AutoComplete</name></member>
      <member refid="classwx_text_entry_1ae8ca40185ba6bbaacb4715039d73342b" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>AutoComplete</name></member>
      <member refid="classwx_text_entry_1ab02338d68d51f103551454298578851c" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>AutoCompleteDirectories</name></member>
      <member refid="classwx_text_entry_1ad40d7e35d8bb9c9ab8e4ffa1b801a5d5" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>AutoCompleteFileNames</name></member>
      <member refid="classwx_styled_text_ctrl_1ab26825a33c6bc6a7c301a8406c5c6f0e" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>AutoCompPosStart</name></member>
      <member refid="classwx_styled_text_ctrl_1afd112f42500f9a6c8a68033393573342" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>AutoCompSelect</name></member>
      <member refid="classwx_styled_text_ctrl_1a3f11adf70e6e0ee121d3375cdfb4c455" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>AutoCompSetAutoHide</name></member>
      <member refid="classwx_styled_text_ctrl_1a1296efd068f325b21941c9cad968edd5" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>AutoCompSetCancelAtStart</name></member>
      <member refid="classwx_styled_text_ctrl_1a77c6a53caaacc0d5bfcbb768ee828227" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>AutoCompSetCaseInsensitiveBehaviour</name></member>
      <member refid="classwx_styled_text_ctrl_1a14bef81d58d81c83e65e3aa2c2b07ce5" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>AutoCompSetChooseSingle</name></member>
      <member refid="classwx_styled_text_ctrl_1a9430ffe5d457d8c2c168863a6c87cb0e" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>AutoCompSetDropRestOfWord</name></member>
      <member refid="classwx_styled_text_ctrl_1a17a74347096943bda00e5e091b264483" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>AutoCompSetFillUps</name></member>
      <member refid="classwx_styled_text_ctrl_1abe46b21c1195b2c81166f39d771b3335" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>AutoCompSetIgnoreCase</name></member>
      <member refid="classwx_styled_text_ctrl_1a3a39dd3ef96c7953bd9aa7fdfbc8943d" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>AutoCompSetMaxHeight</name></member>
      <member refid="classwx_styled_text_ctrl_1a97b1dc83f63df3d5cff55e98ac8d8f42" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>AutoCompSetMaxWidth</name></member>
      <member refid="classwx_styled_text_ctrl_1a89fbbde1f42d11d31b32ce4b3787c523" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>AutoCompSetMulti</name></member>
      <member refid="classwx_styled_text_ctrl_1af7ce6b376622dcbfcf71d3d32ad330e1" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>AutoCompSetOrder</name></member>
      <member refid="classwx_styled_text_ctrl_1a82e788eb1f8ddfaf57250e6a08f952c2" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>AutoCompSetSeparator</name></member>
      <member refid="classwx_styled_text_ctrl_1ad4b09dc62d17ca6b4edcdb6cf8347ab2" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>AutoCompSetTypeSeparator</name></member>
      <member refid="classwx_styled_text_ctrl_1aa4456a1fe3726f63c7a8227f6875b386" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>AutoCompShow</name></member>
      <member refid="classwx_styled_text_ctrl_1a521ecbc5dd6a7d3127b48b52ea4abd76" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>AutoCompStops</name></member>
      <member refid="classwx_styled_text_ctrl_1a5d3e32e591c11634eeaf5e912b922b36" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>BackTab</name></member>
      <member refid="classwx_window_1ab4cea6ace96193b5c4282e097a6fbfee" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>BeginRepositioningChildren</name></member>
      <member refid="classwx_styled_text_ctrl_1a505c65bf4a294cfa33834027cdafa28f" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>BeginUndoAction</name></member>
      <member refid="classwx_evt_handler_1a0f30c8fa5583b4a5f661897d63de3b62" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>Bind</name></member>
      <member refid="classwx_evt_handler_1a03cc68ca201fb79c7e837919025be71a" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>Bind</name></member>
      <member refid="classwx_styled_text_ctrl_1abe05b7096219a2224bad2225eed45263" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>BraceBadLight</name></member>
      <member refid="classwx_styled_text_ctrl_1ae36d3d19d73fd5ea921031c36074afae" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>BraceBadLightIndicator</name></member>
      <member refid="classwx_styled_text_ctrl_1ab53b6a583c2abd1c6c506a987c52dc8d" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>BraceHighlight</name></member>
      <member refid="classwx_styled_text_ctrl_1a7b686df5f891ec8959cd56b2a48f99d9" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>BraceHighlightIndicator</name></member>
      <member refid="classwx_styled_text_ctrl_1afc9e6ae20efc1f41c5fec94113be2338" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>BraceMatch</name></member>
      <member refid="classwx_window_1a11b5d8d94efd0ab52eb2c95a6aa88cdf" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>CacheBestSize</name></member>
      <member refid="classwx_evt_handler_1a63c7351618fd77330d80a250b3719519" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>CallAfter</name></member>
      <member refid="classwx_evt_handler_1a910416e4d0b1f38cec02213b8a0c6a12" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>CallAfter</name></member>
      <member refid="classwx_styled_text_ctrl_1aa984b16dce33a4aa9547c2bc7fe22fd3" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>CallTipActive</name></member>
      <member refid="classwx_styled_text_ctrl_1a9340360cc2e7c12ee9d16c1993390c1b" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>CallTipCancel</name></member>
      <member refid="classwx_styled_text_ctrl_1a672c4eff3e808305adfb02b5894e4f61" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>CallTipPosAtStart</name></member>
      <member refid="classwx_styled_text_ctrl_1a02818a9bd35154feea5ac55dbf9358df" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>CallTipSetBackground</name></member>
      <member refid="classwx_styled_text_ctrl_1a103c96e588c40600d360f0fc04496123" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>CallTipSetForeground</name></member>
      <member refid="classwx_styled_text_ctrl_1afc1fa68a4f485d169fa664c9fc9d8d64" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>CallTipSetForegroundHighlight</name></member>
      <member refid="classwx_styled_text_ctrl_1a8d40fa59e7fc70b7211f3bd7c85e6cb3" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>CallTipSetHighlight</name></member>
      <member refid="classwx_styled_text_ctrl_1a397bcf611d6f653e2bf430e63a827786" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>CallTipSetPosAtStart</name></member>
      <member refid="classwx_styled_text_ctrl_1a7c24bea1e6b731ce4f3cba3a4e5368bf" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>CallTipSetPosition</name></member>
      <member refid="classwx_styled_text_ctrl_1a8a21bb9df8e5116b7230c545f54cf9f2" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>CallTipShow</name></member>
      <member refid="classwx_styled_text_ctrl_1aee7c127fb40e52bbaa3b374ebe8e1668" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>CallTipUseStyle</name></member>
      <member refid="classwx_window_1acc4e456ed056a27ec61cd296b96c1e3e" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>CanAcceptFocus</name></member>
      <member refid="classwx_window_1ade15bb13dc6d51a8e6ecd49eb3f0f99b" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>CanAcceptFocusFromKeyboard</name></member>
      <member refid="classwx_styled_text_ctrl_1a9c91e02fc109334ba435b2fca8422508" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>Cancel</name></member>
      <member refid="classwx_text_entry_1a620eaa062c530c194dd3a079991c1167" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>CanCopy</name></member>
      <member refid="classwx_text_entry_1a5f680c7b00d718f295e09288d3a16b66" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>CanCut</name></member>
      <member refid="classwx_styled_text_ctrl_1a96bd42aef7ddb703a14867e9653d4258" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>CanPaste</name></member>
      <member refid="classwx_styled_text_ctrl_1a0994684c0b44978000111fafd023389f" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>CanRedo</name></member>
      <member refid="classwx_window_1a6b5bbd3bf890f98897187879152ad97a" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>CanScroll</name></member>
      <member refid="classwx_window_1a64f7f6fb75bf4b7281e1d33542d523c7" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>CanSetTransparent</name></member>
      <member refid="classwx_styled_text_ctrl_1afcfcf286bcc37c992da6fcb048b3c0bc" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>CanUndo</name></member>
      <member refid="classwx_window_1a5c72c6260a73ef77bb0b1f7ec85fcfef" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>CaptureMouse</name></member>
      <member refid="classwx_window_1a06c0ecb262995b40083bfb446a6cff99" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>Center</name></member>
      <member refid="classwx_window_1a2dc4e0a85d33fc55cc9650eaea1da0a4" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>CenterOnParent</name></member>
      <member refid="classwx_window_1a4a1819eeee3f2143cdde4f329ffde787" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>Centre</name></member>
      <member refid="classwx_window_1ab8e9b91b0e2db344fd71259616dfd433" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>CentreOnParent</name></member>
      <member refid="classwx_styled_text_ctrl_1a0d58a4a3d9496ce64ee1308e3faa3d6f" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>ChangeInsertion</name></member>
      <member refid="classwx_styled_text_ctrl_1a35b67ddcd7711e71feab536d10b6dd8d" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>ChangeLexerState</name></member>
      <member refid="classwx_text_entry_1a8c52ab71f51c8f80556c2c8e763cbca1" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>ChangeValue</name></member>
      <member refid="classwx_styled_text_ctrl_1a2c98ff8de0fcb3c59aae4df1013cbf49" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>CharLeft</name></member>
      <member refid="classwx_styled_text_ctrl_1ad7d6edfd400aa811567c301789f3f99f" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>CharLeftExtend</name></member>
      <member refid="classwx_styled_text_ctrl_1ab8c7c791c37ad158fa356a6c2385d5b1" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>CharLeftRectExtend</name></member>
      <member refid="classwx_styled_text_ctrl_1a8f12562557819d7a5e00b3db2df5eee2" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>CharPositionFromPoint</name></member>
      <member refid="classwx_styled_text_ctrl_1ae3a7cecfce77c22a8e1bc26393821125" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>CharPositionFromPointClose</name></member>
      <member refid="classwx_styled_text_ctrl_1aa3e5fe3051d46c097b0610ae4b66775e" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>CharRight</name></member>
      <member refid="classwx_styled_text_ctrl_1a15f0635c531037dda30bc140041e2476" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>CharRightExtend</name></member>
      <member refid="classwx_styled_text_ctrl_1a6f3e1f21338c2389db68efcdd94868de" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>CharRightRectExtend</name></member>
      <member refid="classwx_styled_text_ctrl_1af5b45963d561c61f8a983f6c6e3078ec" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>ChooseCaretX</name></member>
      <member refid="classwx_styled_text_ctrl_1a25370f4ee2751d73e7c2a4bfd944f519" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>Clear</name></member>
      <member refid="classwx_styled_text_ctrl_1af771cdc0e3b8d85c1038ba51ef33cdae" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>ClearAll</name></member>
      <member refid="classwx_window_1a61e833684ee5c89775e91e88be1a9a52" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>ClearBackground</name></member>
      <member refid="classwx_styled_text_ctrl_1a9cfd5783fd85eaa636ce31994af57303" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>ClearDocumentStyle</name></member>
      <member refid="classwx_styled_text_ctrl_1ae93ebfa2f583e576482cf10c8307250e" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>ClearRegisteredImages</name></member>
      <member refid="classwx_styled_text_ctrl_1a10f5b499d686e35e52ef2706a991436c" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>ClearRepresentation</name></member>
      <member refid="classwx_styled_text_ctrl_1a951210a57d6d2895e5977642007af9bb" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>ClearSelections</name></member>
      <member refid="classwx_styled_text_ctrl_1a2425d6520ea70d288af8355949223e67" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>ClearTabStops</name></member>
      <member refid="classwx_window_1af5e852c8695297c0328f1dfe3908605a" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>ClientToScreen</name></member>
      <member refid="classwx_window_1add6f5472d0d8fe0074145a886568721c" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>ClientToScreen</name></member>
      <member refid="classwx_window_1a5c72ca7de40d4e99aff55e79aad3962e" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>ClientToWindowSize</name></member>
      <member refid="classwx_object_1ac9c60b64c3757a5818b1123b197cd50d" prot="protected" virt="virtual"><scope>wxStyledTextCtrl</scope><name>CloneRefData</name></member>
      <member refid="classwx_window_1a3e44f4a494fc9ef4346c4fba70c8de0c" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>Close</name></member>
      <member refid="classwx_styled_text_ctrl_1abf78d20a413c8e95c97ede19e27fcbe9" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>CmdKeyAssign</name></member>
      <member refid="classwx_styled_text_ctrl_1a661022247d0eab8d150641e7d5a66665" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>CmdKeyClear</name></member>
      <member refid="classwx_styled_text_ctrl_1afa77c7e8cda7cc91a3480a54cecf4504" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>CmdKeyClearAll</name></member>
      <member refid="classwx_styled_text_ctrl_1a248fc7296e539353e5617940685bea49" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>CmdKeyExecute</name></member>
      <member refid="classwx_styled_text_ctrl_1ac6c7f32218faea6b29168464479f6816" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>Colourise</name></member>
      <member refid="classwx_control_1a8cd7ac81debaf506d6d146528c3d9a82" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>Command</name></member>
      <member refid="classwx_evt_handler_1a78719e8b82c9f9c6e4056b3449df1943" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>Connect</name></member>
      <member refid="classwx_evt_handler_1a1e8b5fc4c7e7f6d32d40bc00d4108ba4" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>Connect</name></member>
      <member refid="classwx_evt_handler_1aa290d9b67348e74c1da8497955a4e35c" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>Connect</name></member>
      <member refid="classwx_styled_text_ctrl_1a4795a56b5d5937e1ccf00501ca48645e" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>ContractedFoldNext</name></member>
      <member refid="classwx_window_1a3dbe034120d742c4f5f6d64dc5d69590" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>ConvertDialogToPixels</name></member>
      <member refid="classwx_window_1ad70d63964459bb21f81bc0b1f09e84f4" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>ConvertDialogToPixels</name></member>
      <member refid="classwx_styled_text_ctrl_1a32d7242ddf6aa9c4e317821a30207550" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>ConvertEOLs</name></member>
      <member refid="classwx_window_1a321de67666eff37b39556802c8029201" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>ConvertPixelsToDialog</name></member>
      <member refid="classwx_window_1a533552c4673c7a11f05bf9261b4dff5c" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>ConvertPixelsToDialog</name></member>
      <member refid="classwx_styled_text_ctrl_1ae2d0815b70c661bd8480113dba59117e" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>Copy</name></member>
      <member refid="classwx_styled_text_ctrl_1a6700ede8c3e6885f9bdd73039478ffe2" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>CopyAllowLine</name></member>
      <member refid="classwx_styled_text_ctrl_1a305eccb44894029e809cfa31d68e91ab" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>CopyRange</name></member>
      <member refid="classwx_styled_text_ctrl_1aecbe5e763b12d7b744c1c77dbee2fe2b" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>CopyText</name></member>
      <member refid="classwx_styled_text_ctrl_1abd2502125b20d3e84bb7860eea4aa7e8" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>CountCharacters</name></member>
      <member refid="classwx_styled_text_ctrl_1ac9fec1a8bb67fcb8d89751db19583e92" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>Create</name></member>
      <member refid="classwx_control_1abe23789c94c86907463a0e8434be822a" prot="public" virt="non-virtual" ambiguityscope="wxControl::"><scope>wxStyledTextCtrl</scope><name>Create</name></member>
      <member refid="classwx_styled_text_ctrl_1a3cf273d4371ccadbf9bbb44e8f4670e4" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>CreateDocument</name></member>
      <member refid="classwx_styled_text_ctrl_1aeafc7637605c607cca71f033c8665add" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>CreateLoader</name></member>
      <member refid="classwx_object_1a9c38fc7f7d0dd40d5d83f3eedf1fb817" prot="protected" virt="virtual"><scope>wxStyledTextCtrl</scope><name>CreateRefData</name></member>
      <member refid="classwx_styled_text_ctrl_1a92e6e5e06f0a534444d632e4d78eb1ed" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>Cut</name></member>
      <member refid="classwx_styled_text_ctrl_1a229e837b1bc6e3b3b713eb8e83650812" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>DeleteBack</name></member>
      <member refid="classwx_styled_text_ctrl_1a9085f5a5a938ac29aa3a6b47c4f13a22" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>DeleteBackNotLine</name></member>
      <member refid="classwx_evt_handler_1a6e7f9cf4ebd0623c1d94979855d096f8" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>DeletePendingEvents</name></member>
      <member refid="classwx_styled_text_ctrl_1a238a27805b06fe0f7eb60e84bf9d6333" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>DeleteRange</name></member>
      <member refid="classwx_styled_text_ctrl_1a703b45e05f6be8ae614ca60a5b36177d" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>DelLineLeft</name></member>
      <member refid="classwx_styled_text_ctrl_1abd5b23cb5d54f06928002b50e96313ac" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>DelLineRight</name></member>
      <member refid="classwx_styled_text_ctrl_1ace37594e87afefdd579f7a20444e2898" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>DelWordLeft</name></member>
      <member refid="classwx_styled_text_ctrl_1a6d59400c2bf5dc56876e5f51e9ae4059" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>DelWordRight</name></member>
      <member refid="classwx_styled_text_ctrl_1abded1c14c94a9b20e9de202c875d52c7" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>DelWordRightEnd</name></member>
      <member refid="classwx_styled_text_ctrl_1ac7b6dad3282bdec3bf13da4afd75ab10" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>DescribeKeyWordSets</name></member>
      <member refid="classwx_styled_text_ctrl_1a3901eb0e1309e76d120c3d527ed1394a" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>DescribeProperty</name></member>
      <member refid="classwx_window_1a6bf0c5be864544d9ce0560087667b7fc" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>Destroy</name></member>
      <member refid="classwx_window_1aff47b32c8d42d515ea0bb6a6c2fea917" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>DestroyChildren</name></member>
      <member refid="classwx_window_1a26d7329a9a753fa0445501f01f66c41e" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>Disable</name></member>
      <member refid="classwx_window_1a6d721dc0df37d5c74e96474ddbc1e073" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>DisableFocusFromKeyboard</name></member>
      <member refid="classwx_styled_text_ctrl_1a0c113a56c8ba929a44f34a15d8d68bd5" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>DiscardEdits</name></member>
      <member refid="classwx_evt_handler_1a13061cf0ed01ac10a804ac057ef4bdbc" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>Disconnect</name></member>
      <member refid="classwx_evt_handler_1a2f171e19444b9c4034c5e11f24fa9c91" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>Disconnect</name></member>
      <member refid="classwx_evt_handler_1a16a6f823853e4b74b43dd9a2cf3abee6" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>Disconnect</name></member>
      <member refid="classwx_styled_text_ctrl_1aeebe092121b6ef057dea78424ae51706" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>DistanceToSecondaryStyles</name></member>
      <member refid="classwx_window_1a2d10b472a4962d1c852c83d55252c44b" prot="protected" virt="virtual"><scope>wxStyledTextCtrl</scope><name>DoCentre</name></member>
      <member refid="classwx_styled_text_ctrl_1ab3b57f532cff469b8433835edf5b9228" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>DocLineFromVisible</name></member>
      <member refid="classwx_styled_text_ctrl_1adefe3471b22ee1df8982d62a2fd45029" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>DocumentEnd</name></member>
      <member refid="classwx_styled_text_ctrl_1a59425a502218d7aa9b7b5ac857602cf6" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>DocumentEndExtend</name></member>
      <member refid="classwx_styled_text_ctrl_1ab53f0b56e7826c6f4e7753ddbced0e15" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>DocumentStart</name></member>
      <member refid="classwx_styled_text_ctrl_1a7d0ba468af83c82dcad8265b1d6670b3" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>DocumentStartExtend</name></member>
      <member refid="classwx_styled_text_ctrl_1a2ff9aab06e206bafe2aecd3e240eabb9" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>DoDragEnter</name></member>
      <member refid="classwx_styled_text_ctrl_1a0ca6205e2a95ff15351e165fdd5ece76" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>DoDragLeave</name></member>
      <member refid="classwx_styled_text_ctrl_1a249400fac1967c76dbb69f7b564dc893" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>DoDragOver</name></member>
      <member refid="classwx_styled_text_ctrl_1a8e8fa7c1cc7da1fddf51c8715f1db178" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>DoDropText</name></member>
      <member refid="classwx_window_1ae07ab0b5cabb750f4e396b6c95e4abf7" prot="protected" virt="virtual"><scope>wxStyledTextCtrl</scope><name>DoGetBestClientHeight</name></member>
      <member refid="classwx_window_1a68f3ec28a29b2a514b20c3e80255d82e" prot="protected" virt="virtual"><scope>wxStyledTextCtrl</scope><name>DoGetBestClientSize</name></member>
      <member refid="classwx_window_1ac68cb9912dc456e2faa8c745b2437b75" prot="protected" virt="virtual"><scope>wxStyledTextCtrl</scope><name>DoGetBestClientWidth</name></member>
      <member refid="classwx_window_1aac6408f1814dce3f8332cc69fe5104f1" prot="protected" virt="virtual"><scope>wxStyledTextCtrl</scope><name>DoGetBestSize</name></member>
      <member refid="classwx_window_1ae8a84a80645e99f4d24a22e5c386f626" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>DoUpdateWindowUI</name></member>
      <member refid="classwx_window_1a7e7015bc61bd79b6821d2dccaecf9eda" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>DragAcceptFiles</name></member>
      <member refid="classwx_styled_text_ctrl_1af472bf366b71904b24cda4b62a23076a" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>DropSelectionN</name></member>
      <member refid="classwx_styled_text_ctrl_1a76148bfd7624f43735dccc69a378ee29" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>EditToggleOvertype</name></member>
      <member refid="classwx_control_1a0bb834cae2a8986aceddb89f84ef4ed1" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>Ellipsize</name></member>
      <member refid="classwx_styled_text_ctrl_1afa14ec48fb24337e74f1650fa16749ec" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>EmptyUndoBuffer</name></member>
      <member refid="classwx_window_1a4e933aa891f42fbb3b87438057c573af" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>Enable</name></member>
      <member refid="classwx_window_1ac1691c7a40e9245fe58430a1b8e3a998" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>EnableTouchEvents</name></member>
      <member refid="classwx_window_1ad0798adc95b19f956e7ac1e7fda6333d" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>EnableVisibleFocus</name></member>
      <member refid="classwx_window_1a1203fbd238d781253b44e0e459532301" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>EndRepositioningChildren</name></member>
      <member refid="classwx_styled_text_ctrl_1afe2fdcd1acd46e57cb26e8d4b16833a3" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>EndUndoAction</name></member>
      <member refid="classwx_styled_text_ctrl_1a9a2cc57b36779323a3b437ac2ff22015" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>EnsureCaretVisible</name></member>
      <member refid="classwx_styled_text_ctrl_1a9a9b1eb223a5d1d27eb9a36cc8784eda" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>EnsureVisible</name></member>
      <member refid="classwx_styled_text_ctrl_1a6adbabfa94312f36411ef5cb11ef02b4" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>EnsureVisibleEnforcePolicy</name></member>
      <member refid="classwx_control_1abdbd9c0684856546671e759dd95b23d4" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>EscapeMnemonics</name></member>
      <member refid="classwx_styled_text_ctrl_1adaf1664929c8e069c5c5730ad3080e5a" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>ExpandChildren</name></member>
      <member refid="classwx_styled_text_ctrl_1a35822757e5083cce51aa9ebb044d9187" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>FindColumn</name></member>
      <member refid="classwx_window_1a84a2cb9c46c4829515f3c029f83495af" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>FindFocus</name></member>
      <member refid="classwx_styled_text_ctrl_1a753089eba7f27bdd2733c36d38ec97ab" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>FindText</name></member>
      <member refid="classwx_window_1aceaaeff69f50577d5519e0f5c65e910f" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>FindWindow</name></member>
      <member refid="classwx_window_1aa537b1b13413d5002e5f7a2a1047e0d7" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>FindWindow</name></member>
      <member refid="classwx_window_1a87d7bf445768e9d90c30e2fe644062e6" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>FindWindowById</name></member>
      <member refid="classwx_window_1a18f42acd37805eb7bad6b7a18c87e0f5" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>FindWindowByLabel</name></member>
      <member refid="classwx_window_1ad2abfb345618b1f3961721ecd6f41511" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>FindWindowByName</name></member>
      <member refid="classwx_window_1a2bf38a6cbd1f82fb46f274396f482994" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>Fit</name></member>
      <member refid="classwx_window_1a55aca401aab29d59f7cc53f89ba2e38d" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>FitInside</name></member>
      <member refid="classwx_styled_text_ctrl_1a7bbcdca1ee86977a57c702062d5d3432" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>FoldAll</name></member>
      <member refid="classwx_styled_text_ctrl_1a78917a4eeef262bf38919567b0207200" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>FoldChildren</name></member>
      <member refid="classwx_styled_text_ctrl_1ab41d9ea7837f11e409feb2d4b4341db9" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>FoldDisplayTextSetStyle</name></member>
      <member refid="classwx_styled_text_ctrl_1a0f6495921bd68e3a239f9981b01e2181" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>FoldLine</name></member>
      <member refid="classwx_text_entry_1a19199a1f6c9a94095dad2a93f846ed12" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>ForceUpper</name></member>
      <member refid="classwx_styled_text_ctrl_1a0796d66bc19de243e7b5f684cfca5d52" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>FormatRange</name></member>
      <member refid="classwx_styled_text_ctrl_1ae22b3a855f2c6f545ea15fbfb3399b79" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>FormFeed</name></member>
      <member refid="classwx_styled_text_ctrl_1ade2c997934846468d1284382abb03ed4" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>FreeSubStyles</name></member>
      <member refid="classwx_window_1a15c678314cfc1d807196bc298b713ed3" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>Freeze</name></member>
      <member refid="classwx_window_1a4b0a9da72d28465bdf5c0bfe5661cdf9" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>FromDIP</name></member>
      <member refid="classwx_window_1a560e5daa55869ce65855d29936ca99c5" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>FromDIP</name></member>
      <member refid="classwx_window_1a7d7c6abc9b6fa48022f5e2d67a381bea" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>FromDIP</name></member>
      <member refid="classwx_window_1a71f45373a9fc55e128d263391093c32a" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>FromDIP</name></member>
      <member refid="classwx_window_1ad122671fcef564f7e11658c3ee0d4d87" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>FromDIP</name></member>
      <member refid="classwx_window_1aee63c8b1f8055fef76962578aa7f38c1" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>FromDIP</name></member>
      <member refid="classwx_window_1a144678f0b197268aa9d8d81b76a150a7" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>FromPhys</name></member>
      <member refid="classwx_window_1a048d540d731ac83550c206df4af04270" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>FromPhys</name></member>
      <member refid="classwx_window_1ac3f185cef9f6a645be63b9b62afae46a" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>FromPhys</name></member>
      <member refid="classwx_window_1a2fe6412d36c2b81c0dd3eeb1dd8bd004" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>FromPhys</name></member>
      <member refid="classwx_window_1af1ddb23778f531a56f2e1aa937a66d9c" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>FromPhys</name></member>
      <member refid="classwx_window_1a27efab91147b0ffeee600f02059c23fc" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>FromPhys</name></member>
      <member refid="classwx_window_1a9cf3fd71ffab949cdf06f8f8e2646d56" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetAcceleratorTable</name></member>
      <member refid="classwx_window_1a00547805ce11e2ba64607d31fc2c67e2" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetAccessible</name></member>
      <member refid="classwx_styled_text_ctrl_1ab9e2884082a67fd3580c280dc8b09b0c" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetAdditionalCaretForeground</name></member>
      <member refid="classwx_styled_text_ctrl_1a008dc45cad8d533cb52f0782ca8718c4" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetAdditionalCaretsBlink</name></member>
      <member refid="classwx_styled_text_ctrl_1aa874691fb47de2fa87bea2532dd42dc8" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetAdditionalCaretsVisible</name></member>
      <member refid="classwx_styled_text_ctrl_1a046290af28a6e298141a12e31c8b65e3" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetAdditionalSelAlpha</name></member>
      <member refid="classwx_styled_text_ctrl_1a550477461c0cd94ef8cb2b21b021c4b4" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetAdditionalSelectionTyping</name></member>
      <member refid="classwx_styled_text_ctrl_1a6efbf431a54aaedd0ced1ea7114e4f6e" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetAllLinesVisible</name></member>
      <member refid="classwx_styled_text_ctrl_1a26ba414ddca1dd797f27587788b56830" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetAnchor</name></member>
      <member refid="classwx_window_1a64e3f936ab812d24966827ea4e0f15c0" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetAutoLayout</name></member>
      <member refid="classwx_styled_text_ctrl_1a35638ecf5ff69ad350d49fa3d524e6e1" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetAutomaticFold</name></member>
      <member refid="classwx_window_1af51668ec32e9e44db45574a15ec215b4" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetBackgroundColour</name></member>
      <member refid="classwx_window_1a4f09e6a20858a0667df3dda44715d6b9" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>GetBackgroundStyle</name></member>
      <member refid="classwx_styled_text_ctrl_1a51477171fd688ab05bf2ab8e46bc6975" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetBackSpaceUnIndents</name></member>
      <member refid="classwx_window_1a9ec151255cbb44935136d9bbff31a082" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetBestHeight</name></member>
      <member refid="classwx_window_1ae507a81d682023383e465d8e913595b6" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetBestSize</name></member>
      <member refid="classwx_window_1a1e4b09c35c0e5495905da45c1580709d" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>GetBestVirtualSize</name></member>
      <member refid="classwx_window_1a5c797a38418a6f2fb79f800112ec73b0" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetBestWidth</name></member>
      <member refid="classwx_window_1a42908ba076f2a93ee81201dc151c3b23" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetBorder</name></member>
      <member refid="classwx_window_1a94e3a0ce6c1aae57562678996adbf2fd" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetBorder</name></member>
      <member refid="classwx_styled_text_ctrl_1acc774671fab54041b5add6fe4f6ca84e" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetBufferedDraw</name></member>
      <member refid="classwx_window_1a2a226e6e116858bdeb04f51f815eba03" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetCapture</name></member>
      <member refid="classwx_window_1a147ceedef6bd261d7a0ddf709f536233" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetCaret</name></member>
      <member refid="classwx_styled_text_ctrl_1ac5e3ee6a48e2a095e8b475e4d2b2e490" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetCaretForeground</name></member>
      <member refid="classwx_styled_text_ctrl_1a6593f7d73d126046c4da0bfb40a638ae" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetCaretLineBackAlpha</name></member>
      <member refid="classwx_styled_text_ctrl_1a89bf3a508db714431b7c21309b28f4b3" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetCaretLineBackground</name></member>
      <member refid="classwx_styled_text_ctrl_1aa4df7bf66d4fbd0e23a938494f0d1568" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetCaretLineVisible</name></member>
      <member refid="classwx_styled_text_ctrl_1a091ce6a7dbc201757d6fab9d267ffc81" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetCaretLineVisibleAlways</name></member>
      <member refid="classwx_styled_text_ctrl_1aa14b80637fb9bc1fca8040af93dd02a1" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetCaretPeriod</name></member>
      <member refid="classwx_styled_text_ctrl_1aaeb60783c884bd85a2bd7b73bfbcd1c1" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetCaretSticky</name></member>
      <member refid="classwx_styled_text_ctrl_1a454f2c99e7ff5f0ef46d1c8e0e7c4994" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetCaretStyle</name></member>
      <member refid="classwx_styled_text_ctrl_1a589b8ffe3bc1b0d719f80df0d301dcfc" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetCaretWidth</name></member>
      <member refid="classwx_styled_text_ctrl_1a972fe50009a5591c23ac8a8759f932d1" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetCharacterPointer</name></member>
      <member refid="classwx_styled_text_ctrl_1a09eacf24c80494a9064e570ea14e6bf8" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetCharAt</name></member>
      <member refid="classwx_window_1aa488520238094f858bea3c3a2c6b9809" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>GetCharHeight</name></member>
      <member refid="classwx_window_1a8f92c15635a44b85392d16f5906c31ef" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>GetCharWidth</name></member>
      <member refid="classwx_window_1aa4a60f01732ad3cb027cdf37c50a339d" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetChildren</name></member>
      <member refid="classwx_window_1aba31a46e73a980313da20b6277eb8c93" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetChildren</name></member>
      <member refid="classwx_window_1a170d85e4aa0cbacbfcdd0728120e1417" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetClassDefaultAttributes</name></member>
      <member refid="classwx_object_1a9fd1bc8bc3a47c6e14e679a80e3cb8f4" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>GetClassInfo</name></member>
      <member refid="classwx_window_1a4a1b567002d1039bc630885fc09808ae" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>GetClientAreaOrigin</name></member>
      <member refid="classwx_evt_handler_1a62baf87cabf4dd2c9ecce3ee5e1e9f61" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetClientData</name></member>
      <member refid="classwx_evt_handler_1a537d17d644e48bc1735c4dd28b8b8c04" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetClientObject</name></member>
      <member refid="classwx_window_1a5c6428c6aa8634b5c5963d1d0eaa75c7" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetClientRect</name></member>
      <member refid="classwx_window_1ad34d4bbd6d3064aa56e7a2cc3ee97be3" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetClientSize</name></member>
      <member refid="classwx_window_1a13d04f24ab78611f895bc40776118e90" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetClientSize</name></member>
      <member refid="classwx_styled_text_ctrl_1a990c4a3f6948e5b64769bd068efab8a3" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetCodePage</name></member>
      <member refid="classwx_styled_text_ctrl_1af934e01c609d03a4d75142e69a2beb03" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetColumn</name></member>
      <member refid="classwx_window_1a768a91519aefb245da30c37782a716b7" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetConstraints</name></member>
      <member refid="classwx_window_1ad9e45e32ec75f3288f065d83263194a3" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetContainingSizer</name></member>
      <member refid="classwx_window_1a89cbf94bc15d4e8cb5b1e7db85225577" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetContentScaleFactor</name></member>
      <member refid="classwx_styled_text_ctrl_1ac3a377c0dcfec693f97c3acafa645faa" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetControlCharSymbol</name></member>
      <member refid="classwx_styled_text_ctrl_1af8885aaddb96738b8a9c182655c1892a" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetCurLine</name></member>
      <member refid="classwx_styled_text_ctrl_1a5229698886cd28f260bc14bd96b5ba93" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetCurLineRaw</name></member>
      <member refid="classwx_styled_text_ctrl_1ade127ac090240c41077de95ed8867462" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetCurrentLine</name></member>
      <member refid="classwx_styled_text_ctrl_1a27fc5d7b9a2f1ef064e8fb5f53c5f2a8" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetCurrentPos</name></member>
      <member refid="classwx_window_1a196fc94231b445b09c5fa4a3a29d579b" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetCursor</name></member>
      <member refid="classwx_window_1a377de92ac032b60a9241fab88efdbf11" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>GetDefaultAttributes</name></member>
      <member refid="classwx_styled_text_ctrl_1a581b0c5c57fbe940c537710feeb555d6" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetDirectFunction</name></member>
      <member refid="classwx_styled_text_ctrl_1a741a401da4bcf7ccd038b3291b6b4ee1" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetDirectPointer</name></member>
      <member refid="classwx_styled_text_ctrl_1a5c99f78b5dfb97c4773b8dedcb89650e" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetDocPointer</name></member>
      <member refid="classwx_window_1a391a91e5faa5b64d52e3461d5cf5666b" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>GetDPI</name></member>
      <member refid="classwx_window_1a43bfd56d59b728157f95c838f981872c" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetDPIScaleFactor</name></member>
      <member refid="classwx_window_1a9303a2de5ad692557b7db9fb3e651549" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>GetDropTarget</name></member>
      <member refid="classwx_styled_text_ctrl_1a8b8ddd6e88ad222163df1df452f90677" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetEdgeColour</name></member>
      <member refid="classwx_styled_text_ctrl_1afc3563a6ced22ce37d299d440fbc3e8b" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetEdgeColumn</name></member>
      <member refid="classwx_styled_text_ctrl_1aed89c4c83faa556d3ce2f8e26e5d3fd2" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetEdgeMode</name></member>
      <member refid="classwx_window_1aa88f6c4946d1ae4821aca652efbf7c62" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>GetEffectiveMinSize</name></member>
      <member refid="classwx_styled_text_ctrl_1a0260dd911c62d035868c787e0612a26f" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetEndAtLastLine</name></member>
      <member refid="classwx_styled_text_ctrl_1af2e7845481a1d956e54b6856124c673a" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetEndStyled</name></member>
      <member refid="classwx_styled_text_ctrl_1a7ad383881baadc0e3cf3b3d36ed3907e" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetEOLMode</name></member>
      <member refid="classwx_window_1a1e421cef85f7d0fb857b1a8317e185ab" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetEventHandler</name></member>
      <member refid="classwx_evt_handler_1a7742d81c5eb7849a0ad75b9de8575153" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetEvtHandlerEnabled</name></member>
      <member refid="classwx_styled_text_ctrl_1aabc0cf9d4ccdc93a0ef10268af07658b" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetExtraAscent</name></member>
      <member refid="classwx_styled_text_ctrl_1aaf21180c92ca9589fd8ef9918cb1a947" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetExtraDescent</name></member>
      <member refid="classwx_window_1a0db5cd18ab5166b44da9d07f92bb5070" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetExtraStyle</name></member>
      <member refid="classwx_styled_text_ctrl_1ab9edf655eb6329b48de27f68757d0b65" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetFirstVisibleLine</name></member>
      <member refid="classwx_styled_text_ctrl_1ac66f9d5c34c884327ca4d2d909326cf7" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetFoldExpanded</name></member>
      <member refid="classwx_styled_text_ctrl_1a783bf4141739e562211a991633633891" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetFoldLevel</name></member>
      <member refid="classwx_styled_text_ctrl_1a7d3682924c02dbd55118c85ac8607749" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetFoldParent</name></member>
      <member refid="classwx_window_1af25f8a799106d61b50d3ee796ba43728" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetFont</name></member>
      <member refid="classwx_styled_text_ctrl_1af91e4bf0b10421433f1ae562b0df2c13" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetFontQuality</name></member>
      <member refid="classwx_window_1ad9a607b86d9175d395f245ecbe00f38b" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetForegroundColour</name></member>
      <member refid="classwx_styled_text_ctrl_1ae1594aeb27b874448be5025cf392596b" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetGapPosition</name></member>
      <member refid="classwx_window_1a953d89197a6f325e2262ad20ef420585" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetGrandParent</name></member>
      <member refid="classwx_window_1a108426e918ac377fef17662885a7a459" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>GetHandle</name></member>
      <member refid="classwx_window_1acb28971fe25abd1f5c6d768e203a042a" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetHelpText</name></member>
      <member refid="classwx_window_1a7d11a419fede5049d7c12c337e5f5dfc" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>GetHelpTextAtPoint</name></member>
      <member refid="classwx_styled_text_ctrl_1a5e87fe8b4eb4084b2dd70c4fed04c56b" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetHighlightGuide</name></member>
      <member refid="classwx_text_entry_1ae05d111ea78f08ee38d1b404c3dcf9ae" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>GetHint</name></member>
      <member refid="classwx_styled_text_ctrl_1a6b6ed70614d813c4ce11eee04f05d5d1" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetHotspotActiveBackground</name></member>
      <member refid="classwx_styled_text_ctrl_1afa1a9baaa6684db218fb26a81d9139a2" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetHotspotActiveForeground</name></member>
      <member refid="classwx_styled_text_ctrl_1a5b780ee0de750d2c04f0d29148ee690c" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetHotspotActiveUnderline</name></member>
      <member refid="classwx_styled_text_ctrl_1a4fe99f0ae2e201e592fc7dc22b644461" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetHotspotSingleLine</name></member>
      <member refid="classwx_window_1a79037f68b290bba5811628ec67bf3b24" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetId</name></member>
      <member refid="classwx_styled_text_ctrl_1a8f34f590fa6dab70325a9513dec439e0" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetIdentifier</name></member>
      <member refid="classwx_styled_text_ctrl_1a2f7dfb1f0f58319f0508819bc7c644f0" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetIdleStyling</name></member>
      <member refid="classwx_styled_text_ctrl_1ac9fe968f930a168681e601b326b984eb" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetIMEInteraction</name></member>
      <member refid="classwx_styled_text_ctrl_1a93bd054ef1b6b1298fc50466756dcbd1" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetIndent</name></member>
      <member refid="classwx_styled_text_ctrl_1aa82401ddb97cf1a478899074572e4e3c" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetIndentationGuides</name></member>
      <member refid="classwx_styled_text_ctrl_1a78603770934e6f40b2fe90a72f92e408" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetIndicatorCurrent</name></member>
      <member refid="classwx_styled_text_ctrl_1acfed3ff1980aa23d29544cdf25811f20" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetIndicatorValue</name></member>
      <member refid="classwx_styled_text_ctrl_1a5699823b511fd13e653647791a9b84c8" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>GetInsertionPoint</name></member>
      <member refid="classwx_control_1a9d03cd7f44c4bb1722f39fbc7a5d8cbd" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>GetLabel</name></member>
      <member refid="classwx_control_1a4ec6a7ee61553cd1df77d50491cee820" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetLabelText</name></member>
      <member refid="classwx_control_1ae892fefe6b88168c158e11e975633665" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetLabelText</name></member>
      <member refid="classwx_styled_text_ctrl_1a618aca45a8352eb81b99da03f5864aca" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetLastChild</name></member>
      <member refid="classwx_styled_text_ctrl_1af742c2d4f39e67c156c91eb90ffb32a5" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetLastKeydownProcessed</name></member>
      <member refid="classwx_styled_text_ctrl_1ad073bdc1cfe078456f7a5039aab3507f" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>GetLastPosition</name></member>
      <member refid="classwx_styled_text_ctrl_1ad4f418ca23806eeb990cbc0f6d9a5869" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetLayoutCache</name></member>
      <member refid="classwx_window_1afafd17cbb5dd6d899b25360255e0bdae" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>GetLayoutDirection</name></member>
      <member refid="classwx_styled_text_ctrl_1ad09b05ef8d6e484ea9b2707fa24c82ef" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetLength</name></member>
      <member refid="classwx_styled_text_ctrl_1a63bf5a38cadf37af8fa654edffd5918c" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetLexer</name></member>
      <member refid="classwx_styled_text_ctrl_1a6901c5ac21129de6ae0005f3ff307922" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetLexerLanguage</name></member>
      <member refid="classwx_styled_text_ctrl_1a79969628d9be422e5af9735e1aafdc00" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetLibraryVersionInfo</name></member>
      <member refid="classwx_styled_text_ctrl_1a33257fd9c68db789842f5dab8d93defb" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetLine</name></member>
      <member refid="classwx_styled_text_ctrl_1acf45a44489af565b924d230f81bee44d" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetLineCount</name></member>
      <member refid="classwx_styled_text_ctrl_1a6435175181a921194a9e92c3314c7949" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetLineEndPosition</name></member>
      <member refid="classwx_styled_text_ctrl_1a20246e4c39886ddd0e10502bb5abde13" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetLineEndTypesActive</name></member>
      <member refid="classwx_styled_text_ctrl_1aa3408902442f95849035060f6ea395e0" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetLineEndTypesAllowed</name></member>
      <member refid="classwx_styled_text_ctrl_1a082626ecfa0b98122021d660ed4ac502" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetLineEndTypesSupported</name></member>
      <member refid="classwx_styled_text_ctrl_1a2c784b3372538e6e532ee011ba706ae0" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetLineIndentation</name></member>
      <member refid="classwx_styled_text_ctrl_1a6b7acdda75ce75443f58cd2c03171460" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetLineIndentPosition</name></member>
      <member refid="classwx_styled_text_ctrl_1af3bd87bdcd57d3d31d35ec4dec74d0e6" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>GetLineLength</name></member>
      <member refid="classwx_styled_text_ctrl_1aa2440e99edc0184e6027227dfa58b86e" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetLineRaw</name></member>
      <member refid="classwx_styled_text_ctrl_1ad5eebf78698683d465a9be9819d7f8b2" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetLineSelEndPosition</name></member>
      <member refid="classwx_styled_text_ctrl_1a232d7a6bead8dfdd9923fd3f1777b1aa" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetLineSelStartPosition</name></member>
      <member refid="classwx_styled_text_ctrl_1ab0cec9ab911e64b0ed4976fbadcab2e5" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetLineState</name></member>
      <member refid="classwx_styled_text_ctrl_1a04b4a35a666e3708c4296073d2d05b3b" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>GetLineText</name></member>
      <member refid="classwx_styled_text_ctrl_1afbf2468d7377c32305ba48a3d39fb6b3" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetLineVisible</name></member>
      <member refid="classwx_styled_text_ctrl_1a41d0d4bc1b380aad4a50dd1f442c51e6" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetMainSelection</name></member>
      <member refid="classwx_styled_text_ctrl_1ad649a9374c63d2072f1f5c22db02651d" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetMarginBackground</name></member>
      <member refid="classwx_styled_text_ctrl_1a71d7e3cc468b2f5ad5902371d9fbd579" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetMarginCount</name></member>
      <member refid="classwx_styled_text_ctrl_1a1479b4bbffd3f8be4de1e371e699f0bd" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetMarginCursor</name></member>
      <member refid="classwx_styled_text_ctrl_1aeb80a279307de5abf270f24028ba29c1" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetMarginLeft</name></member>
      <member refid="classwx_styled_text_ctrl_1ad887d592fd27a1fc9a4e59df8742ff6f" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetMarginMask</name></member>
      <member refid="classwx_styled_text_ctrl_1ac82528c63722ddadbe7e30a74d272e06" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetMarginOptions</name></member>
      <member refid="classwx_styled_text_ctrl_1a9fcc2f3bafbda637b44c3dbc0a527fdb" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetMarginRight</name></member>
      <member refid="classwx_text_entry_1aff48d044d76f1cc8708bd9abb5968fa8" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetMargins</name></member>
      <member refid="classwx_styled_text_ctrl_1aecc809428050a2668b89396166504a7b" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetMarginSensitive</name></member>
      <member refid="classwx_styled_text_ctrl_1acb25159991103ae1b8b364316f6fe70b" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetMarginType</name></member>
      <member refid="classwx_styled_text_ctrl_1ac3b9760a825a8cfca4c634ccc788341e" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetMarginWidth</name></member>
      <member refid="classwx_styled_text_ctrl_1a835511306369b74750c9421e7717a84d" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetMarkerSymbolDefined</name></member>
      <member refid="classwx_window_1a6690ee82a5a246e070bf0a7dc4bcb5b3" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>GetMaxClientSize</name></member>
      <member refid="classwx_window_1a98bbe53eddb91b508b0082783402d954" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetMaxHeight</name></member>
      <member refid="classwx_styled_text_ctrl_1a997c39f2669c1083a014cbcf9b71edb3" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetMaxLineState</name></member>
      <member refid="classwx_window_1a107966aa1b2d50107b3b95cf0d7d9901" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>GetMaxSize</name></member>
      <member refid="classwx_window_1afde7288b24e48f2d0b5d2c7376f10426" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetMaxWidth</name></member>
      <member refid="classwx_window_1a24d22aacd834cbe6cd5b252fa91c3bd9" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>GetMinClientSize</name></member>
      <member refid="classwx_window_1a81bfd762272d33850c0511d65d896ca3" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetMinHeight</name></member>
      <member refid="classwx_window_1a90ce6ffc8e0af7476157c9e1e6b616df" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>GetMinSize</name></member>
      <member refid="classwx_window_1a327e1a8054d604a34cc5473a8c415e4d" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetMinWidth</name></member>
      <member refid="classwx_styled_text_ctrl_1af735cd86702d565a31e4d98b26a5d1d1" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetModEventMask</name></member>
      <member refid="classwx_styled_text_ctrl_1a1809aa943816a1aca0913c1bd0cc41e7" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetModify</name></member>
      <member refid="classwx_styled_text_ctrl_1a8f799414133ef53f641359296d06bed6" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetMouseDownCaptures</name></member>
      <member refid="classwx_styled_text_ctrl_1a45b624a04aad6191e71ba311aa614b96" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetMouseDwellTime</name></member>
      <member refid="classwx_styled_text_ctrl_1afa4d8eca9a4c5a55ce36129200a1637b" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetMouseSelectionRectangularSwitch</name></member>
      <member refid="classwx_styled_text_ctrl_1a4b51900ea2ec92810eafabf92c707f0d" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetMouseWheelCaptures</name></member>
      <member refid="classwx_styled_text_ctrl_1a0289bede2026b5657f42c091bab069e2" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetMultiPaste</name></member>
      <member refid="classwx_styled_text_ctrl_1a772b587dceda36cdaa93ff1aafb9aa03" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetMultipleSelection</name></member>
      <member refid="classwx_window_1a93b9ec7d9eaf152c17f3bf2698551ef4" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>GetName</name></member>
      <member refid="classwx_evt_handler_1a6de721ad9f331826a5c925d6008116e5" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetNextHandler</name></member>
      <member refid="classwx_window_1af9daac17df9bc32966e453487105d10c" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetNextSibling</name></member>
      <member refid="classwx_styled_text_ctrl_1a2b3407d6f88c564bcd230801b92082f8" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetNextTabStop</name></member>
      <member refid="classwx_styled_text_ctrl_1a6ad731d2f2ce69288383102a53221f98" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>GetNumberOfLines</name></member>
      <member refid="classwx_styled_text_ctrl_1a5ea3e1cbb839d6c85c814be50e83cecd" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetOvertype</name></member>
      <member refid="classwx_window_1a2040f41692f971e81663395ab3b59933" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetParent</name></member>
      <member refid="classwx_styled_text_ctrl_1a090438e6ea980222f8df5733a10804c9" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetPasteConvertEndings</name></member>
      <member refid="classwx_styled_text_ctrl_1a7a32e42c0868fae4868b852c19dcc397" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetPhasesDraw</name></member>
      <member refid="classwx_window_1a9b7de6ea85ca926b668ba0682a61a93e" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetPopupMenuSelectionFromUser</name></member>
      <member refid="classwx_window_1a00f5cb3cac003205317a565a33d4bb27" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetPopupMenuSelectionFromUser</name></member>
      <member refid="classwx_window_1ac2eece00a4b4b83e1433b59a5d31584f" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetPosition</name></member>
      <member refid="classwx_window_1abfeeca6db664c24603f6371811397e0d" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetPosition</name></member>
      <member refid="classwx_styled_text_ctrl_1ad4723c5e7d75521d11a9cd3c5532423d" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetPositionCacheSize</name></member>
      <member refid="classwx_evt_handler_1abbf9904ea5108b816f5f4faab1a33db9" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetPreviousHandler</name></member>
      <member refid="classwx_window_1a7dfab8b7173a055e35968a0b4fbd09b6" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetPrevSibling</name></member>
      <member refid="classwx_styled_text_ctrl_1a5b31aa20c17ee92b487df5d5e8a11763" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetPrimaryStyleFromStyle</name></member>
      <member refid="classwx_styled_text_ctrl_1aba43b86bbde63c0db6362434e648912b" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetPrintColourMode</name></member>
      <member refid="classwx_styled_text_ctrl_1a89e4f16573e99c782b292fc71a3adb96" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetPrintMagnification</name></member>
      <member refid="classwx_styled_text_ctrl_1a1989e506202621595ef76359d94d3e9e" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetPrintWrapMode</name></member>
      <member refid="classwx_styled_text_ctrl_1a38337213208bf9d17d30b62561f9aff8" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetProperty</name></member>
      <member refid="classwx_styled_text_ctrl_1a51bce2c376bd674f31a84c9b7977082c" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetPropertyExpanded</name></member>
      <member refid="classwx_styled_text_ctrl_1ac8b6baa5a399a23392d0d16e2bb35754" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetPropertyInt</name></member>
      <member refid="classwx_styled_text_ctrl_1adf1c47e93d804c278dd2d8f0bba98ad0" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetPunctuationChars</name></member>
      <member refid="classwx_text_entry_1ae568ccd892e44bf89f9918f9ed187af3" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>GetRange</name></member>
      <member refid="classwx_styled_text_ctrl_1acbff2f0eadc9ab11cfd70ff9e9634549" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetRangePointer</name></member>
      <member refid="classwx_styled_text_ctrl_1a71e55478cc3e71eb5fce9151624b5e48" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetReadOnly</name></member>
      <member refid="classwx_window_1a68e83a724887b18525fdbd947b2d8c88" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetRect</name></member>
      <member refid="classwx_styled_text_ctrl_1aede3535adee53bd0eea9287cffa051dc" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetRectangularSelectionAnchor</name></member>
      <member refid="classwx_styled_text_ctrl_1aec0eb4c4b4d5d3c5e3bc55307e883c19" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetRectangularSelectionAnchorVirtualSpace</name></member>
      <member refid="classwx_styled_text_ctrl_1a6e0f84117a5942b08090d2007fac6243" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetRectangularSelectionCaret</name></member>
      <member refid="classwx_styled_text_ctrl_1afff95da4940d0a2f44a1760d1b9fb562" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetRectangularSelectionCaretVirtualSpace</name></member>
      <member refid="classwx_styled_text_ctrl_1a2c4ebba6ed632b8581a43ea27d23cd34" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetRectangularSelectionModifier</name></member>
      <member refid="classwx_object_1a0e06d77b52ee4c44a31c7cb62c9a4b68" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetRefData</name></member>
      <member refid="classwx_styled_text_ctrl_1a9ac11d7b69b5c140be0662f5b6f69374" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetRepresentation</name></member>
      <member refid="classwx_window_1a285a81f00ed59fa09938343708938566" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetScreenPosition</name></member>
      <member refid="classwx_window_1a5786c420fd2958bde726c923621700aa" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetScreenPosition</name></member>
      <member refid="classwx_window_1ae8f6c4a201650ad63bb5ebe4f35eb41e" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetScreenRect</name></member>
      <member refid="classwx_window_1add5f4e225e16154f9148451a7d32d0b3" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>GetScrollPos</name></member>
      <member refid="classwx_window_1a23b41cf939ab67a002d8f404ac4cf76b" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>GetScrollRange</name></member>
      <member refid="classwx_window_1ac34f47fef73e3a178e8c335aa38ce567" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>GetScrollThumb</name></member>
      <member refid="classwx_styled_text_ctrl_1a4cbbab7da74fa624865097b40e6d1a00" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetScrollWidth</name></member>
      <member refid="classwx_styled_text_ctrl_1a12518113c2ca07b2cc031281c0ad44e9" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetScrollWidthTracking</name></member>
      <member refid="classwx_styled_text_ctrl_1a307408094a533c536aab515ad4863a6b" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetSearchFlags</name></member>
      <member refid="classwx_styled_text_ctrl_1a4560d6d26b3b8a879f5c4813b1f6c329" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetSelAlpha</name></member>
      <member refid="classwx_styled_text_ctrl_1aeaa5b992311b6fd7ca4d5d18d19853d9" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetSelectedText</name></member>
      <member refid="classwx_styled_text_ctrl_1a740113ad3a6dbfbcb2627c70907f4455" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetSelectedTextRaw</name></member>
      <member refid="classwx_styled_text_ctrl_1abc740d16be2106807f00b56590bab7a1" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>GetSelection</name></member>
      <member refid="classwx_styled_text_ctrl_1adc4e468dfa5a658e74fafb93ced1eecb" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetSelectionEmpty</name></member>
      <member refid="classwx_styled_text_ctrl_1a4e7c3fa00f35f172aafb8a87e78253c1" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetSelectionEnd</name></member>
      <member refid="classwx_styled_text_ctrl_1a3ab14f3c580e72a87ff067e7a9062bf5" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetSelectionMode</name></member>
      <member refid="classwx_styled_text_ctrl_1a370b4a6b5108ce66d26832cc1546f2a0" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetSelectionNAnchor</name></member>
      <member refid="classwx_styled_text_ctrl_1ab41ff02cc795d2ccb9bb13b6d9cb51c9" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetSelectionNAnchorVirtualSpace</name></member>
      <member refid="classwx_styled_text_ctrl_1a442ce4c0e51ec14265f1c1e3e902a8b6" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetSelectionNCaret</name></member>
      <member refid="classwx_styled_text_ctrl_1aee8e3c82947e93c40eccd512073de406" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetSelectionNCaretVirtualSpace</name></member>
      <member refid="classwx_styled_text_ctrl_1a58ec65d35f4c58c79f1a217bad2667fc" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetSelectionNEnd</name></member>
      <member refid="classwx_styled_text_ctrl_1a1047240d39351a49da6b08d5669775ad" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetSelectionNStart</name></member>
      <member refid="classwx_styled_text_ctrl_1a16174aad3eee2efaa499d60c5f181006" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetSelections</name></member>
      <member refid="classwx_styled_text_ctrl_1a55071a8a2ce6226a2625979fbe5090f9" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetSelectionStart</name></member>
      <member refid="classwx_styled_text_ctrl_1a44c9d12feb083793f9b74d92e91b2524" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetSelEOLFilled</name></member>
      <member refid="classwx_window_1a36ea282508dd55d6f3981ec205ed0449" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetSize</name></member>
      <member refid="classwx_window_1a36bf1ac809da1b0cd9c67fd806c4d9b5" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetSize</name></member>
      <member refid="classwx_control_1a65e0bb72969361c14a0959f3aae57d61" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetSizeFromText</name></member>
      <member refid="classwx_control_1a252c7408d6dfa8d70e8dbe88cea9695d" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetSizeFromTextSize</name></member>
      <member refid="classwx_control_1a4d9169af074418aa3528f7b5fca61f94" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetSizeFromTextSize</name></member>
      <member refid="classwx_window_1ae05f09350b273af1c47a82253538c5c4" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetSizer</name></member>
      <member refid="classwx_styled_text_ctrl_1afa8f56574df9795b16222b1cdd50b616" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetStatus</name></member>
      <member refid="classwx_styled_text_ctrl_1a9944b7e5d03aa2e9ea0b55ef4e4fdb5b" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetSTCCursor</name></member>
      <member refid="classwx_styled_text_ctrl_1a1daa6796572d39774bae11dc392641f2" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetSTCFocus</name></member>
      <member refid="classwx_text_entry_1adac8cae1eef10e198d3f8777d91b2607" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>GetStringSelection</name></member>
      <member refid="classwx_styled_text_ctrl_1a6c4597647017cab178fc81c6b9ea72d9" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>GetStyle</name></member>
      <member refid="classwx_styled_text_ctrl_1a56ff6a0074271514781e23f7432f2df9" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetStyleAt</name></member>
      <member refid="classwx_styled_text_ctrl_1a84a5736b6e7c2def386362cd51fa5881" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetStyleBits</name></member>
      <member refid="classwx_styled_text_ctrl_1ae20fc9ec35cd194e2f98b223b5c333f4" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetStyleBitsNeeded</name></member>
      <member refid="classwx_styled_text_ctrl_1a4d99c288fef906a6f31c4007a2526297" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetStyledText</name></member>
      <member refid="classwx_styled_text_ctrl_1ab4bf2fcf086314c9c45d312115a2c684" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetStyleFromSubStyle</name></member>
      <member refid="classwx_styled_text_ctrl_1af8fa73815958634c3d30a8adf2d4ad10" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetSubStyleBases</name></member>
      <member refid="classwx_styled_text_ctrl_1ae6ef28d9d06d8bf6752ce1b9a6e4ac4b" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetSubStylesLength</name></member>
      <member refid="classwx_styled_text_ctrl_1a033f8cb545a283013dde12d21e37d63d" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetSubStylesStart</name></member>
      <member refid="classwx_styled_text_ctrl_1a12ddce84635635285f05f975d0778e51" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetTabDrawMode</name></member>
      <member refid="classwx_styled_text_ctrl_1a8b6b15d2550b7a10d988fecd89f0e50b" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetTabIndents</name></member>
      <member refid="classwx_styled_text_ctrl_1ac8bc9e802f79bc486a65f4e18847d375" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetTabWidth</name></member>
      <member refid="classwx_styled_text_ctrl_1a41bc40dbd76867fb64f4192ffde64d7b" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetTag</name></member>
      <member refid="classwx_styled_text_ctrl_1aa781c1907142929d5f2a6498386b4112" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetTargetEnd</name></member>
      <member refid="classwx_styled_text_ctrl_1abfd98b1eb22f557f14d07ddce583bdfb" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetTargetStart</name></member>
      <member refid="classwx_styled_text_ctrl_1a3794da618c4c27e9ffc3b2fe6a465c76" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetTargetText</name></member>
      <member refid="classwx_styled_text_ctrl_1a2101f87082ffc43380d63cce45ee727e" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetTargetTextRaw</name></member>
      <member refid="classwx_styled_text_ctrl_1ac05437a568314c4aeb6106ed2ec572dc" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetTechnology</name></member>
      <member refid="classwx_styled_text_ctrl_1a8b0eead8e87c66d7fe0afc9f047848d6" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetText</name></member>
      <member refid="classwx_window_1a4220668e42f3a173bf29d335da4db2c3" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetTextExtent</name></member>
      <member refid="classwx_window_1a69fc79069821a633eba9c5d917fd8b7b" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetTextExtent</name></member>
      <member refid="classwx_styled_text_ctrl_1a10f7952a6e36b39ea8e7edb701b93df5" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetTextLength</name></member>
      <member refid="classwx_styled_text_ctrl_1a4a1c9bb239d6d24e69675bbf4a1c7e99" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetTextRange</name></member>
      <member refid="classwx_styled_text_ctrl_1a88be62c7ec2c2d0075df9b4b35cbd1b0" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetTextRangeRaw</name></member>
      <member refid="classwx_styled_text_ctrl_1ace83fdced1ffe0cdf7e7fa5b13f53add" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetTextRaw</name></member>
      <member refid="classwx_window_1a578145344f92cfee755a9c87f6703432" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>GetThemeEnabled</name></member>
      <member refid="classwx_window_1a5192577a8c6d35a73a1cde9acfe03dd4" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetToolTip</name></member>
      <member refid="classwx_window_1a7e7c9a92f9efbb47073704646db1344e" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetToolTipText</name></member>
      <member refid="classwx_styled_text_ctrl_1ab94170cb2610390cd554b10f89d2c1e5" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetTwoPhaseDraw</name></member>
      <member refid="classwx_styled_text_ctrl_1af248dffea3b88db5980a41780e02cf3a" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetUndoCollection</name></member>
      <member refid="classwx_window_1a23370688a951ed60ac25146af854d2ec" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetUpdateClientRect</name></member>
      <member refid="classwx_window_1abf27e516de38c47b799105b997a3eb3d" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetUpdateRegion</name></member>
      <member refid="classwx_styled_text_ctrl_1a65f22f8fa3b367846cd798be26815b68" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetUseAntiAliasing</name></member>
      <member refid="classwx_styled_text_ctrl_1a42f2946e340ce605860ff22c2cb07e43" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetUseHorizontalScrollBar</name></member>
      <member refid="classwx_styled_text_ctrl_1a2e7dd7e8cccc41e90edfed00be1ee578" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetUseTabs</name></member>
      <member refid="classwx_styled_text_ctrl_1a6cc056f37a07bc3f16c39b6a5afe1a09" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetUseVerticalScrollBar</name></member>
      <member refid="classwx_window_1aaa9b70aad1559212da2ce848f72ea894" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>GetValidator</name></member>
      <member refid="classwx_text_entry_1a39335d9009b2053b5daf850c7b9d2974" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>GetValue</name></member>
      <member refid="classwx_styled_text_ctrl_1ad89556dec83d42b81359a9c438c2d24e" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetViewEOL</name></member>
      <member refid="classwx_styled_text_ctrl_1a2d30dad6b4485f6e89f10ee01542c442" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetViewWhiteSpace</name></member>
      <member refid="classwx_window_1a557f92e6c66b6654c95315d4461d0e11" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetVirtualSize</name></member>
      <member refid="classwx_window_1a24cefbb69173899ec4d62460b2932ed9" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetVirtualSize</name></member>
      <member refid="classwx_styled_text_ctrl_1ac4b6b8fd91c6aa2777eb2eeb906c2946" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetVirtualSpaceOptions</name></member>
      <member refid="classwx_styled_text_ctrl_1a268854b3cea5cf81b22dbe4980d2ceba" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetWhitespaceChars</name></member>
      <member refid="classwx_styled_text_ctrl_1ae336b4c8938f3e5ed7895d1c351419ef" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetWhitespaceSize</name></member>
      <member refid="classwx_window_1a21c97d5bcf61c4c664bd33066f5567b1" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>GetWindowBorderSize</name></member>
      <member refid="classwx_window_1a418007123fec131b47d9841ac6d34891" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetWindowStyle</name></member>
      <member refid="classwx_window_1ad67a731cd937a21e561593d4a0c44979" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>GetWindowStyleFlag</name></member>
      <member refid="classwx_window_1a9027305e391de617259407f2c12a54bf" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetWindowVariant</name></member>
      <member refid="classwx_styled_text_ctrl_1af33fb89cc8edbd3dca0b943f5a81024b" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetWordChars</name></member>
      <member refid="classwx_styled_text_ctrl_1a1f6b79808652ace85f3d43ef85156353" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetWrapIndentMode</name></member>
      <member refid="classwx_styled_text_ctrl_1a406df5c19f25bbea26fab7c7d9b6ce24" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetWrapMode</name></member>
      <member refid="classwx_styled_text_ctrl_1a4d09e70f5d243c5225f87b7ad8443fcc" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetWrapStartIndent</name></member>
      <member refid="classwx_styled_text_ctrl_1ab7099957fefdc87cf05268bdb672914d" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetWrapVisualFlags</name></member>
      <member refid="classwx_styled_text_ctrl_1a392f1d848b1fb8e28ec672fb91a41ab6" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetWrapVisualFlagsLocation</name></member>
      <member refid="classwx_styled_text_ctrl_1abd97680d0842f0ae829cad28b8e93a59" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetXOffset</name></member>
      <member refid="classwx_styled_text_ctrl_1a0c6545c73591ec23589ee1479254c0a9" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GetZoom</name></member>
      <member refid="classwx_styled_text_ctrl_1a36755313b796f113224095c17c344934" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GotoLine</name></member>
      <member refid="classwx_styled_text_ctrl_1af5b04e788271c7c1e9c5bf61d3542d76" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>GotoPos</name></member>
      <member refid="classwx_window_1a89d1b079de97aac170e999692095872c" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>HandleAsNavigationKey</name></member>
      <member refid="classwx_window_1a89816f1b78c125c59418463caea35c9a" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>HandleWindowEvent</name></member>
      <member refid="classwx_window_1a41e1b77ac82c7420d34b8030d5f26046" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>HasCapture</name></member>
      <member refid="classwx_window_1aeee5333e672a3a510db48d2af37ddee9" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>HasExtraStyle</name></member>
      <member refid="classwx_window_1a3d1d00b4cd51fa3c187e9d609d022aa4" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>HasFlag</name></member>
      <member refid="classwx_window_1adaf042744bdbb8a5f9feccbe7749468a" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>HasFocus</name></member>
      <member refid="classwx_window_1a55c7b73596f2eec2694e8f512013ee81" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>HasMultiplePages</name></member>
      <member refid="classwx_window_1ae50c259b165d9366729734bc124cf184" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>HasScrollbar</name></member>
      <member refid="classwx_window_1ab9cbcb6d6f4a272c2f0342e69a13b59a" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>HasTransparentBackground</name></member>
      <member refid="classwx_window_1a7ed103df04014cb3c59c6a3fb4d95328" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>Hide</name></member>
      <member refid="classwx_styled_text_ctrl_1a586b008abbe3b5030f0e877a5449f292" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>HideLines</name></member>
      <member refid="classwx_styled_text_ctrl_1a8212d30e6fad5e01e466e9ef65707d84" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>HideSelection</name></member>
      <member refid="classwx_window_1a5326fbb26557a224507a1c06e5640e89" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>HideWithEffect</name></member>
      <member refid="classwx_styled_text_ctrl_1a3c35b86bffe8836129551ee2c620e1a5" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>HitTest</name></member>
      <member refid="classwx_styled_text_ctrl_1aeded1fde5410fe4e4e2cf2ba468c121a" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>HitTest</name></member>
      <member refid="classwx_window_1ae8705e241daca73105921b72326258b5" prot="public" virt="non-virtual" ambiguityscope="wxControl::"><scope>wxStyledTextCtrl</scope><name>HitTest</name></member>
      <member refid="classwx_window_1ace65f76df096662bd15722d10c1905c9" prot="public" virt="non-virtual" ambiguityscope="wxControl::"><scope>wxStyledTextCtrl</scope><name>HitTest</name></member>
      <member refid="classwx_styled_text_ctrl_1a81cc40177c35e47daa1cff8c0ba205cf" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>Home</name></member>
      <member refid="classwx_styled_text_ctrl_1a86da232f299722eb400c3169fc5cf5b9" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>HomeDisplay</name></member>
      <member refid="classwx_styled_text_ctrl_1ae249dee11bd5ec8ac1bf7295996d0e1e" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>HomeDisplayExtend</name></member>
      <member refid="classwx_styled_text_ctrl_1ac86adda825a69f315a433f72c65a26a8" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>HomeExtend</name></member>
      <member refid="classwx_styled_text_ctrl_1a09eda26be0d53e59128af4f8c3ce163d" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>HomeRectExtend</name></member>
      <member refid="classwx_styled_text_ctrl_1aa9435194013564156570a17593883c7c" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>HomeWrap</name></member>
      <member refid="classwx_styled_text_ctrl_1a2faea08698aba4ff0d35e82a7637a911" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>HomeWrapExtend</name></member>
      <member refid="classwx_styled_text_ctrl_1af356b43acd66de6bbba4606763bca987" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>IndicatorAllOnFor</name></member>
      <member refid="classwx_styled_text_ctrl_1a8dd3ca90a383d05bbdbcdc488ed94e80" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>IndicatorClearRange</name></member>
      <member refid="classwx_styled_text_ctrl_1a7ed1ce1926f45bc345efba834ef2ddbb" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>IndicatorEnd</name></member>
      <member refid="classwx_styled_text_ctrl_1a4366ead8891a895f14f389f9b87a8152" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>IndicatorFillRange</name></member>
      <member refid="classwx_styled_text_ctrl_1ad2c55f753689cb4b16e22311b6cb4ec0" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>IndicatorGetAlpha</name></member>
      <member refid="classwx_styled_text_ctrl_1aee413fec79dc04d07ce70429f7004723" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>IndicatorGetFlags</name></member>
      <member refid="classwx_styled_text_ctrl_1aba482f03fb8cf1953b443fe754ff0ef0" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>IndicatorGetForeground</name></member>
      <member refid="classwx_styled_text_ctrl_1ac2d50a694b7215cc911b622b20e1b24f" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>IndicatorGetHoverForeground</name></member>
      <member refid="classwx_styled_text_ctrl_1abe6cab783491ec28f03f8feab4c8317c" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>IndicatorGetHoverStyle</name></member>
      <member refid="classwx_styled_text_ctrl_1a65a4a93b088d6a653c388e99f9305fcb" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>IndicatorGetOutlineAlpha</name></member>
      <member refid="classwx_styled_text_ctrl_1affabc61aefde258dd405cf8c6ea6f0b3" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>IndicatorGetStyle</name></member>
      <member refid="classwx_styled_text_ctrl_1a5a87775d670b4dbb5f9d7a3eaf0b10e9" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>IndicatorGetUnder</name></member>
      <member refid="classwx_styled_text_ctrl_1aa5a90e1fec271eb4a6be5da6739d7d48" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>IndicatorSetAlpha</name></member>
      <member refid="classwx_styled_text_ctrl_1a19fd00deeae35cf9173bb2c9b9568805" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>IndicatorSetFlags</name></member>
      <member refid="classwx_styled_text_ctrl_1acafa578ba7bc93fec23ca4b275cfd9d6" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>IndicatorSetForeground</name></member>
      <member refid="classwx_styled_text_ctrl_1ad545109f5bf5e0201a35c0f998a6c57f" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>IndicatorSetHoverForeground</name></member>
      <member refid="classwx_styled_text_ctrl_1a88ffec2de149ff6378f0a08633450a07" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>IndicatorSetHoverStyle</name></member>
      <member refid="classwx_styled_text_ctrl_1ae6d824e3107b182d360a8e4ce89e9c24" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>IndicatorSetOutlineAlpha</name></member>
      <member refid="classwx_styled_text_ctrl_1a86cb0dc3ac8d5318b5393c843827d90a" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>IndicatorSetStyle</name></member>
      <member refid="classwx_styled_text_ctrl_1a9d0e550d1c55d51e6f7c2e0918b63a65" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>IndicatorSetUnder</name></member>
      <member refid="classwx_styled_text_ctrl_1a8b0f1668bfa011f196ff83030d9552f7" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>IndicatorStart</name></member>
      <member refid="classwx_styled_text_ctrl_1a0ce16f764d524249e9ad5d2367a0d7d0" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>IndicatorValueAt</name></member>
      <member refid="classwx_window_1a9fd5b6520c1b30eb8e82bb5d56bc24c0" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>InformFirstDirection</name></member>
      <member refid="classwx_window_1a6b1bf9e099704e7a493b8c4666b1f7f7" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>InheritAttributes</name></member>
      <member refid="classwx_window_1af05b95cfeed0bee6f44797572367b26e" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>InheritsBackgroundColour</name></member>
      <member refid="classwx_window_1a5db9556be7eccf8310f8d5653235a4e6" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>InheritsForegroundColour</name></member>
      <member refid="classwx_window_1aa90a260c0a835a133043460b7d0024a8" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>InitDialog</name></member>
      <member refid="classwx_styled_text_ctrl_1a2fd8afea2355396a93b2b8ba99f1a559" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>InsertText</name></member>
      <member refid="classwx_styled_text_ctrl_1a04ac8c4c6e4cc8978b325f62e3991830" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>InsertTextRaw</name></member>
      <member refid="classwx_window_1ae1b56ca87d8590ee5e576012229a380a" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>InvalidateBestSize</name></member>
      <member refid="classwx_window_1a5fd3fba5d43efb67a834c0483a9c3d0e" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>IsBeingDeleted</name></member>
      <member refid="classwx_window_1a71b301a7a0a9b5d5fdda417b8dadd13a" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>IsDescendant</name></member>
      <member refid="classwx_window_1abe7a8c61796262b517f5e0765374cc2b" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>IsDoubleBuffered</name></member>
      <member refid="classwx_styled_text_ctrl_1a5861b08a438b0cfc35cfc188d5cea59f" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>IsEditable</name></member>
      <member refid="classwx_text_entry_1ad8353636538ddf3552a074e597b14c2d" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>IsEmpty</name></member>
      <member refid="classwx_window_1a0c186513884fb2020c6af3c62f0913d2" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>IsEnabled</name></member>
      <member refid="classwx_window_1a687120c4b7095481bbc6d483187d0c56" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>IsExposed</name></member>
      <member refid="classwx_window_1afde1844b856787b95afbb686aaaa206d" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>IsExposed</name></member>
      <member refid="classwx_window_1a3017e9cdde376d567ee37b2a96913eca" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>IsExposed</name></member>
      <member refid="classwx_window_1ac4653d89376b9e88afbec8c342d32530" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>IsExposed</name></member>
      <member refid="classwx_window_1ad78eb073c4fe8271caa4c65301a24ee2" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>IsFocusable</name></member>
      <member refid="classwx_window_1adf34f121a9a94fd7159a8818355f2b67" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>IsFrozen</name></member>
      <member refid="classwx_object_1a3c7115ef4132dcee0c4fc34e84d7fced" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>IsKindOf</name></member>
      <member refid="classwx_styled_text_ctrl_1aef6259020fc4747d8f3092bcf89f75cf" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>IsModified</name></member>
      <member refid="classwx_styled_text_ctrl_1a6a25c8944371cfa6d501c10e63d74228" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>IsRangeWord</name></member>
      <member refid="classwx_window_1a77443cb35d15b5006b96a8c5ea0944f6" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>IsRetained</name></member>
      <member refid="classwx_object_1a059373c494c2369d7db2a556efef8ecf" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>IsSameAs</name></member>
      <member refid="classwx_window_1abf4f5068ebf648197ed9ca8ca58f38df" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>IsScrollbarAlwaysShown</name></member>
      <member refid="classwx_window_1ad3544f9c364b7952ac0676217e400061" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>IsShown</name></member>
      <member refid="classwx_window_1ac2722709783e89e76b2eeb7f9f93236a" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>IsShownOnScreen</name></member>
      <member refid="classwx_window_1a1c6a83e5421bb7cfb8a9ad804d251b65" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>IsThisEnabled</name></member>
      <member refid="classwx_window_1afe04dba2155b58429d6c4e0a5a5e1664" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>IsTopLevel</name></member>
      <member refid="classwx_window_1a21c6e2be327062520d9d0aae55b1e8b0" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>IsTransparentBackgroundSupported</name></member>
      <member refid="classwx_evt_handler_1ac0734578a8d929b8b0be440ce0b53ad6" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>IsUnlinked</name></member>
      <member refid="classwx_window_1a1b143c3e72bd0af533b76db4830a6113" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>Layout</name></member>
      <member refid="classwx_styled_text_ctrl_1a65413d4c086ae8c0ef8380cff55773e6" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>LineCopy</name></member>
      <member refid="classwx_styled_text_ctrl_1aa2afa8f527045e387838ca9465ae62c9" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>LineCut</name></member>
      <member refid="classwx_styled_text_ctrl_1a7973166dc3a25e59f6da2679c40a0e77" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>LineDelete</name></member>
      <member refid="classwx_styled_text_ctrl_1ac9515ecb49c5649c282222e5ca475d19" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>LineDown</name></member>
      <member refid="classwx_styled_text_ctrl_1a0845a980da1cd5bb7d3aa075ddc17da4" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>LineDownExtend</name></member>
      <member refid="classwx_styled_text_ctrl_1a532132fa839732be1c4eb9cc60d8f9a3" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>LineDownRectExtend</name></member>
      <member refid="classwx_styled_text_ctrl_1a2313db2853adf1c0845e930edabae12c" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>LineDuplicate</name></member>
      <member refid="classwx_styled_text_ctrl_1a9b8793a79c0f76d377df68e7b5bd26ea" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>LineEnd</name></member>
      <member refid="classwx_styled_text_ctrl_1a46f1b649c7c10362e2c03405300c71fe" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>LineEndDisplay</name></member>
      <member refid="classwx_styled_text_ctrl_1afedadbabcd1c1b2467a695130b933393" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>LineEndDisplayExtend</name></member>
      <member refid="classwx_styled_text_ctrl_1a43f776d94819c2a4eed79adc62795b66" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>LineEndExtend</name></member>
      <member refid="classwx_styled_text_ctrl_1a3a1eb6fee3a2192ec1d08ca26703e7fa" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>LineEndRectExtend</name></member>
      <member refid="classwx_styled_text_ctrl_1ac8281133453c747409b60dc5acc3758a" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>LineEndWrap</name></member>
      <member refid="classwx_styled_text_ctrl_1a8f52104fcc9e05711a864896475c7ad5" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>LineEndWrapExtend</name></member>
      <member refid="classwx_styled_text_ctrl_1a0da88686d74212b9f5ac481985ad2821" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>LineFromPosition</name></member>
      <member refid="classwx_styled_text_ctrl_1a311d033fed21e6a4778df6b381bb3aad" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>LineLength</name></member>
      <member refid="classwx_styled_text_ctrl_1a6368f884c5803294e3aedfe88fe3112a" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>LineScroll</name></member>
      <member refid="classwx_styled_text_ctrl_1a9b53d6cfccf347333995a9a48c36029e" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>LineScrollDown</name></member>
      <member refid="classwx_styled_text_ctrl_1aab817bec123fc7ee32eb8dcbbfdc55a4" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>LineScrollUp</name></member>
      <member refid="classwx_styled_text_ctrl_1a3f24817be6a8af9aa560fd1ee7c05b85" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>LinesJoin</name></member>
      <member refid="classwx_styled_text_ctrl_1a0bde67749d764a4f5a14ca5f6c17fa85" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>LinesOnScreen</name></member>
      <member refid="classwx_styled_text_ctrl_1a591959bfee0a8353f70b1306ca7fe2eb" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>LinesSplit</name></member>
      <member refid="classwx_styled_text_ctrl_1abcf0762da43a7f95b3fc2c5f9937614e" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>LineTranspose</name></member>
      <member refid="classwx_styled_text_ctrl_1a495f22e16a3471147b1cb925e8ce0ca5" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>LineUp</name></member>
      <member refid="classwx_styled_text_ctrl_1a597babc365b24614d5a2998f25fa4458" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>LineUpExtend</name></member>
      <member refid="classwx_styled_text_ctrl_1aa74a9c0c48e4176bdd70d261637bb9c8" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>LineUpRectExtend</name></member>
      <member refid="classwx_styled_text_ctrl_1a459d332b6b70aa24b8be88303c35e5a1" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>LoadFile</name></member>
      <member refid="classwx_styled_text_ctrl_1abfde2eca1e4979bd497617ade2f69a44" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>LoadLexerLibrary</name></member>
      <member refid="classwx_window_1a124944524f36b71385dad8fddaad8ded" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>Lower</name></member>
      <member refid="classwx_styled_text_ctrl_1a69e0875a6d000351f6c6498de6310f4c" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>LowerCase</name></member>
      <member refid="classwx_object_1a9e31954530a0abd54982effc443ed2b8" prot="protected" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>m_refData</name></member>
      <member refid="classwx_styled_text_ctrl_1a16a8bfe44398120a02088faec8977fc4" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>MarginGetStyle</name></member>
      <member refid="classwx_styled_text_ctrl_1a79410f1238549876fb06e181772d933b" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>MarginGetStyleOffset</name></member>
      <member refid="classwx_styled_text_ctrl_1a9d95c87d79aa5aac50884c321b4806b8" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>MarginGetStyles</name></member>
      <member refid="classwx_styled_text_ctrl_1a17654d6fa430fb1a5c948a8ebcc50ab1" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>MarginGetText</name></member>
      <member refid="classwx_styled_text_ctrl_1ae552ef3d00be362facd155efdbb06644" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>MarginSetStyle</name></member>
      <member refid="classwx_styled_text_ctrl_1a07193d7b379e085991b840344293f4b1" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>MarginSetStyleOffset</name></member>
      <member refid="classwx_styled_text_ctrl_1a9b5d745fe8da43d83fed85baa7bfe0f0" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>MarginSetStyles</name></member>
      <member refid="classwx_styled_text_ctrl_1ad66c7d820d12a5cc6f82aa72935fbbea" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>MarginSetText</name></member>
      <member refid="classwx_styled_text_ctrl_1ade9ece6d3f3a4373283c12b77f6469c4" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>MarginTextClearAll</name></member>
      <member refid="classwx_styled_text_ctrl_1a1e2fd82c4b7d4c87fa0ad2e2d92abc95" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>MarkDirty</name></member>
      <member refid="classwx_styled_text_ctrl_1a2bce811d7d23416b4aed7068f55f48a5" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>MarkerAdd</name></member>
      <member refid="classwx_styled_text_ctrl_1a540695f8e117aa2f9da6b880d5439dbb" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>MarkerAddSet</name></member>
      <member refid="classwx_styled_text_ctrl_1af4aff2744a8d3fc28f8f6f126e6da49b" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>MarkerDefine</name></member>
      <member refid="classwx_styled_text_ctrl_1adeefe5392b7394fb98ebf0291385c76a" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>MarkerDefineBitmap</name></member>
      <member refid="classwx_styled_text_ctrl_1aa4f6c087aeaaff7b4e838b1f9b580a28" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>MarkerDefinePixmap</name></member>
      <member refid="classwx_styled_text_ctrl_1a7549a152211af4fba9ec09627bf64c2f" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>MarkerDefineRGBAImage</name></member>
      <member refid="classwx_styled_text_ctrl_1aea89da40e6dfdaa26a9a74a1067f651f" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>MarkerDelete</name></member>
      <member refid="classwx_styled_text_ctrl_1a59e91381c363f396bd0c26ef9574515d" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>MarkerDeleteAll</name></member>
      <member refid="classwx_styled_text_ctrl_1a80b4fd17bec7bcf6bd69a356b451b270" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>MarkerDeleteHandle</name></member>
      <member refid="classwx_styled_text_ctrl_1aba8bda36ef191f934608aa4a4280ee44" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>MarkerEnableHighlight</name></member>
      <member refid="classwx_styled_text_ctrl_1a681d408ab69cd6e63204b8359bb44605" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>MarkerGet</name></member>
      <member refid="classwx_styled_text_ctrl_1a679def8173ab4be57bd6b108a5b3bc4e" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>MarkerLineFromHandle</name></member>
      <member refid="classwx_styled_text_ctrl_1ad2fed626190435a772aa5b00f725d2ef" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>MarkerNext</name></member>
      <member refid="classwx_styled_text_ctrl_1a5dba6328004c17faaecacc2647ac043d" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>MarkerPrevious</name></member>
      <member refid="classwx_styled_text_ctrl_1ae3d48bdff0d995bfbf35ea29cff7b5bc" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>MarkerSetAlpha</name></member>
      <member refid="classwx_styled_text_ctrl_1ad11e02f4a07cdbd45c3627a0ce8fa5e8" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>MarkerSetBackground</name></member>
      <member refid="classwx_styled_text_ctrl_1a482ffb91166637376590f3f6a6c63b2d" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>MarkerSetBackgroundSelected</name></member>
      <member refid="classwx_styled_text_ctrl_1a7b038202798c153f2ba6c454dfa9f92b" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>MarkerSetForeground</name></member>
      <member refid="classwx_window_1ab1cb98c8d25b9e6ff7b706b1446c3df7" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>Move</name></member>
      <member refid="classwx_window_1a22a22c1e23ca05776707e7999d8047fe" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>Move</name></member>
      <member refid="classwx_window_1a79e66079125e8420de269811bdb6f2b6" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>MoveAfterInTabOrder</name></member>
      <member refid="classwx_window_1af2b92f61cd9f9e2e0efe4cce307e25b1" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>MoveBeforeInTabOrder</name></member>
      <member refid="classwx_styled_text_ctrl_1a88b9b807e250da28f23f26bf4dba09ff" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>MoveCaretInsideView</name></member>
      <member refid="classwx_styled_text_ctrl_1a167ff7a45de7fe4f5a4ed8080ad278ae" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>MoveSelectedLinesDown</name></member>
      <member refid="classwx_styled_text_ctrl_1a505aaf57dfde28f24de8c01e8b5ea786" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>MoveSelectedLinesUp</name></member>
      <member refid="classwx_styled_text_ctrl_1a8a9a807538d28b4b8b67162bf136677f" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>MultiEdgeAddLine</name></member>
      <member refid="classwx_styled_text_ctrl_1a79e5180200dd05ddf462e515a26f4228" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>MultiEdgeClearAll</name></member>
      <member refid="classwx_styled_text_ctrl_1ae3a3655859cf211cb0e99837f8b2196d" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>MultipleSelectAddEach</name></member>
      <member refid="classwx_styled_text_ctrl_1a3b03bb6a75919b657cf889032fd8e1ba" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>MultipleSelectAddNext</name></member>
      <member refid="classwx_window_1a86904f6785df4af6036b33383490a805" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>Navigate</name></member>
      <member refid="classwx_window_1aa58039c8fc65e19160becf510ee1d1d5" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>NavigateIn</name></member>
      <member refid="classwx_window_1a8175da594e6045635a1d1cfe775cdddb" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>NewControlId</name></member>
      <member refid="classwx_styled_text_ctrl_1aafe614a7f6032598933112f1c6e4fb67" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>NewLine</name></member>
      <member refid="classwx_window_1a6b5654c0c6c6245d592c279521f7099c" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>OnInternalIdle</name></member>
      <member refid="classwx_object_1a07b8f34f5afc5743195c5fed052f55d3" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>operator delete</name></member>
      <member refid="classwx_object_1a48f4a0e3f8d737ca8d6cd04c1bbf08f0" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>operator new</name></member>
      <member refid="classwx_styled_text_ctrl_1ae42da911681afee75d2782b410a8da6d" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>PageDown</name></member>
      <member refid="classwx_styled_text_ctrl_1a11834c1cd84c602aa2cd09a525ebb3cd" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>PageDownExtend</name></member>
      <member refid="classwx_styled_text_ctrl_1a34ecf284fc1437ec8e57bc488c0e882d" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>PageDownRectExtend</name></member>
      <member refid="classwx_styled_text_ctrl_1a51017ad326b639f505d0b2007d6fe0b6" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>PageUp</name></member>
      <member refid="classwx_styled_text_ctrl_1a41f991d2cf74d9695e3fb5ac2a00ca80" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>PageUpExtend</name></member>
      <member refid="classwx_styled_text_ctrl_1a221fa3ba9842f8bca1698e5f228210ea" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>PageUpRectExtend</name></member>
      <member refid="classwx_styled_text_ctrl_1aedfdbc2b174fdb0c229eec4d7a39961b" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>ParaDown</name></member>
      <member refid="classwx_styled_text_ctrl_1afff9fd76f788b03f1d88d4cf374ebd7d" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>ParaDownExtend</name></member>
      <member refid="classwx_styled_text_ctrl_1aead8c88e661579be7481fda7816aa569" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>ParaUp</name></member>
      <member refid="classwx_styled_text_ctrl_1a85ff441f893aefba1fbbcf994eaa78b6" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>ParaUpExtend</name></member>
      <member refid="classwx_styled_text_ctrl_1ad6e87818b17d8977c31037376a079285" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>Paste</name></member>
      <member refid="classwx_styled_text_ctrl_1a9501d7575194cce280cfd8c3aef6eb88" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>PointFromPosition</name></member>
      <member refid="classwx_window_1a0b71a51a2f13179d0ca1b488d177ca4d" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>PopEventHandler</name></member>
      <member refid="classwx_window_1a8f715d238cf74a845488b0e2645e98df" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>PopupMenu</name></member>
      <member refid="classwx_window_1a834bcdfd41f5e5370ebd9ea401c92900" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>PopupMenu</name></member>
      <member refid="classwx_styled_text_ctrl_1a028c1147afb93e729a44712b01668a1e" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>PositionAfter</name></member>
      <member refid="classwx_styled_text_ctrl_1a1d494a1101f6983d01d4727af5371398" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>PositionBefore</name></member>
      <member refid="classwx_styled_text_ctrl_1a687e405d8433e99cb62a69ead33c62d2" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>PositionFromLine</name></member>
      <member refid="classwx_styled_text_ctrl_1abc0fdc802c9ce0c66b1b946e9ff85bdc" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>PositionFromPoint</name></member>
      <member refid="classwx_styled_text_ctrl_1a892b27398a7b8d03923c86d1594280fe" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>PositionFromPointClose</name></member>
      <member refid="classwx_styled_text_ctrl_1a68877c2bef482d2abdbf5de49a3c541d" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>PositionRelative</name></member>
      <member refid="classwx_styled_text_ctrl_1afb206422b8f73bdad7a1726dbe831d4a" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>PositionToXY</name></member>
      <member refid="classwx_window_1ab1943463e6661f97e072b43337c6cc09" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>PostSizeEvent</name></member>
      <member refid="classwx_window_1aa080d8dcda58bcc6ea2abd8bea592e3e" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>PostSizeEventToParent</name></member>
      <member refid="classwx_styled_text_ctrl_1ab779aa9eee53771e24a98a89c6d0765f" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>PrivateLexerCall</name></member>
      <member refid="classwx_window_1a5ebdbd87c28644149a07f1742996df96" prot="protected" virt="virtual"><scope>wxStyledTextCtrl</scope><name>ProcessEvent</name></member>
      <member refid="classwx_evt_handler_1ac0f5d2cb29a04c1f7f82eb6b351f79fb" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>ProcessEventLocally</name></member>
      <member refid="classwx_window_1a7cbee38944dab02d753a4dba74230443" prot="protected" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>ProcessPendingEvents</name></member>
      <member refid="classwx_window_1a9350b3a9c2e380707eaea92cedad12a5" prot="protected" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>ProcessThreadEvent</name></member>
      <member refid="classwx_window_1a0a76891d726ad5f9a729e27e4eab2b57" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>ProcessWindowEvent</name></member>
      <member refid="classwx_window_1a0a11aa4a50491d051f947e2618e52178" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>ProcessWindowEventLocally</name></member>
      <member refid="classwx_styled_text_ctrl_1aa52845ca9877ec3d4dee71434343f496" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>PropertyNames</name></member>
      <member refid="classwx_styled_text_ctrl_1a0b57c3aaf9c61f30da61d316c0b899ac" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>PropertyType</name></member>
      <member refid="classwx_window_1a398c11ab9af7956067a964f560d1978c" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>PushEventHandler</name></member>
      <member refid="classwx_window_1a69e450f21b0d7013269ec1a4771f043b" prot="protected" virt="virtual"><scope>wxStyledTextCtrl</scope><name>QueueEvent</name></member>
      <member refid="classwx_window_1a54808c933f22a891c5db646f6209fa4d" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>Raise</name></member>
      <member refid="classwx_styled_text_ctrl_1aa58a2c1f83af5f7722defa6a1e8ab5dd" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>Redo</name></member>
      <member refid="classwx_object_1a2f6f1aa51fe9fc2b1415ca4211a90e9e" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>Ref</name></member>
      <member refid="classwx_window_1a29dc7251746154c821b17841b9877830" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>Refresh</name></member>
      <member refid="classwx_window_1ab0ae6b9898cd261c39ebeb2891aa3d67" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>RefreshRect</name></member>
      <member refid="classwx_window_1a53ca57872dac5851ea6ba55a494b899b" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>RegisterHotKey</name></member>
      <member refid="classwx_styled_text_ctrl_1aad1a1d7f2d9474a3344ff25e2dd916d1" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>RegisterImage</name></member>
      <member refid="classwx_styled_text_ctrl_1a002a95831ec96515101922756d4d99e0" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>RegisterImage</name></member>
      <member refid="classwx_styled_text_ctrl_1a9b4fca5b8f14db0f4c23b0c03e40eb8f" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>RegisterRGBAImage</name></member>
      <member refid="classwx_styled_text_ctrl_1a8f7acde53132f753f9ed2a182c470dff" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>ReleaseAllExtendedStyles</name></member>
      <member refid="classwx_styled_text_ctrl_1a3b8edb39e182b3d095f5f5d4728319e8" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>ReleaseDocument</name></member>
      <member refid="classwx_window_1adcc538819c11ecb3bd3e4e5d13c5ba7a" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>ReleaseMouse</name></member>
      <member refid="classwx_styled_text_ctrl_1ac1c227e4d69c32c24538fb4f38a7517c" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>Remove</name></member>
      <member refid="classwx_window_1acee332ed4368d26e8bc3db5767c1240a" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>RemoveChild</name></member>
      <member refid="classwx_window_1aacbfe424fa527966b954229a1db96ab5" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>RemoveEventHandler</name></member>
      <member refid="classwx_evt_handler_1a67a57b759c447b121bf70a7c9804c8f2" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>RemoveFilter</name></member>
      <member refid="classwx_control_1ab7df4ca0dfde3a6409833cf470ee02e6" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>RemoveMnemonics</name></member>
      <member refid="classwx_window_1a7977b749284e65aecfed2ce146799cb9" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>Reparent</name></member>
      <member refid="classwx_styled_text_ctrl_1a29f8d25326e67fe4493039ed1eb15743" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>Replace</name></member>
      <member refid="classwx_styled_text_ctrl_1a781675a6c92f399e0cfe426fcf8ee13e" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>ReplaceSelection</name></member>
      <member refid="classwx_styled_text_ctrl_1a0180e3bf5fa3dba2a0701586cb5181f9" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>ReplaceSelectionRaw</name></member>
      <member refid="classwx_styled_text_ctrl_1a9f9600dbe5b828f493e323f0dabd67ca" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>ReplaceTarget</name></member>
      <member refid="classwx_styled_text_ctrl_1a40762f96805cbe76a7a4bc82d8e32a5d" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>ReplaceTargetRaw</name></member>
      <member refid="classwx_styled_text_ctrl_1ae6e45a7a50bb6e524b79fa3f730765e5" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>ReplaceTargetRE</name></member>
      <member refid="classwx_styled_text_ctrl_1af6445ec09cf1318b02e846bfe1d9c639" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>ReplaceTargetRERaw</name></member>
      <member refid="classwx_styled_text_ctrl_1aa24589388ac05d2306498cbe11ae60ed" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>RGBAImageSetHeight</name></member>
      <member refid="classwx_styled_text_ctrl_1a854360c82bc680c4247e97f460a39826" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>RGBAImageSetScale</name></member>
      <member refid="classwx_styled_text_ctrl_1a7b42aabe1e22822e47a1c5734948f8c0" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>RGBAImageSetWidth</name></member>
      <member refid="classwx_styled_text_ctrl_1a152d87c865cd3683a018cbf6c9e4dfc4" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>RotateSelection</name></member>
      <member refid="classwx_window_1a0f9814efc50316b4c57b7ec2bf78b716" prot="protected" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SafelyProcessEvent</name></member>
      <member refid="classwx_styled_text_ctrl_1aad9d4397adfc741c8a25066a6cdc8c9c" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SaveFile</name></member>
      <member refid="classwx_window_1a09aca554d41d6e771d3dc72f26b9cacc" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>ScreenToClient</name></member>
      <member refid="classwx_window_1a5f4dab599fda780823841bb2fe5f2f99" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>ScreenToClient</name></member>
      <member refid="classwx_window_1aa5c5b683bd11a0d9771bd2fcdf643c64" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>ScrollLines</name></member>
      <member refid="classwx_window_1adc0ed5e1c4925223cb901ced14b8343d" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>ScrollPages</name></member>
      <member refid="classwx_styled_text_ctrl_1a624d2e6f5d6a218d476239c11e68b305" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>ScrollRange</name></member>
      <member refid="classwx_styled_text_ctrl_1a4045083b0cd2cd28125d0f28d6734d6f" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>ScrollToColumn</name></member>
      <member refid="classwx_styled_text_ctrl_1a8974ab996333b9e6ed5fe6f5ee180e76" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>ScrollToEnd</name></member>
      <member refid="classwx_styled_text_ctrl_1ac56e5bf9181625fe4b5b227c7f2b6920" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>ScrollToLine</name></member>
      <member refid="classwx_styled_text_ctrl_1a6b2a606d96a4a57341615cb638a5f959" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>ScrollToStart</name></member>
      <member refid="classwx_window_1ab7be4956ff22da37fff2b8aaa581045c" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>ScrollWindow</name></member>
      <member refid="classwx_styled_text_ctrl_1a42100d4f60d5361099a18a036b2cbb06" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SearchAnchor</name></member>
      <member refid="classwx_styled_text_ctrl_1a741f27ac90f15b36c172708e6b2276da" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SearchInTarget</name></member>
      <member refid="classwx_styled_text_ctrl_1a69016a21d4b3e54cdaa9aeb803b5d1ed" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SearchNext</name></member>
      <member refid="classwx_styled_text_ctrl_1a1b465232d8f369f8e4b1d4024032c474" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SearchPrev</name></member>
      <member refid="classwx_styled_text_ctrl_1ae4b9f83f0dc460834b0533b26cc8314d" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>SelectAll</name></member>
      <member refid="classwx_styled_text_ctrl_1a4e384ad9646e25cf253b5c9bc611e5e6" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SelectionDuplicate</name></member>
      <member refid="classwx_styled_text_ctrl_1acb93a3e90febbba396b2bf00e55c1d32" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SelectionIsRectangle</name></member>
      <member refid="classwx_styled_text_ctrl_1ad1c7adb764ec66083a1f9e90efd611e8" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>SelectNone</name></member>
      <member refid="classwx_window_1a7e21eb6a0819281b29134a6432d064fe" prot="protected" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SendDestroyEvent</name></member>
      <member refid="classwx_window_1a1afc1653413957537073c074dcc3eade" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>SendIdleEvents</name></member>
      <member refid="classwx_styled_text_ctrl_1a675b0a668ea88028ffd38f9728751c6e" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SendMsg</name></member>
      <member refid="classwx_window_1a237f739b21937d3e8f1bff5fa82ba4c2" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>SendSizeEvent</name></member>
      <member refid="classwx_window_1af7987987978fd8a93df88b29b19a6388" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SendSizeEventToParent</name></member>
      <member refid="classwx_window_1a0af5e9aa4dee6a4e92c0700f92605642" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>SetAcceleratorTable</name></member>
      <member refid="classwx_window_1a413220ead41f05a2ec2cfe10b3d573df" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetAccessible</name></member>
      <member refid="classwx_styled_text_ctrl_1a3754bef6b4bcc2ab6929a63e864c35da" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetAdditionalCaretForeground</name></member>
      <member refid="classwx_styled_text_ctrl_1a559040550cb01c794a3dd23942823e46" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetAdditionalCaretsBlink</name></member>
      <member refid="classwx_styled_text_ctrl_1a5fa11d4e883de4e1779d44a58ca52da2" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetAdditionalCaretsVisible</name></member>
      <member refid="classwx_styled_text_ctrl_1a3b87020382f1b185c30cb40acfcbe66c" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetAdditionalSelAlpha</name></member>
      <member refid="classwx_styled_text_ctrl_1a4aec08b338247133812c9657483242f3" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetAdditionalSelBackground</name></member>
      <member refid="classwx_styled_text_ctrl_1a0a915649ec8b7a95afa2eed7752804d8" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetAdditionalSelectionTyping</name></member>
      <member refid="classwx_styled_text_ctrl_1a1db22a164853318d8f10e249651cc119" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetAdditionalSelForeground</name></member>
      <member refid="classwx_styled_text_ctrl_1adbb97bf1f2bccae59446386ecf435688" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetAnchor</name></member>
      <member refid="classwx_window_1ad369fe1db5c20f9d9edff7b5eb1f7226" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetAutoLayout</name></member>
      <member refid="classwx_styled_text_ctrl_1af68129e5957351c54769ce1b37d935c3" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetAutomaticFold</name></member>
      <member refid="classwx_window_1a37219df52734626e23401fd83b25d8a0" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>SetBackgroundColour</name></member>
      <member refid="classwx_window_1af14f8fd2ed2d30a9bbb5d4f9fd6594ec" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>SetBackgroundStyle</name></member>
      <member refid="classwx_styled_text_ctrl_1acb9871f499cc49f222199ce17858be78" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetBackSpaceUnIndents</name></member>
      <member refid="classwx_styled_text_ctrl_1a625ec429c30103b60c3c3683008b98ae" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetBufferedDraw</name></member>
      <member refid="classwx_window_1a2b8b2e99231a0ec1a05f5066f1b7f3d8" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>SetCanFocus</name></member>
      <member refid="classwx_window_1acfef5e1cada92c73e2937b84ff57ff57" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetCaret</name></member>
      <member refid="classwx_styled_text_ctrl_1a8b9df9c761aac1e0b7ef2457b09415d1" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetCaretForeground</name></member>
      <member refid="classwx_styled_text_ctrl_1ac5979bd0c78c7cd6176b1294ea620027" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetCaretLineBackAlpha</name></member>
      <member refid="classwx_styled_text_ctrl_1a10b9b644790f1a9ca287df6f527d6e63" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetCaretLineBackground</name></member>
      <member refid="classwx_styled_text_ctrl_1af1ed9a3be0fdda376f6b4ab819508f4e" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetCaretLineVisible</name></member>
      <member refid="classwx_styled_text_ctrl_1a8e950b38090971056e918165c3b68e53" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetCaretLineVisibleAlways</name></member>
      <member refid="classwx_styled_text_ctrl_1aad5817f223b594770fec0cc83fcd88e2" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetCaretPeriod</name></member>
      <member refid="classwx_styled_text_ctrl_1ab65625d51bcf1d035022bc781a1c6795" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetCaretSticky</name></member>
      <member refid="classwx_styled_text_ctrl_1a24a7af61b419546d4f0504ac366fd341" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetCaretStyle</name></member>
      <member refid="classwx_styled_text_ctrl_1a9c89012c8781311f4aa8d8bb0e78a087" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetCaretWidth</name></member>
      <member refid="classwx_styled_text_ctrl_1a76bbfb8faf5016f90aef3df1d068ad86" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetCharsDefault</name></member>
      <member refid="classwx_evt_handler_1a82c74f2cebfa02cb3c1563d459c872bf" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetClientData</name></member>
      <member refid="classwx_evt_handler_1af1e33a06087b8b2ddc43c7d15a91b326" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetClientObject</name></member>
      <member refid="classwx_window_1aa59f715217fffa5bcf14cd97f92e7840" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetClientSize</name></member>
      <member refid="classwx_window_1ab2aadc857ee7f55f47ab9a8669e3beb7" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetClientSize</name></member>
      <member refid="classwx_window_1a582d4d1f60a3f777627773b2da0bb2ef" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetClientSize</name></member>
      <member refid="classwx_styled_text_ctrl_1a1f453da45a1621528f258700cf462a6e" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetCodePage</name></member>
      <member refid="classwx_window_1afa75d111bbd9a68f837101a5fbed60a7" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetConstraints</name></member>
      <member refid="classwx_window_1a0ccf78fe06722b500adfb7f36b8ce443" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetContainingSizer</name></member>
      <member refid="classwx_styled_text_ctrl_1a65eeb943df8d89628c047caeb89c4413" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetControlCharSymbol</name></member>
      <member refid="classwx_styled_text_ctrl_1a6857e918f56681d9c0d1e37d5cc34500" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetCurrentPos</name></member>
      <member refid="classwx_window_1ad83f9c51c6f31e0e05f598b47a19ed98" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>SetCursor</name></member>
      <member refid="classwx_styled_text_ctrl_1a4d9838a7c92d2f28afe4d6ec122a48fb" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>SetDefaultStyle</name></member>
      <member refid="classwx_styled_text_ctrl_1aab3d63cf95c36142160589ee9a8fbcde" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetDocPointer</name></member>
      <member refid="classwx_window_1a5477a89c17fdcc3ec6c90274796eb1c3" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetDoubleBuffered</name></member>
      <member refid="classwx_window_1ae34b4d45433ca8287df0e47d46411e58" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>SetDropTarget</name></member>
      <member refid="classwx_styled_text_ctrl_1a9118716e17cfe2de2390be4b784f5d28" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetEdgeColour</name></member>
      <member refid="classwx_styled_text_ctrl_1a5bcd5249910c4c7c41118da5d49858b3" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetEdgeColumn</name></member>
      <member refid="classwx_styled_text_ctrl_1ae4099c6385087472987d7e935f800d8b" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetEdgeMode</name></member>
      <member refid="classwx_styled_text_ctrl_1a8329f77d4bd850ce21beeba410625c97" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>SetEditable</name></member>
      <member refid="classwx_styled_text_ctrl_1aef5e66efb42a810d802e8abd5a372477" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetEmptySelection</name></member>
      <member refid="classwx_styled_text_ctrl_1a5af5606b6edbb85b554a03ecdfffa2db" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetEndAtLastLine</name></member>
      <member refid="classwx_styled_text_ctrl_1a9f2ea01c2fa3fdeb7021c071b1f0a7bd" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetEOLMode</name></member>
      <member refid="classwx_window_1af6c84b7679183b377ba27a52a2f708b4" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetEventHandler</name></member>
      <member refid="classwx_evt_handler_1a7388ae19c8657e5656471b658c320036" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetEvtHandlerEnabled</name></member>
      <member refid="classwx_styled_text_ctrl_1a095a5dc7299ff340410621baf3636597" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetExtraAscent</name></member>
      <member refid="classwx_styled_text_ctrl_1adbb77f11a6ada3ae989ea37e58f3b15e" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetExtraDescent</name></member>
      <member refid="classwx_window_1ae9655f7c35ce7ac89cac2f6c0054b103" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>SetExtraStyle</name></member>
      <member refid="classwx_styled_text_ctrl_1a1d6e2c34fdd96e949798c6f3f34eec3e" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetFirstVisibleLine</name></member>
      <member refid="classwx_window_1a697f9f8d3ff389790f1c74b59bcb1d75" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>SetFocus</name></member>
      <member refid="classwx_window_1a6fa03f82d7917dff482754d0d2e2b1c8" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>SetFocusFromKbd</name></member>
      <member refid="classwx_styled_text_ctrl_1a36532e6641aafb97a7254ab285896ff2" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetFoldExpanded</name></member>
      <member refid="classwx_styled_text_ctrl_1a9f8281c84a1f6c945f4b41e566ec3b47" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetFoldFlags</name></member>
      <member refid="classwx_styled_text_ctrl_1a3a7717a0e33eac50428ea764786c3e1e" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetFoldLevel</name></member>
      <member refid="classwx_styled_text_ctrl_1a213204145ccb740cca7eb816210e6ebe" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetFoldMarginColour</name></member>
      <member refid="classwx_styled_text_ctrl_1a318338d67d375dd4408b281b55fd3699" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetFoldMarginHiColour</name></member>
      <member refid="classwx_window_1a9ab11e7da57a1d08918aa75fc33f6ad3" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>SetFont</name></member>
      <member refid="classwx_styled_text_ctrl_1a5074462fc14fe2c6ad199c1f91144e23" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetFontQuality</name></member>
      <member refid="classwx_window_1a69f1e1c7ddd370d72e68c70f13ac8de9" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>SetForegroundColour</name></member>
      <member refid="classwx_window_1a4c1a2cbc7363237b3a7c70af4e702c72" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetHelpText</name></member>
      <member refid="classwx_styled_text_ctrl_1ab7a2411d02d4fb900f7847f81a0bf9cf" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetHighlightGuide</name></member>
      <member refid="classwx_text_entry_1a4e9dfe958dbd1918c54b45be83f1bed4" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>SetHint</name></member>
      <member refid="classwx_styled_text_ctrl_1aa3697a1a89bff16a98fc4b648d2a25ca" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetHotspotActiveBackground</name></member>
      <member refid="classwx_styled_text_ctrl_1a0f9e6a38b3f57612406f587dce145a31" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetHotspotActiveForeground</name></member>
      <member refid="classwx_styled_text_ctrl_1a543946a4c1705ea1f94fbc7b3b901239" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetHotspotActiveUnderline</name></member>
      <member refid="classwx_styled_text_ctrl_1a905c2e7323b7712084f84cb37399ea4a" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetHotspotSingleLine</name></member>
      <member refid="classwx_styled_text_ctrl_1a8a41c511c916ac59c486900eabfac5b4" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetHScrollBar</name></member>
      <member refid="classwx_window_1a7f27d0faed14effa013381bdc40e1bcd" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetId</name></member>
      <member refid="classwx_styled_text_ctrl_1a72bcde4632b23c6886fe45275322f41a" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetIdentifier</name></member>
      <member refid="classwx_styled_text_ctrl_1a31691d5ae45fc9fb9533c5251fe1783c" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetIdentifiers</name></member>
      <member refid="classwx_styled_text_ctrl_1ac46d322b64eea27456a5a386c317d876" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetIdleStyling</name></member>
      <member refid="classwx_styled_text_ctrl_1ab46b922c269d8ef479eeffd6d5af59e4" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetIMEInteraction</name></member>
      <member refid="classwx_styled_text_ctrl_1ab0a658b03734d81d23d4654b35e88785" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetIndent</name></member>
      <member refid="classwx_styled_text_ctrl_1ac4ed86f4730dcbcd2a8272f33f74778b" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetIndentationGuides</name></member>
      <member refid="classwx_styled_text_ctrl_1a38f449ba47f9852c05b81721608dc2f1" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetIndicatorCurrent</name></member>
      <member refid="classwx_styled_text_ctrl_1a9d05b5d7a042e34a952a407ea86848c3" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetIndicatorValue</name></member>
      <member refid="classwx_window_1ae6dfe0b0d4a8c666b21ce8df8d96727b" prot="protected" virt="virtual"><scope>wxStyledTextCtrl</scope><name>SetInitialBestSize</name></member>
      <member refid="classwx_window_1a1b309ca50ba87e34f968c83b79af1397" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetInitialSize</name></member>
      <member refid="classwx_styled_text_ctrl_1a6500b9ff29b3ebbf30acdbd65a3fa500" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>SetInsertionPoint</name></member>
      <member refid="classwx_text_entry_1a954a065a2f20da350ae830faff1fff95" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>SetInsertionPointEnd</name></member>
      <member refid="classwx_styled_text_ctrl_1a9243e321f9de9f3d33ce80366a5f9ec0" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetKeyWords</name></member>
      <member refid="classwx_control_1a2c2ae20554e7db5e765f163022ce09c0" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>SetLabel</name></member>
      <member refid="classwx_control_1afeb308dc3b54d8d735b33cb250395503" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetLabelMarkup</name></member>
      <member refid="classwx_control_1ae092899c3fe658831a9c796755a65eb7" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetLabelText</name></member>
      <member refid="classwx_styled_text_ctrl_1ac810f3a881221a261d95d701d080dda7" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetLastKeydownProcessed</name></member>
      <member refid="classwx_styled_text_ctrl_1a289ba2116e82cacee2d4c5156caa560e" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetLayoutCache</name></member>
      <member refid="classwx_window_1a7d494549f7fcfed44af95f8ee364c1f9" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>SetLayoutDirection</name></member>
      <member refid="classwx_styled_text_ctrl_1ac19aeb2585c3794168611a9c097a00c3" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetLexer</name></member>
      <member refid="classwx_styled_text_ctrl_1aa55e15f075e652c051ed9f1ad4d2f4c6" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetLexerLanguage</name></member>
      <member refid="classwx_styled_text_ctrl_1a0b2339735930626bedf227c6c9c6e99c" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetLineEndTypesAllowed</name></member>
      <member refid="classwx_styled_text_ctrl_1aa4a5ff4a0663dfd24ef5b9d7f2e4ec8c" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetLineIndentation</name></member>
      <member refid="classwx_styled_text_ctrl_1af6a83c6573c60b12fd6aa3376349cf36" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetLineState</name></member>
      <member refid="classwx_styled_text_ctrl_1a4ebdadcd64a90f09c20ffc47226f4690" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetMainSelection</name></member>
      <member refid="classwx_styled_text_ctrl_1a26d6eb811bebd9f97b35efeb5741e13e" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetMarginBackground</name></member>
      <member refid="classwx_styled_text_ctrl_1acadadd922d7ee403ca01d008b7c5df51" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetMarginCount</name></member>
      <member refid="classwx_styled_text_ctrl_1a049faa89af6f89789e5f6f670e704816" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetMarginCursor</name></member>
      <member refid="classwx_styled_text_ctrl_1a66195611508b5ca6f3a191b4e5433fd0" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetMarginLeft</name></member>
      <member refid="classwx_styled_text_ctrl_1a6e164c4c454eb75d9082c55159572fcd" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetMarginMask</name></member>
      <member refid="classwx_styled_text_ctrl_1a56a7d1113ca8964b35f549fecae59076" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetMarginOptions</name></member>
      <member refid="classwx_styled_text_ctrl_1a20a270a0adafd05fdac58bb34e6748da" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetMarginRight</name></member>
      <member refid="classwx_styled_text_ctrl_1a18a3037d50ee82d355294c8c347a08c4" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetMargins</name></member>
      <member refid="classwx_text_entry_1af2f9684123d3f4d7233945016b2d5c1d" prot="public" virt="non-virtual" ambiguityscope="wxTextEntry::"><scope>wxStyledTextCtrl</scope><name>SetMargins</name></member>
      <member refid="classwx_styled_text_ctrl_1ae70bbd7ab233d7d8b3ffc6b7e8de1920" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetMarginSensitive</name></member>
      <member refid="classwx_styled_text_ctrl_1a79eaf23fc0c1b80a6b3cf4e9dc928461" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetMarginType</name></member>
      <member refid="classwx_styled_text_ctrl_1ab506524159db11a54ffd3fde2e4f601d" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetMarginWidth</name></member>
      <member refid="classwx_window_1a664e5b2ddd817d9c58788269fe1d8479" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>SetMaxClientSize</name></member>
      <member refid="classwx_text_entry_1a5b9dea0d1adeb9cc14309600de6aff50" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>SetMaxLength</name></member>
      <member refid="classwx_window_1a38b496214d728a3212afadee5ed51606" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>SetMaxSize</name></member>
      <member refid="classwx_window_1a6e35ba44b97e374dfffa460d41d94b31" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>SetMinClientSize</name></member>
      <member refid="classwx_window_1a3fc066f4d8083319f004ac43811d545d" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>SetMinSize</name></member>
      <member refid="classwx_styled_text_ctrl_1ad6f8f2e9579776a26d34e08326158f42" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetModEventMask</name></member>
      <member refid="classwx_styled_text_ctrl_1adb7c207ea2bc0d74eb96aef2075084df" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetMouseDownCaptures</name></member>
      <member refid="classwx_styled_text_ctrl_1a8cbdb87eac5f4edd2bf78703192255fc" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetMouseDwellTime</name></member>
      <member refid="classwx_styled_text_ctrl_1a34f58e6a43b6205a8c9a6be505e65bb8" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetMouseSelectionRectangularSwitch</name></member>
      <member refid="classwx_styled_text_ctrl_1ad90c18d1a357c74311fedd4857042499" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetMouseWheelCaptures</name></member>
      <member refid="classwx_styled_text_ctrl_1a4669a48353a4edeff84ab32c7b0aa002" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetMultiPaste</name></member>
      <member refid="classwx_styled_text_ctrl_1ab747e3dc90cc75b4d706c2e7ee2a102e" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetMultipleSelection</name></member>
      <member refid="classwx_window_1af80875cda5e1af98dcd7c8e712e3c800" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>SetName</name></member>
      <member refid="classwx_window_1aeab905f61df7004c1b76a3351dca9e96" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>SetNextHandler</name></member>
      <member refid="classwx_styled_text_ctrl_1a5ca5cba5aa0165ebfae99ad88dfef67d" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetOvertype</name></member>
      <member refid="classwx_window_1a9a3f9d8477aab1d9176cd66ee56e75d9" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetOwnBackgroundColour</name></member>
      <member refid="classwx_window_1a89a4f62f23c1e7c845b8d07cecae4c43" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetOwnFont</name></member>
      <member refid="classwx_window_1a53f4a878e4e2d440bd00543f8014aaaa" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetOwnForegroundColour</name></member>
      <member refid="classwx_window_1aee57358435d6bd33f598c81354b47425" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetPalette</name></member>
      <member refid="classwx_styled_text_ctrl_1abab994f4de37a9d7c7286351577d19ea" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetPasteConvertEndings</name></member>
      <member refid="classwx_styled_text_ctrl_1a102de2a8c1e972cc324fb9054b0b3121" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetPhasesDraw</name></member>
      <member refid="classwx_window_1a81f23590239934fa10fded0566a65d8c" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetPosition</name></member>
      <member refid="classwx_styled_text_ctrl_1a76fcffe74085de759fcec36aebb23c34" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetPositionCacheSize</name></member>
      <member refid="classwx_window_1a07f5f7ed3f78e0ef7b3dee3f4da81001" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>SetPreviousHandler</name></member>
      <member refid="classwx_styled_text_ctrl_1a8422f36721ddac36265458c447125cbb" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetPrintColourMode</name></member>
      <member refid="classwx_styled_text_ctrl_1a9dfa04a9474c70abc36af50eca990883" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetPrintMagnification</name></member>
      <member refid="classwx_styled_text_ctrl_1a441bb4886f3078ca90cfe4c1077961c0" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetPrintWrapMode</name></member>
      <member refid="classwx_styled_text_ctrl_1a503b51248a736de0aace8cac98cdd634" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetProperty</name></member>
      <member refid="classwx_styled_text_ctrl_1add6ffd9469ad44e64de0823e6dc5e497" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetPunctuationChars</name></member>
      <member refid="classwx_styled_text_ctrl_1a8e0234fe76281a6645798c47a34c2ecd" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetReadOnly</name></member>
      <member refid="classwx_styled_text_ctrl_1ab9985443e6f92ebdda0ac415888a28d9" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetRectangularSelectionAnchor</name></member>
      <member refid="classwx_styled_text_ctrl_1ab5fdb7c5973a2f4585027b426430c573" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetRectangularSelectionAnchorVirtualSpace</name></member>
      <member refid="classwx_styled_text_ctrl_1a849249d7dd413a896310c310e7ee205c" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetRectangularSelectionCaret</name></member>
      <member refid="classwx_styled_text_ctrl_1ad762ea42339e7d3faea6ff8b71773e39" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetRectangularSelectionCaretVirtualSpace</name></member>
      <member refid="classwx_styled_text_ctrl_1a30441f30d7a1cce818205f819f1c7c91" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetRectangularSelectionModifier</name></member>
      <member refid="classwx_object_1afab780710f2adc1bb33310e27590140b" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetRefData</name></member>
      <member refid="classwx_styled_text_ctrl_1a7f1517d7a693a8c9a93a206678ec0d09" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetRepresentation</name></member>
      <member refid="classwx_styled_text_ctrl_1ab6d036ea6ab7a6389eca1d8d1fa19430" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetSavePoint</name></member>
      <member refid="classwx_window_1aa842d59529f873683e55cd8392ec46e9" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>SetScrollbar</name></member>
      <member refid="classwx_window_1afbf4dc9064cf70cfe6884554b97a27bf" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>SetScrollPos</name></member>
      <member refid="classwx_styled_text_ctrl_1a8b1ad6a0f9d0b59e4b71f0b5eab69238" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetScrollWidth</name></member>
      <member refid="classwx_styled_text_ctrl_1a4473b4381123c859ab289fab0222dadd" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetScrollWidthTracking</name></member>
      <member refid="classwx_styled_text_ctrl_1a4c9ab04d802e5528fd21dcd5a84e1acb" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetSearchFlags</name></member>
      <member refid="classwx_styled_text_ctrl_1aff181c7ff3f55b66d1cd1fc2b9fb4b4b" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetSelAlpha</name></member>
      <member refid="classwx_styled_text_ctrl_1a22825ff4a852af2798dffca897b3063f" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetSelBackground</name></member>
      <member refid="classwx_styled_text_ctrl_1a93a0b8b0c54846b064f010ae999296d9" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>SetSelection</name></member>
      <member refid="classwx_styled_text_ctrl_1a0b322b46ca9fbbdaa924389c9dfbbc71" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetSelectionEnd</name></member>
      <member refid="classwx_styled_text_ctrl_1a53039e4255aa99b2706901c7d15b6d28" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetSelectionMode</name></member>
      <member refid="classwx_styled_text_ctrl_1a79ef17bbf643abeeceae4e88dbfeae6c" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetSelectionNAnchor</name></member>
      <member refid="classwx_styled_text_ctrl_1ac2be62fa3b37860deb4225fa45bb9205" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetSelectionNAnchorVirtualSpace</name></member>
      <member refid="classwx_styled_text_ctrl_1af3ebbb4259208416e0ed08a6e9a38598" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetSelectionNCaret</name></member>
      <member refid="classwx_styled_text_ctrl_1ab287c51b65add3b900a23b11c4f2b04f" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetSelectionNCaretVirtualSpace</name></member>
      <member refid="classwx_styled_text_ctrl_1a3d38c0c1b103aca828eed93db8f1b45b" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetSelectionNEnd</name></member>
      <member refid="classwx_styled_text_ctrl_1a56bdad9981537749f6fd720ddb9dfed4" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetSelectionNStart</name></member>
      <member refid="classwx_styled_text_ctrl_1aad3decfccd35fe7a9425d55c6c75238b" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetSelectionStart</name></member>
      <member refid="classwx_styled_text_ctrl_1a4286e5874826de7abf1d25cf05032396" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetSelEOLFilled</name></member>
      <member refid="classwx_styled_text_ctrl_1a8700f308a77dc08a2cd857e44ee0a194" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetSelForeground</name></member>
      <member refid="classwx_window_1a180312d5ad4a4a5ad805b8d52d67a74e" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetSize</name></member>
      <member refid="classwx_window_1a8e383bc6d5ca008965922a36c676aea0" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetSize</name></member>
      <member refid="classwx_window_1a030a928cd854de3def97c5720f14695b" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetSize</name></member>
      <member refid="classwx_window_1a2ea9b25296d591aea4470c8fd99ff7cb" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetSize</name></member>
      <member refid="classwx_window_1a307329dc3b10f5584aeb2cbce9293ffd" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>SetSizeHints</name></member>
      <member refid="classwx_window_1ae813c640e1e2bc6014423247050846cf" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>SetSizeHints</name></member>
      <member refid="classwx_window_1abc95691b45e29a52c24aa9d33d46dec1" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetSizer</name></member>
      <member refid="classwx_window_1a29938af9828fd35da666536cdfb6b73c" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetSizerAndFit</name></member>
      <member refid="classwx_styled_text_ctrl_1a144d6a881ef6da1e89aca9d816bfcb9c" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetStatus</name></member>
      <member refid="classwx_styled_text_ctrl_1a05df936f0003d9df7a24762120901b96" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetSTCCursor</name></member>
      <member refid="classwx_styled_text_ctrl_1a6b835a56a1a870fc46e3b8bc005bcc07" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetSTCFocus</name></member>
      <member refid="classwx_styled_text_ctrl_1acd19cd142b2df3ef3e445e09eb12713a" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>SetStyle</name></member>
      <member refid="classwx_styled_text_ctrl_1a9d9f2fc0cc7f4f10e437139602f69b18" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetStyleBits</name></member>
      <member refid="classwx_styled_text_ctrl_1a879088a9c2e207f2664b2b558eceabb8" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetStyleBytes</name></member>
      <member refid="classwx_styled_text_ctrl_1a177842bba7bc31bf5a000382f2a258be" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetStyling</name></member>
      <member refid="classwx_styled_text_ctrl_1aee98a9098e7a78633c56f37325990d57" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetTabDrawMode</name></member>
      <member refid="classwx_styled_text_ctrl_1a7180670a48c8e3512a7b81fbfe4534c8" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetTabIndents</name></member>
      <member refid="classwx_styled_text_ctrl_1a3b762d0f295c136f78826335c871fabb" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetTabWidth</name></member>
      <member refid="classwx_styled_text_ctrl_1a7c7429c691e7c0c79afb56e35e12fb20" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetTargetEnd</name></member>
      <member refid="classwx_styled_text_ctrl_1a8874cfa68a509d60c80101b822b5ef16" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetTargetRange</name></member>
      <member refid="classwx_styled_text_ctrl_1ac336c85b3a7fbcaa849ec2f8aa9546b2" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetTargetStart</name></member>
      <member refid="classwx_styled_text_ctrl_1ada976c35b7d00207b6967825dda05358" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetTechnology</name></member>
      <member refid="classwx_styled_text_ctrl_1a404eb5101b0c1602f29dec04ef6e4394" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetText</name></member>
      <member refid="classwx_styled_text_ctrl_1a393c04f71bc68ec711a82232d440d4bc" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetTextRaw</name></member>
      <member refid="classwx_window_1a41dd19ed8809fd8ec662e2aa2a9579c3" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>SetThemeEnabled</name></member>
      <member refid="classwx_window_1a81a9fb74e3c6c7f4416e882f5e589b8c" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetToolTip</name></member>
      <member refid="classwx_window_1a494e0b7cfca9299caa40e847767e7357" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetToolTip</name></member>
      <member refid="classwx_window_1ac8cf4398cec50ac36634760f45a0656f" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>SetTransparent</name></member>
      <member refid="classwx_styled_text_ctrl_1a905908a4ba6cb09a938c42e8b1b58142" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetTwoPhaseDraw</name></member>
      <member refid="classwx_styled_text_ctrl_1a67e1aba75c768fee4acf078ccf1b25f5" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetUndoCollection</name></member>
      <member refid="classwx_styled_text_ctrl_1a9c2d1af466e2e5279215b90ca02c2d88" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetUseAntiAliasing</name></member>
      <member refid="classwx_styled_text_ctrl_1a4a42e509c18a41f95d00cf57e231faea" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetUseHorizontalScrollBar</name></member>
      <member refid="classwx_styled_text_ctrl_1a0ed22fd1d4945a917156b4b53d8829b0" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetUseTabs</name></member>
      <member refid="classwx_styled_text_ctrl_1a18bb294e7c148aa924e7a31dad061553" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetUseVerticalScrollBar</name></member>
      <member refid="classwx_window_1a00066c70049a7be3ce6b648d206e6432" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>SetValidator</name></member>
      <member refid="classwx_text_entry_1a90f876b2dd83ba5c97ba0c193b386e9f" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>SetValue</name></member>
      <member refid="classwx_styled_text_ctrl_1abcdd147640044f0b589ad41e01de3b69" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetViewEOL</name></member>
      <member refid="classwx_styled_text_ctrl_1a4fa5fc715d380567796e41f220729c16" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetViewWhiteSpace</name></member>
      <member refid="classwx_window_1a37f293b7904bc6668b86cccb0aea5669" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetVirtualSize</name></member>
      <member refid="classwx_window_1a8e95201edebe43b9623bd3bdc555af4d" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetVirtualSize</name></member>
      <member refid="classwx_styled_text_ctrl_1a555832e34d6394ca922dc9ad0341f84d" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetVirtualSpaceOptions</name></member>
      <member refid="classwx_styled_text_ctrl_1a1307ace5a86483b5c05dc6b980ec3b99" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetVisiblePolicy</name></member>
      <member refid="classwx_styled_text_ctrl_1a44acbd82ce7e4c351a6f7dec387769e1" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetVScrollBar</name></member>
      <member refid="classwx_styled_text_ctrl_1a2ac8e962f6d64eec9ca2402f805afc6f" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetWhitespaceBackground</name></member>
      <member refid="classwx_styled_text_ctrl_1a90386e4db2515b09ad1927b4ee77a5ee" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetWhitespaceChars</name></member>
      <member refid="classwx_styled_text_ctrl_1a503a80587f9ff5f2b96c2a1f0e294378" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetWhitespaceForeground</name></member>
      <member refid="classwx_styled_text_ctrl_1ab58a13a90a65b2870dc7918aaf1c9f64" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetWhitespaceSize</name></member>
      <member refid="classwx_window_1a306af30adec68689f74ed537b4f9d5fd" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetWindowStyle</name></member>
      <member refid="classwx_window_1aee2cf342f80523432e7f2299d299451b" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>SetWindowStyleFlag</name></member>
      <member refid="classwx_window_1acd955418c336e73b3e32cadf1ca46e29" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetWindowVariant</name></member>
      <member refid="classwx_styled_text_ctrl_1a91d5c9df3ecc79aa75a518cc4a4aa856" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetWordChars</name></member>
      <member refid="classwx_styled_text_ctrl_1a00401ea9fdcc0a5b13315ca77a8b3a71" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetWrapIndentMode</name></member>
      <member refid="classwx_styled_text_ctrl_1ae8c35c2476ecf5887112830771f0cfd8" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetWrapMode</name></member>
      <member refid="classwx_styled_text_ctrl_1ae69e2a7978cfe4ab7ff843f6bf59ef77" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetWrapStartIndent</name></member>
      <member refid="classwx_styled_text_ctrl_1af7b68c16eadf74c929a0a14923cfe785" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetWrapVisualFlags</name></member>
      <member refid="classwx_styled_text_ctrl_1a5910f52bfa080616ca49306b73725c86" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetWrapVisualFlagsLocation</name></member>
      <member refid="classwx_styled_text_ctrl_1a675c4a537ad6f35101057a745ded1c66" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetXCaretPolicy</name></member>
      <member refid="classwx_styled_text_ctrl_1a1e5e2899f4a48eb2754a7fe1c111a011" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetXOffset</name></member>
      <member refid="classwx_styled_text_ctrl_1ab0105eadf06fb58b01eec70d1c5b3f2d" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetYCaretPolicy</name></member>
      <member refid="classwx_styled_text_ctrl_1a408c1026e9cebd99b139dcaded7b1df0" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SetZoom</name></member>
      <member refid="classwx_window_1aa51b169745cda1746c1a45b4ffe3217a" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>ShouldInheritColours</name></member>
      <member refid="classwx_window_1a7fbc92ce240a8d4f6956b6e0276ef07f" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>Show</name></member>
      <member refid="classwx_styled_text_ctrl_1a6c1bc19d97321b1bfa272f8e9b07b75c" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>ShowLines</name></member>
      <member refid="classwx_styled_text_ctrl_1a6a458124a712a1ff1d810f5e7d767f3a" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>ShowPosition</name></member>
      <member refid="classwx_window_1a596b1715edfc7609f352b2e000ecbaec" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>ShowWithEffect</name></member>
      <member refid="classwx_styled_text_ctrl_1a3d712a9a418ef6d8de896bd5a39375db" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>StartRecord</name></member>
      <member refid="classwx_styled_text_ctrl_1a0241ffbe1d8e4179d8b2ed453c4a4847" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>StartStyling</name></member>
      <member refid="classwx_styled_text_ctrl_1a27ad57e2f03a339b2759f1cae22b1651" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>StopRecord</name></member>
      <member refid="classwx_styled_text_ctrl_1a007d2175a04dedd349cf44a7625ca72d" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>StutteredPageDown</name></member>
      <member refid="classwx_styled_text_ctrl_1ac42d4ddbb20357422e2581e054f1e6b5" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>StutteredPageDownExtend</name></member>
      <member refid="classwx_styled_text_ctrl_1a52ae7d5d4cb62bfc9fdf01eb1855dc5f" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>StutteredPageUp</name></member>
      <member refid="classwx_styled_text_ctrl_1a15f422b87392daaae228fdf5a305a780" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>StutteredPageUpExtend</name></member>
      <member refid="classwx_styled_text_ctrl_1a599a5c4fcc4af55c173492d8b0839afd" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>StyleClearAll</name></member>
      <member refid="classwx_styled_text_ctrl_1ad937feb343920ed95da163004adcb5f4" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>StyleGetBackground</name></member>
      <member refid="classwx_styled_text_ctrl_1ab185260b91c33448e2217da0c2e25012" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>StyleGetBold</name></member>
      <member refid="classwx_styled_text_ctrl_1a47634e06fcff7602c9025212f6c59124" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>StyleGetCase</name></member>
      <member refid="classwx_styled_text_ctrl_1a210b37647678008a834d67563da825a2" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>StyleGetChangeable</name></member>
      <member refid="classwx_styled_text_ctrl_1a4077fdc5442b73a8c6ee0a29ef1364ee" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>StyleGetCharacterSet</name></member>
      <member refid="classwx_styled_text_ctrl_1a90a12872fd1f69efaf9f406738807e0d" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>StyleGetEOLFilled</name></member>
      <member refid="classwx_styled_text_ctrl_1a016e4efc8657d1c9db08592264ea75f5" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>StyleGetFaceName</name></member>
      <member refid="classwx_styled_text_ctrl_1aec38e96092be763b4309f638e126f6f9" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>StyleGetFont</name></member>
      <member refid="classwx_styled_text_ctrl_1a80c880ec503fe62eec696a9e5048b83b" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>StyleGetForeground</name></member>
      <member refid="classwx_styled_text_ctrl_1adc8373a5c8f2d13e2006290a6d5737cd" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>StyleGetHotSpot</name></member>
      <member refid="classwx_styled_text_ctrl_1a7c3e3c076825d6355cfcf0d4f735c406" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>StyleGetItalic</name></member>
      <member refid="classwx_styled_text_ctrl_1aa9f5878c84f6cd45e696b3a2d196d444" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>StyleGetSize</name></member>
      <member refid="classwx_styled_text_ctrl_1afe439dfc527a6afe5e11e8d5515e10a6" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>StyleGetSizeFractional</name></member>
      <member refid="classwx_styled_text_ctrl_1a1364c50535e648edf5b39fa0b737014a" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>StyleGetUnderline</name></member>
      <member refid="classwx_styled_text_ctrl_1a96afcffd96b80cd5b6c108d8a3dae5ca" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>StyleGetVisible</name></member>
      <member refid="classwx_styled_text_ctrl_1aee78d40b1e6a398fd70f2fc602e7b480" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>StyleGetWeight</name></member>
      <member refid="classwx_styled_text_ctrl_1aa0a453c7c4fa4b65d4095d676d0831b2" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>StyleResetDefault</name></member>
      <member refid="classwx_styled_text_ctrl_1a5a5157388e230ccfe1cefeaa2334346e" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>StyleSetBackground</name></member>
      <member refid="classwx_styled_text_ctrl_1ab666a9627aef3a3fe7f0a67736f1c0e8" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>StyleSetBold</name></member>
      <member refid="classwx_styled_text_ctrl_1aa2d66c1de1d223467f9865c734a459bd" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>StyleSetCase</name></member>
      <member refid="classwx_styled_text_ctrl_1a34ce1df694a712a9ad19227b19d82f09" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>StyleSetChangeable</name></member>
      <member refid="classwx_styled_text_ctrl_1a8e9996a37a1c1a93a39a29f928fc87ac" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>StyleSetCharacterSet</name></member>
      <member refid="classwx_styled_text_ctrl_1a4d849ae82005d3e11a82784658759b99" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>StyleSetEOLFilled</name></member>
      <member refid="classwx_styled_text_ctrl_1aba42c64b450953bbdad03aee33b3730f" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>StyleSetFaceName</name></member>
      <member refid="classwx_styled_text_ctrl_1a23bcfd5c7d2c1e445cf801b77217531f" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>StyleSetFont</name></member>
      <member refid="classwx_styled_text_ctrl_1a5eb90aa07d1eb7b08b17b0865a9a9f7c" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>StyleSetFontAttr</name></member>
      <member refid="classwx_styled_text_ctrl_1ab5305d9d20766a67a040325cd2140b25" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>StyleSetFontEncoding</name></member>
      <member refid="classwx_styled_text_ctrl_1a340519113f1ce71d5fbf5ad857fd2775" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>StyleSetForeground</name></member>
      <member refid="classwx_styled_text_ctrl_1aa4445d605000f0da8f45c3fa6ee693f2" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>StyleSetHotSpot</name></member>
      <member refid="classwx_styled_text_ctrl_1a48e18a2aaa345af6d5c40b592aec496f" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>StyleSetItalic</name></member>
      <member refid="classwx_styled_text_ctrl_1a9b620f2c97f5040a720fa41cecd83b8b" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>StyleSetSize</name></member>
      <member refid="classwx_styled_text_ctrl_1aa0a94cd12373e60bfd227fefb00c07cc" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>StyleSetSizeFractional</name></member>
      <member refid="classwx_styled_text_ctrl_1ae2e8e43d16a25898b11972de8772044e" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>StyleSetSpec</name></member>
      <member refid="classwx_styled_text_ctrl_1a3e86b2923933019f77f0cc4c1d597ca8" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>StyleSetUnderline</name></member>
      <member refid="classwx_styled_text_ctrl_1ade9c9f8dedd0a1501368b1c04c6f487b" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>StyleSetVisible</name></member>
      <member refid="classwx_styled_text_ctrl_1ae27e2b9b1326c04d5a0f5eee4d02ca13" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>StyleSetWeight</name></member>
      <member refid="classwx_styled_text_ctrl_1aa22a09d093a4ac8e91b1aa8dfc743ddb" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>SwapMainAnchorCaret</name></member>
      <member refid="classwx_styled_text_ctrl_1a2e1952f8b5c3dff0c1522465bc9ae109" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>Tab</name></member>
      <member refid="classwx_styled_text_ctrl_1ab943ccce1bf3a135bea42becef9d5653" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>TargetFromSelection</name></member>
      <member refid="classwx_styled_text_ctrl_1afc834e2af86a686d1ad4053886d73126" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>TargetWholeDocument</name></member>
      <member refid="classwx_styled_text_ctrl_1ae955348ccf4efd231357c6d96f299589" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>TextHeight</name></member>
      <member refid="classwx_styled_text_ctrl_1a52586525a7af5c901828ca8a44ae71ba" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>TextWidth</name></member>
      <member refid="classwx_window_1a279a532124073261b28131b6afb59a1e" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>Thaw</name></member>
      <member refid="classwx_window_1a0100742eee71c42ab33d98dc2422aa5b" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>ToDIP</name></member>
      <member refid="classwx_window_1a896f95ec84dbbae82b03ed26c7e679e8" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>ToDIP</name></member>
      <member refid="classwx_window_1af6fa0e628ec961c259b4fe40f640a9e5" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>ToDIP</name></member>
      <member refid="classwx_window_1a664dc49139d0f91fc3717994b0a5b4e6" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>ToDIP</name></member>
      <member refid="classwx_window_1aef413f1d0252a7a5a29512e8ab5e7c91" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>ToDIP</name></member>
      <member refid="classwx_window_1a1771a46c000060619f6e1249ce362433" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>ToDIP</name></member>
      <member refid="classwx_styled_text_ctrl_1adfc2b57b5e8d2f1fb512437344aab923" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>ToggleCaretSticky</name></member>
      <member refid="classwx_styled_text_ctrl_1a41820dbb85f0b04756552982f276e621" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>ToggleFold</name></member>
      <member refid="classwx_styled_text_ctrl_1aafbee0d71a24e45d5f56480b1d99f3a2" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>ToggleFoldShowText</name></member>
      <member refid="classwx_window_1a8a4fa47129de552bfec37db8c69688a2" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>ToggleWindowStyle</name></member>
      <member refid="classwx_window_1a5d3a9450e6b6f44c6b7d0d4a002fa40f" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>ToPhys</name></member>
      <member refid="classwx_window_1afca50ba59976ad9913148fffd38ff0ef" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>ToPhys</name></member>
      <member refid="classwx_window_1ad0bea5e21d33d00d0cf19c011bad39bf" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>ToPhys</name></member>
      <member refid="classwx_window_1aaf0ac2191826f233f04bffa900dbc357" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>ToPhys</name></member>
      <member refid="classwx_window_1aef56d76b1cacdca83daebffcc385d6db" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>ToPhys</name></member>
      <member refid="classwx_window_1a6797f4c9656276796031b9846ecc20b6" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>ToPhys</name></member>
      <member refid="classwx_window_1ab8e51f36e7d8790b361c8d8c6f37b1ad" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>TransferDataFromWindow</name></member>
      <member refid="classwx_window_1a88cc65e424a129d9b0057756cdb67ec9" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>TransferDataToWindow</name></member>
      <member refid="classwx_evt_handler_1a5e25fece1cb6cbc11fd1d41ec140319c" prot="protected" virt="virtual"><scope>wxStyledTextCtrl</scope><name>TryAfter</name></member>
      <member refid="classwx_evt_handler_1ad4b0eac704dd005ac6a88fdb1e673c13" prot="protected" virt="virtual"><scope>wxStyledTextCtrl</scope><name>TryBefore</name></member>
      <member refid="classwx_evt_handler_1a2b7df8272075a96daea78cdd799c00da" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>Unbind</name></member>
      <member refid="classwx_evt_handler_1aa49f9c4ad4462456b4fe4bd1ab53533d" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>Unbind</name></member>
      <member refid="classwx_styled_text_ctrl_1a49be0b2a034245563b214b3a27b19700" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>Undo</name></member>
      <member refid="classwx_evt_handler_1a22e5db2ec1d19c8252c056fd116975d7" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>Unlink</name></member>
      <member refid="classwx_object_1af51efc6b1ae632fc7f0cd7ebbce9fa36" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>UnRef</name></member>
      <member refid="classwx_window_1a695f60d65f8f6c12e3c3645ad9c0c35b" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>UnregisterHotKey</name></member>
      <member refid="classwx_window_1ad9bc342d1e38d221e37f0f6396950c8c" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>UnreserveControlId</name></member>
      <member refid="classwx_window_1ae75712451673658b0a533480bf5eeaa4" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>UnsetToolTip</name></member>
      <member refid="classwx_object_1a74b40e42d19a4b9e9bec0b57d62a5725" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>UnShare</name></member>
      <member refid="classwx_window_1abaf28f1a075fd1b10f761a8febe597ec" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>Update</name></member>
      <member refid="classwx_window_1adf0a4987728bd0bf69f922641b3efbfc" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>UpdateWindowUI</name></member>
      <member refid="classwx_styled_text_ctrl_1ab33c702836fe7f5bd001f9750781c8fb" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>UpperCase</name></member>
      <member refid="classwx_window_1ab8f896f4af38b2a97717daa54f26cb6c" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>UseBackgroundColour</name></member>
      <member refid="classwx_window_1a9131e424ddc3b332a08377e5ad713c60" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>UseBgCol</name></member>
      <member refid="classwx_window_1ad2403e81d23e4a76d2176a6e0570de3e" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>UseForegroundColour</name></member>
      <member refid="classwx_styled_text_ctrl_1a21f4a52864fcc3810bb803ff5a482968" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>UsePopUp</name></member>
      <member refid="classwx_styled_text_ctrl_1aca26323e7a482fb4fe2651ef2158f2c1" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>UserListShow</name></member>
      <member refid="classwx_window_1ac87f253253a0c5eb498871c83afa40fd" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>Validate</name></member>
      <member refid="classwx_styled_text_ctrl_1a7f1a7f3ea35f58e5b9bc5227f5833400" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>VCHome</name></member>
      <member refid="classwx_styled_text_ctrl_1a1d2cb8b1b0cf64e96f56674678eec841" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>VCHomeDisplay</name></member>
      <member refid="classwx_styled_text_ctrl_1a68fcb72c91829dd5d6d2235003bcd8f8" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>VCHomeDisplayExtend</name></member>
      <member refid="classwx_styled_text_ctrl_1af4e34f2bbdca94ccbd89960a7e765dd5" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>VCHomeExtend</name></member>
      <member refid="classwx_styled_text_ctrl_1a7675ef1a8905fad08e50d1c72fdfdfa5" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>VCHomeRectExtend</name></member>
      <member refid="classwx_styled_text_ctrl_1ae2ae99a185d56fe6b9b631c099e1ca55" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>VCHomeWrap</name></member>
      <member refid="classwx_styled_text_ctrl_1ae56149308008de97ad52f2cc0fbc3834" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>VCHomeWrapExtend</name></member>
      <member refid="classwx_styled_text_ctrl_1a80613b707f38ea1652460abbc8eb3ec0" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>VerticalCentreCaret</name></member>
      <member refid="classwx_styled_text_ctrl_1ae3589335b9ba731a080589d80925188b" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>VisibleFromDocLine</name></member>
      <member refid="classwx_window_1ac500152d1eca3a2ee98a68e7ea7372b5" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>WarpPointer</name></member>
      <member refid="classwx_window_1a75e9c29023e441305574056cd5a725ff" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>WindowToClientSize</name></member>
      <member refid="classwx_styled_text_ctrl_1a53f125206f4228bbd121cb2ff220b341" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>WordEndPosition</name></member>
      <member refid="classwx_styled_text_ctrl_1a4ca6f1c3ca419de400ebe39ab35f51f3" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>WordLeft</name></member>
      <member refid="classwx_styled_text_ctrl_1a1c6fa64a1f9cd980d1788113a54d27ed" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>WordLeftEnd</name></member>
      <member refid="classwx_styled_text_ctrl_1af8aa311e02e87ce6afc74168253b5926" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>WordLeftEndExtend</name></member>
      <member refid="classwx_styled_text_ctrl_1a3fd89d0457dba6ec11dc251084b023ca" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>WordLeftExtend</name></member>
      <member refid="classwx_styled_text_ctrl_1a7a0cd4c5aa77fc3b9a4e64a56075a22c" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>WordPartLeft</name></member>
      <member refid="classwx_styled_text_ctrl_1a542c023362fd69ed830312205d1765b6" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>WordPartLeftExtend</name></member>
      <member refid="classwx_styled_text_ctrl_1a17f07b597ba6f78edba3299d55cd8f0a" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>WordPartRight</name></member>
      <member refid="classwx_styled_text_ctrl_1a2fc12c9c741688bde4aaebb31c72e5d9" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>WordPartRightExtend</name></member>
      <member refid="classwx_styled_text_ctrl_1ab2d591e26e64d471b6bf23670747f7a1" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>WordRight</name></member>
      <member refid="classwx_styled_text_ctrl_1a76f215ddde10790de36f62b2075dc169" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>WordRightEnd</name></member>
      <member refid="classwx_styled_text_ctrl_1a94e2562fd4feb6c60aef3b84ed672e01" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>WordRightEndExtend</name></member>
      <member refid="classwx_styled_text_ctrl_1a0bb6af61d66ca7459d52ed451aad939a" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>WordRightExtend</name></member>
      <member refid="classwx_styled_text_ctrl_1aafea98346c64fce7375232412010adb4" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>WordStartPosition</name></member>
      <member refid="classwx_styled_text_ctrl_1a7e320f478b9bb1e274679302ec77c868" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>WrapCount</name></member>
      <member refid="classwx_styled_text_ctrl_1a7d448aa395a6947d8615dcba0f4058b8" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>WriteText</name></member>
      <member refid="classwx_control_1adb8f3edf807efa9159de826bf92d6a44" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>wxControl</name></member>
      <member refid="classwx_control_1a08428de2ba5cc988a86fe17071d49522" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>wxControl</name></member>
      <member refid="classwx_evt_handler_1a3f0166c4154227d05575b01eb2c8d4be" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>wxEvtHandler</name></member>
      <member refid="classwx_object_1acaa378363a28af421ab56ad7b46eadf0" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>wxObject</name></member>
      <member refid="classwx_object_1a4721b4dc9b7aff0f30904ba2ea3954cf" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>wxObject</name></member>
      <member refid="classwx_styled_text_ctrl_1a0a55567d3331ee6cb8271d183be7a737" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>wxStyledTextCtrl</name></member>
      <member refid="classwx_styled_text_ctrl_1a012c578bfab78963f4bb0202af4b85d0" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>wxStyledTextCtrl</name></member>
      <member refid="classwx_window_1a695200a4915b934926dcf32afa44544c" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>wxWindow</name></member>
      <member refid="classwx_window_1a7799009b10d1765d1bbb6db4994f922e" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>wxWindow</name></member>
      <member refid="classwx_styled_text_ctrl_1af08acc57c0ee7eb6e54efc7f8bc8ce1b" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>XYToPosition</name></member>
      <member refid="classwx_styled_text_ctrl_1ad5d6fc9fc4a1362dfb1d048d77e0210b" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>ZoomIn</name></member>
      <member refid="classwx_styled_text_ctrl_1a08c90b90ddb67c6bdb362474e294eba6" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>ZoomOut</name></member>
      <member refid="classwx_evt_handler_1a372d2239d91521eddc8fd2715fcab584" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>~wxEvtHandler</name></member>
      <member refid="classwx_object_1a2a51aa8bfbab47ca2f051bcf84b3f35b" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>~wxObject</name></member>
      <member refid="classwx_styled_text_ctrl_1aba99276c146d48f1c2da7ad8bd2756ac" prot="public" virt="non-virtual"><scope>wxStyledTextCtrl</scope><name>~wxStyledTextCtrl</name></member>
      <member refid="classwx_window_1a0c2a46181a89c349327f0b276f5ef8d7" prot="public" virt="virtual"><scope>wxStyledTextCtrl</scope><name>~wxWindow</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
