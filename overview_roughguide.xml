<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="overview_roughguide" kind="page">
    <compoundname>overview_roughguide</compoundname>
    <title>A Quick Guide to Writing Applications</title>
    <tableofcontents>
      <tocsect>
        <name>Application Structure</name>
        <reference>overview_roughguide_1overview_roughguide_structure</reference>
    </tocsect>
      <tocsect>
        <name>Drawing on the Screen</name>
        <reference>overview_roughguide_1overview_roughguide_draw</reference>
    </tocsect>
      <tocsect>
        <name>Event Handling</name>
        <reference>overview_roughguide_1overview_roughguide_events</reference>
    </tocsect>
    </tableofcontents>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<sect1 id="overview_roughguide_1overview_roughguide_structure">
<title>Application Structure</title>
<para>To set a wxWidgets application going, you will need to derive a <ref refid="classwx_app" kindref="compound">wxApp</ref> class and override <ref refid="classwx_app_console_1a99953775a2fd83fa2456e390779afe15" kindref="member">wxApp::OnInit()</ref> in which you will typically create your application main top-level window.</para>
<para>This window can be a <ref refid="classwx_frame" kindref="compound">wxFrame</ref> or a <ref refid="classwx_dialog" kindref="compound">wxDialog</ref> and may contain one or more instances of classes such as <ref refid="classwx_panel" kindref="compound">wxPanel</ref>, <ref refid="classwx_splitter_window" kindref="compound">wxSplitterWindow</ref> or other windows and controls. These windows can be created from C++ code or loaded from resource definitions in <ref refid="overview_xrc" kindref="compound">XRC format</ref>.</para>
<para>A frame can have a <ref refid="classwx_menu_bar" kindref="compound">wxMenuBar</ref>, a <ref refid="classwx_tool_bar" kindref="compound">wxToolBar</ref>, a <ref refid="classwx_status_bar" kindref="compound">wxStatusBar</ref>, and a <ref refid="classwx_icon" kindref="compound">wxIcon</ref> for when the frame is iconized.</para>
<para>A <ref refid="classwx_panel" kindref="compound">wxPanel</ref> is used to place controls (classes derived from <ref refid="classwx_control" kindref="compound">wxControl</ref>) which are used for user interaction. Examples of controls are <ref refid="classwx_button" kindref="compound">wxButton</ref>, <ref refid="classwx_check_box" kindref="compound">wxCheckBox</ref>, <ref refid="classwx_choice" kindref="compound">wxChoice</ref>, <ref refid="classwx_list_box" kindref="compound">wxListBox</ref>, <ref refid="classwx_radio_box" kindref="compound">wxRadioBox</ref>, and <ref refid="classwx_slider" kindref="compound">wxSlider</ref>. Such controls need to be positioned correctly <ndash/> and also repositioned when the top-level window is resized by the user <ndash/> and to do this you use wxSizer-derived classes, such as <ref refid="classwx_box_sizer" kindref="compound">wxBoxSizer</ref> and <ref refid="classwx_flex_grid_sizer" kindref="compound">wxFlexGridSizer</ref>, to layout everything correctly.</para>
<para>Instances of <ref refid="classwx_dialog" kindref="compound">wxDialog</ref> can also be used for controls and they have the advantage of not requiring a separate panel inside them.</para>
<para>Instead of creating a dialog box and populating it with items, it is possible to choose one of the convenient common dialog classes, such as <ref refid="classwx_message_dialog" kindref="compound">wxMessageDialog</ref> and <ref refid="classwx_file_dialog" kindref="compound">wxFileDialog</ref>.</para>
</sect1>
<sect1 id="overview_roughguide_1overview_roughguide_draw">
<title>Drawing on the Screen</title>
<para>You never draw directly onto a window <ndash/> you use either one of the older <emphasis>device context</emphasis> (DC) classes or the newer <emphasis>graphics context</emphasis> (GC) one, that support features such as alpha transparency or anti-aliasing. <ref refid="classwx_d_c" kindref="compound">wxDC</ref> is the base for <ref refid="classwx_client_d_c" kindref="compound">wxClientDC</ref>, <ref refid="classwx_paint_d_c" kindref="compound">wxPaintDC</ref>, <ref refid="classwx_memory_d_c" kindref="compound">wxMemoryDC</ref>, <ref refid="classwx_post_script_d_c" kindref="compound">wxPostScriptDC</ref>, <ref refid="classwx_memory_d_c" kindref="compound">wxMemoryDC</ref>, <ref refid="classwx_metafile_d_c" kindref="compound">wxMetafileDC</ref> and <ref refid="classwx_printer_d_c" kindref="compound">wxPrinterDC</ref>. If your drawing functions have <ref refid="classwx_d_c" kindref="compound">wxDC</ref> as a parameter, you can pass any of these DCs to the function, and thus use the same code to draw to several different devices. You can draw using the member functions of <ref refid="classwx_d_c" kindref="compound">wxDC</ref>, such as <ref refid="classwx_d_c_1a12f2c236d4d320acec0bc6fe20e8399d" kindref="member">wxDC::DrawLine</ref> and <ref refid="classwx_d_c_1a11d35ce34fccb57b0efc7dc91168660b" kindref="member">wxDC::DrawText</ref>. Control colour on a window (<ref refid="classwx_colour" kindref="compound">wxColour</ref>) with brushes (<ref refid="classwx_brush" kindref="compound">wxBrush</ref>) and pens (<ref refid="classwx_pen" kindref="compound">wxPen</ref>).</para>
<para>With <ref refid="classwx_graphics_context" kindref="compound">wxGraphicsContext</ref>, you create it using one of the methods of <ref refid="classwx_graphics_renderer" kindref="compound">wxGraphicsRenderer</ref> and then construct your drawing from <ref refid="classwx_graphics_path" kindref="compound">wxGraphicsPath</ref> objects, finally using <ref refid="classwx_graphics_context_1a4f7f8f768e84dcdf50493f0e7ef0c00a" kindref="member">wxGraphicsContext::StrokePath()</ref> or <ref refid="classwx_graphics_context_1a225c90d767a6c26989d85ac8463d029f" kindref="member">wxGraphicsContext::FillPath()</ref>.</para>
</sect1>
<sect1 id="overview_roughguide_1overview_roughguide_events">
<title>Event Handling</title>
<para>GUI programs spend most of their time waiting for the user-initiated events <ndash/> and then processing them. To do it, you use <ref refid="classwx_evt_handler_1a0f30c8fa5583b4a5f661897d63de3b62" kindref="member">wxEvtHandler::Bind()</ref> to specify the handler for an event of the given time. Event handlers receive the object describing the event, such as <ref refid="classwx_key_event" kindref="compound">wxKeyEvent</ref> or <ref refid="classwx_mouse_event" kindref="compound">wxMouseEvent</ref>, and perform whichever action corresponds to it. See <ref refid="overview_events" kindref="compound">events handling</ref> overview for much more information about this subject.</para>
<para><simplesect kind="see"><para><ref refid="group__group__class" kindref="compound">Class List by Category</ref> </para>
</simplesect>
</para>
</sect1>
    </detaileddescription>
    <location file="docs/doxygen/overviews/roughguide.h"/>
  </compounddef>
</doxygen>
