<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="classwx_property_grid_interface" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>wxPropertyGridInterface</compoundname>
    <derivedcompoundref refid="classwx_property_grid" prot="public" virt="non-virtual">wxPropertyGrid</derivedcompoundref>
    <derivedcompoundref refid="classwx_property_grid_manager" prot="public" virt="non-virtual">wxPropertyGridManager</derivedcompoundref>
    <derivedcompoundref refid="classwx_property_grid_page" prot="public" virt="non-virtual">wxPropertyGridPage</derivedcompoundref>
    <includes local="no">wx/propgrid/propgridiface.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classwx_property_grid_interface_1acd38be5728243d99365e0f371b6c19ae" prot="public" static="no" strong="no">
        <type></type>
        <name>EditableStateFlags</name>
        <enumvalue id="classwx_property_grid_interface_1acd38be5728243d99365e0f371b6c19aeacf359fdb91a019696f4cd34644e624f3" prot="public">
          <name>SelectionState</name>
          <initializer>= 0x01</initializer>
          <briefdescription>
<para>Include selected property. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_property_grid_interface_1acd38be5728243d99365e0f371b6c19aeaa59cf2646aedbb9c00aeb8754b11610b" prot="public">
          <name>ExpandedState</name>
          <initializer>= 0x02</initializer>
          <briefdescription>
<para>Include expanded/collapsed property information. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_property_grid_interface_1acd38be5728243d99365e0f371b6c19aeaae0ce13a64f1cdf3e208e2ede6615d66" prot="public">
          <name>ScrollPosState</name>
          <initializer>= 0x04</initializer>
          <briefdescription>
<para>Include scrolled position. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_property_grid_interface_1acd38be5728243d99365e0f371b6c19aea37f63cb4a3bca8249c62a09dc6d973ff" prot="public">
          <name>PageState</name>
          <initializer>= 0x08</initializer>
          <briefdescription>
<para>Include selected page information. </para>
          </briefdescription>
          <detaileddescription>
<para>Only applies to <ref refid="classwx_property_grid_manager" kindref="compound">wxPropertyGridManager</ref>. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_property_grid_interface_1acd38be5728243d99365e0f371b6c19aea1cc473f6d94d75e3e97159ccd4a325d3" prot="public">
          <name>SplitterPosState</name>
          <initializer>= 0x10</initializer>
          <briefdescription>
<para>Include splitter position. </para>
          </briefdescription>
          <detaileddescription>
<para>Stored for each page. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_property_grid_interface_1acd38be5728243d99365e0f371b6c19aea0619889c5d768946557ac361b5fff7e5" prot="public">
          <name>DescBoxState</name>
          <initializer>= 0x20</initializer>
          <briefdescription>
<para>Include description box size. </para>
          </briefdescription>
          <detaileddescription>
<para>Only applies to <ref refid="classwx_property_grid_manager" kindref="compound">wxPropertyGridManager</ref>. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_property_grid_interface_1acd38be5728243d99365e0f371b6c19aea19c3af2d76e93bca4d687865b1ea27f4" prot="public">
          <name>AllStates</name>
          <initializer>= SelectionState |
                           ExpandedState |
                           ScrollPosState |
                           PageState |
                           SplitterPosState |
                           DescBoxState</initializer>
          <briefdescription>
<para>Include all supported user editable state information. </para>
          </briefdescription>
          <detaileddescription>
<para>This is usually the default value. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para><anchor id="classwx_property_grid_interface_1propgridinterface_editablestate_flags"/></para>
        </briefdescription>
        <detaileddescription>
<para>Flags for <ref refid="classwx_property_grid_interface_1a3ab626269453b627e119367255c80ab0" kindref="member">wxPropertyGridInterface::SaveEditableState()</ref> and <ref refid="classwx_property_grid_interface_1aceb7f1ca6c7079c075d9876b94a2cb0f" kindref="member">wxPropertyGridInterface::RestoreEditableState()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="766" column="5" bodyfile="interface/wx/propgrid/propgridiface.h" bodystart="767" bodyend="812"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classwx_property_grid_interface_1a42cd83135362d4de8db6d5de968cd2ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual wxPropertyGridInterface::~wxPropertyGridInterface</definition>
        <argsstring>()</argsstring>
        <name>~wxPropertyGridInterface</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="128" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1a59678aa1808aa5c567e39f2aad41b70e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_p_g_property" kindref="compound">wxPGProperty</ref> *</type>
        <definition>wxPGProperty * wxPropertyGridInterface::Append</definition>
        <argsstring>(wxPGProperty *property)</argsstring>
        <name>Append</name>
        <param>
          <type><ref refid="classwx_p_g_property" kindref="compound">wxPGProperty</ref> *</type>
          <declname>property</declname>
        </param>
        <briefdescription>
<para>Appends property to the list. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="classwx_property_grid" kindref="compound">wxPropertyGrid</ref> assumes ownership of the object. Becomes child of most recently added category.</para>
<para><simplesect kind="remark"><para><itemizedlist>
<listitem><para><ref refid="classwx_property_grid" kindref="compound">wxPropertyGrid</ref> takes the ownership of the property pointer.</para>
</listitem><listitem><para>If appending a category with name identical to a category already in the <ref refid="classwx_property_grid" kindref="compound">wxPropertyGrid</ref>, then newly created category is deleted, and most recently added category (under which properties are appended) is set to the one with same name. This allows easier adding of items to same categories in multiple passes.</para>
</listitem><listitem><para>Does not automatically redraw the control, so you may need to call Refresh() when calling this function after control has been shown for the first time.</para>
</listitem><listitem><para>This functions deselects selected property, if any. Validation failure option wxPG_VFB_STAY_IN_PROPERTY is not respected, i.e. selection is cleared even if editor had invalid value. </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="148" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1a7e225cbdadd06b7a1470351d4e15e7bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_p_g_property" kindref="compound">wxPGProperty</ref> *</type>
        <definition>wxPGProperty * wxPropertyGridInterface::AppendIn</definition>
        <argsstring>(wxPGPropArg id, wxPGProperty *newProperty)</argsstring>
        <name>AppendIn</name>
        <param>
          <type><ref refid="propgridiface_8h_1a3f566131b8cbb5f0e282b3db4f5c501c" kindref="member">wxPGPropArg</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="classwx_p_g_property" kindref="compound">wxPGProperty</ref> *</type>
          <declname>newProperty</declname>
        </param>
        <briefdescription>
<para>Same as <ref refid="classwx_property_grid_interface_1a59678aa1808aa5c567e39f2aad41b70e" kindref="member">Append()</ref>, but appends under given parent property. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Name or pointer to parent property.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>newProperty</parametername>
</parameternamelist>
<parameterdescription>
<para>Property to be added. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="159" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1a4917f17cd9f415db313942157788e8bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxPropertyGridInterface::BeginAddChildren</definition>
        <argsstring>(wxPGPropArg id)</argsstring>
        <name>BeginAddChildren</name>
        <param>
          <type><ref refid="propgridiface_8h_1a3f566131b8cbb5f0e282b3db4f5c501c" kindref="member">wxPGPropArg</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>In order to add new items into a property with private children (for instance, <ref refid="classwx_flags_property" kindref="compound">wxFlagsProperty</ref>), you need to call this method. </para>
        </briefdescription>
        <detaileddescription>
<para>After populating has been finished, you need to call <ref refid="classwx_property_grid_interface_1a1715d4804457f8b44e9382b3127b0140" kindref="member">EndAddChildren()</ref>.</para>
<para><simplesect kind="see"><para><ref refid="classwx_property_grid_interface_1a1715d4804457f8b44e9382b3127b0140" kindref="member">EndAddChildren()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="168" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1a787e4282dbb85994af0e29a948efa98c" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void wxPropertyGridInterface::Clear</definition>
        <argsstring>()=0</argsstring>
        <name>Clear</name>
        <reimplementedby refid="classwx_property_grid_page_1a702b0d8cd205cf29c8888e80e3e426a4">Clear</reimplementedby>
        <reimplementedby refid="classwx_property_grid_manager_1aef52885fcf7fece27641a69e9685a4f1">Clear</reimplementedby>
        <reimplementedby refid="classwx_property_grid_1a48ef39121da1882f16f2cbf868cc0f2c">Clear</reimplementedby>
        <briefdescription>
<para>Deletes all properties. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>This functions deselects selected property, if any. Validation failure option wxPG_VFB_STAY_IN_PROPERTY is not respected, i.e. selection is cleared even if editor had invalid value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="177" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1ad9630e6b319fafefcfac15c1060278dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxPropertyGridInterface::ClearSelection</definition>
        <argsstring>(bool validation=false)</argsstring>
        <name>ClearSelection</name>
        <param>
          <type>bool</type>
          <declname>validation</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Clears current selection, if any. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>validation</parametername>
</parameternamelist>
<parameterdescription>
<para>If set to false, deselecting the property will always work, even if its editor had invalid value in it.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns true if successful or if there was no selection. May fail if validation was enabled and active editor had invalid value.</para>
</simplesect>
<simplesect kind="remark"><para>In wxWidgets 2.9 and later, this function no longer sends <computeroutput>wxPG_EVT_SELECTED</computeroutput>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classwx_property_grid_1ab2c5acf3ce62377a8d570fd089cb815b" kindref="member">wxPropertyGrid::SelectProperty()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="195" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1a52aca4e7bbec0d9ac775ad4b5492544e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxPropertyGridInterface::ClearModifiedStatus</definition>
        <argsstring>()</argsstring>
        <name>ClearModifiedStatus</name>
        <briefdescription>
<para>Resets modified status of all properties. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="200" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1adc64e1889b8be3f775f34e9c91087596" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxPropertyGridInterface::Collapse</definition>
        <argsstring>(wxPGPropArg id)</argsstring>
        <name>Collapse</name>
        <param>
          <type><ref refid="propgridiface_8h_1a3f566131b8cbb5f0e282b3db4f5c501c" kindref="member">wxPGPropArg</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Collapses given category or property with children. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Returns true if actually collapsed.</para>
</simplesect>
<simplesect kind="remark"><para>This function may deselect selected property, if any. Validation failure option wxPG_VFB_STAY_IN_PROPERTY is not respected, i.e. selection is cleared even if editor had invalid value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="211" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1a3acfb29c90820199472ee16d8be40cf2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxPropertyGridInterface::CollapseAll</definition>
        <argsstring>()</argsstring>
        <name>CollapseAll</name>
        <briefdescription>
<para>Collapses all items that can be collapsed. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Return false if failed (may fail if editor value cannot be validated).</para>
</simplesect>
<simplesect kind="remark"><para>This functions clears selection. Validation failure option wxPG_VFB_STAY_IN_PROPERTY is not respected, i.e. selection is cleared even if editor had invalid value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="223" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1a03e60ec606ffc2a9e1ea944f832ba4d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxPropertyGridInterface::ChangePropertyValue</definition>
        <argsstring>(wxPGPropArg id, wxVariant newValue)</argsstring>
        <name>ChangePropertyValue</name>
        <param>
          <type><ref refid="propgridiface_8h_1a3f566131b8cbb5f0e282b3db4f5c501c" kindref="member">wxPGPropArg</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="classwx_variant" kindref="compound">wxVariant</ref></type>
          <declname>newValue</declname>
        </param>
        <briefdescription>
<para>Changes value of a property, as if by user. </para>
        </briefdescription>
        <detaileddescription>
<para>Use this instead of <ref refid="classwx_property_grid_interface_1aa652e127ce0c9d4e80821cbdcfe4983c" kindref="member">SetPropertyValue()</ref> if you need the value to run through validation process, and also send <computeroutput>wxEVT_PG_CHANGED</computeroutput>.</para>
<para><simplesect kind="remark"><para>Since this function sends <computeroutput>wxEVT_PG_CHANGED</computeroutput>, it should not be called from <computeroutput>EVT_PG_CHANGED</computeroutput> handler.</para>
</simplesect>
<simplesect kind="return"><para>Returns true if value was successfully changed. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="235" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1ad7f72b604efa4854a673ebb722b26c94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxPropertyGridInterface::DeleteProperty</definition>
        <argsstring>(wxPGPropArg id)</argsstring>
        <name>DeleteProperty</name>
        <param>
          <type><ref refid="propgridiface_8h_1a3f566131b8cbb5f0e282b3db4f5c501c" kindref="member">wxPGPropArg</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Removes and deletes a property and any children. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer or name of a property.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>If you delete a property in a <ref refid="classwx_property_grid" kindref="compound">wxPropertyGrid</ref> event handler, the actual deletion is postponed until the next idle event.</para>
</simplesect>
This functions deselects selected property, if any. Validation failure option wxPG_VFB_STAY_IN_PROPERTY is not respected, i.e. selection is cleared even if editor had invalid value. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="252" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1ac2b62fc91927b5b4f9e9a95eebbb26d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxPropertyGridInterface::DisableProperty</definition>
        <argsstring>(wxPGPropArg id)</argsstring>
        <name>DisableProperty</name>
        <param>
          <type><ref refid="propgridiface_8h_1a3f566131b8cbb5f0e282b3db4f5c501c" kindref="member">wxPGPropArg</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Disables a property. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>Property is refreshed with new settings.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classwx_property_grid_interface_1ab46cadeb40c717d902daef74005431bf" kindref="member">EnableProperty()</ref>, <ref refid="classwx_p_g_property_1aa024322106dfb1300ed68919c27dd1e1" kindref="member">wxPGProperty::Enable()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="262" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1a7718a5497b7e5211d847b5a8134bc2ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxPropertyGridInterface::EditorValidate</definition>
        <argsstring>()</argsstring>
        <name>EditorValidate</name>
        <briefdescription>
<para>Returns true if all property grid data changes have been committed. </para>
        </briefdescription>
        <detaileddescription>
<para>Usually only returns false if value in active editor has been invalidated by a <ref refid="classwx_validator" kindref="compound">wxValidator</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="269" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1ab46cadeb40c717d902daef74005431bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxPropertyGridInterface::EnableProperty</definition>
        <argsstring>(wxPGPropArg id, bool enable=true)</argsstring>
        <name>EnableProperty</name>
        <param>
          <type><ref refid="propgridiface_8h_1a3f566131b8cbb5f0e282b3db4f5c501c" kindref="member">wxPGPropArg</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Enables or disables property. </para>
        </briefdescription>
        <detaileddescription>
<para>Disabled property usually appears as having grey text.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Name or pointer to a property. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>enable</parametername>
</parameternamelist>
<parameterdescription>
<para>If false, property is disabled instead.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>Property is refreshed with new settings.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classwx_p_g_property_1aa024322106dfb1300ed68919c27dd1e1" kindref="member">wxPGProperty::Enable()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="285" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1a1715d4804457f8b44e9382b3127b0140" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxPropertyGridInterface::EndAddChildren</definition>
        <argsstring>(wxPGPropArg id)</argsstring>
        <name>EndAddChildren</name>
        <param>
          <type><ref refid="propgridiface_8h_1a3f566131b8cbb5f0e282b3db4f5c501c" kindref="member">wxPGPropArg</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Called after population of property with fixed children has finished. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classwx_property_grid_interface_1a4917f17cd9f415db313942157788e8bf" kindref="member">BeginAddChildren()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="292" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1a9e37a22d7a60feb41f724119678b663e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxPropertyGridInterface::Expand</definition>
        <argsstring>(wxPGPropArg id)</argsstring>
        <name>Expand</name>
        <param>
          <type><ref refid="propgridiface_8h_1a3f566131b8cbb5f0e282b3db4f5c501c" kindref="member">wxPGPropArg</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Expands given category or property with children. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Returns true if actually expanded.</para>
</simplesect>
<simplesect kind="remark"><para>This function may deselect selected property, if any. Validation failure option wxPG_VFB_STAY_IN_PROPERTY is not respected, i.e. selection is cleared even if editor had invalid value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="303" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1a678020610f0af4140eda4726cd89d728" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxPropertyGridInterface::ExpandAll</definition>
        <argsstring>(bool expand=true)</argsstring>
        <name>ExpandAll</name>
        <param>
          <type>bool</type>
          <declname>expand</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Expands all items that can be expanded. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>This functions clears selection. Validation failure option wxPG_VFB_STAY_IN_PROPERTY is not respected, i.e. selection is cleared even if editor had invalid value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="312" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1a2a48b35d9b0542104902b28edecf15d1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxPropertyGridInterface::GetColumnProportion</definition>
        <argsstring>(unsigned int column) const</argsstring>
        <name>GetColumnProportion</name>
        <param>
          <type>unsigned int</type>
          <declname>column</declname>
        </param>
        <briefdescription>
<para>Returns auto-resize proportion of the given column. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classwx_property_grid_interface_1a5df440361d9e85f3a48d79d7b45667e1" kindref="member">SetColumnProportion()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="319" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1a35cf0fe0d253761050b9e519bb9c4f50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_p_g_property" kindref="compound">wxPGProperty</ref> *</type>
        <definition>wxPGProperty * wxPropertyGridInterface::GetFirstChild</definition>
        <argsstring>(wxPGPropArg id)</argsstring>
        <name>GetFirstChild</name>
        <param>
          <type><ref refid="propgridiface_8h_1a3f566131b8cbb5f0e282b3db4f5c501c" kindref="member">wxPGPropArg</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Returns id of first child of given property. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>Does not return private children! </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="326" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1a41ab8661411082563c8191f614f91007" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_property_grid_iterator" kindref="compound">wxPropertyGridIterator</ref></type>
        <definition>wxPropertyGridIterator wxPropertyGridInterface::GetIterator</definition>
        <argsstring>(int flags=wxPG_ITERATE_DEFAULT, wxPGProperty *firstProp=NULL)</argsstring>
        <name>GetIterator</name>
        <param>
          <type>int</type>
          <declname>flags</declname>
          <defval><ref refid="propgridpagestate_8h_1a307ba26bf1eeb9d76108893f4f723b0aaa73795625ba7549869c0a194d17846dd" kindref="member">wxPG_ITERATE_DEFAULT</ref></defval>
        </param>
        <param>
          <type><ref refid="classwx_p_g_property" kindref="compound">wxPGProperty</ref> *</type>
          <declname>firstProp</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Returns iterator class instance. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>See <ref refid="propgridpagestate_8h_1propgrid_iterator_flags" kindref="member">wxPropertyGridIterator Flags</ref>. Value wxPG_ITERATE_DEFAULT causes iteration over everything except private child properties. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>firstProp</parametername>
</parameternamelist>
<parameterdescription>
<para>Property to start iteration from. If NULL, then first child of root is used. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="340" column="28"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1a2dafbd380609c2118451a83d2822afec" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_property_grid_const_iterator" kindref="compound">wxPropertyGridConstIterator</ref></type>
        <definition>wxPropertyGridConstIterator wxPropertyGridInterface::GetIterator</definition>
        <argsstring>(int flags=wxPG_ITERATE_DEFAULT, wxPGProperty *firstProp=NULL) const</argsstring>
        <name>GetIterator</name>
        <param>
          <type>int</type>
          <declname>flags</declname>
          <defval><ref refid="propgridpagestate_8h_1a307ba26bf1eeb9d76108893f4f723b0aaa73795625ba7549869c0a194d17846dd" kindref="member">wxPG_ITERATE_DEFAULT</ref></defval>
        </param>
        <param>
          <type><ref refid="classwx_p_g_property" kindref="compound">wxPGProperty</ref> *</type>
          <declname>firstProp</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="342" column="33"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1acef8d8a08d18b0f78a29d52c96c85d8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_property_grid_iterator" kindref="compound">wxPropertyGridIterator</ref></type>
        <definition>wxPropertyGridIterator wxPropertyGridInterface::GetIterator</definition>
        <argsstring>(int flags, int startPos)</argsstring>
        <name>GetIterator</name>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <param>
          <type>int</type>
          <declname>startPos</declname>
        </param>
        <briefdescription>
<para>Returns iterator class instance. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>See <ref refid="propgridpagestate_8h_1propgrid_iterator_flags" kindref="member">wxPropertyGridIterator Flags</ref>. Value wxPG_ITERATE_DEFAULT causes iteration over everything except private child properties. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>startPos</parametername>
</parameternamelist>
<parameterdescription>
<para>Either wxTOP or wxBOTTOM. wxTOP will indicate that iterations start from the first property from the top, and wxBOTTOM means that the iteration will instead begin from bottommost valid item. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="359" column="28"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1a490cb9347209f1827436bc9e4348f4bd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_property_grid_const_iterator" kindref="compound">wxPropertyGridConstIterator</ref></type>
        <definition>wxPropertyGridConstIterator wxPropertyGridInterface::GetIterator</definition>
        <argsstring>(int flags, int startPos) const</argsstring>
        <name>GetIterator</name>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <param>
          <type>int</type>
          <declname>startPos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="360" column="33"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1a2d7d5e354ca38eb4e01d69ca367124b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_p_g_property" kindref="compound">wxPGProperty</ref> *</type>
        <definition>wxPGProperty * wxPropertyGridInterface::GetFirst</definition>
        <argsstring>(int flags=wxPG_ITERATE_ALL)</argsstring>
        <name>GetFirst</name>
        <param>
          <type>int</type>
          <declname>flags</declname>
          <defval><ref refid="propgridpagestate_8h_1a307ba26bf1eeb9d76108893f4f723b0aacc6979a5992fc69a76cd8c1ce5f844e5" kindref="member">wxPG_ITERATE_ALL</ref></defval>
        </param>
        <briefdescription>
<para>Returns id of first item that matches given criteria. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>See <ref refid="propgridpagestate_8h_1propgrid_iterator_flags" kindref="member">wxPropertyGridIterator Flags</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="370" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1a2c005b9294b72f31661b1b58d873a654" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classwx_p_g_property" kindref="compound">wxPGProperty</ref> *</type>
        <definition>const wxPGProperty * wxPropertyGridInterface::GetFirst</definition>
        <argsstring>(int flags=wxPG_ITERATE_ALL) const</argsstring>
        <name>GetFirst</name>
        <param>
          <type>int</type>
          <declname>flags</declname>
          <defval><ref refid="propgridpagestate_8h_1a307ba26bf1eeb9d76108893f4f723b0aacc6979a5992fc69a76cd8c1ce5f844e5" kindref="member">wxPG_ITERATE_ALL</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="372" column="24"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1a396d1fe855d54da1d2e5813b03709b81" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_p_g_property" kindref="compound">wxPGProperty</ref> *</type>
        <definition>wxPGProperty * wxPropertyGridInterface::GetProperty</definition>
        <argsstring>(const wxString &amp;name) const</argsstring>
        <name>GetProperty</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Returns pointer to a property with given name (case-sensitive). </para>
        </briefdescription>
        <detaileddescription>
<para>If there is no property with such name, NULL pointer is returned.</para>
<para><simplesect kind="remark"><para>Properties which have non-category, non-root parent cannot be accessed globally by their name. Instead, use "&lt;property&gt;.&lt;subproperty&gt;" instead of "&lt;subproperty&gt;". </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="383" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1a605b3cc90bd3d87a0ac0c9e354055bca" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxPropertyGridInterface::GetPropertiesWithFlag</definition>
        <argsstring>(wxArrayPGProperty *targetArr, wxPGProperty::FlagType flags, bool inverse=false, int iterFlags=(wxPG_ITERATE_PROPERTIES|wxPG_ITERATE_HIDDEN|wxPG_ITERATE_CATEGORIES)) const</argsstring>
        <name>GetPropertiesWithFlag</name>
        <param>
          <type>wxArrayPGProperty *</type>
          <declname>targetArr</declname>
        </param>
        <param>
          <type><ref refid="classwx_p_g_property_1a68b0ae8aab37c387f5fc4b7e9c53968e" kindref="member">wxPGProperty::FlagType</ref></type>
          <declname>flags</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>inverse</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>int</type>
          <declname>iterFlags</declname>
          <defval>(<ref refid="propgridpagestate_8h_1a307ba26bf1eeb9d76108893f4f723b0aa879aa0952cc5f6b16264baa4d75401c8" kindref="member">wxPG_ITERATE_PROPERTIES</ref>|<ref refid="propgridpagestate_8h_1a307ba26bf1eeb9d76108893f4f723b0aa2ba47959731cee25882eb98e3dba90e8" kindref="member">wxPG_ITERATE_HIDDEN</ref>|<ref refid="propgridpagestate_8h_1a307ba26bf1eeb9d76108893f4f723b0aa6197a50f3278509eb2f17a62b5209368" kindref="member">wxPG_ITERATE_CATEGORIES</ref>)</defval>
        </param>
        <briefdescription>
<para>Adds to <emphasis>targetArr</emphasis> pointers to properties that have given <emphasis>flags</emphasis> set. </para>
        </briefdescription>
        <detaileddescription>
<para>However, if <emphasis>inverse</emphasis> is set to true, then only properties without given flags are stored.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>targetArr</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of pointers to properties in which found properties are stored. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Property flags to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inverse</parametername>
</parameternamelist>
<parameterdescription>
<para>If false, properties that have given flags are stored, otherwise there are stored only properties without given flags. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iterFlags</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator flags to use. Default is everything expect private children. See <ref refid="propgridpagestate_8h_1propgrid_iterator_flags" kindref="member">wxPropertyGridIterator Flags</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="402" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1a95f58bae8097824c6561e66f851dbc30" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_variant" kindref="compound">wxVariant</ref></type>
        <definition>wxVariant wxPropertyGridInterface::GetPropertyAttribute</definition>
        <argsstring>(wxPGPropArg id, const wxString &amp;attrName) const</argsstring>
        <name>GetPropertyAttribute</name>
        <param>
          <type><ref refid="propgridiface_8h_1a3f566131b8cbb5f0e282b3db4f5c501c" kindref="member">wxPGPropArg</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>attrName</declname>
        </param>
        <briefdescription>
<para>Returns value of given attribute. </para>
        </briefdescription>
        <detaileddescription>
<para>If none found, returns wxNullVariant. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="410" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1a7c34c3ed89283db7a868b82b0dd152dc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classwx_p_g_attribute_storage" kindref="compound">wxPGAttributeStorage</ref> &amp;</type>
        <definition>const wxPGAttributeStorage &amp; wxPropertyGridInterface::GetPropertyAttributes</definition>
        <argsstring>(wxPGPropArg id) const</argsstring>
        <name>GetPropertyAttributes</name>
        <param>
          <type><ref refid="propgridiface_8h_1a3f566131b8cbb5f0e282b3db4f5c501c" kindref="member">wxPGPropArg</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Returns map-like storage of property&apos;s attributes. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>Note that if extra style <ref refid="interface_2wx_2propgrid_2propgrid_8h_1aeebee6f1621b080999ea22a5b76b00a6acf6fde818247b930c377b6371bece78b" kindref="member">wxPG_EX_WRITEONLY_BUILTIN_ATTRIBUTES</ref> is set, then builtin-attributes are not included in the storage. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="419" column="32"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1a0f3901e92bdda989a25780dbd047ea16" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_colour" kindref="compound">wxColour</ref></type>
        <definition>wxColour wxPropertyGridInterface::GetPropertyBackgroundColour</definition>
        <argsstring>(wxPGPropArg id) const</argsstring>
        <name>GetPropertyBackgroundColour</name>
        <param>
          <type><ref refid="propgridiface_8h_1a3f566131b8cbb5f0e282b3db4f5c501c" kindref="member">wxPGPropArg</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Returns background colour of first cell of a property. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="424" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1ab9d36ed12c9ddde39f33074727c692d3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_property_category" kindref="compound">wxPropertyCategory</ref> *</type>
        <definition>wxPropertyCategory * wxPropertyGridInterface::GetPropertyCategory</definition>
        <argsstring>(wxPGPropArg id) const</argsstring>
        <name>GetPropertyCategory</name>
        <param>
          <type><ref refid="propgridiface_8h_1a3f566131b8cbb5f0e282b3db4f5c501c" kindref="member">wxPGPropArg</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Returns pointer of property&apos;s nearest parent category. </para>
        </briefdescription>
        <detaileddescription>
<para>If no category found, returns NULL. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="430" column="24"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1ab6011a052c7d07588dd4207a83303796" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * wxPropertyGridInterface::GetPropertyClientData</definition>
        <argsstring>(wxPGPropArg id) const</argsstring>
        <name>GetPropertyClientData</name>
        <param>
          <type><ref refid="propgridiface_8h_1a3f566131b8cbb5f0e282b3db4f5c501c" kindref="member">wxPGPropArg</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Returns client data (void*) of a property. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="433" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1a7c771578f84e696410eb5ff61e5b2428" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_p_g_property" kindref="compound">wxPGProperty</ref> *</type>
        <definition>wxPGProperty * wxPropertyGridInterface::GetPropertyByLabel</definition>
        <argsstring>(const wxString &amp;label) const</argsstring>
        <name>GetPropertyByLabel</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>label</declname>
        </param>
        <briefdescription>
<para>Returns first property which label matches given string. </para>
        </briefdescription>
        <detaileddescription>
<para>NULL if none found. Note that this operation is very slow when compared to <ref refid="classwx_property_grid_interface_1a89769670f290c83992b931d686dfe78d" kindref="member">GetPropertyByName()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="440" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1a89769670f290c83992b931d686dfe78d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_p_g_property" kindref="compound">wxPGProperty</ref> *</type>
        <definition>wxPGProperty * wxPropertyGridInterface::GetPropertyByName</definition>
        <argsstring>(const wxString &amp;name) const</argsstring>
        <name>GetPropertyByName</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Returns pointer to a property with given name (case-sensitive). </para>
        </briefdescription>
        <detaileddescription>
<para>If there is no property with such name, NULL pointer is returned.</para>
<para><simplesect kind="remark"><para>Properties which have non-category, non-root parent cannot be accessed globally by their name. Instead, use &quot;&lt;property&gt;.&lt;subproperty&gt;&quot; instead of &quot;&lt;subproperty&gt;&quot;. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="450" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1aea0120a83a8a5fa06213f7285284e7d4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_p_g_property" kindref="compound">wxPGProperty</ref> *</type>
        <definition>wxPGProperty * wxPropertyGridInterface::GetPropertyByName</definition>
        <argsstring>(const wxString &amp;name, const wxString &amp;subname) const</argsstring>
        <name>GetPropertyByName</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>subname</declname>
        </param>
        <briefdescription>
<para>Returns child property <emphasis>subname</emphasis> of property <emphasis>name</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>Same as calling GetPropertyByName("name.subname"), albeit slightly faster. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="456" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1a5a85dc855094acfd55ce7c192c596283" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classwx_p_g_editor" kindref="compound">wxPGEditor</ref> *</type>
        <definition>const wxPGEditor * wxPropertyGridInterface::GetPropertyEditor</definition>
        <argsstring>(wxPGPropArg id) const</argsstring>
        <name>GetPropertyEditor</name>
        <param>
          <type><ref refid="propgridiface_8h_1a3f566131b8cbb5f0e282b3db4f5c501c" kindref="member">wxPGPropArg</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Returns property&apos;s editor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="462" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1aaa51993cd303a144ff507281a07385d0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>wxString wxPropertyGridInterface::GetPropertyHelpString</definition>
        <argsstring>(wxPGPropArg id) const</argsstring>
        <name>GetPropertyHelpString</name>
        <param>
          <type><ref refid="propgridiface_8h_1a3f566131b8cbb5f0e282b3db4f5c501c" kindref="member">wxPGPropArg</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Returns help string associated with a property. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="467" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1a1975d6c6773807dd849f2112c734dbe9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_bitmap" kindref="compound">wxBitmap</ref> *</type>
        <definition>wxBitmap * wxPropertyGridInterface::GetPropertyImage</definition>
        <argsstring>(wxPGPropArg id) const</argsstring>
        <name>GetPropertyImage</name>
        <param>
          <type><ref refid="propgridiface_8h_1a3f566131b8cbb5f0e282b3db4f5c501c" kindref="member">wxPGPropArg</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Returns property&apos;s custom value image (NULL of none). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="472" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1a873ed7081c083b42f45507691b083da1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
        <definition>const wxString &amp; wxPropertyGridInterface::GetPropertyLabel</definition>
        <argsstring>(wxPGPropArg id)</argsstring>
        <name>GetPropertyLabel</name>
        <param>
          <type><ref refid="propgridiface_8h_1a3f566131b8cbb5f0e282b3db4f5c501c" kindref="member">wxPGPropArg</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Returns label of a property. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="477" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1ab107b3f96a158e498f648888149b3bf4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>wxString wxPropertyGridInterface::GetPropertyName</definition>
        <argsstring>(wxPGProperty *property)</argsstring>
        <name>GetPropertyName</name>
        <param>
          <type><ref refid="classwx_p_g_property" kindref="compound">wxPGProperty</ref> *</type>
          <declname>property</declname>
        </param>
        <briefdescription>
<para>Returns property&apos;s name, by which it is globally accessible. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="482" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1ad4a5556cb2b1e1b743c131000eaff3a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_p_g_property" kindref="compound">wxPGProperty</ref> *</type>
        <definition>wxPGProperty * wxPropertyGridInterface::GetPropertyParent</definition>
        <argsstring>(wxPGPropArg id)</argsstring>
        <name>GetPropertyParent</name>
        <param>
          <type><ref refid="propgridiface_8h_1a3f566131b8cbb5f0e282b3db4f5c501c" kindref="member">wxPGPropArg</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Returns parent item of a property. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="487" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1a28bbbd70337f95141b3d4166c7abe37f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_colour" kindref="compound">wxColour</ref></type>
        <definition>wxColour wxPropertyGridInterface::GetPropertyTextColour</definition>
        <argsstring>(wxPGPropArg id) const</argsstring>
        <name>GetPropertyTextColour</name>
        <param>
          <type><ref refid="propgridiface_8h_1a3f566131b8cbb5f0e282b3db4f5c501c" kindref="member">wxPGPropArg</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Returns text colour of first cell of a property. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="492" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1aed1a41d6b1fab79628710fbcc5f8176c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_validator" kindref="compound">wxValidator</ref> *</type>
        <definition>wxValidator * wxPropertyGridInterface::GetPropertyValidator</definition>
        <argsstring>(wxPGPropArg id)</argsstring>
        <name>GetPropertyValidator</name>
        <param>
          <type><ref refid="propgridiface_8h_1a3f566131b8cbb5f0e282b3db4f5c501c" kindref="member">wxPGPropArg</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Returns validator of a property as a reference, which you can pass to any number of SetPropertyValidator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="498" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1aa1164652240e4b157ce5250769af537e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_variant" kindref="compound">wxVariant</ref></type>
        <definition>wxVariant wxPropertyGridInterface::GetPropertyValue</definition>
        <argsstring>(wxPGPropArg id)</argsstring>
        <name>GetPropertyValue</name>
        <param>
          <type><ref refid="propgridiface_8h_1a3f566131b8cbb5f0e282b3db4f5c501c" kindref="member">wxPGPropArg</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Returns property&apos;s value as <ref refid="classwx_variant" kindref="compound">wxVariant</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>If property value is unspecified, wxNullVariant is returned. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="505" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1ab2695c50dee45a3bc1e9cad73f849efa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="dynarray_8h_1add87f199292e36ee87efd6d7f0d4ee66" kindref="member">wxArrayInt</ref></type>
        <definition>wxArrayInt wxPropertyGridInterface::GetPropertyValueAsArrayInt</definition>
        <argsstring>(wxPGPropArg id) const</argsstring>
        <name>GetPropertyValueAsArrayInt</name>
        <param>
          <type><ref refid="propgridiface_8h_1a3f566131b8cbb5f0e282b3db4f5c501c" kindref="member">wxPGPropArg</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Return&apos;s property&apos;s value as wxArrayInt. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="508" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1a1ae5322a1d63bd631792b0aa1f52c67b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_array_string" kindref="compound">wxArrayString</ref></type>
        <definition>wxArrayString wxPropertyGridInterface::GetPropertyValueAsArrayString</definition>
        <argsstring>(wxPGPropArg id) const</argsstring>
        <name>GetPropertyValueAsArrayString</name>
        <param>
          <type><ref refid="propgridiface_8h_1a3f566131b8cbb5f0e282b3db4f5c501c" kindref="member">wxPGPropArg</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Returns property&apos;s value as <ref refid="classwx_array_string" kindref="compound">wxArrayString</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="511" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1a6e1d46ecca2e644f456c3192a249de7c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxPropertyGridInterface::GetPropertyValueAsBool</definition>
        <argsstring>(wxPGPropArg id) const</argsstring>
        <name>GetPropertyValueAsBool</name>
        <param>
          <type><ref refid="propgridiface_8h_1a3f566131b8cbb5f0e282b3db4f5c501c" kindref="member">wxPGPropArg</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Returns property&apos;s value as bool. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="514" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1ac37c6ad3c7282e94c7480d134b0a4e08" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_date_time" kindref="compound">wxDateTime</ref></type>
        <definition>wxDateTime wxPropertyGridInterface::GetPropertyValueAsDateTime</definition>
        <argsstring>(wxPGPropArg id) const</argsstring>
        <name>GetPropertyValueAsDateTime</name>
        <param>
          <type><ref refid="propgridiface_8h_1a3f566131b8cbb5f0e282b3db4f5c501c" kindref="member">wxPGPropArg</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Return&apos;s property&apos;s value as <ref refid="classwx_date_time" kindref="compound">wxDateTime</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="517" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1a59c9645db4dd84f18f0ff158244dea72" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double wxPropertyGridInterface::GetPropertyValueAsDouble</definition>
        <argsstring>(wxPGPropArg id) const</argsstring>
        <name>GetPropertyValueAsDouble</name>
        <param>
          <type><ref refid="propgridiface_8h_1a3f566131b8cbb5f0e282b3db4f5c501c" kindref="member">wxPGPropArg</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Returns property&apos;s value as double-precision floating point number. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="520" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1a54538c9a3c22cde2d6e5303ee6939041" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxPropertyGridInterface::GetPropertyValueAsInt</definition>
        <argsstring>(wxPGPropArg id) const</argsstring>
        <name>GetPropertyValueAsInt</name>
        <param>
          <type><ref refid="propgridiface_8h_1a3f566131b8cbb5f0e282b3db4f5c501c" kindref="member">wxPGPropArg</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Returns property&apos;s value as integer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="523" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1a1b4ed26e839e5784a67ab51335cafe47" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long wxPropertyGridInterface::GetPropertyValueAsLong</definition>
        <argsstring>(wxPGPropArg id) const</argsstring>
        <name>GetPropertyValueAsLong</name>
        <param>
          <type><ref refid="propgridiface_8h_1a3f566131b8cbb5f0e282b3db4f5c501c" kindref="member">wxPGPropArg</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Returns property&apos;s value as integer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="526" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1a59cc00724550cb53397a0fc43d3e963d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>wxLongLong_t</type>
        <definition>wxLongLong_t wxPropertyGridInterface::GetPropertyValueAsLongLong</definition>
        <argsstring>(wxPGPropArg id) const</argsstring>
        <name>GetPropertyValueAsLongLong</name>
        <param>
          <type><ref refid="propgridiface_8h_1a3f566131b8cbb5f0e282b3db4f5c501c" kindref="member">wxPGPropArg</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Returns property&apos;s value as native signed 64-bit integer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="529" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1a1f7a2cb0532030f919a4200ffc60bcf8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>wxString wxPropertyGridInterface::GetPropertyValueAsString</definition>
        <argsstring>(wxPGPropArg id) const</argsstring>
        <name>GetPropertyValueAsString</name>
        <param>
          <type><ref refid="propgridiface_8h_1a3f566131b8cbb5f0e282b3db4f5c501c" kindref="member">wxPGPropArg</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Returns property&apos;s value as <ref refid="classwx_string" kindref="compound">wxString</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>If property does not use string value type, then its value is converted using <ref refid="classwx_p_g_property_1a22451b135458443be5e1c6cfde72a515" kindref="member">wxPGProperty::GetValueAsString()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="536" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1a63336486074709abd02d3c9ab8598716" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long wxPropertyGridInterface::GetPropertyValueAsULong</definition>
        <argsstring>(wxPGPropArg id) const</argsstring>
        <name>GetPropertyValueAsULong</name>
        <param>
          <type><ref refid="propgridiface_8h_1a3f566131b8cbb5f0e282b3db4f5c501c" kindref="member">wxPGPropArg</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Returns property&apos;s value as unsigned integer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="539" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1a738ca99d6b363c88d537b61f87c83aff" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>wxULongLong_t</type>
        <definition>wxULongLong_t wxPropertyGridInterface::GetPropertyValueAsULongLong</definition>
        <argsstring>(wxPGPropArg id) const</argsstring>
        <name>GetPropertyValueAsULongLong</name>
        <param>
          <type><ref refid="propgridiface_8h_1a3f566131b8cbb5f0e282b3db4f5c501c" kindref="member">wxPGPropArg</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Returns property&apos;s value as native unsigned 64-bit integer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="542" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1ad3b171468f2b3999b98c44be4be5b45d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_variant" kindref="compound">wxVariant</ref></type>
        <definition>wxVariant wxPropertyGridInterface::GetPropertyValues</definition>
        <argsstring>(const wxString &amp;listname=wxEmptyString, wxPGProperty *baseparent=NULL, long flags=0) const</argsstring>
        <name>GetPropertyValues</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>listname</declname>
          <defval><ref refid="interface_2wx_2string_8h_1a9a321d587166a30017b608dd2d234033" kindref="member">wxEmptyString</ref></defval>
        </param>
        <param>
          <type><ref refid="classwx_p_g_property" kindref="compound">wxPGProperty</ref> *</type>
          <declname>baseparent</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>long</type>
          <declname>flags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Returns a <ref refid="classwx_variant" kindref="compound">wxVariant</ref> list containing <ref refid="classwx_variant" kindref="compound">wxVariant</ref> versions of all property values. </para>
        </briefdescription>
        <detaileddescription>
<para>Order is not guaranteed.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>listname</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the returned <ref refid="classwx_variant" kindref="compound">wxVariant</ref> list. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>baseparent</parametername>
</parameternamelist>
<parameterdescription>
<para>The base property which children properties will be queried for values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Use <computeroutput>wxPG_KEEP_STRUCTURE</computeroutput> to retain category structure; each sub category will be its own wxVariantList of <ref refid="classwx_variant" kindref="compound">wxVariant</ref>. Use <computeroutput>wxPG_INC_ATTRIBUTES</computeroutput> to include property attributes as well. Each attribute will be stored as list variant named "@&lt;propname&gt;@attr." </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="560" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1a4ecb8a1c98dc75f4c1ca050b734c15be" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const wxArrayPGProperty &amp;</type>
        <definition>const wxArrayPGProperty &amp; wxPropertyGridInterface::GetSelectedProperties</definition>
        <argsstring>() const</argsstring>
        <name>GetSelectedProperties</name>
        <briefdescription>
<para>Returns list of currently selected properties. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>wxArrayPGProperty should be compatible with std::vector API. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="568" column="29"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1a87c31d90e34f42f3e9defd349bfc8f60" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_p_g_property" kindref="compound">wxPGProperty</ref> *</type>
        <definition>wxPGProperty * wxPropertyGridInterface::GetSelection</definition>
        <argsstring>() const</argsstring>
        <name>GetSelection</name>
        <briefdescription>
<para>Returns currently selected property. </para>
        </briefdescription>
        <detaileddescription>
<para>NULL if none.</para>
<para><simplesect kind="remark"><para>When wxPG_EX_MULTIPLE_SELECTION extra style is used, this member function returns the focused property, that is the one which can have active editor. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="577" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1a3cee9947d2bab8255d0e3233b7894504" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classwx_p_g_v_iterator" kindref="compound">wxPGVIterator</ref></type>
        <definition>virtual wxPGVIterator wxPropertyGridInterface::GetVIterator</definition>
        <argsstring>(int flags) const</argsstring>
        <name>GetVIterator</name>
        <reimplementedby refid="classwx_property_grid_manager_1ae69bb9ce4c40c599f7033603826d9851">GetVIterator</reimplementedby>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Similar to <ref refid="classwx_property_grid_interface_1a41ab8661411082563c8191f614f91007" kindref="member">GetIterator()</ref>, but instead returns <ref refid="classwx_p_g_v_iterator" kindref="compound">wxPGVIterator</ref> instance, which can be useful for forward-iterating through arbitrary property containers. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>See <ref refid="propgridpagestate_8h_1propgrid_iterator_flags" kindref="member">wxPropertyGridIterator Flags</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="587" column="27"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1aac3d5502e764989ed8b031a3d75b8814" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxPropertyGridInterface::HideProperty</definition>
        <argsstring>(wxPGPropArg id, bool hide=true, int flags=wxPG_RECURSE)</argsstring>
        <name>HideProperty</name>
        <param>
          <type><ref refid="propgridiface_8h_1a3f566131b8cbb5f0e282b3db4f5c501c" kindref="member">wxPGPropArg</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>hide</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
          <defval><ref refid="propgridiface_8h_1ae2e5452962f3a4cdaca5b55846514a4eac9c20676ced7bcd3ecbd227bdc3f70da" kindref="member">wxPG_RECURSE</ref></defval>
        </param>
        <briefdescription>
<para>Hides or reveals a property. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Name or pointer to a property. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hide</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, hides property, otherwise reveals it. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>By default changes are applied recursively. Set this parameter wxPG_DONT_RECURSE to prevent this. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="600" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1a56fec31d497b18e5f13728afc1a38f73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_p_g_property" kindref="compound">wxPGProperty</ref> *</type>
        <definition>wxPGProperty * wxPropertyGridInterface::Insert</definition>
        <argsstring>(wxPGPropArg priorThis, wxPGProperty *newProperty)</argsstring>
        <name>Insert</name>
        <param>
          <type><ref refid="propgridiface_8h_1a3f566131b8cbb5f0e282b3db4f5c501c" kindref="member">wxPGPropArg</ref></type>
          <declname>priorThis</declname>
        </param>
        <param>
          <type><ref refid="classwx_p_g_property" kindref="compound">wxPGProperty</ref> *</type>
          <declname>newProperty</declname>
        </param>
        <briefdescription>
<para>Inserts property to the property container. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>priorThis</parametername>
</parameternamelist>
<parameterdescription>
<para>New property is inserted just prior to this. Available only in the first variant. There are two versions of this function to allow this parameter to be either an id or name to a property. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>newProperty</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the inserted property. <ref refid="classwx_property_grid" kindref="compound">wxPropertyGrid</ref> will take ownership of this object.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns newProperty.</para>
</simplesect>
<simplesect kind="remark"><para></para>
</simplesect>
<itemizedlist>
<listitem><para><ref refid="classwx_property_grid" kindref="compound">wxPropertyGrid</ref> takes the ownership of the property pointer.</para>
</listitem><listitem><para>While Append may be faster way to add items, make note that when both types of data storage (categoric and non-categoric) are active, Insert becomes even more slow. This is especially true if current mode is non-categoric.</para>
</listitem><listitem><para>This functions deselects selected property, if any. Validation failure option wxPG_VFB_STAY_IN_PROPERTY is not respected, i.e. selection is cleared even if editor had invalid value.</para>
</listitem></itemizedlist>
</para>
<para>Example of use:</para>
<para><programlisting><codeline><highlight class="comment">//<sp/>append<sp/>category</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="classwx_p_g_property" kindref="compound">wxPGProperty</ref>*<sp/>my_cat_id<sp/>=<sp/>propertygrid-&gt;Append(<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classwx_property_category" kindref="compound">wxPropertyCategory</ref>(</highlight><highlight class="stringliteral">&quot;My<sp/>Category&quot;</highlight><highlight class="normal">)<sp/>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>insert<sp/>into<sp/>category<sp/>-<sp/>using<sp/>second<sp/>variant</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="classwx_p_g_property_1ade8edb58a7853a539664c77b2d9c9c81" kindref="member">wxPGProperty</ref>*<sp/>my_item_id_1<sp/>=<sp/>propertygrid-&gt;Insert(<sp/>my_cat_id,<sp/>0,<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classwx_string_property" kindref="compound">wxStringProperty</ref>(</highlight><highlight class="stringliteral">&quot;My<sp/>String<sp/>1&quot;</highlight><highlight class="normal">)<sp/>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>insert<sp/>before<sp/>to<sp/>first<sp/>item<sp/>-<sp/>using<sp/>first<sp/>variant</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="classwx_p_g_property" kindref="compound">wxPGProperty</ref>*<sp/>my_item_id_2<sp/>=<sp/>propertygrid-&gt;Insert(<sp/>my_item_id,<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classwx_string_property" kindref="compound">wxStringProperty</ref>(</highlight><highlight class="stringliteral">&quot;My<sp/>String<sp/>2&quot;</highlight><highlight class="normal">)<sp/>);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="653" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1ae6c3257273def20ad19da1869c4b1590" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_p_g_property" kindref="compound">wxPGProperty</ref> *</type>
        <definition>wxPGProperty * wxPropertyGridInterface::Insert</definition>
        <argsstring>(wxPGPropArg parent, int index, wxPGProperty *newProperty)</argsstring>
        <name>Insert</name>
        <param>
          <type><ref refid="propgridiface_8h_1a3f566131b8cbb5f0e282b3db4f5c501c" kindref="member">wxPGPropArg</ref></type>
          <declname>parent</declname>
        </param>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="classwx_p_g_property" kindref="compound">wxPGProperty</ref> *</type>
          <declname>newProperty</declname>
        </param>
        <briefdescription>
<para>Inserts property to the property container. </para>
        </briefdescription>
        <detaileddescription>
<para>See the other overload for more details.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>parent</parametername>
</parameternamelist>
<parameterdescription>
<para>New property is inserted under this category. Available only in the second variant. There are two versions of this function to allow this parameter to be either an id or name to a property. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index under category. Available only in the second variant. If index is &lt; 0, property is appended in category. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>newProperty</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the inserted property. <ref refid="classwx_property_grid" kindref="compound">wxPropertyGrid</ref> will take ownership of this object.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns newProperty. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="673" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1a3b7cd671595d1b02c76d93b7eb303ad2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxPropertyGridInterface::IsPropertyCategory</definition>
        <argsstring>(wxPGPropArg id) const</argsstring>
        <name>IsPropertyCategory</name>
        <param>
          <type><ref refid="propgridiface_8h_1a3f566131b8cbb5f0e282b3db4f5c501c" kindref="member">wxPGPropArg</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Returns true if property is a category. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="676" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1ae96712ca8d09280a360f18b4fc2d06bc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxPropertyGridInterface::IsPropertyEnabled</definition>
        <argsstring>(wxPGPropArg id) const</argsstring>
        <name>IsPropertyEnabled</name>
        <param>
          <type><ref refid="propgridiface_8h_1a3f566131b8cbb5f0e282b3db4f5c501c" kindref="member">wxPGPropArg</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Returns true if property is enabled. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="679" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1a859151ce4ff84b0fdfa3c6ffee561bbc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxPropertyGridInterface::IsPropertyExpanded</definition>
        <argsstring>(wxPGPropArg id) const</argsstring>
        <name>IsPropertyExpanded</name>
        <param>
          <type><ref refid="propgridiface_8h_1a3f566131b8cbb5f0e282b3db4f5c501c" kindref="member">wxPGPropArg</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Returns true if given property is expanded. </para>
        </briefdescription>
        <detaileddescription>
<para>Naturally, always returns false for properties that cannot be expanded. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="685" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1ab16a5a15a2b14c2fad6ee1fc10d1c92f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxPropertyGridInterface::IsPropertyModified</definition>
        <argsstring>(wxPGPropArg id) const</argsstring>
        <name>IsPropertyModified</name>
        <param>
          <type><ref refid="propgridiface_8h_1a3f566131b8cbb5f0e282b3db4f5c501c" kindref="member">wxPGPropArg</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Returns true if property has been modified after value set or modify flag clear by software. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="691" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1ad01e5d14aaeea74bc89cec0ec92452a3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxPropertyGridInterface::IsPropertySelected</definition>
        <argsstring>(wxPGPropArg id) const</argsstring>
        <name>IsPropertySelected</name>
        <param>
          <type><ref refid="propgridiface_8h_1a3f566131b8cbb5f0e282b3db4f5c501c" kindref="member">wxPGPropArg</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Returns true if property is selected. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="696" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1ad4ad31fd598976aee488fcc8644b4ae3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxPropertyGridInterface::IsPropertyShown</definition>
        <argsstring>(wxPGPropArg id) const</argsstring>
        <name>IsPropertyShown</name>
        <param>
          <type><ref refid="propgridiface_8h_1a3f566131b8cbb5f0e282b3db4f5c501c" kindref="member">wxPGPropArg</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Returns true if property is shown (i.e. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="classwx_property_grid_interface_1aac3d5502e764989ed8b031a3d75b8814" kindref="member">HideProperty()</ref> with true not called for it). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="702" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1afd4bdbfa887850f46c3195a6a8f91f7d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxPropertyGridInterface::IsPropertyValueUnspecified</definition>
        <argsstring>(wxPGPropArg id) const</argsstring>
        <name>IsPropertyValueUnspecified</name>
        <param>
          <type><ref refid="propgridiface_8h_1a3f566131b8cbb5f0e282b3db4f5c501c" kindref="member">wxPGPropArg</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Returns true if property value is set to unspecified. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="707" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1aac3d13601fb3a97f531b86923b20d5ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxPropertyGridInterface::LimitPropertyEditing</definition>
        <argsstring>(wxPGPropArg id, bool limit=true)</argsstring>
        <name>LimitPropertyEditing</name>
        <param>
          <type><ref refid="propgridiface_8h_1a3f566131b8cbb5f0e282b3db4f5c501c" kindref="member">wxPGPropArg</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>limit</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Disables (<emphasis>limit</emphasis> = true) or enables (<emphasis>limit</emphasis> = false) <ref refid="classwx_text_ctrl" kindref="compound">wxTextCtrl</ref> editor of a property, if it is not the sole mean to edit the value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>Property is refreshed with new settings. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="716" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1a5e277a34b5e319621f6a1c083d572f5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void wxPropertyGridInterface::RefreshGrid</definition>
        <argsstring>(wxPropertyGridPageState *state=NULL)</argsstring>
        <name>RefreshGrid</name>
        <param>
          <type><ref refid="classwx_property_grid_page_state" kindref="compound">wxPropertyGridPageState</ref> *</type>
          <declname>state</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>If state is shown in its grid, refresh it now. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="721" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1a6c94427855c15d4e0519ee713e222c66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_p_g_property" kindref="compound">wxPGProperty</ref> *</type>
        <definition>wxPGProperty * wxPropertyGridInterface::RemoveProperty</definition>
        <argsstring>(wxPGPropArg id)</argsstring>
        <name>RemoveProperty</name>
        <param>
          <type><ref refid="propgridiface_8h_1a3f566131b8cbb5f0e282b3db4f5c501c" kindref="member">wxPGPropArg</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Removes a property. </para>
        </briefdescription>
        <detaileddescription>
<para>Does not delete the property object, but instead returns it.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer or name of a property.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>Removed property cannot have any children. <verbatim>     Also, if you remove property in a wxPropertyGrid event
     handler, the actual removal is postponed until the next
     idle event.
</verbatim> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="744" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1a3710d271cf3971511742651b2ac04502" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_p_g_property" kindref="compound">wxPGProperty</ref> *</type>
        <definition>wxPGProperty * wxPropertyGridInterface::ReplaceProperty</definition>
        <argsstring>(wxPGPropArg id, wxPGProperty *property)</argsstring>
        <name>ReplaceProperty</name>
        <param>
          <type><ref refid="propgridiface_8h_1a3f566131b8cbb5f0e282b3db4f5c501c" kindref="member">wxPGPropArg</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="classwx_p_g_property" kindref="compound">wxPGProperty</ref> *</type>
          <declname>property</declname>
        </param>
        <briefdescription>
<para>Replaces property with id with newly created one. </para>
        </briefdescription>
        <detaileddescription>
<para>For example, this code replaces existing property named &quot;Flags&quot; with one that will have different set of items:</para>
<para><programlisting><codeline><highlight class="normal">pg-&gt;ReplaceProperty(</highlight><highlight class="stringliteral">&quot;Flags&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classwx_flags_property" kindref="compound">wxFlagsProperty</ref>(</highlight><highlight class="stringliteral">&quot;Flags&quot;</highlight><highlight class="normal">,<sp/><ref refid="propgriddefs_8h_1a02064e949a659998a5b05d94a5203158" kindref="member">wxPG_LABEL</ref>,<sp/>newItems))</highlight></codeline>
</programlisting></para>
<para><simplesect kind="see"><para><ref refid="classwx_property_grid_interface_1a56fec31d497b18e5f13728afc1a38f73" kindref="member">Insert()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="758" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1aceb7f1ca6c7079c075d9876b94a2cb0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxPropertyGridInterface::RestoreEditableState</definition>
        <argsstring>(const wxString &amp;src, int restoreStates=AllStates)</argsstring>
        <name>RestoreEditableState</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int</type>
          <declname>restoreStates</declname>
          <defval><ref refid="classwx_property_grid_interface_1acd38be5728243d99365e0f371b6c19aea19c3af2d76e93bca4d687865b1ea27f4" kindref="member">AllStates</ref></defval>
        </param>
        <briefdescription>
<para>Restores user-editable state. </para>
        </briefdescription>
        <detaileddescription>
<para>See also <ref refid="classwx_property_grid_interface_1a3ab626269453b627e119367255c80ab0" kindref="member">wxPropertyGridInterface::SaveEditableState()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>String generated by SaveEditableState.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>restoreStates</parametername>
</parameternamelist>
<parameterdescription>
<para>Which parts to restore from source string. See <ref refid="classwx_property_grid_interface_1propgridinterface_editablestate_flags" kindref="member">list of editable state flags</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns false if there was problem reading the string.</para>
</simplesect>
<simplesect kind="remark"><para>If some parts of state (such as scrolled or splitter position) fail to restore correctly, please make sure that you call this function after <ref refid="classwx_property_grid" kindref="compound">wxPropertyGrid</ref> size has been set (this may sometimes be tricky when sizers are used). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="831" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1a3ab626269453b627e119367255c80ab0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>wxString wxPropertyGridInterface::SaveEditableState</definition>
        <argsstring>(int includedStates=AllStates) const</argsstring>
        <name>SaveEditableState</name>
        <param>
          <type>int</type>
          <declname>includedStates</declname>
          <defval><ref refid="classwx_property_grid_interface_1acd38be5728243d99365e0f371b6c19aea19c3af2d76e93bca4d687865b1ea27f4" kindref="member">AllStates</ref></defval>
        </param>
        <briefdescription>
<para>Used to acquire user-editable state (selected property, expanded properties, scrolled position, splitter positions). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>includedStates</parametername>
</parameternamelist>
<parameterdescription>
<para>Which parts of state to include. See <ref refid="classwx_property_grid_interface_1propgridinterface_editablestate_flags" kindref="member">list of editable state flags</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="842" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1a5df440361d9e85f3a48d79d7b45667e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxPropertyGridInterface::SetColumnProportion</definition>
        <argsstring>(unsigned int column, int proportion)</argsstring>
        <name>SetColumnProportion</name>
        <param>
          <type>unsigned int</type>
          <declname>column</declname>
        </param>
        <param>
          <type>int</type>
          <declname>proportion</declname>
        </param>
        <briefdescription>
<para>Set proportion of an auto-stretchable column. </para>
        </briefdescription>
        <detaileddescription>
<para>wxPG_SPLITTER_AUTO_CENTER window style needs to be used to indicate that columns are auto- resizable.</para>
<para><simplesect kind="return"><para>Returns false on failure.</para>
</simplesect>
<simplesect kind="remark"><para>You should call this for individual pages of <ref refid="classwx_property_grid_manager" kindref="compound">wxPropertyGridManager</ref> (if used).</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classwx_property_grid_interface_1a2a48b35d9b0542104902b28edecf15d1" kindref="member">GetColumnProportion()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="865" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1a129a37f9d87a2a08516772de9860432d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxPropertyGridInterface::SetPropertyAttribute</definition>
        <argsstring>(wxPGPropArg id, const wxString &amp;attrName, wxVariant value, long argFlags=0)</argsstring>
        <name>SetPropertyAttribute</name>
        <param>
          <type><ref refid="propgridiface_8h_1a3f566131b8cbb5f0e282b3db4f5c501c" kindref="member">wxPGPropArg</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>attrName</declname>
        </param>
        <param>
          <type><ref refid="classwx_variant" kindref="compound">wxVariant</ref></type>
          <declname>value</declname>
        </param>
        <param>
          <type>long</type>
          <declname>argFlags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Sets an attribute for this property. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Name or pointer to a property. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>attrName</parametername>
</parameternamelist>
<parameterdescription>
<para>Text identifier of attribute. See <ref refid="property_8h_1propgrid_property_attributes" kindref="member">wxPropertyGrid Property Attribute Identifiers</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of attribute. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>argFlags</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional. Use wxPG_RECURSE to set the attribute to child properties recursively.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para><itemizedlist>
<listitem><para>Setting attribute&apos;s value to wxNullVariant will simply remove it from property&apos;s set of attributes.</para>
</listitem><listitem><para>Property is refreshed with new settings. </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="885" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1a9ae755985b70254e3e8a27a629c3fead" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxPropertyGridInterface::SetPropertyAttributeAll</definition>
        <argsstring>(const wxString &amp;attrName, wxVariant value)</argsstring>
        <name>SetPropertyAttributeAll</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>attrName</declname>
        </param>
        <param>
          <type><ref refid="classwx_variant" kindref="compound">wxVariant</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Sets property attribute for all applicable properties. </para>
        </briefdescription>
        <detaileddescription>
<para>Be sure to use this method only after all properties have been added to the grid.</para>
<para><simplesect kind="remark"><para>Properties are refreshed with new settings. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="896" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1a5727a38c6fa10713bac1b4fe6e90991c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxPropertyGridInterface::SetPropertyBackgroundColour</definition>
        <argsstring>(wxPGPropArg id, const wxColour &amp;colour, int flags=wxPG_RECURSE)</argsstring>
        <name>SetPropertyBackgroundColour</name>
        <param>
          <type><ref refid="propgridiface_8h_1a3f566131b8cbb5f0e282b3db4f5c501c" kindref="member">wxPGPropArg</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_colour" kindref="compound">wxColour</ref> &amp;</type>
          <declname>colour</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
          <defval><ref refid="propgridiface_8h_1ae2e5452962f3a4cdaca5b55846514a4eac9c20676ced7bcd3ecbd227bdc3f70da" kindref="member">wxPG_RECURSE</ref></defval>
        </param>
        <briefdescription>
<para>Sets background colour of given property. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Property name or pointer.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>colour</parametername>
</parameternamelist>
<parameterdescription>
<para>New background colour.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Default is wxPG_RECURSE which causes colour to be set recursively. Omit this flag to only set colour for the property in question and not any of its children.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para><itemizedlist>
<listitem><para>If category is tried to set recursively, only its children are affected.</para>
</listitem><listitem><para>Property is redrawn with new colour. </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="916" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1afd6721e817062d6c9dbb522334c029a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxPropertyGridInterface::SetPropertyCell</definition>
        <argsstring>(wxPGPropArg id, int column, const wxString &amp;text=wxEmptyString, const wxBitmap &amp;bitmap=wxNullBitmap, const wxColour &amp;fgCol=wxNullColour, const wxColour &amp;bgCol=wxNullColour)</argsstring>
        <name>SetPropertyCell</name>
        <param>
          <type><ref refid="propgridiface_8h_1a3f566131b8cbb5f0e282b3db4f5c501c" kindref="member">wxPGPropArg</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>int</type>
          <declname>column</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>text</declname>
          <defval><ref refid="interface_2wx_2string_8h_1a9a321d587166a30017b608dd2d234033" kindref="member">wxEmptyString</ref></defval>
        </param>
        <param>
          <type>const <ref refid="classwx_bitmap" kindref="compound">wxBitmap</ref> &amp;</type>
          <declname>bitmap</declname>
          <defval><ref refid="interface_2wx_2bitmap_8h_1a2947690e84b8fdb2e37b79a4af8f8a21" kindref="member">wxNullBitmap</ref></defval>
        </param>
        <param>
          <type>const <ref refid="classwx_colour" kindref="compound">wxColour</ref> &amp;</type>
          <declname>fgCol</declname>
          <defval><ref refid="colour_8h_1a882fc9395ce82080f0c2c91ca04731d6" kindref="member">wxNullColour</ref></defval>
        </param>
        <param>
          <type>const <ref refid="classwx_colour" kindref="compound">wxColour</ref> &amp;</type>
          <declname>bgCol</declname>
          <defval><ref refid="colour_8h_1a882fc9395ce82080f0c2c91ca04731d6" kindref="member">wxNullColour</ref></defval>
        </param>
        <briefdescription>
<para>Sets text, bitmap, and colours for given column&apos;s cell. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para><itemizedlist>
<listitem><para>You can set label cell by using column 0.</para>
</listitem><listitem><para>You can use wxPG_LABEL as text to use default text for column. </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="927" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1ab65193f9761bc7b63141ff115db00efd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxPropertyGridInterface::SetPropertyClientData</definition>
        <argsstring>(wxPGPropArg id, void *clientData)</argsstring>
        <name>SetPropertyClientData</name>
        <param>
          <type><ref refid="propgridiface_8h_1a3f566131b8cbb5f0e282b3db4f5c501c" kindref="member">wxPGPropArg</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>clientData</declname>
        </param>
        <briefdescription>
<para>Sets client data (void*) of a property. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>This untyped client data has to be deleted manually. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="940" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1a4ae803a65a42cd1dd1acdf9694718045" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxPropertyGridInterface::SetPropertyColoursToDefault</definition>
        <argsstring>(wxPGPropArg id, int flags=wxPG_DONT_RECURSE)</argsstring>
        <name>SetPropertyColoursToDefault</name>
        <param>
          <type><ref refid="propgridiface_8h_1a3f566131b8cbb5f0e282b3db4f5c501c" kindref="member">wxPGPropArg</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
          <defval><ref refid="propgridiface_8h_1ae2e5452962f3a4cdaca5b55846514a4eaf9ff01f6a75e8ac59fd54089cb0509cb" kindref="member">wxPG_DONT_RECURSE</ref></defval>
        </param>
        <briefdescription>
<para>Resets text and background colours of given property. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Property name or pointer.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Default is wxPG_DONT_RECURSE which causes colour to be reset only for the property in question (for backward compatibility).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para><itemizedlist>
<listitem><para>If category is tried to set recursively, only its children are affected.</para>
</listitem><listitem><para>Property is redrawn with new colours. </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="956" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1aff961af9dd2787fb97f510ea5ce46407" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxPropertyGridInterface::SetPropertyEditor</definition>
        <argsstring>(wxPGPropArg id, const wxPGEditor *editor)</argsstring>
        <name>SetPropertyEditor</name>
        <param>
          <type><ref refid="propgridiface_8h_1a3f566131b8cbb5f0e282b3db4f5c501c" kindref="member">wxPGPropArg</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_p_g_editor" kindref="compound">wxPGEditor</ref> *</type>
          <declname>editor</declname>
        </param>
        <briefdescription>
<para>Sets editor for a property. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Property name or pointer to a property. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>editor</parametername>
</parameternamelist>
<parameterdescription>
<para>For builtin editors, use wxPGEditor_X, where X is builtin editor&apos;s name (TextCtrl, Choice, etc. see <ref refid="classwx_p_g_editor" kindref="compound">wxPGEditor</ref> documentation for full list).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
For custom editors, use pointer you received from <ref refid="classwx_property_grid_1ac92b691f09d03dd670932aaa7dd62291" kindref="member">wxPropertyGrid::RegisterEditorClass()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="970" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1a7155520a900a212c6ba48924a0398817" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxPropertyGridInterface::SetPropertyEditor</definition>
        <argsstring>(wxPGPropArg id, const wxString &amp;editorName)</argsstring>
        <name>SetPropertyEditor</name>
        <param>
          <type><ref refid="propgridiface_8h_1a3f566131b8cbb5f0e282b3db4f5c501c" kindref="member">wxPGPropArg</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>editorName</declname>
        </param>
        <briefdescription>
<para>Sets editor control of a property. </para>
        </briefdescription>
        <detaileddescription>
<para>As editor argument, use editor name string, such as &quot;TextCtrl&quot; or &quot;Choice&quot;. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="976" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1ad7cc77546762cc92e69078d6ac161c63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxPropertyGridInterface::SetPropertyLabel</definition>
        <argsstring>(wxPGPropArg id, const wxString &amp;newproplabel)</argsstring>
        <name>SetPropertyLabel</name>
        <param>
          <type><ref refid="propgridiface_8h_1a3f566131b8cbb5f0e282b3db4f5c501c" kindref="member">wxPGPropArg</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>newproplabel</declname>
        </param>
        <briefdescription>
<para>Sets label of a property. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para><itemizedlist>
<listitem><para>Properties under same parent may have same labels. However, property names must still remain unique. </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="985" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1af7b3c2349b7293076a223720274921e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxPropertyGridInterface::SetPropertyName</definition>
        <argsstring>(wxPGPropArg id, const wxString &amp;newName)</argsstring>
        <name>SetPropertyName</name>
        <param>
          <type><ref refid="propgridiface_8h_1a3f566131b8cbb5f0e282b3db4f5c501c" kindref="member">wxPGPropArg</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>newName</declname>
        </param>
        <briefdescription>
<para>Sets name of a property. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Name or pointer of property which name to change.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>newName</parametername>
</parameternamelist>
<parameterdescription>
<para>New name for property. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="996" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1af5442c56a869f8f03c530a0d34555cd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxPropertyGridInterface::SetPropertyReadOnly</definition>
        <argsstring>(wxPGPropArg id, bool set=true, int flags=wxPG_RECURSE)</argsstring>
        <name>SetPropertyReadOnly</name>
        <param>
          <type><ref refid="propgridiface_8h_1a3f566131b8cbb5f0e282b3db4f5c501c" kindref="member">wxPGPropArg</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>set</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
          <defval><ref refid="propgridiface_8h_1ae2e5452962f3a4cdaca5b55846514a4eac9c20676ced7bcd3ecbd227bdc3f70da" kindref="member">wxPG_RECURSE</ref></defval>
        </param>
        <briefdescription>
<para>Sets property (and, recursively, its children) to have read-only value. </para>
        </briefdescription>
        <detaileddescription>
<para>In other words, user cannot change the value in the editor, but they can still copy it.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Property name or pointer.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>set</parametername>
</parameternamelist>
<parameterdescription>
<para>Use true to enable read-only, false to disable it.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>By default changes are applied recursively. Set this parameter to wxPG_DONT_RECURSE to prevent this.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para><itemizedlist>
<listitem><para>This is mainly for use with textctrl editor. Only some other editors fully support it.</para>
</listitem><listitem><para>Property is refreshed with new settings. </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="1018" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1ad0354321e04ed670c1d4904ef68f9ea0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxPropertyGridInterface::SetPropertyValueUnspecified</definition>
        <argsstring>(wxPGPropArg id)</argsstring>
        <name>SetPropertyValueUnspecified</name>
        <param>
          <type><ref refid="propgridiface_8h_1a3f566131b8cbb5f0e282b3db4f5c501c" kindref="member">wxPGPropArg</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Sets property&apos;s value to unspecified. </para>
        </briefdescription>
        <detaileddescription>
<para>If it has children (it may be category), then the same thing is done to them. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="1025" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1a85caa9196b0278e844df1af5f12c800b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxPropertyGridInterface::SetPropertyValues</definition>
        <argsstring>(const wxVariantList &amp;list, wxPGPropArg defaultCategory=wxNullProperty)</argsstring>
        <name>SetPropertyValues</name>
        <param>
          <type>const wxVariantList &amp;</type>
          <declname>list</declname>
        </param>
        <param>
          <type><ref refid="propgridiface_8h_1a3f566131b8cbb5f0e282b3db4f5c501c" kindref="member">wxPGPropArg</ref></type>
          <declname>defaultCategory</declname>
          <defval><ref refid="property_8h_1a4d056e40c12b986268ac5574a298e7ba" kindref="member">wxNullProperty</ref></defval>
        </param>
        <briefdescription>
<para>Sets property values from a list of wxVariants. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="1030" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1a59408c331ac19855ce3b55ff26f82a38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxPropertyGridInterface::SetPropertyValues</definition>
        <argsstring>(const wxVariant &amp;list, wxPGPropArg defaultCategory=wxNullProperty)</argsstring>
        <name>SetPropertyValues</name>
        <param>
          <type>const <ref refid="classwx_variant" kindref="compound">wxVariant</ref> &amp;</type>
          <declname>list</declname>
        </param>
        <param>
          <type><ref refid="propgridiface_8h_1a3f566131b8cbb5f0e282b3db4f5c501c" kindref="member">wxPGPropArg</ref></type>
          <declname>defaultCategory</declname>
          <defval><ref refid="property_8h_1a4d056e40c12b986268ac5574a298e7ba" kindref="member">wxNullProperty</ref></defval>
        </param>
        <briefdescription>
<para>Sets property values from a list of wxVariants. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="1036" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1a5793ea3ef9afa47fe2c1c5bf437dd583" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxPropertyGridInterface::SetPropertyHelpString</definition>
        <argsstring>(wxPGPropArg id, const wxString &amp;helpString)</argsstring>
        <name>SetPropertyHelpString</name>
        <param>
          <type><ref refid="propgridiface_8h_1a3f566131b8cbb5f0e282b3db4f5c501c" kindref="member">wxPGPropArg</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>helpString</declname>
        </param>
        <briefdescription>
<para>Associates the help string with property. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>By default, text is shown either in the manager&apos;s "description" text box or in the status bar. If extra window style wxPG_EX_HELP_AS_TOOLTIPS is used, then the text will appear as a tooltip. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="1047" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1a88befed8aa91d5c6e62844da2166bb3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxPropertyGridInterface::SetPropertyImage</definition>
        <argsstring>(wxPGPropArg id, wxBitmap &amp;bmp)</argsstring>
        <name>SetPropertyImage</name>
        <param>
          <type><ref refid="propgridiface_8h_1a3f566131b8cbb5f0e282b3db4f5c501c" kindref="member">wxPGPropArg</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="classwx_bitmap" kindref="compound">wxBitmap</ref> &amp;</type>
          <declname>bmp</declname>
        </param>
        <briefdescription>
<para>Set <ref refid="classwx_bitmap" kindref="compound">wxBitmap</ref> in front of the value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>Bitmap will be scaled to a size returned by <ref refid="classwx_property_grid_1a5b88b50c8b8ca6d42ddedb55b8e189fa" kindref="member">wxPropertyGrid::GetImageSize()</ref>; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="1055" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1a51ae4dc2d3732d6e681c5a474abc0da9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxPropertyGridInterface::SetPropertyMaxLength</definition>
        <argsstring>(wxPGPropArg id, int maxLen)</argsstring>
        <name>SetPropertyMaxLength</name>
        <param>
          <type><ref refid="propgridiface_8h_1a3f566131b8cbb5f0e282b3db4f5c501c" kindref="member">wxPGPropArg</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>int</type>
          <declname>maxLen</declname>
        </param>
        <briefdescription>
<para>Sets maximum length of text in property text editor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Property name or pointer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxLen</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of characters of the text the user can enter in the text editor. If it is 0, the length is not limited and the text can be as long as it is supported by the underlying native text control widget. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns true if maximum length was set. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classwx_p_g_property_1aa74671893440ce2a0f2a0e47ba897ad5" kindref="member">wxPGProperty::SetMaxLength</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="1072" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1ab2249b7bb57055b3620cb180956353db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxPropertyGridInterface::SetPropertyTextColour</definition>
        <argsstring>(wxPGPropArg id, const wxColour &amp;colour, int flags=wxPG_RECURSE)</argsstring>
        <name>SetPropertyTextColour</name>
        <param>
          <type><ref refid="propgridiface_8h_1a3f566131b8cbb5f0e282b3db4f5c501c" kindref="member">wxPGPropArg</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_colour" kindref="compound">wxColour</ref> &amp;</type>
          <declname>colour</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
          <defval><ref refid="propgridiface_8h_1ae2e5452962f3a4cdaca5b55846514a4eac9c20676ced7bcd3ecbd227bdc3f70da" kindref="member">wxPG_RECURSE</ref></defval>
        </param>
        <briefdescription>
<para>Sets text colour of given property. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Property name or pointer.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>colour</parametername>
</parameternamelist>
<parameterdescription>
<para>New text colour.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Default is wxPG_RECURSE which causes colour to be set recursively. Omit this flag to only set colour for the property in question and not any of its children.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para><itemizedlist>
<listitem><para>If category is tried to set recursively, only its children are affected.</para>
</listitem><listitem><para>Property is redrawn with new colour. </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="1093" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1ad83fe8ad87751101316345a14133c45f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxPropertyGridInterface::SetPropertyValidator</definition>
        <argsstring>(wxPGPropArg id, const wxValidator &amp;validator)</argsstring>
        <name>SetPropertyValidator</name>
        <param>
          <type><ref refid="propgridiface_8h_1a3f566131b8cbb5f0e282b3db4f5c501c" kindref="member">wxPGPropArg</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_validator" kindref="compound">wxValidator</ref> &amp;</type>
          <declname>validator</declname>
        </param>
        <briefdescription>
<para>Sets validator of a property. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="1100" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1aa652e127ce0c9d4e80821cbdcfe4983c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxPropertyGridInterface::SetPropertyValue</definition>
        <argsstring>(wxPGPropArg id, long value)</argsstring>
        <name>SetPropertyValue</name>
        <param>
          <type><ref refid="propgridiface_8h_1a3f566131b8cbb5f0e282b3db4f5c501c" kindref="member">wxPGPropArg</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>long</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Sets value (long integer) of a property. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="1103" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1a7f13128f8275004348ec252bdad097b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxPropertyGridInterface::SetPropertyValue</definition>
        <argsstring>(wxPGPropArg id, int value)</argsstring>
        <name>SetPropertyValue</name>
        <param>
          <type><ref refid="propgridiface_8h_1a3f566131b8cbb5f0e282b3db4f5c501c" kindref="member">wxPGPropArg</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Sets value (integer) of a property. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="1106" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1afc31048af8214a81b9fc24daaa13b56e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxPropertyGridInterface::SetPropertyValue</definition>
        <argsstring>(wxPGPropArg id, double value)</argsstring>
        <name>SetPropertyValue</name>
        <param>
          <type><ref refid="propgridiface_8h_1a3f566131b8cbb5f0e282b3db4f5c501c" kindref="member">wxPGPropArg</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Sets value (floating point) of a property. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="1109" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1ab3c7f74d260993c2bb679c37dc7ae69b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxPropertyGridInterface::SetPropertyValue</definition>
        <argsstring>(wxPGPropArg id, bool value)</argsstring>
        <name>SetPropertyValue</name>
        <param>
          <type><ref refid="propgridiface_8h_1a3f566131b8cbb5f0e282b3db4f5c501c" kindref="member">wxPGPropArg</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Sets value (bool) of a property. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="1112" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1ab1d80c46489bbad43ce04c7e94563557" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxPropertyGridInterface::SetPropertyValue</definition>
        <argsstring>(wxPGPropArg id, const wchar_t *value)</argsstring>
        <name>SetPropertyValue</name>
        <param>
          <type><ref refid="propgridiface_8h_1a3f566131b8cbb5f0e282b3db4f5c501c" kindref="member">wxPGPropArg</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>const wchar_t *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Sets value (wchar_t*) of a property. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="1115" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1a922f2d20801067aea27c7e316d1362a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxPropertyGridInterface::SetPropertyValue</definition>
        <argsstring>(wxPGPropArg id, const char *value)</argsstring>
        <name>SetPropertyValue</name>
        <param>
          <type><ref refid="propgridiface_8h_1a3f566131b8cbb5f0e282b3db4f5c501c" kindref="member">wxPGPropArg</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Sets value (char*) of a property. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="1118" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1a4d2cbc3ea3d92c59e87372f4a05cba99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxPropertyGridInterface::SetPropertyValue</definition>
        <argsstring>(wxPGPropArg id, const wxString &amp;value)</argsstring>
        <name>SetPropertyValue</name>
        <param>
          <type><ref refid="propgridiface_8h_1a3f566131b8cbb5f0e282b3db4f5c501c" kindref="member">wxPGPropArg</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Sets value (string) of a property. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="1121" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1a63730146d50d376c6e8cce75a88180c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxPropertyGridInterface::SetPropertyValue</definition>
        <argsstring>(wxPGPropArg id, const wxArrayString &amp;value)</argsstring>
        <name>SetPropertyValue</name>
        <param>
          <type><ref refid="propgridiface_8h_1a3f566131b8cbb5f0e282b3db4f5c501c" kindref="member">wxPGPropArg</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_array_string" kindref="compound">wxArrayString</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Sets value (<ref refid="classwx_array_string" kindref="compound">wxArrayString</ref>) of a property. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="1124" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1a5be36e8a366457d8d8000ec73554eb10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxPropertyGridInterface::SetPropertyValue</definition>
        <argsstring>(wxPGPropArg id, const wxDateTime &amp;value)</argsstring>
        <name>SetPropertyValue</name>
        <param>
          <type><ref refid="propgridiface_8h_1a3f566131b8cbb5f0e282b3db4f5c501c" kindref="member">wxPGPropArg</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_date_time" kindref="compound">wxDateTime</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Sets value (<ref refid="classwx_date_time" kindref="compound">wxDateTime</ref>) of a property. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="1127" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1ac14f033b18667d9965776c2d19dd7bb9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxPropertyGridInterface::SetPropertyValue</definition>
        <argsstring>(wxPGPropArg id, wxObject *value)</argsstring>
        <name>SetPropertyValue</name>
        <param>
          <type><ref refid="propgridiface_8h_1a3f566131b8cbb5f0e282b3db4f5c501c" kindref="member">wxPGPropArg</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="classwx_object" kindref="compound">wxObject</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Sets value (wxObject*) of a property. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="1130" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1a44f390c4041e9c84cc74f078e2c65fec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxPropertyGridInterface::SetPropertyValue</definition>
        <argsstring>(wxPGPropArg id, wxObject &amp;value)</argsstring>
        <name>SetPropertyValue</name>
        <param>
          <type><ref refid="propgridiface_8h_1a3f566131b8cbb5f0e282b3db4f5c501c" kindref="member">wxPGPropArg</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="classwx_object" kindref="compound">wxObject</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Sets value (<ref refid="classwx_object" kindref="compound">wxObject</ref>&amp;) of a property. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="1133" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1aad1fe3813ff98b201bd77071156994f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxPropertyGridInterface::SetPropertyValue</definition>
        <argsstring>(wxPGPropArg id, wxLongLong_t value)</argsstring>
        <name>SetPropertyValue</name>
        <param>
          <type><ref refid="propgridiface_8h_1a3f566131b8cbb5f0e282b3db4f5c501c" kindref="member">wxPGPropArg</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>wxLongLong_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Sets value (native 64-bit int) of a property. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="1136" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1a2c9201b2b3db8e8269406e02442718de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxPropertyGridInterface::SetPropertyValue</definition>
        <argsstring>(wxPGPropArg id, wxLongLong value)</argsstring>
        <name>SetPropertyValue</name>
        <param>
          <type><ref refid="propgridiface_8h_1a3f566131b8cbb5f0e282b3db4f5c501c" kindref="member">wxPGPropArg</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="classwx_long_long" kindref="compound">wxLongLong</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Sets value (<ref refid="classwx_long_long" kindref="compound">wxLongLong</ref>) of a property. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="1139" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1a2682d90e94b61601f6402bf930a98f1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxPropertyGridInterface::SetPropertyValue</definition>
        <argsstring>(wxPGPropArg id, wxULongLong_t value)</argsstring>
        <name>SetPropertyValue</name>
        <param>
          <type><ref refid="propgridiface_8h_1a3f566131b8cbb5f0e282b3db4f5c501c" kindref="member">wxPGPropArg</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>wxULongLong_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Sets value (native 64-bit unsigned int) of a property. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="1142" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1ab09d1232fa779f5183cba7763c52c564" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxPropertyGridInterface::SetPropertyValue</definition>
        <argsstring>(wxPGPropArg id, wxULongLong value)</argsstring>
        <name>SetPropertyValue</name>
        <param>
          <type><ref refid="propgridiface_8h_1a3f566131b8cbb5f0e282b3db4f5c501c" kindref="member">wxPGPropArg</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="classwx_u_long_long" kindref="compound">wxULongLong</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Sets value (<ref refid="classwx_u_long_long" kindref="compound">wxULongLong</ref>) of a property. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="1145" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1a51719a02370c475b2c61f32cd7b32ea0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxPropertyGridInterface::SetPropertyValue</definition>
        <argsstring>(wxPGPropArg id, const wxArrayInt &amp;value)</argsstring>
        <name>SetPropertyValue</name>
        <param>
          <type><ref refid="propgridiface_8h_1a3f566131b8cbb5f0e282b3db4f5c501c" kindref="member">wxPGPropArg</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>const <ref refid="dynarray_8h_1add87f199292e36ee87efd6d7f0d4ee66" kindref="member">wxArrayInt</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Sets value (wxArrayInt&amp;) of a property. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="1148" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1a26e16b29e987c5f3b6782e80b23dc956" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxPropertyGridInterface::SetPropertyValueString</definition>
        <argsstring>(wxPGPropArg id, const wxString &amp;value)</argsstring>
        <name>SetPropertyValueString</name>
        <param>
          <type><ref refid="propgridiface_8h_1a3f566131b8cbb5f0e282b3db4f5c501c" kindref="member">wxPGPropArg</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Sets value (<ref refid="classwx_string" kindref="compound">wxString</ref>) of a property. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>This method uses <ref refid="classwx_p_g_property_1a2e2d75f2a0345d5e4bd4d8445beae558" kindref="member">wxPGProperty::SetValueFromString()</ref>, which all properties should implement. This means that there should not be a type error, and instead the string is converted to property&apos;s actual value type. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="1158" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1a07d4eb7ae9fc0014cc72bb320e36fa4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxPropertyGridInterface::SetPropertyValue</definition>
        <argsstring>(wxPGPropArg id, wxVariant value)</argsstring>
        <name>SetPropertyValue</name>
        <param>
          <type><ref refid="propgridiface_8h_1a3f566131b8cbb5f0e282b3db4f5c501c" kindref="member">wxPGPropArg</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="classwx_variant" kindref="compound">wxVariant</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Sets value (<ref refid="classwx_variant" kindref="compound">wxVariant</ref>) of a property. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>Use <ref refid="classwx_property_grid_interface_1a03e60ec606ffc2a9e1ea944f832ba4d4" kindref="member">ChangePropertyValue()</ref> instead if you need to run through validation process and send property change event. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="1166" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1aff5b15494ae318a1475d4389e1abce72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxPropertyGridInterface::SetPropVal</definition>
        <argsstring>(wxPGPropArg id, wxVariant &amp;value)</argsstring>
        <name>SetPropVal</name>
        <param>
          <type><ref refid="propgridiface_8h_1a3f566131b8cbb5f0e282b3db4f5c501c" kindref="member">wxPGPropArg</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="classwx_variant" kindref="compound">wxVariant</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Sets value (<ref refid="classwx_variant" kindref="compound">wxVariant</ref>&amp;) of a property. </para>
        </briefdescription>
        <detaileddescription>
<para>Same as SetPropertyValue, but accepts reference. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="1172" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1ade72c97a047aa409dc7429010f640bb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxPropertyGridInterface::SetValidationFailureBehavior</definition>
        <argsstring>(int vfbFlags)</argsstring>
        <name>SetValidationFailureBehavior</name>
        <param>
          <type>int</type>
          <declname>vfbFlags</declname>
        </param>
        <briefdescription>
<para>Adjusts how <ref refid="classwx_property_grid" kindref="compound">wxPropertyGrid</ref> behaves when invalid value is entered in a property. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vfbFlags</parametername>
</parameternamelist>
<parameterdescription>
<para>See <ref refid="interface_2wx_2propgrid_2propgrid_8h_1propgrid_vfbflags" kindref="member">wxPropertyGrid Validation Failure behaviour Flags</ref> for possible values. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="1181" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1a68c73043fc89e18169207c0cee737852" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxPropertyGridInterface::Sort</definition>
        <argsstring>(int flags=0)</argsstring>
        <name>Sort</name>
        <param>
          <type>int</type>
          <declname>flags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Sorts all properties recursively. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>This can contain any of the following options: wxPG_SORT_TOP_LEVEL_ONLY: Only sort categories and their immediate children. Sorting done by wxPG_AUTO_SORT option uses this.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classwx_property_grid_interface_1a5e99b4ebcbdc6ee1c59d8284df0bfa8f" kindref="member">SortChildren</ref>, <ref refid="classwx_property_grid_1ad413c2a9f94db90466bc9039f928afe6" kindref="member">wxPropertyGrid::SetSortFunction</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="1194" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1a5e99b4ebcbdc6ee1c59d8284df0bfa8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxPropertyGridInterface::SortChildren</definition>
        <argsstring>(wxPGPropArg id, int flags=0)</argsstring>
        <name>SortChildren</name>
        <param>
          <type><ref refid="propgridiface_8h_1a3f566131b8cbb5f0e282b3db4f5c501c" kindref="member">wxPGPropArg</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Sorts children of a property. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Name or pointer to a property.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>This can contain any of the following options: wxPG_RECURSE: Sorts recursively.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classwx_property_grid_interface_1a68c73043fc89e18169207c0cee737852" kindref="member">Sort</ref>, <ref refid="classwx_property_grid_1ad413c2a9f94db90466bc9039f928afe6" kindref="member">wxPropertyGrid::SetSortFunction</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="1208" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1a2c4ed29f2d07bcec029315edecc27f87" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_p_g_property" kindref="compound">wxPGProperty</ref> *</type>
        <definition>wxPGProperty * wxPropertyGridInterface::GetPropertyByNameA</definition>
        <argsstring>(const wxString &amp;name) const</argsstring>
        <name>GetPropertyByNameA</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para><ref refid="classwx_property_grid_interface_1a89769670f290c83992b931d686dfe78d" kindref="member">GetPropertyByName()</ref> with assertion error message. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="1218" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1aa011608e46ea7ba1503d505c018113a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void wxPropertyGridInterface::RefreshProperty</definition>
        <argsstring>(wxPGProperty *p)=0</argsstring>
        <name>RefreshProperty</name>
        <reimplementedby refid="classwx_property_grid_page_1ac66be7baa5683eddb727d75dfddabd88">RefreshProperty</reimplementedby>
        <reimplementedby refid="classwx_property_grid_1a05cab6dc2fde0464176b86548b7bb12a">RefreshProperty</reimplementedby>
        <param>
          <type><ref refid="classwx_p_g_property" kindref="compound">wxPGProperty</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>This function reselects the property and may cause excess flicker, so to just call Refresh() on a rect of single property, call DrawItem() instead. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="1225" column="18"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classwx_property_grid_interface_1a38bd0419a578467da07d01aef288848d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void wxPropertyGridInterface::InitAllTypeHandlers</definition>
        <argsstring>()</argsstring>
        <name>InitAllTypeHandlers</name>
        <briefdescription>
<para>Initializes <emphasis>all</emphasis> property types. </para>
        </briefdescription>
        <detaileddescription>
<para>Causes references to most object files in the library, so calling this may cause significant increase in executable size when linking with static library. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="607" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1a330dc911b08378e967955f8a6a938612" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void wxPropertyGridInterface::RegisterAdditionalEditors</definition>
        <argsstring>()</argsstring>
        <name>RegisterAdditionalEditors</name>
        <briefdescription>
<para>Initializes additional property editors (SpinCtrl etc.). </para>
        </briefdescription>
        <detaileddescription>
<para>Causes references to most object files in the library, so calling this may cause significant increase in executable size when linking with static library. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="729" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1ac02e6f40e5c5138a40c99a4f7b98100b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void wxPropertyGridInterface::SetBoolChoices</definition>
        <argsstring>(const wxString &amp;trueChoice, const wxString &amp;falseChoice)</argsstring>
        <name>SetBoolChoices</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>trueChoice</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>falseChoice</declname>
        </param>
        <briefdescription>
<para>Sets strings listed in the choice dropdown of a <ref refid="classwx_bool_property" kindref="compound">wxBoolProperty</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Defaults are &quot;True&quot; and &quot;False&quot;, so changing them to, say, &quot;Yes&quot; and &quot;No&quot; may be useful in some less technical applications. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="850" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classwx_property_grid_interface_1a1f6eebe478d43a8a4f000c41561f84a0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_p_g_editor" kindref="compound">wxPGEditor</ref> *</type>
        <definition>static wxPGEditor * wxPropertyGridInterface::GetEditorByName</definition>
        <argsstring>(const wxString &amp;editorName)</argsstring>
        <name>GetEditorByName</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>editorName</declname>
        </param>
        <briefdescription>
<para>Returns editor pointer of editor with given name. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/propgrid/propgridiface.h" line="1213" column="23"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Most of the shared property manipulation interface shared by <ref refid="classwx_property_grid" kindref="compound">wxPropertyGrid</ref>, <ref refid="classwx_property_grid_page" kindref="compound">wxPropertyGridPage</ref>, and <ref refid="classwx_property_grid_manager" kindref="compound">wxPropertyGridManager</ref> is defined in this class. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="remark"><para><itemizedlist>
<listitem><para>In separate <ref refid="classwx_property_grid" kindref="compound">wxPropertyGrid</ref> component this class was known as wxPropertyContainerMethods.</para>
</listitem><listitem><para><ref refid="classwx_property_grid_interface" kindref="compound">wxPropertyGridInterface</ref>&apos;s property operation member functions all accept a special wxPGPropArg id argument, using which you can refer to properties either by their pointer (for performance) or by their name (for conveniency).</para>
</listitem></itemizedlist>
</para>
</simplesect>
<heading level="2"></heading>
</para>
<para>Library:<nonbreakablespace/><nonbreakablespace/><ref refid="page_libs_1page_libs_wxpropgrid" kindref="member">wxPropertyGrid</ref> &lt;&gt;&lt; =&apos;&apos;&gt;:&lt;/&gt;&amp;;&amp;;&lt; =&apos;&apos;&gt;\ &lt;/&gt;&lt;/&gt; </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>wxPropertyGrid</label>
        <link refid="classwx_property_grid"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>wxPropertyGridInterface</label>
        <link refid="classwx_property_grid_interface"/>
      </node>
      <node id="3">
        <label>wxPropertyGridManager</label>
        <link refid="classwx_property_grid_manager"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>wxPropertyGridPage</label>
        <link refid="classwx_property_grid_page"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="interface/wx/propgrid/propgridiface.h" line="123" column="1" bodyfile="interface/wx/propgrid/propgridiface.h" bodystart="124" bodyend="1226"/>
    <listofallmembers>
      <member refid="classwx_property_grid_interface_1acd38be5728243d99365e0f371b6c19aea19c3af2d76e93bca4d687865b1ea27f4" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>AllStates</name></member>
      <member refid="classwx_property_grid_interface_1a59678aa1808aa5c567e39f2aad41b70e" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>Append</name></member>
      <member refid="classwx_property_grid_interface_1a7e225cbdadd06b7a1470351d4e15e7bb" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>AppendIn</name></member>
      <member refid="classwx_property_grid_interface_1a4917f17cd9f415db313942157788e8bf" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>BeginAddChildren</name></member>
      <member refid="classwx_property_grid_interface_1a03e60ec606ffc2a9e1ea944f832ba4d4" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>ChangePropertyValue</name></member>
      <member refid="classwx_property_grid_interface_1a787e4282dbb85994af0e29a948efa98c" prot="public" virt="pure-virtual"><scope>wxPropertyGridInterface</scope><name>Clear</name></member>
      <member refid="classwx_property_grid_interface_1a52aca4e7bbec0d9ac775ad4b5492544e" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>ClearModifiedStatus</name></member>
      <member refid="classwx_property_grid_interface_1ad9630e6b319fafefcfac15c1060278dd" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>ClearSelection</name></member>
      <member refid="classwx_property_grid_interface_1adc64e1889b8be3f775f34e9c91087596" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>Collapse</name></member>
      <member refid="classwx_property_grid_interface_1a3acfb29c90820199472ee16d8be40cf2" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>CollapseAll</name></member>
      <member refid="classwx_property_grid_interface_1ad7f72b604efa4854a673ebb722b26c94" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>DeleteProperty</name></member>
      <member refid="classwx_property_grid_interface_1acd38be5728243d99365e0f371b6c19aea0619889c5d768946557ac361b5fff7e5" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>DescBoxState</name></member>
      <member refid="classwx_property_grid_interface_1ac2b62fc91927b5b4f9e9a95eebbb26d1" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>DisableProperty</name></member>
      <member refid="classwx_property_grid_interface_1acd38be5728243d99365e0f371b6c19ae" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>EditableStateFlags</name></member>
      <member refid="classwx_property_grid_interface_1a7718a5497b7e5211d847b5a8134bc2ab" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>EditorValidate</name></member>
      <member refid="classwx_property_grid_interface_1ab46cadeb40c717d902daef74005431bf" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>EnableProperty</name></member>
      <member refid="classwx_property_grid_interface_1a1715d4804457f8b44e9382b3127b0140" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>EndAddChildren</name></member>
      <member refid="classwx_property_grid_interface_1a9e37a22d7a60feb41f724119678b663e" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>Expand</name></member>
      <member refid="classwx_property_grid_interface_1a678020610f0af4140eda4726cd89d728" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>ExpandAll</name></member>
      <member refid="classwx_property_grid_interface_1acd38be5728243d99365e0f371b6c19aeaa59cf2646aedbb9c00aeb8754b11610b" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>ExpandedState</name></member>
      <member refid="classwx_property_grid_interface_1a2a48b35d9b0542104902b28edecf15d1" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>GetColumnProportion</name></member>
      <member refid="classwx_property_grid_interface_1a1f6eebe478d43a8a4f000c41561f84a0" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>GetEditorByName</name></member>
      <member refid="classwx_property_grid_interface_1a2d7d5e354ca38eb4e01d69ca367124b8" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>GetFirst</name></member>
      <member refid="classwx_property_grid_interface_1a2c005b9294b72f31661b1b58d873a654" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>GetFirst</name></member>
      <member refid="classwx_property_grid_interface_1a35cf0fe0d253761050b9e519bb9c4f50" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>GetFirstChild</name></member>
      <member refid="classwx_property_grid_interface_1a41ab8661411082563c8191f614f91007" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>GetIterator</name></member>
      <member refid="classwx_property_grid_interface_1a2dafbd380609c2118451a83d2822afec" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>GetIterator</name></member>
      <member refid="classwx_property_grid_interface_1acef8d8a08d18b0f78a29d52c96c85d8d" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>GetIterator</name></member>
      <member refid="classwx_property_grid_interface_1a490cb9347209f1827436bc9e4348f4bd" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>GetIterator</name></member>
      <member refid="classwx_property_grid_interface_1a605b3cc90bd3d87a0ac0c9e354055bca" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>GetPropertiesWithFlag</name></member>
      <member refid="classwx_property_grid_interface_1a396d1fe855d54da1d2e5813b03709b81" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>GetProperty</name></member>
      <member refid="classwx_property_grid_interface_1a95f58bae8097824c6561e66f851dbc30" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>GetPropertyAttribute</name></member>
      <member refid="classwx_property_grid_interface_1a7c34c3ed89283db7a868b82b0dd152dc" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>GetPropertyAttributes</name></member>
      <member refid="classwx_property_grid_interface_1a0f3901e92bdda989a25780dbd047ea16" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>GetPropertyBackgroundColour</name></member>
      <member refid="classwx_property_grid_interface_1a7c771578f84e696410eb5ff61e5b2428" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>GetPropertyByLabel</name></member>
      <member refid="classwx_property_grid_interface_1a89769670f290c83992b931d686dfe78d" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>GetPropertyByName</name></member>
      <member refid="classwx_property_grid_interface_1aea0120a83a8a5fa06213f7285284e7d4" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>GetPropertyByName</name></member>
      <member refid="classwx_property_grid_interface_1a2c4ed29f2d07bcec029315edecc27f87" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>GetPropertyByNameA</name></member>
      <member refid="classwx_property_grid_interface_1ab9d36ed12c9ddde39f33074727c692d3" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>GetPropertyCategory</name></member>
      <member refid="classwx_property_grid_interface_1ab6011a052c7d07588dd4207a83303796" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>GetPropertyClientData</name></member>
      <member refid="classwx_property_grid_interface_1a5a85dc855094acfd55ce7c192c596283" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>GetPropertyEditor</name></member>
      <member refid="classwx_property_grid_interface_1aaa51993cd303a144ff507281a07385d0" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>GetPropertyHelpString</name></member>
      <member refid="classwx_property_grid_interface_1a1975d6c6773807dd849f2112c734dbe9" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>GetPropertyImage</name></member>
      <member refid="classwx_property_grid_interface_1a873ed7081c083b42f45507691b083da1" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>GetPropertyLabel</name></member>
      <member refid="classwx_property_grid_interface_1ab107b3f96a158e498f648888149b3bf4" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>GetPropertyName</name></member>
      <member refid="classwx_property_grid_interface_1ad4a5556cb2b1e1b743c131000eaff3a2" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>GetPropertyParent</name></member>
      <member refid="classwx_property_grid_interface_1a28bbbd70337f95141b3d4166c7abe37f" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>GetPropertyTextColour</name></member>
      <member refid="classwx_property_grid_interface_1aed1a41d6b1fab79628710fbcc5f8176c" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>GetPropertyValidator</name></member>
      <member refid="classwx_property_grid_interface_1aa1164652240e4b157ce5250769af537e" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>GetPropertyValue</name></member>
      <member refid="classwx_property_grid_interface_1ab2695c50dee45a3bc1e9cad73f849efa" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>GetPropertyValueAsArrayInt</name></member>
      <member refid="classwx_property_grid_interface_1a1ae5322a1d63bd631792b0aa1f52c67b" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>GetPropertyValueAsArrayString</name></member>
      <member refid="classwx_property_grid_interface_1a6e1d46ecca2e644f456c3192a249de7c" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>GetPropertyValueAsBool</name></member>
      <member refid="classwx_property_grid_interface_1ac37c6ad3c7282e94c7480d134b0a4e08" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>GetPropertyValueAsDateTime</name></member>
      <member refid="classwx_property_grid_interface_1a59c9645db4dd84f18f0ff158244dea72" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>GetPropertyValueAsDouble</name></member>
      <member refid="classwx_property_grid_interface_1a54538c9a3c22cde2d6e5303ee6939041" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>GetPropertyValueAsInt</name></member>
      <member refid="classwx_property_grid_interface_1a1b4ed26e839e5784a67ab51335cafe47" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>GetPropertyValueAsLong</name></member>
      <member refid="classwx_property_grid_interface_1a59cc00724550cb53397a0fc43d3e963d" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>GetPropertyValueAsLongLong</name></member>
      <member refid="classwx_property_grid_interface_1a1f7a2cb0532030f919a4200ffc60bcf8" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>GetPropertyValueAsString</name></member>
      <member refid="classwx_property_grid_interface_1a63336486074709abd02d3c9ab8598716" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>GetPropertyValueAsULong</name></member>
      <member refid="classwx_property_grid_interface_1a738ca99d6b363c88d537b61f87c83aff" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>GetPropertyValueAsULongLong</name></member>
      <member refid="classwx_property_grid_interface_1ad3b171468f2b3999b98c44be4be5b45d" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>GetPropertyValues</name></member>
      <member refid="classwx_property_grid_interface_1a4ecb8a1c98dc75f4c1ca050b734c15be" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>GetSelectedProperties</name></member>
      <member refid="classwx_property_grid_interface_1a87c31d90e34f42f3e9defd349bfc8f60" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>GetSelection</name></member>
      <member refid="classwx_property_grid_interface_1a3cee9947d2bab8255d0e3233b7894504" prot="public" virt="virtual"><scope>wxPropertyGridInterface</scope><name>GetVIterator</name></member>
      <member refid="classwx_property_grid_interface_1aac3d5502e764989ed8b031a3d75b8814" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>HideProperty</name></member>
      <member refid="classwx_property_grid_interface_1a38bd0419a578467da07d01aef288848d" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>InitAllTypeHandlers</name></member>
      <member refid="classwx_property_grid_interface_1a56fec31d497b18e5f13728afc1a38f73" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>Insert</name></member>
      <member refid="classwx_property_grid_interface_1ae6c3257273def20ad19da1869c4b1590" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>Insert</name></member>
      <member refid="classwx_property_grid_interface_1a3b7cd671595d1b02c76d93b7eb303ad2" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>IsPropertyCategory</name></member>
      <member refid="classwx_property_grid_interface_1ae96712ca8d09280a360f18b4fc2d06bc" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>IsPropertyEnabled</name></member>
      <member refid="classwx_property_grid_interface_1a859151ce4ff84b0fdfa3c6ffee561bbc" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>IsPropertyExpanded</name></member>
      <member refid="classwx_property_grid_interface_1ab16a5a15a2b14c2fad6ee1fc10d1c92f" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>IsPropertyModified</name></member>
      <member refid="classwx_property_grid_interface_1ad01e5d14aaeea74bc89cec0ec92452a3" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>IsPropertySelected</name></member>
      <member refid="classwx_property_grid_interface_1ad4ad31fd598976aee488fcc8644b4ae3" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>IsPropertyShown</name></member>
      <member refid="classwx_property_grid_interface_1afd4bdbfa887850f46c3195a6a8f91f7d" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>IsPropertyValueUnspecified</name></member>
      <member refid="classwx_property_grid_interface_1aac3d13601fb3a97f531b86923b20d5ff" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>LimitPropertyEditing</name></member>
      <member refid="classwx_property_grid_interface_1acd38be5728243d99365e0f371b6c19aea37f63cb4a3bca8249c62a09dc6d973ff" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>PageState</name></member>
      <member refid="classwx_property_grid_interface_1a5e277a34b5e319621f6a1c083d572f5a" prot="public" virt="virtual"><scope>wxPropertyGridInterface</scope><name>RefreshGrid</name></member>
      <member refid="classwx_property_grid_interface_1aa011608e46ea7ba1503d505c018113a3" prot="public" virt="pure-virtual"><scope>wxPropertyGridInterface</scope><name>RefreshProperty</name></member>
      <member refid="classwx_property_grid_interface_1a330dc911b08378e967955f8a6a938612" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>RegisterAdditionalEditors</name></member>
      <member refid="classwx_property_grid_interface_1a6c94427855c15d4e0519ee713e222c66" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>RemoveProperty</name></member>
      <member refid="classwx_property_grid_interface_1a3710d271cf3971511742651b2ac04502" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>ReplaceProperty</name></member>
      <member refid="classwx_property_grid_interface_1aceb7f1ca6c7079c075d9876b94a2cb0f" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>RestoreEditableState</name></member>
      <member refid="classwx_property_grid_interface_1a3ab626269453b627e119367255c80ab0" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>SaveEditableState</name></member>
      <member refid="classwx_property_grid_interface_1acd38be5728243d99365e0f371b6c19aeaae0ce13a64f1cdf3e208e2ede6615d66" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>ScrollPosState</name></member>
      <member refid="classwx_property_grid_interface_1acd38be5728243d99365e0f371b6c19aeacf359fdb91a019696f4cd34644e624f3" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>SelectionState</name></member>
      <member refid="classwx_property_grid_interface_1ac02e6f40e5c5138a40c99a4f7b98100b" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>SetBoolChoices</name></member>
      <member refid="classwx_property_grid_interface_1a5df440361d9e85f3a48d79d7b45667e1" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>SetColumnProportion</name></member>
      <member refid="classwx_property_grid_interface_1a129a37f9d87a2a08516772de9860432d" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>SetPropertyAttribute</name></member>
      <member refid="classwx_property_grid_interface_1a9ae755985b70254e3e8a27a629c3fead" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>SetPropertyAttributeAll</name></member>
      <member refid="classwx_property_grid_interface_1a5727a38c6fa10713bac1b4fe6e90991c" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>SetPropertyBackgroundColour</name></member>
      <member refid="classwx_property_grid_interface_1afd6721e817062d6c9dbb522334c029a0" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>SetPropertyCell</name></member>
      <member refid="classwx_property_grid_interface_1ab65193f9761bc7b63141ff115db00efd" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>SetPropertyClientData</name></member>
      <member refid="classwx_property_grid_interface_1a4ae803a65a42cd1dd1acdf9694718045" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>SetPropertyColoursToDefault</name></member>
      <member refid="classwx_property_grid_interface_1aff961af9dd2787fb97f510ea5ce46407" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>SetPropertyEditor</name></member>
      <member refid="classwx_property_grid_interface_1a7155520a900a212c6ba48924a0398817" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>SetPropertyEditor</name></member>
      <member refid="classwx_property_grid_interface_1a5793ea3ef9afa47fe2c1c5bf437dd583" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>SetPropertyHelpString</name></member>
      <member refid="classwx_property_grid_interface_1a88befed8aa91d5c6e62844da2166bb3c" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>SetPropertyImage</name></member>
      <member refid="classwx_property_grid_interface_1ad7cc77546762cc92e69078d6ac161c63" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>SetPropertyLabel</name></member>
      <member refid="classwx_property_grid_interface_1a51ae4dc2d3732d6e681c5a474abc0da9" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>SetPropertyMaxLength</name></member>
      <member refid="classwx_property_grid_interface_1af7b3c2349b7293076a223720274921e5" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>SetPropertyName</name></member>
      <member refid="classwx_property_grid_interface_1af5442c56a869f8f03c530a0d34555cd2" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>SetPropertyReadOnly</name></member>
      <member refid="classwx_property_grid_interface_1ab2249b7bb57055b3620cb180956353db" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>SetPropertyTextColour</name></member>
      <member refid="classwx_property_grid_interface_1ad83fe8ad87751101316345a14133c45f" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>SetPropertyValidator</name></member>
      <member refid="classwx_property_grid_interface_1aa652e127ce0c9d4e80821cbdcfe4983c" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>SetPropertyValue</name></member>
      <member refid="classwx_property_grid_interface_1a7f13128f8275004348ec252bdad097b8" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>SetPropertyValue</name></member>
      <member refid="classwx_property_grid_interface_1afc31048af8214a81b9fc24daaa13b56e" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>SetPropertyValue</name></member>
      <member refid="classwx_property_grid_interface_1ab3c7f74d260993c2bb679c37dc7ae69b" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>SetPropertyValue</name></member>
      <member refid="classwx_property_grid_interface_1ab1d80c46489bbad43ce04c7e94563557" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>SetPropertyValue</name></member>
      <member refid="classwx_property_grid_interface_1a922f2d20801067aea27c7e316d1362a8" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>SetPropertyValue</name></member>
      <member refid="classwx_property_grid_interface_1a4d2cbc3ea3d92c59e87372f4a05cba99" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>SetPropertyValue</name></member>
      <member refid="classwx_property_grid_interface_1a63730146d50d376c6e8cce75a88180c4" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>SetPropertyValue</name></member>
      <member refid="classwx_property_grid_interface_1a5be36e8a366457d8d8000ec73554eb10" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>SetPropertyValue</name></member>
      <member refid="classwx_property_grid_interface_1ac14f033b18667d9965776c2d19dd7bb9" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>SetPropertyValue</name></member>
      <member refid="classwx_property_grid_interface_1a44f390c4041e9c84cc74f078e2c65fec" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>SetPropertyValue</name></member>
      <member refid="classwx_property_grid_interface_1aad1fe3813ff98b201bd77071156994f1" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>SetPropertyValue</name></member>
      <member refid="classwx_property_grid_interface_1a2c9201b2b3db8e8269406e02442718de" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>SetPropertyValue</name></member>
      <member refid="classwx_property_grid_interface_1a2682d90e94b61601f6402bf930a98f1c" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>SetPropertyValue</name></member>
      <member refid="classwx_property_grid_interface_1ab09d1232fa779f5183cba7763c52c564" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>SetPropertyValue</name></member>
      <member refid="classwx_property_grid_interface_1a51719a02370c475b2c61f32cd7b32ea0" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>SetPropertyValue</name></member>
      <member refid="classwx_property_grid_interface_1a07d4eb7ae9fc0014cc72bb320e36fa4f" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>SetPropertyValue</name></member>
      <member refid="classwx_property_grid_interface_1a85caa9196b0278e844df1af5f12c800b" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>SetPropertyValues</name></member>
      <member refid="classwx_property_grid_interface_1a59408c331ac19855ce3b55ff26f82a38" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>SetPropertyValues</name></member>
      <member refid="classwx_property_grid_interface_1a26e16b29e987c5f3b6782e80b23dc956" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>SetPropertyValueString</name></member>
      <member refid="classwx_property_grid_interface_1ad0354321e04ed670c1d4904ef68f9ea0" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>SetPropertyValueUnspecified</name></member>
      <member refid="classwx_property_grid_interface_1aff5b15494ae318a1475d4389e1abce72" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>SetPropVal</name></member>
      <member refid="classwx_property_grid_interface_1ade72c97a047aa409dc7429010f640bb6" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>SetValidationFailureBehavior</name></member>
      <member refid="classwx_property_grid_interface_1a68c73043fc89e18169207c0cee737852" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>Sort</name></member>
      <member refid="classwx_property_grid_interface_1a5e99b4ebcbdc6ee1c59d8284df0bfa8f" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>SortChildren</name></member>
      <member refid="classwx_property_grid_interface_1acd38be5728243d99365e0f371b6c19aea1cc473f6d94d75e3e97159ccd4a325d3" prot="public" virt="non-virtual"><scope>wxPropertyGridInterface</scope><name>SplitterPosState</name></member>
      <member refid="classwx_property_grid_interface_1a42cd83135362d4de8db6d5de968cd2ab" prot="public" virt="virtual"><scope>wxPropertyGridInterface</scope><name>~wxPropertyGridInterface</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
