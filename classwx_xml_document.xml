<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="classwx_xml_document" kind="class" language="C++" prot="public">
    <compoundname>wxXmlDocument</compoundname>
    <basecompoundref refid="classwx_object" prot="public" virt="non-virtual">wxObject</basecompoundref>
    <includes local="no">wx/xml/xml.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classwx_xml_document_1aa32a33f35c0f3f0a24490a763372d13c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxXmlDocument::wxXmlDocument</definition>
        <argsstring>()</argsstring>
        <name>wxXmlDocument</name>
        <briefdescription>
<para>Default constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/xml/xml.h" line="707" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classwx_xml_document_1acac7d814bbdfaf4b36de2acb5f1d3b8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxXmlDocument::wxXmlDocument</definition>
        <argsstring>(const wxXmlDocument &amp;doc)</argsstring>
        <name>wxXmlDocument</name>
        <param>
          <type>const <ref refid="classwx_xml_document" kindref="compound">wxXmlDocument</ref> &amp;</type>
          <declname>doc</declname>
        </param>
        <briefdescription>
<para>Copy constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>Deep copies all the XML tree of the given document. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/xml/xml.h" line="712" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classwx_xml_document_1acc24e6921eba36b9b0108a80eaa5ee9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxXmlDocument::wxXmlDocument</definition>
        <argsstring>(const wxString &amp;filename, const wxString &amp;encoding=&quot;UTF-8&quot;)</argsstring>
        <name>wxXmlDocument</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>encoding</declname>
          <defval>&quot;UTF-8&quot;</defval>
        </param>
        <briefdescription>
<para>Loads the given filename using the given encoding. </para>
        </briefdescription>
        <detaileddescription>
<para>See <ref refid="classwx_xml_document_1af0dfc897ac9fd69d67a0d8b5f00d23c2" kindref="member">Load()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/xml/xml.h" line="717" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classwx_xml_document_1a8a89e05266c37c99a1849aeb9eb1832a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxXmlDocument::wxXmlDocument</definition>
        <argsstring>(wxInputStream &amp;stream, const wxString &amp;encoding=&quot;UTF-8&quot;)</argsstring>
        <name>wxXmlDocument</name>
        <param>
          <type><ref refid="classwx_input_stream" kindref="compound">wxInputStream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>encoding</declname>
          <defval>&quot;UTF-8&quot;</defval>
        </param>
        <briefdescription>
<para>Loads the XML document from given stream using the given encoding. </para>
        </briefdescription>
        <detaileddescription>
<para>See <ref refid="classwx_xml_document_1af0dfc897ac9fd69d67a0d8b5f00d23c2" kindref="member">Load()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/xml/xml.h" line="723" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classwx_xml_document_1a7dcd1d859ef9d8da939685d4fa1edbdb" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual wxXmlDocument::~wxXmlDocument</definition>
        <argsstring>()</argsstring>
        <name>~wxXmlDocument</name>
        <briefdescription>
<para>Virtual destructor. </para>
        </briefdescription>
        <detaileddescription>
<para>Frees the document root node. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/xml/xml.h" line="729" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classwx_xml_document_1a03971c5dcde4411827c408ed273fbfe4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxXmlDocument::AppendToProlog</definition>
        <argsstring>(wxXmlNode *node)</argsstring>
        <name>AppendToProlog</name>
        <param>
          <type><ref refid="classwx_xml_node" kindref="compound">wxXmlNode</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Appends a Process Instruction or Comment node to the document prologue. </para>
        </briefdescription>
        <detaileddescription>
<para>Calling this function will create a prologue or attach the node to the end of an existing prologue.</para>
<para><simplesect kind="since"><para>2.9.2 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/xml/xml.h" line="739" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_xml_document_1ad3fd2c135d93f48a1fe897f6d7608926" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_xml_node" kindref="compound">wxXmlNode</ref> *</type>
        <definition>wxXmlNode * wxXmlDocument::DetachDocumentNode</definition>
        <argsstring>()</argsstring>
        <name>DetachDocumentNode</name>
        <briefdescription>
<para>Detaches the document node and returns it. </para>
        </briefdescription>
        <detaileddescription>
<para>The document node will be set to NULL and thus <ref refid="classwx_xml_document_1a48e23f3de3060e0aca46300797e1cb0e" kindref="member">IsOk()</ref> will return false after calling this function.</para>
<para>Note that the caller is responsible for deleting the returned node in order to avoid memory leaks.</para>
<para><simplesect kind="since"><para>2.9.2 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/xml/xml.h" line="752" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classwx_xml_document_1aa104769cbab3e839132cb451388e30f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_xml_node" kindref="compound">wxXmlNode</ref> *</type>
        <definition>wxXmlNode * wxXmlDocument::DetachRoot</definition>
        <argsstring>()</argsstring>
        <name>DetachRoot</name>
        <briefdescription>
<para>Detaches the root entity node and returns it. </para>
        </briefdescription>
        <detaileddescription>
<para>After calling this function, the document node will remain together with any prologue nodes, but <ref refid="classwx_xml_document_1a48e23f3de3060e0aca46300797e1cb0e" kindref="member">IsOk()</ref> will return false since the root entity will be missing.</para>
<para>Note that the caller is responsible for deleting the returned node in order to avoid memory leaks. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/xml/xml.h" line="764" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classwx_xml_document_1a8d8ba94ab6d39b26533c8333a60c112a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>wxString wxXmlDocument::GetEncoding</definition>
        <argsstring>() const</argsstring>
        <name>GetEncoding</name>
        <briefdescription>
<para>Returns encoding of in-memory representation of the document (same as passed to <ref refid="classwx_xml_document_1af0dfc897ac9fd69d67a0d8b5f00d23c2" kindref="member">Load()</ref> or constructor, defaults to UTF-8). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>this is meaningless in Unicode build where data are stored as <computeroutput>wchar_t*</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/xml/xml.h" line="772" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_xml_document_1acea42dc985b8367779b20c2527cd0f72" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
        <definition>const wxString &amp; wxXmlDocument::GetFileEncoding</definition>
        <argsstring>() const</argsstring>
        <name>GetFileEncoding</name>
        <briefdescription>
<para>Returns encoding of document (may be empty). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This is the encoding original file was saved in, <bold>not</bold> the encoding of in-memory representation! </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/xml/xml.h" line="780" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classwx_xml_document_1a65a5348117e6ca1fb58a4458c29eb951" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classwx_xml_doctype" kindref="compound">wxXmlDoctype</ref> &amp;</type>
        <definition>const wxXmlDoctype &amp; wxXmlDocument::GetDoctype</definition>
        <argsstring>() const</argsstring>
        <name>GetDoctype</name>
        <briefdescription>
<para>Returns the DOCTYPE declaration data for the document. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>3.1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/xml/xml.h" line="787" column="24"/>
      </memberdef>
      <memberdef kind="function" id="classwx_xml_document_1a7addec3fe7b61b033371d6a24055e0b7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="textfile_8h_1a6a6d37c2bb834f5ffba195db0eb6e023" kindref="member">wxTextFileType</ref></type>
        <definition>wxTextFileType wxXmlDocument::GetFileType</definition>
        <argsstring>() const</argsstring>
        <name>GetFileType</name>
        <briefdescription>
<para>Returns the output line ending format used for documents. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>3.1.1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/xml/xml.h" line="794" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classwx_xml_document_1a64e66bf3f9f5d598d86de6217835d313" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>wxString wxXmlDocument::GetEOL</definition>
        <argsstring>() const</argsstring>
        <name>GetEOL</name>
        <briefdescription>
<para>Returns the output line ending string used for documents. </para>
        </briefdescription>
        <detaileddescription>
<para>This string is determined by the last call to <ref refid="classwx_xml_document_1a113bfc7233d9fc67871da41480d30e46" kindref="member">SetFileType()</ref>.</para>
<para><simplesect kind="since"><para>3.1.1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/xml/xml.h" line="803" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_xml_document_1a523126d04ac3f5ed4d91d5a24bea3261" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_xml_node" kindref="compound">wxXmlNode</ref> *</type>
        <definition>wxXmlNode * wxXmlDocument::GetDocumentNode</definition>
        <argsstring>() const</argsstring>
        <name>GetDocumentNode</name>
        <briefdescription>
<para>Returns the document node of the document. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>2.9.2 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/xml/xml.h" line="810" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classwx_xml_document_1a3a218de47fb4a92db25e941dda8704d9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_xml_node" kindref="compound">wxXmlNode</ref> *</type>
        <definition>wxXmlNode * wxXmlDocument::GetRoot</definition>
        <argsstring>() const</argsstring>
        <name>GetRoot</name>
        <briefdescription>
<para>Returns the root element node of the document. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/xml/xml.h" line="815" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classwx_xml_document_1aad1fdee37f3ec403c3c456280f91babe" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
        <definition>const wxString &amp; wxXmlDocument::GetVersion</definition>
        <argsstring>() const</argsstring>
        <name>GetVersion</name>
        <briefdescription>
<para>Returns the version of document. </para>
        </briefdescription>
        <detaileddescription>
<para>This is the value in the <computeroutput>&lt;</computeroutput>?xml version=&quot;1.0&quot;?&gt; header of the XML document. If the version attribute was not explicitly given in the header, this function returns an empty string. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/xml/xml.h" line="824" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classwx_xml_document_1a48e23f3de3060e0aca46300797e1cb0e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxXmlDocument::IsOk</definition>
        <argsstring>() const</argsstring>
        <name>IsOk</name>
        <briefdescription>
<para>Returns true if the document has been loaded successfully. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/xml/xml.h" line="829" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_xml_document_1af0dfc897ac9fd69d67a0d8b5f00d23c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool wxXmlDocument::Load</definition>
        <argsstring>(const wxString &amp;filename, const wxString &amp;encoding=&quot;UTF-8&quot;, int flags=wxXMLDOC_NONE)</argsstring>
        <name>Load</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>encoding</declname>
          <defval>&quot;UTF-8&quot;</defval>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
          <defval><ref refid="xml_8h_1a67c02c1d8cdae74e1631d670238fe309a12c5758872ffa051b400ed628ea66990" kindref="member">wxXMLDOC_NONE</ref></defval>
        </param>
        <briefdescription>
<para>Parses <emphasis>filename</emphasis> as an xml document and loads its data. </para>
        </briefdescription>
        <detaileddescription>
<para>If <emphasis>flags</emphasis> does not contain wxXMLDOC_KEEP_WHITESPACE_NODES, then, while loading, all nodes of type <computeroutput>wxXML_TEXT_NODE</computeroutput> (see <ref refid="classwx_xml_node" kindref="compound">wxXmlNode</ref>) are automatically skipped if they contain whitespaces only.</para>
<para>The removal of these nodes makes the load process slightly faster and requires less memory however makes impossible to recreate exactly the loaded text with a <ref refid="classwx_xml_document_1a37418b38129f027a479b47a175e20f91" kindref="member">Save()</ref> call later. Read the initial description of this class for more info.</para>
<para>Returns true on success, false otherwise. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/xml/xml.h" line="845" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classwx_xml_document_1a7eaa35dc0416b24624e167dfd6319ed5" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool wxXmlDocument::Load</definition>
        <argsstring>(wxInputStream &amp;stream, const wxString &amp;encoding=&quot;UTF-8&quot;, int flags=wxXMLDOC_NONE)</argsstring>
        <name>Load</name>
        <param>
          <type><ref refid="classwx_input_stream" kindref="compound">wxInputStream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>encoding</declname>
          <defval>&quot;UTF-8&quot;</defval>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
          <defval><ref refid="xml_8h_1a67c02c1d8cdae74e1631d670238fe309a12c5758872ffa051b400ed628ea66990" kindref="member">wxXMLDOC_NONE</ref></defval>
        </param>
        <briefdescription>
<para>Like <ref refid="classwx_xml_document_1af0dfc897ac9fd69d67a0d8b5f00d23c2" kindref="member">Load(const wxString&amp;, const wxString&amp;, int)</ref> but takes the data from given input stream. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/xml/xml.h" line="852" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classwx_xml_document_1a37418b38129f027a479b47a175e20f91" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool wxXmlDocument::Save</definition>
        <argsstring>(const wxString &amp;filename, int indentstep=2) const</argsstring>
        <name>Save</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>int</type>
          <declname>indentstep</declname>
          <defval>2</defval>
        </param>
        <briefdescription>
<para>Saves XML tree creating a file named with given string. </para>
        </briefdescription>
        <detaileddescription>
<para>If <emphasis>indentstep</emphasis> is greater than or equal to zero, then, while saving, an automatic indentation is added with steps composed by indentstep spaces.</para>
<para>If <emphasis>indentstep</emphasis> is <computeroutput>wxXML_NO_INDENTATION</computeroutput>, then, automatic indentation is turned off. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/xml/xml.h" line="864" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classwx_xml_document_1a559d92877184f27d56e33f1c68349e17" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool wxXmlDocument::Save</definition>
        <argsstring>(wxOutputStream &amp;stream, int indentstep=2) const</argsstring>
        <name>Save</name>
        <param>
          <type><ref refid="classwx_output_stream" kindref="compound">wxOutputStream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>int</type>
          <declname>indentstep</declname>
          <defval>2</defval>
        </param>
        <briefdescription>
<para>Saves XML tree in the given output stream. </para>
        </briefdescription>
        <detaileddescription>
<para>See Save(const wxString&amp;, int) for a description of <emphasis>indentstep</emphasis>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/xml/xml.h" line="870" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classwx_xml_document_1a679fea32f0b9750cb871db840c61658c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxXmlDocument::SetDocumentNode</definition>
        <argsstring>(wxXmlNode *node)</argsstring>
        <name>SetDocumentNode</name>
        <param>
          <type><ref refid="classwx_xml_node" kindref="compound">wxXmlNode</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Sets the document node of this document. </para>
        </briefdescription>
        <detaileddescription>
<para>Deletes any previous document node. Use <ref refid="classwx_xml_document_1ad3fd2c135d93f48a1fe897f6d7608926" kindref="member">DetachDocumentNode()</ref> and then <ref refid="classwx_xml_document_1a679fea32f0b9750cb871db840c61658c" kindref="member">SetDocumentNode()</ref> if you want to replace the document node without deleting the old document tree.</para>
<para><simplesect kind="since"><para>2.9.2 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/xml/xml.h" line="881" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_xml_document_1a45859e3c657c0a10bbf758069551ca00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxXmlDocument::SetEncoding</definition>
        <argsstring>(const wxString &amp;enc)</argsstring>
        <name>SetEncoding</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>enc</declname>
        </param>
        <briefdescription>
<para>Sets the encoding of the document. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/xml/xml.h" line="886" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_xml_document_1aacce1b11ea4136ceee88e35a9475ab61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxXmlDocument::SetFileEncoding</definition>
        <argsstring>(const wxString &amp;encoding)</argsstring>
        <name>SetFileEncoding</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>encoding</declname>
        </param>
        <briefdescription>
<para>Sets the encoding of the file which will be used to save the document. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/xml/xml.h" line="891" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_xml_document_1a8d4c909a7a3634f5aa6f11ef7dd68839" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxXmlDocument::SetDoctype</definition>
        <argsstring>(const wxXmlDoctype &amp;doctype)</argsstring>
        <name>SetDoctype</name>
        <param>
          <type>const <ref refid="classwx_xml_doctype" kindref="compound">wxXmlDoctype</ref> &amp;</type>
          <declname>doctype</declname>
        </param>
        <briefdescription>
<para>Sets the data which will appear in the DOCTYPE declaration when the document is saved. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>3.1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/xml/xml.h" line="899" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_xml_document_1a113bfc7233d9fc67871da41480d30e46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxXmlDocument::SetFileType</definition>
        <argsstring>(wxTextFileType fileType)</argsstring>
        <name>SetFileType</name>
        <param>
          <type><ref refid="textfile_8h_1a6a6d37c2bb834f5ffba195db0eb6e023" kindref="member">wxTextFileType</ref></type>
          <declname>fileType</declname>
        </param>
        <briefdescription>
<para>Sets the output line ending formats when the document is saved. </para>
        </briefdescription>
        <detaileddescription>
<para>By default Unix file type is used, i.e. a single ASCII LF (10) character is used at the end of lines.</para>
<para><simplesect kind="since"><para>3.1.1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/xml/xml.h" line="909" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_xml_document_1ac5b5e19c90e268ffe10d420797c29aec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxXmlDocument::SetRoot</definition>
        <argsstring>(wxXmlNode *node)</argsstring>
        <name>SetRoot</name>
        <param>
          <type><ref refid="classwx_xml_node" kindref="compound">wxXmlNode</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Sets the root element node of this document. </para>
        </briefdescription>
        <detaileddescription>
<para>Will create the document node if necessary. Any previous root element node is deleted. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/xml/xml.h" line="917" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_xml_document_1a84705a38b23e60aa5bb4faa509ada74b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxXmlDocument::SetVersion</definition>
        <argsstring>(const wxString &amp;version)</argsstring>
        <name>SetVersion</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>version</declname>
        </param>
        <briefdescription>
<para>Sets the version of the XML file which will be used to save the document. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/xml/xml.h" line="922" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_xml_document_1a13a6572fed64852a661ff6948b584eb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_xml_document" kindref="compound">wxXmlDocument</ref> &amp;</type>
        <definition>wxXmlDocument &amp; wxXmlDocument::operator=</definition>
        <argsstring>(const wxXmlDocument &amp;doc)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classwx_xml_document" kindref="compound">wxXmlDocument</ref> &amp;</type>
          <declname>doc</declname>
        </param>
        <briefdescription>
<para>Deep copies the given document. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/xml/xml.h" line="927" column="19"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classwx_xml_document_1adf6a4ae7592f4f78ce0c77993e52c88f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_version_info" kindref="compound">wxVersionInfo</ref></type>
        <definition>static wxVersionInfo wxXmlDocument::GetLibraryVersionInfo</definition>
        <argsstring>()</argsstring>
        <name>GetLibraryVersionInfo</name>
        <briefdescription>
<para>Get expat library version information. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>2.9.2 </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classwx_version_info" kindref="compound">wxVersionInfo</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/xml/xml.h" line="935" column="26"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This class holds XML data/document as parsed by XML parser in the root node. </para>
    </briefdescription>
    <detaileddescription>
<para><ref refid="classwx_xml_document" kindref="compound">wxXmlDocument</ref> internally uses the expat library which comes with wxWidgets to parse the given stream.</para>
<para>A <ref refid="classwx_xml_document" kindref="compound">wxXmlDocument</ref> is in fact a list of <ref refid="classwx_xml_node" kindref="compound">wxXmlNode</ref> organised into a structure that reflects the XML tree being represented by the document.</para>
<para><simplesect kind="note"><para>Ownership is passed to the XML tree as each <ref refid="classwx_xml_node" kindref="compound">wxXmlNode</ref> is added to it, and this has two implications. Firstly, the <ref refid="classwx_xml_document" kindref="compound">wxXmlDocument</ref> takes responsibility for deleting the node so the user should not <computeroutput>delete</computeroutput> it; and secondly, a <ref refid="classwx_xml_node" kindref="compound">wxXmlNode</ref> must always be created on the heap and never on the stack.</para>
</simplesect>
A simple example of using XML classes is:</para>
<para><programlisting><codeline><highlight class="normal"><ref refid="classwx_xml_document" kindref="compound">wxXmlDocument</ref><sp/>doc;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!doc.<ref refid="classwx_xml_document_1af0dfc897ac9fd69d67a0d8b5f00d23c2" kindref="member">Load</ref>(</highlight><highlight class="stringliteral">&quot;myfile.xml&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Start<sp/>processing<sp/>the<sp/>XML<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(doc.<ref refid="classwx_xml_document_1a3a218de47fb4a92db25e941dda8704d9" kindref="member">GetRoot</ref>()-&gt;<ref refid="classwx_xml_node_1a8f7a253c34c02c0405d0c5db41278b26" kindref="member">GetName</ref>()<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;myroot-node&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Examine<sp/>prologue.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="classwx_xml_node" kindref="compound">wxXmlNode</ref><sp/>*prolog<sp/>=<sp/>doc.<ref refid="classwx_xml_document_1a523126d04ac3f5ed4d91d5a24bea3261" kindref="member">GetDocumentNode</ref>()-&gt;<ref refid="classwx_xml_node_1a73f0963e26f6ea42bff21906fbef878c" kindref="member">GetChildren</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(prolog)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(prolog-&gt;<ref refid="classwx_xml_node_1a85c85dcae55f6276eec1a448cc4d5683" kindref="member">GetType</ref>()<sp/>==<sp/><ref refid="xml_8h_1a8439c6a82632b0ef566fcadbcd9e7510adc8217435e23d2e3e9848a494b91c0a3" kindref="member">wxXML_PI_NODE</ref><sp/>&amp;&amp;<sp/>prolog-&gt;<ref refid="classwx_xml_node_1a8f7a253c34c02c0405d0c5db41278b26" kindref="member">GetName</ref>()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;target&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Process<sp/>Process<sp/>Instruction<sp/>(PI)<sp/>contents.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classwx_string" kindref="compound">wxString</ref><sp/>pi<sp/>=<sp/>prolog-&gt;<ref refid="classwx_xml_node_1a99da2ab6935b6c1990a648332b09da1c" kindref="member">GetContent</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="classwx_xml_node" kindref="compound">wxXmlNode</ref><sp/>*child<sp/>=<sp/>doc.<ref refid="classwx_xml_document_1a3a218de47fb4a92db25e941dda8704d9" kindref="member">GetRoot</ref>()-&gt;<ref refid="classwx_xml_node_1a73f0963e26f6ea42bff21906fbef878c" kindref="member">GetChildren</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(child)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(child-&gt;<ref refid="classwx_xml_node_1a8f7a253c34c02c0405d0c5db41278b26" kindref="member">GetName</ref>()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;tag1&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Process<sp/>text<sp/>enclosed<sp/>by<sp/>tag1/tag1.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classwx_string" kindref="compound">wxString</ref><sp/>content<sp/>=<sp/>child-&gt;<ref refid="classwx_xml_node_1aaf03f3e38191f68eae22b603dd40bc5c" kindref="member">GetNodeContent</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Process<sp/>attributes<sp/>of<sp/>tag1.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classwx_string" kindref="compound">wxString</ref><sp/>attrvalue1<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>child-&gt;<ref refid="classwx_xml_node_1a264331d3aa88064e2c56ff25209b90b7" kindref="member">GetAttribute</ref>(</highlight><highlight class="stringliteral">&quot;attr1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;default-value&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classwx_string" kindref="compound">wxString</ref><sp/>attrvalue2<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>child-&gt;<ref refid="classwx_xml_node_1a264331d3aa88064e2c56ff25209b90b7" kindref="member">GetAttribute</ref>(</highlight><highlight class="stringliteral">&quot;attr2&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;default-value&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(child-&gt;<ref refid="classwx_xml_node_1a8f7a253c34c02c0405d0c5db41278b26" kindref="member">GetName</ref>()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;tag2&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Process<sp/>tag2<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>child<sp/>=<sp/>child-&gt;<ref refid="classwx_xml_node_1aa159f74469f9ebe5fa830c38f656c60e" kindref="member">GetNext</ref>();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>Note that if you want to preserve the original formatting of the loaded file including whitespaces and indentation, you need to turn off whitespace-only textnode removal and automatic indentation. For example:</para>
<para><programlisting><codeline><highlight class="normal"><ref refid="classwx_xml_document" kindref="compound">wxXmlDocument</ref><sp/>doc;</highlight></codeline>
<codeline><highlight class="normal">doc.<ref refid="classwx_xml_document_1af0dfc897ac9fd69d67a0d8b5f00d23c2" kindref="member">Load</ref>(</highlight><highlight class="stringliteral">&quot;myfile.xml&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;UTF-8&quot;</highlight><highlight class="normal">,<sp/><ref refid="xml_8h_1a67c02c1d8cdae74e1631d670238fe309a29a94e8a018ce485ef0734942461d06a" kindref="member">wxXMLDOC_KEEP_WHITESPACE_NODES</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>myfile2.xml<sp/>will<sp/>be<sp/>identical<sp/>to<sp/>myfile.xml<sp/>saving<sp/>it<sp/>this<sp/>way:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc.<ref refid="classwx_xml_document_1a37418b38129f027a479b47a175e20f91" kindref="member">Save</ref>(</highlight><highlight class="stringliteral">&quot;myfile2.xml&quot;</highlight><highlight class="normal">,<sp/><ref refid="xml_8h_1afd40508fbfea9a6695a3e819d0850118" kindref="member">wxXML_NO_INDENTATION</ref>);</highlight></codeline>
</programlisting></para>
<para>Using default parameters, you will get a reformatted document which in general is different from the original loaded content:</para>
<para><programlisting><codeline><highlight class="normal"><ref refid="classwx_xml_document" kindref="compound">wxXmlDocument</ref><sp/>doc;</highlight></codeline>
<codeline><highlight class="normal">doc.<ref refid="classwx_xml_document_1af0dfc897ac9fd69d67a0d8b5f00d23c2" kindref="member">Load</ref>(</highlight><highlight class="stringliteral">&quot;myfile.xml&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">doc.<ref refid="classwx_xml_document_1a37418b38129f027a479b47a175e20f91" kindref="member">Save</ref>(</highlight><highlight class="stringliteral">&quot;myfile2.xml&quot;</highlight><highlight class="normal">);<sp/><sp/></highlight><highlight class="comment">//<sp/>myfile2.xml<sp/>!=<sp/>myfile.xml</highlight></codeline>
</programlisting></para>
<para><ref refid="classwx_xml_document" kindref="compound">wxXmlDocument</ref> can also be used to create documents. The following code gives an example of creating a simple document with two nested element nodes, the second of which has an attribute, and a text node. It also demonstrates how to write the resulting output to a <ref refid="classwx_string" kindref="compound">wxString</ref>:</para>
<para><programlisting><codeline><highlight class="comment">//<sp/>Create<sp/>a<sp/>document<sp/>and<sp/>add<sp/>the<sp/>root<sp/>node.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="classwx_xml_document" kindref="compound">wxXmlDocument</ref><sp/>xmlDoc;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="classwx_xml_node" kindref="compound">wxXmlNode</ref>*<sp/>root<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classwx_xml_node" kindref="compound">wxXmlNode</ref>(NULL,<sp/><ref refid="xml_8h_1a8439c6a82632b0ef566fcadbcd9e7510ab54c1350681613fc5de1a6ab85debed2" kindref="member">wxXML_ELEMENT_NODE</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Root&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">xmlDoc.<ref refid="classwx_xml_document_1ac5b5e19c90e268ffe10d420797c29aec" kindref="member">SetRoot</ref>(root);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>some<sp/>XML.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="classwx_xml_node" kindref="compound">wxXmlNode</ref>*<sp/>library<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classwx_xml_node" kindref="compound">wxXmlNode</ref><sp/>(root,<sp/><ref refid="xml_8h_1a8439c6a82632b0ef566fcadbcd9e7510ab54c1350681613fc5de1a6ab85debed2" kindref="member">wxXML_ELEMENT_NODE</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Library&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">library-&gt;<ref refid="classwx_xml_node_1a9a2012a18ff44037a6de74cb241e34e2" kindref="member">AddAttribute</ref>(</highlight><highlight class="stringliteral">&quot;type&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;CrossPlatformList&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><ref refid="classwx_xml_node" kindref="compound">wxXmlNode</ref>*<sp/>name<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classwx_xml_node" kindref="compound">wxXmlNode</ref>(library,<sp/><ref refid="xml_8h_1a8439c6a82632b0ef566fcadbcd9e7510ab54c1350681613fc5de1a6ab85debed2" kindref="member">wxXML_ELEMENT_NODE</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Name&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">name-&gt;<ref refid="classwx_xml_node_1a06a09a31e1f7531f3b37f29b89fe5a10" kindref="member">AddChild</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classwx_xml_node" kindref="compound">wxXmlNode</ref>(<ref refid="xml_8h_1a8439c6a82632b0ef566fcadbcd9e7510a7b3137b950d3341c9056f6d5eff10210" kindref="member">wxXML_TEXT_NODE</ref>,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;wxWidgets&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Write<sp/>the<sp/>output<sp/>to<sp/>a<sp/>wxString.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="classwx_string_output_stream" kindref="compound">wxStringOutputStream</ref><sp/>stream;</highlight></codeline>
<codeline><highlight class="normal">xmlDoc.<ref refid="classwx_xml_document_1a37418b38129f027a479b47a175e20f91" kindref="member">Save</ref>(stream);</highlight></codeline>
</programlisting></para>
<para>This will produce a document that looks something like the following:</para>
<para><programlisting><codeline><highlight class="normal">&lt;?xml<sp/>version=</highlight><highlight class="stringliteral">&quot;1.0&quot;</highlight><highlight class="normal"><sp/>encoding=</highlight><highlight class="stringliteral">&quot;UTF-8&quot;</highlight><highlight class="normal">?&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;Root&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;Library<sp/>type=</highlight><highlight class="stringliteral">&quot;CrossPlatformList&quot;</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;Name&gt;wxWidgets&lt;/Name&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;/Library&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;/Root&gt;</highlight></codeline>
</programlisting></para>
<para>If the root name value of the DOCTYPE is set, either by loading a file with a DOCTYPE declaration or by setting it directly with the SetDoctype member, then a DOCTYPE declaration will be added immediately after the XML declaration.</para>
<para><heading level="2"></heading>
</para>
<para>Library:<nonbreakablespace/><nonbreakablespace/><ref refid="page_libs_1page_libs_wxxml" kindref="member">wxXML</ref> &lt;&gt;&lt; =&apos;&apos;&gt;:&lt;/&gt;&amp;;&amp;;&lt; =&apos;&apos;&gt;\ &lt;/&gt;&lt;/&gt;</para>
<para><simplesect kind="see"><para><ref refid="classwx_xml_node" kindref="compound">wxXmlNode</ref>, <ref refid="classwx_xml_attribute" kindref="compound">wxXmlAttribute</ref>, <ref refid="classwx_xml_doctype" kindref="compound">wxXmlDoctype</ref> </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>wxObject</label>
        <link refid="classwx_object"/>
      </node>
      <node id="1">
        <label>wxXmlDocument</label>
        <link refid="classwx_xml_document"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>wxObject</label>
        <link refid="classwx_object"/>
        <childnode refid="3" relation="usage">
          <edgelabel>m_refData</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>wxObjectRefData</label>
        <link refid="classwx_object_ref_data"/>
      </node>
      <node id="1">
        <label>wxXmlDocument</label>
        <link refid="classwx_xml_document"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="interface/wx/xml/xml.h" line="701" column="1" bodyfile="interface/wx/xml/xml.h" bodystart="702" bodyend="936"/>
    <listofallmembers>
      <member refid="classwx_object_1a60204063f3cc3aa2fa1c7ff5bda9eb13" prot="protected" virt="non-virtual"><scope>wxXmlDocument</scope><name>AllocExclusive</name></member>
      <member refid="classwx_xml_document_1a03971c5dcde4411827c408ed273fbfe4" prot="public" virt="non-virtual"><scope>wxXmlDocument</scope><name>AppendToProlog</name></member>
      <member refid="classwx_object_1ac9c60b64c3757a5818b1123b197cd50d" prot="protected" virt="virtual"><scope>wxXmlDocument</scope><name>CloneRefData</name></member>
      <member refid="classwx_object_1a9c38fc7f7d0dd40d5d83f3eedf1fb817" prot="protected" virt="virtual"><scope>wxXmlDocument</scope><name>CreateRefData</name></member>
      <member refid="classwx_xml_document_1ad3fd2c135d93f48a1fe897f6d7608926" prot="public" virt="non-virtual"><scope>wxXmlDocument</scope><name>DetachDocumentNode</name></member>
      <member refid="classwx_xml_document_1aa104769cbab3e839132cb451388e30f8" prot="public" virt="non-virtual"><scope>wxXmlDocument</scope><name>DetachRoot</name></member>
      <member refid="classwx_object_1a9fd1bc8bc3a47c6e14e679a80e3cb8f4" prot="public" virt="virtual"><scope>wxXmlDocument</scope><name>GetClassInfo</name></member>
      <member refid="classwx_xml_document_1a65a5348117e6ca1fb58a4458c29eb951" prot="public" virt="non-virtual"><scope>wxXmlDocument</scope><name>GetDoctype</name></member>
      <member refid="classwx_xml_document_1a523126d04ac3f5ed4d91d5a24bea3261" prot="public" virt="non-virtual"><scope>wxXmlDocument</scope><name>GetDocumentNode</name></member>
      <member refid="classwx_xml_document_1a8d8ba94ab6d39b26533c8333a60c112a" prot="public" virt="non-virtual"><scope>wxXmlDocument</scope><name>GetEncoding</name></member>
      <member refid="classwx_xml_document_1a64e66bf3f9f5d598d86de6217835d313" prot="public" virt="non-virtual"><scope>wxXmlDocument</scope><name>GetEOL</name></member>
      <member refid="classwx_xml_document_1acea42dc985b8367779b20c2527cd0f72" prot="public" virt="non-virtual"><scope>wxXmlDocument</scope><name>GetFileEncoding</name></member>
      <member refid="classwx_xml_document_1a7addec3fe7b61b033371d6a24055e0b7" prot="public" virt="non-virtual"><scope>wxXmlDocument</scope><name>GetFileType</name></member>
      <member refid="classwx_xml_document_1adf6a4ae7592f4f78ce0c77993e52c88f" prot="public" virt="non-virtual"><scope>wxXmlDocument</scope><name>GetLibraryVersionInfo</name></member>
      <member refid="classwx_object_1a0e06d77b52ee4c44a31c7cb62c9a4b68" prot="public" virt="non-virtual"><scope>wxXmlDocument</scope><name>GetRefData</name></member>
      <member refid="classwx_xml_document_1a3a218de47fb4a92db25e941dda8704d9" prot="public" virt="non-virtual"><scope>wxXmlDocument</scope><name>GetRoot</name></member>
      <member refid="classwx_xml_document_1aad1fdee37f3ec403c3c456280f91babe" prot="public" virt="non-virtual"><scope>wxXmlDocument</scope><name>GetVersion</name></member>
      <member refid="classwx_object_1a3c7115ef4132dcee0c4fc34e84d7fced" prot="public" virt="non-virtual"><scope>wxXmlDocument</scope><name>IsKindOf</name></member>
      <member refid="classwx_xml_document_1a48e23f3de3060e0aca46300797e1cb0e" prot="public" virt="non-virtual"><scope>wxXmlDocument</scope><name>IsOk</name></member>
      <member refid="classwx_object_1a059373c494c2369d7db2a556efef8ecf" prot="public" virt="non-virtual"><scope>wxXmlDocument</scope><name>IsSameAs</name></member>
      <member refid="classwx_xml_document_1af0dfc897ac9fd69d67a0d8b5f00d23c2" prot="public" virt="virtual"><scope>wxXmlDocument</scope><name>Load</name></member>
      <member refid="classwx_xml_document_1a7eaa35dc0416b24624e167dfd6319ed5" prot="public" virt="virtual"><scope>wxXmlDocument</scope><name>Load</name></member>
      <member refid="classwx_object_1a9e31954530a0abd54982effc443ed2b8" prot="protected" virt="non-virtual"><scope>wxXmlDocument</scope><name>m_refData</name></member>
      <member refid="classwx_object_1a07b8f34f5afc5743195c5fed052f55d3" prot="public" virt="non-virtual"><scope>wxXmlDocument</scope><name>operator delete</name></member>
      <member refid="classwx_object_1a48f4a0e3f8d737ca8d6cd04c1bbf08f0" prot="public" virt="non-virtual"><scope>wxXmlDocument</scope><name>operator new</name></member>
      <member refid="classwx_xml_document_1a13a6572fed64852a661ff6948b584eb5" prot="public" virt="non-virtual"><scope>wxXmlDocument</scope><name>operator=</name></member>
      <member refid="classwx_object_1a2f6f1aa51fe9fc2b1415ca4211a90e9e" prot="public" virt="non-virtual"><scope>wxXmlDocument</scope><name>Ref</name></member>
      <member refid="classwx_xml_document_1a37418b38129f027a479b47a175e20f91" prot="public" virt="virtual"><scope>wxXmlDocument</scope><name>Save</name></member>
      <member refid="classwx_xml_document_1a559d92877184f27d56e33f1c68349e17" prot="public" virt="virtual"><scope>wxXmlDocument</scope><name>Save</name></member>
      <member refid="classwx_xml_document_1a8d4c909a7a3634f5aa6f11ef7dd68839" prot="public" virt="non-virtual"><scope>wxXmlDocument</scope><name>SetDoctype</name></member>
      <member refid="classwx_xml_document_1a679fea32f0b9750cb871db840c61658c" prot="public" virt="non-virtual"><scope>wxXmlDocument</scope><name>SetDocumentNode</name></member>
      <member refid="classwx_xml_document_1a45859e3c657c0a10bbf758069551ca00" prot="public" virt="non-virtual"><scope>wxXmlDocument</scope><name>SetEncoding</name></member>
      <member refid="classwx_xml_document_1aacce1b11ea4136ceee88e35a9475ab61" prot="public" virt="non-virtual"><scope>wxXmlDocument</scope><name>SetFileEncoding</name></member>
      <member refid="classwx_xml_document_1a113bfc7233d9fc67871da41480d30e46" prot="public" virt="non-virtual"><scope>wxXmlDocument</scope><name>SetFileType</name></member>
      <member refid="classwx_object_1afab780710f2adc1bb33310e27590140b" prot="public" virt="non-virtual"><scope>wxXmlDocument</scope><name>SetRefData</name></member>
      <member refid="classwx_xml_document_1ac5b5e19c90e268ffe10d420797c29aec" prot="public" virt="non-virtual"><scope>wxXmlDocument</scope><name>SetRoot</name></member>
      <member refid="classwx_xml_document_1a84705a38b23e60aa5bb4faa509ada74b" prot="public" virt="non-virtual"><scope>wxXmlDocument</scope><name>SetVersion</name></member>
      <member refid="classwx_object_1af51efc6b1ae632fc7f0cd7ebbce9fa36" prot="public" virt="non-virtual"><scope>wxXmlDocument</scope><name>UnRef</name></member>
      <member refid="classwx_object_1a74b40e42d19a4b9e9bec0b57d62a5725" prot="public" virt="non-virtual"><scope>wxXmlDocument</scope><name>UnShare</name></member>
      <member refid="classwx_object_1acaa378363a28af421ab56ad7b46eadf0" prot="public" virt="non-virtual"><scope>wxXmlDocument</scope><name>wxObject</name></member>
      <member refid="classwx_object_1a4721b4dc9b7aff0f30904ba2ea3954cf" prot="public" virt="non-virtual"><scope>wxXmlDocument</scope><name>wxObject</name></member>
      <member refid="classwx_xml_document_1aa32a33f35c0f3f0a24490a763372d13c" prot="public" virt="non-virtual"><scope>wxXmlDocument</scope><name>wxXmlDocument</name></member>
      <member refid="classwx_xml_document_1acac7d814bbdfaf4b36de2acb5f1d3b8c" prot="public" virt="non-virtual"><scope>wxXmlDocument</scope><name>wxXmlDocument</name></member>
      <member refid="classwx_xml_document_1acc24e6921eba36b9b0108a80eaa5ee9f" prot="public" virt="non-virtual"><scope>wxXmlDocument</scope><name>wxXmlDocument</name></member>
      <member refid="classwx_xml_document_1a8a89e05266c37c99a1849aeb9eb1832a" prot="public" virt="non-virtual"><scope>wxXmlDocument</scope><name>wxXmlDocument</name></member>
      <member refid="classwx_object_1a2a51aa8bfbab47ca2f051bcf84b3f35b" prot="public" virt="virtual"><scope>wxXmlDocument</scope><name>~wxObject</name></member>
      <member refid="classwx_xml_document_1a7dcd1d859ef9d8da939685d4fa1edbdb" prot="public" virt="virtual"><scope>wxXmlDocument</scope><name>~wxXmlDocument</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
