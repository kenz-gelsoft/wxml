<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="plat_qt_install" kind="page">
    <compoundname>plat_qt_install</compoundname>
    <title>wxWidgets for Qt installation</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><anchor id="plat_qt_install_1md_docs_qt_install"/></para>
<para>IMPORTANT NOTE:</para>
<para>If you experience problems installing, please re-read these instructions and other related files (todo.txt, bugs.txt and osname.txt for your platform if it exists) carefully before mailing wxwin-users or the author. Preferably, try to fix the problem first and then send a patch to the author.</para>
<para>When sending bug reports tell us what version of wxWidgets you are using (including the beta) and what compiler on what system. One example: wxQt 3.1.0, GCC 4.8.1, Ubuntu 14.04</para>
<sect1 id="plat_qt_install_1qt_install">
<title>Installation</title>
<sect2 id="plat_qt_install_1qt_simple">
<title>The simplest case</title>
<para>If you compile wxWidgets on Linux for the first time and don&apos;t like to read install instructions just do (in the base dir): <verbatim>&gt; mkdir buildqt
&gt; cd buildqt
&gt; ../configure --with-qt
&gt; make
&gt; su &lt;type root password&gt;
&gt; make install
&gt; ldconfig
</verbatim> [if you get &quot;ldconfig: command not found&quot;, try using &quot;/sbin/ldconfig&quot;]</para>
<para>If you don&apos;t do the &apos;make install&apos; part, you can still use the libraries from the buildgtk directory, but they may not be available to other users.</para>
<para>If you want to remove wxWidgets on Unix you can do this: <verbatim>&gt; su &lt;type root password&gt;
&gt; make uninstall
&gt; ldconfig
</verbatim> </para>
</sect2>
<sect2 id="plat_qt_install_1qt_error_simple">
<title>The simplest errors</title>
<para>For any configure errors: please look at config.log file which was generated during configure run, it usually contains some useful information.</para>
<para>configure reports, that you don&apos;t have Qt installed although you are very sure you have. Well, you have installed it, but you also have another version of the Qt installed, which you may need to remove. Or maybe you installed it in a non-default location and configure can&apos;t find it there, so please check that your PATH variable includes the path to the correct qtconfig/pkg-config. Also check that your LD_LIBRARY_PATH or equivalent variable contains the path to Qt libraries if they were installed in a non-default location.</para>
</sect2>
<sect2 id="plat_qt_install_1qt_simple_app">
<title>The simplest program</title>
<para>Now create your super-application myfoo.cpp and compile anywhere with <verbatim>g++ myfoo.cpp `wx-config --libs --cxxflags` -o myfoo
</verbatim> </para>
</sect2>
<sect2 id="plat_qt_install_1qt_libs_ui">
<title>GUI libraries</title>
<para>wxWidgets/Qt requires the Qt library to be installed on your system. It has to be a stable version, preferably Qt 5.2.1 or later.</para>
</sect2>
<sect2 id="plat_qt_install_1qt_build_ubuntu">
<title>Building wxQT on Ubuntu</title>
<para>Install latest Qt5 packages (qt5-default). To build unit tests, libcppunit-dev is required. You will need to install other dependencies to compile wxWidgets depending on the features you&apos;ll want to use (build-essential libjpeg-dev libtiff5-dev ubuntu-restricted-extras freeglut3 freeglut3-dev libsdl1.2-dev libgstreamer-plugins-base0.10-dev)</para>
<para>Then create a build directory, configure and compile: <verbatim>mkdir bldqt5
cd bldqt5
../configure --with-qt --enable-debug
make
make samples
</verbatim> If everything is ok, you can do the make install as specified before.</para>
<para>Optionally, you can build and run Unit Tests: <verbatim>cd tests
make
./test_gui
</verbatim> </para>
</sect2>
<sect2 id="plat_qt_install_1qt_build">
<title>Building wxQT, using qt-unified-XXX-online installer</title>
<para>Download qt-unified-XXX-online installer from the qt website. Install the Qt package of your choice (with the same minimum version restriction as above). The same build instructions apply, except that you need to explicitly pass to configure the Qt dir of the build intended to use as QT5_CUSTOM_DIR, i.e.</para>
<para>for Linux: <verbatim>../configure --with-qt --enable-debug QT5_CUSTOM_DIR=~/Qt/5.11.0/gcc_64
</verbatim> for Windows (ran from Git Bash, or any other Unix-like shell): (the syntax for the drive in the path is required by ar and ld) <verbatim>../configure --with-qt --enable-debug QT5_CUSTOM_DIR=c:/Qt/5.11.0/mingw53_32
</verbatim> </para>
</sect2>
<sect2 id="plat_qt_install_1qt_android">
<title>Building wxGT on Android</title>
<para>Download Android Native Development Kit (NDK), tandalone Android Software Development Kit (SDK), install them and perform the following instructions to prepare the cross-compilation tool-chain to (change NDK and other paths): <verbatim>NDK=~/src/android-ndk-r9d
SDK=~/src/android-sdk-linux
export ANDROID_NDK_ROOT=$NDK
$NDK/build/tools/make-standalone-toolchain.sh \
    --toolchain=arm-linux-androideabi-4.8 --platform=android-9 \
    --install-dir=/tmp/ndk

export PATH=/tmp/ndk/bin:$PATH
export CC=arm-linux-androideabi-gcc
export CXX=arm-linux-androideabi-g++
</verbatim></para>
<para>Also, you&apos;ll need to download the Qt library bundle that matches your operating system installed package (5.2.1 in this case installed in ~/src/qt, you&apos;ll need the android_armv5/ android_armv7/ android_x86/ pre-compiled folders to cross-compile for that architectures)</para>
<para>Then, create a build directory (under the wxWidgets folder), configure for Android (disable currently unsupported/unneeded features) and run make: <verbatim>cd ~/src/wxWidgets
mkdir bldqt5droid
cd bldqt5droid
../configure --with-qt --enable-debug  --build=x86_64-unknown-linux-gnu \
    --host=arm-linux-androideabi  --disable-compat28 --disable-shared \
    --disable-arttango --enable-image --disable-dragimage --disable-sockets \
    --with-libtiff=no --without-opengl --disable-baseevtloop --disable-utf8
make
</verbatim> You can now compile and link your app against this build, and finally package it for Android using standard APK tools.</para>
</sect2>
<sect2 id="plat_qt_install_1qt_config">
<title>Create your configuration</title>
<para>Usage: <verbatim>./configure options
</verbatim> If you want to use system&apos;s C and C++ compiler, set environment variables CC and CXX as <verbatim>% setenv CC cc
% setenv CXX CC
% ./configure [options]
</verbatim> to see all the options please use: <verbatim>./configure --help
</verbatim> It is recommended to build wxWidgets in another directory (maybe a subdirectory of your wxWidgets installation) as this allows you to have multiple configurations (for example, debug and release or GTK and Motif) simultaneously.</para>
</sect2>
<sect2 id="plat_qt_install_1qt_feature_options">
<title>Feature Options</title>
<para>When producing an executable that is linked statically with wxQt you&apos;ll be surprised at its immense size. This can sometimes be drastically reduced by removing features from wxWidgets that are not used in your program.</para>
<para>Please see the output of &quot;./configure --help&quot; for comprehensive list of all configurable options.</para>
<para>Apart from disabling certain features you can very often &quot;strip&quot; the program of its debugging information resulting in a significant reduction in size. </para>
</sect2>
</sect1>
    </detaileddescription>
    <location file="docs/qt/install.md"/>
  </compounddef>
</doxygen>
