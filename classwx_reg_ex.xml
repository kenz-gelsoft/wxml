<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="classwx_reg_ex" kind="class" language="C++" prot="public">
    <compoundname>wxRegEx</compoundname>
    <includes local="no">wx/regex.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classwx_reg_ex_1a6e10e9fd01041501fa31c17bf133b09f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxRegEx::wxRegEx</definition>
        <argsstring>()</argsstring>
        <name>wxRegEx</name>
        <qualifiedname>wxRegEx::wxRegEx</qualifiedname>
        <briefdescription>
<para>Default constructor: use <ref refid="classwx_reg_ex_1acd01c4ab52213184f89a1e9a36bc1a24" kindref="member">Compile()</ref> later. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/regex.h" line="212" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classwx_reg_ex_1a840f38773d86b3e8d6b02c120331c2cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxRegEx::wxRegEx</definition>
        <argsstring>(const wxString &amp;expr, int flags=wxRE_DEFAULT)</argsstring>
        <name>wxRegEx</name>
        <qualifiedname>wxRegEx::wxRegEx</qualifiedname>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>expr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
          <defval><ref refid="regex_8h_1afa231099d07583c3ed0981e0bb665f55a2acc242d92915c6dc6f507d6be56b171" kindref="member">wxRE_DEFAULT</ref></defval>
        </param>
        <briefdescription>
<para>Create and compile the regular expression, use <ref refid="classwx_reg_ex_1a4310be2cd3560fbed8a59dc2c051d6c1" kindref="member">IsValid()</ref> to test for compilation errors. </para>
        </briefdescription>
        <detaileddescription>
<para>As for the flags, please see <ref refid="regex_8h_1wxRE_FLAGS" kindref="member">wxRE_FLAGS</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/regex.h" line="220" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classwx_reg_ex_1aaf75e99c2dbe5fe8e798c64b1e510355" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxRegEx::~wxRegEx</definition>
        <argsstring>()</argsstring>
        <name>~wxRegEx</name>
        <qualifiedname>wxRegEx::~wxRegEx</qualifiedname>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
<para>It&apos;s not virtual, don&apos;t derive from this class. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/regex.h" line="226" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classwx_reg_ex_1acd01c4ab52213184f89a1e9a36bc1a24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxRegEx::Compile</definition>
        <argsstring>(const wxString &amp;pattern, int flags=wxRE_DEFAULT)</argsstring>
        <name>Compile</name>
        <qualifiedname>wxRegEx::Compile</qualifiedname>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>pattern</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
          <defval><ref refid="regex_8h_1afa231099d07583c3ed0981e0bb665f55a2acc242d92915c6dc6f507d6be56b171" kindref="member">wxRE_DEFAULT</ref></defval>
        </param>
        <briefdescription>
<para>Compile the string into regular expression, return true if ok or false if string has a syntax error. </para>
        </briefdescription>
        <detaileddescription>
<para>As for the flags, please see <ref refid="regex_8h_1wxRE_FLAGS" kindref="member">wxRE_FLAGS</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/regex.h" line="234" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_reg_ex_1a2f0bff22dd31a7f762a677afce2e26b5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxRegEx::GetMatch</definition>
        <argsstring>(size_t *start, size_t *len, size_t index=0) const</argsstring>
        <name>GetMatch</name>
        <qualifiedname>wxRegEx::GetMatch</qualifiedname>
        <param>
          <type>size_t *</type>
          <declname>start</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>len</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Get the start index and the length of the match of the expression (if <emphasis>index</emphasis> is 0) or a bracketed subexpression (<emphasis>index</emphasis> different from 0). </para>
        </briefdescription>
        <detaileddescription>
<para>May only be called after successful call to <ref refid="classwx_reg_ex_1a0d513567bfbfed1e6aa9c77b3fee19ff" kindref="member">Matches()</ref> and only if <computeroutput>wxRE_NOSUB</computeroutput> was <bold>not</bold> used in <ref refid="classwx_reg_ex_1acd01c4ab52213184f89a1e9a36bc1a24" kindref="member">Compile()</ref>.</para>
<para>Returns false if no match or if an error occurred. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/regex.h" line="246" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_reg_ex_1a704b4c45bbc1c74c0f21504ff228bed6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>wxString wxRegEx::GetMatch</definition>
        <argsstring>(const wxString &amp;text, size_t index=0) const</argsstring>
        <name>GetMatch</name>
        <qualifiedname>wxRegEx::GetMatch</qualifiedname>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>text</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Returns the part of string corresponding to the match where index is interpreted as above. </para>
        </briefdescription>
        <detaileddescription>
<para>Empty string is returned if match failed.</para>
<para>May only be called after successful call to <ref refid="classwx_reg_ex_1a0d513567bfbfed1e6aa9c77b3fee19ff" kindref="member">Matches()</ref> and only if <computeroutput>wxRE_NOSUB</computeroutput> was <bold>not</bold> used in <ref refid="classwx_reg_ex_1acd01c4ab52213184f89a1e9a36bc1a24" kindref="member">Compile()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/regex.h" line="255" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classwx_reg_ex_1a19d487c04d6d555208a88c78528a260b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t wxRegEx::GetMatchCount</definition>
        <argsstring>() const</argsstring>
        <name>GetMatchCount</name>
        <qualifiedname>wxRegEx::GetMatchCount</qualifiedname>
        <briefdescription>
<para>Returns the size of the array of matches, i.e. the number of bracketed subexpressions plus one for the expression itself, or 0 on error. </para>
        </briefdescription>
        <detaileddescription>
<para>May only be called after successful call to <ref refid="classwx_reg_ex_1acd01c4ab52213184f89a1e9a36bc1a24" kindref="member">Compile()</ref>. and only if <computeroutput>wxRE_NOSUB</computeroutput> was <bold>not</bold> used. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/regex.h" line="264" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classwx_reg_ex_1a4310be2cd3560fbed8a59dc2c051d6c1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxRegEx::IsValid</definition>
        <argsstring>() const</argsstring>
        <name>IsValid</name>
        <qualifiedname>wxRegEx::IsValid</qualifiedname>
        <briefdescription>
<para>Return true if this is a valid compiled regular expression, false otherwise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/regex.h" line="270" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_reg_ex_1a0d513567bfbfed1e6aa9c77b3fee19ff" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxRegEx::Matches</definition>
        <argsstring>(const wxChar *text, int flags=0) const</argsstring>
        <name>Matches</name>
        <qualifiedname>wxRegEx::Matches</qualifiedname>
        <param>
          <type>const <ref refid="chartype_8h_1ad42f64d8c82f1ce4ae58773a89b2d6a7" kindref="member">wxChar</ref> *</type>
          <declname>text</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Matches the precompiled regular expression against the string <emphasis>text</emphasis>, returns true if matches and false otherwise. </para>
        </briefdescription>
        <detaileddescription>
<para><emphasis>Flags</emphasis> may be combination of <computeroutput>wxRE_NOTBOL</computeroutput> and <computeroutput>wxRE_NOTEOL</computeroutput>, see <ref refid="regex_8h_1wxRE_NOT_FLAGS" kindref="member">wxRE_NOT_FLAGS</ref>.</para>
<para>Some regex libraries assume that the text given is null terminated, while others require the length be given as a separate parameter. Therefore for maximum portability assume that <emphasis>text</emphasis> cannot contain embedded nulls.</para>
<para>When the <bold>Matches(const wxChar *text, int flags = 0)</bold> form is used, a <ref refid="wxcrt_8h_1a8ee0fe62cfc16ac60a217e825dcf4ba5" kindref="member">wxStrlen()</ref> will be done internally if the regex library requires the length. When using <ref refid="classwx_reg_ex_1a0d513567bfbfed1e6aa9c77b3fee19ff" kindref="member">Matches()</ref> in a loop the <bold>Matches(text, flags, len)</bold> form can be used instead, making it possible to avoid a <ref refid="wxcrt_8h_1a8ee0fe62cfc16ac60a217e825dcf4ba5" kindref="member">wxStrlen()</ref> inside the loop.</para>
<para>May only be called after successful call to <ref refid="classwx_reg_ex_1acd01c4ab52213184f89a1e9a36bc1a24" kindref="member">Compile()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/regex.h" line="292" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_reg_ex_1abb847625068a6f867786c9b6cddb9e82" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxRegEx::Matches</definition>
        <argsstring>(const wxChar *text, int flags, size_t len) const</argsstring>
        <name>Matches</name>
        <qualifiedname>wxRegEx::Matches</qualifiedname>
        <param>
          <type>const <ref refid="chartype_8h_1ad42f64d8c82f1ce4ae58773a89b2d6a7" kindref="member">wxChar</ref> *</type>
          <declname>text</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/regex.h" line="293" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_reg_ex_1adb9a749baf9c7b85523289b85d5e56b7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxRegEx::Matches</definition>
        <argsstring>(const wxString &amp;text, int flags=0) const</argsstring>
        <name>Matches</name>
        <qualifiedname>wxRegEx::Matches</qualifiedname>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>text</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Matches the precompiled regular expression against the string <emphasis>text</emphasis>, returns true if matches and false otherwise. </para>
        </briefdescription>
        <detaileddescription>
<para><emphasis>Flags</emphasis> may be combination of <computeroutput>wxRE_NOTBOL</computeroutput> and <computeroutput>wxRE_NOTEOL</computeroutput>, see <ref refid="regex_8h_1wxRE_NOT_FLAGS" kindref="member">wxRE_NOT_FLAGS</ref>.</para>
<para>May only be called after successful call to <ref refid="classwx_reg_ex_1acd01c4ab52213184f89a1e9a36bc1a24" kindref="member">Compile()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/regex.h" line="305" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_reg_ex_1abbc4036c94fff3fb1a1ddc2b2088ff9d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxRegEx::Replace</definition>
        <argsstring>(wxString *text, const wxString &amp;replacement, size_t maxMatches=0) const</argsstring>
        <name>Replace</name>
        <qualifiedname>wxRegEx::Replace</qualifiedname>
        <param>
          <type><ref refid="classwx_string" kindref="compound">wxString</ref> *</type>
          <declname>text</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>replacement</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>maxMatches</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Replaces the current regular expression in the string pointed to by <emphasis>text</emphasis>, with the text in <emphasis>replacement</emphasis> and return number of matches replaced (maybe 0 if none found) or -1 on error. </para>
        </briefdescription>
        <detaileddescription>
<para>The replacement text may contain back references <computeroutput>\number</computeroutput> which will be replaced with the value of the corresponding subexpression in the pattern match. <computeroutput>\0</computeroutput> corresponds to the entire match and <computeroutput>&amp;</computeroutput> is a synonym for it. Backslash may be used to quote itself or <computeroutput>&amp;</computeroutput> character.</para>
<para><emphasis>maxMatches</emphasis> may be used to limit the number of replacements made, setting it to 1, for example, will only replace first occurrence (if any) of the pattern in the text while default value of 0 means replace all. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/regex.h" line="321" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_reg_ex_1adc3adca7b7c76ccab718336675f17325" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxRegEx::ReplaceAll</definition>
        <argsstring>(wxString *text, const wxString &amp;replacement) const</argsstring>
        <name>ReplaceAll</name>
        <qualifiedname>wxRegEx::ReplaceAll</qualifiedname>
        <param>
          <type><ref refid="classwx_string" kindref="compound">wxString</ref> *</type>
          <declname>text</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>replacement</declname>
        </param>
        <briefdescription>
<para>Replace all occurrences: this is actually a synonym for <ref refid="classwx_reg_ex_1abbc4036c94fff3fb1a1ddc2b2088ff9d" kindref="member">Replace()</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classwx_reg_ex_1a5de12bf2b5873ec5b6ff9e3a378cabea" kindref="member">ReplaceFirst()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/regex.h" line="330" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_reg_ex_1a5de12bf2b5873ec5b6ff9e3a378cabea" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxRegEx::ReplaceFirst</definition>
        <argsstring>(wxString *text, const wxString &amp;replacement) const</argsstring>
        <name>ReplaceFirst</name>
        <qualifiedname>wxRegEx::ReplaceFirst</qualifiedname>
        <param>
          <type><ref refid="classwx_string" kindref="compound">wxString</ref> *</type>
          <declname>text</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>replacement</declname>
        </param>
        <briefdescription>
<para>Replace the first occurrence. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/regex.h" line="335" column="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classwx_reg_ex_1abe954141cbbeb6f92d19feb3f3550d28" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>static wxString wxRegEx::QuoteMeta</definition>
        <argsstring>(const wxString &amp;str)</argsstring>
        <name>QuoteMeta</name>
        <qualifiedname>wxRegEx::QuoteMeta</qualifiedname>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Escapes any of the characters having special meaning for <ref refid="classwx_reg_ex" kindref="compound">wxRegEx</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Currently the following characters are special: \, ^, $, ., |, ?, *, +, (, ), [, ], { and }. All occurrences of any of these characters in the passed string are escaped, i.e. a backslash is inserted before them, to remove their special meaning.</para>
<para>For example: <programlisting><codeline><highlight class="normal"><ref refid="classwx_string" kindref="compound">wxString</ref><sp/>quoted<sp/>=<sp/><ref refid="classwx_reg_ex_1abe954141cbbeb6f92d19feb3f3550d28" kindref="member">wxRegEx::QuoteMeta</ref>(</highlight><highlight class="stringliteral">&quot;foo.*bar&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">assert(<sp/>quoted<sp/>==<sp/>R</highlight><highlight class="stringliteral">&quot;(foo\.\*bar)&quot;<sp/>);</highlight></codeline>
</programlisting></para>
<para>This function can be useful when using <ref refid="classwx_reg_ex" kindref="compound">wxRegEx</ref> to search for a literal string entered by user, for example.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>A string that may contain metacharacters to escape.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A string with all metacharacters escaped.</para>
</simplesect>
<simplesect kind="since"><para>3.1.3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/regex.h" line="361" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classwx_reg_ex_1acba0d324501d7866a41a97c858a51dc2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>static wxString wxRegEx::ConvertFromBasic</definition>
        <argsstring>(const wxString &amp;bre)</argsstring>
        <name>ConvertFromBasic</name>
        <qualifiedname>wxRegEx::ConvertFromBasic</qualifiedname>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>bre</declname>
        </param>
        <briefdescription>
<para>Converts a basic regular expression to an extended regex syntax. </para>
        </briefdescription>
        <detaileddescription>
<para>This function can be used to convert <emphasis>bre</emphasis> using deprecated wxRE_BASIC syntax to default (extended) syntax.</para>
<para><simplesect kind="since"><para>3.1.6 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/regex.h" line="371" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classwx_reg_ex_1a5f3d02d8a16f9337f9ce0d532adf78c2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_version_info" kindref="compound">wxVersionInfo</ref></type>
        <definition>static wxVersionInfo wxRegEx::GetLibraryVersionInfo</definition>
        <argsstring>()</argsstring>
        <name>GetLibraryVersionInfo</name>
        <qualifiedname>wxRegEx::GetLibraryVersionInfo</qualifiedname>
        <briefdescription>
<para>Return the version of PCRE used. </para>
        </briefdescription>
        <detaileddescription>
<para>The returned <ref refid="classwx_version_info" kindref="compound">wxVersionInfo</ref> object currently always has its micro version component set to 0, as PCRE uses only major and minor version components. Its description component contains the version number, release date and, for pre-release PCRE versions, a mention of it.</para>
<para><simplesect kind="since"><para>3.1.6 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/regex.h" line="383" column="26"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="classwx_reg_ex" kindref="compound">wxRegEx</ref> represents a regular expression. </para>
    </briefdescription>
    <detaileddescription>
<para>This class provides support for regular expressions matching and also replacement.</para>
<para>In wxWidgets 3.1.6 or later, it is built on top of PCRE library (<ulink url="https://www.pcre.org/">https://www.pcre.org/</ulink>). In the previous versions of wxWidgets, this class uses Henry Spencer&apos;s library and behaved slightly differently, see below for the discussion of the changes if you&apos;re upgrading from an older version.</para>
<para>Note that while C++11 and later provides <computeroutput>std::regex</computeroutput> and related classes, this class is still useful as it provides the following important advantages:</para>
<para><itemizedlist>
<listitem><para>Support for richer regular expressions syntax.</para>
</listitem><listitem><para>Much better performance in many common cases, by a factor of 10-100.</para>
</listitem><listitem><para>Consistent behaviour, including performance, on all platforms.</para>
</listitem></itemizedlist>
</para>
<para><heading level="2"></heading>
</para>
<para>Library:<nonbreakablespace/><nonbreakablespace/><ref refid="page_libs_1page_libs_wxbase" kindref="member">wxBase</ref></para>
<para>Category:<nonbreakablespace/><nonbreakablespace/><ref refid="group__group__class__data" kindref="compound">Data Structures</ref></para>
<para>Example:</para>
<para>A (bad) example of processing some text containing email addresses (the example is bad because the real email addresses can have more complicated form than <computeroutput><ulink url="mailto:user@host.net">user@host.net</ulink></computeroutput>):</para>
<para><programlisting><codeline><highlight class="normal"><ref refid="classwx_string" kindref="compound">wxString</ref><sp/>originalText<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>is<sp/>some<sp/>text<sp/>with<sp/>foo@example.com<sp/>and<sp/>bar@example.com&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Regex.<sp/>to<sp/>match<sp/>an<sp/>email<sp/>address<sp/>and<sp/>extract<sp/>its<sp/>subparts.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="classwx_reg_ex" kindref="compound">wxRegEx</ref><sp/>reEmail(</highlight><highlight class="stringliteral">&quot;([^@<sp/>-]+)@([[:alnum:]_]+).([[:alnum:]]{2,4})&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="classwx_string" kindref="compound">wxString</ref><sp/>processText<sp/>=<sp/>originalText;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>reEmail.Matches(processText)<sp/>)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>the<sp/>size<sp/>of<sp/>the<sp/>first<sp/>match<sp/>and<sp/>print<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>start,<sp/>len;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>reEmail.GetMatch(&amp;start,<sp/>&amp;len,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Email:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>reEmail.GetMatch(processText,<sp/>0)<sp/>&lt;&lt;<sp/><ref refid="txtstrm_8h_1a696f69d76df63d35e1d28df1cc6f9532" kindref="member">std::endl</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Print<sp/>the<sp/>submatches.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Name:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>reEmail.GetMatch(processText,<sp/>1)<sp/>&lt;&lt;<sp/><ref refid="txtstrm_8h_1a696f69d76df63d35e1d28df1cc6f9532" kindref="member">std::endl</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Domain:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>reEmail.GetMatch(processText,<sp/>2)<sp/>&lt;&lt;<sp/><ref refid="txtstrm_8h_1a696f69d76df63d35e1d28df1cc6f9532" kindref="member">std::endl</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;TLD:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>reEmail.GetMatch(processText,<sp/>3)<sp/>&lt;&lt;<sp/><ref refid="txtstrm_8h_1a696f69d76df63d35e1d28df1cc6f9532" kindref="member">std::endl</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Process<sp/>the<sp/>remainder<sp/>of<sp/>the<sp/>text<sp/>if<sp/>there<sp/>is<sp/>any.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>processText<sp/>=<sp/>processText.<ref refid="classwx_string_1ae28d32ca35ae00e3225fc25496a77f93" kindref="member">Mid</ref><sp/>(start<sp/>+<sp/>len);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Or<sp/>this<sp/>will<sp/>replace<sp/>all<sp/>names<sp/>with<sp/>&quot;HIDDEN&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count<sp/>=<sp/>reEmail.ReplaceAll(&amp;originalText,<sp/></highlight><highlight class="stringliteral">&quot;HIDDEN@\\2.\\3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;text<sp/>now<sp/>contains<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>count<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>hidden<sp/>addresses&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="txtstrm_8h_1a696f69d76df63d35e1d28df1cc6f9532" kindref="member">std::endl</ref>;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>originalText<sp/>&lt;&lt;<sp/><ref refid="txtstrm_8h_1a696f69d76df63d35e1d28df1cc6f9532" kindref="member">std::endl</ref>;</highlight></codeline>
</programlisting></para>
<sect1 id="classwx_reg_ex_1regex_pcre_changes">
<title>Changes in the PCRE-based version</title>
<para>This section describes the difference in regex syntax in the new PCRE-based <ref refid="classwx_reg_ex" kindref="compound">wxRegEx</ref> version compared to the previously used version which implemented POSIX regex support.</para>
<para>The main change is that both extended (<ref refid="regex_8h_1afa231099d07583c3ed0981e0bb665f55a627a1d4db901469767559c57d47a8e37" kindref="member">wxRE_EXTENDED</ref>) and advanced (<ref refid="regex_8h_1afa231099d07583c3ed0981e0bb665f55aec7f73604dcde7bce8d3d3092713a297" kindref="member">wxRE_ADVANCED</ref>) regex syntax is now the same as PCRE syntax described at <ulink url="https://www.pcre.org/current/doc/html/pcre2syntax.html">https://www.pcre.org/current/doc/html/pcre2syntax.html</ulink></para>
<para>Basic regular expressions (<ref refid="regex_8h_1afa231099d07583c3ed0981e0bb665f55a23d45b8284e94faf21613e2b64f4fa75" kindref="member">wxRE_BASIC</ref>) are still different, but their use is deprecated and PCRE extensions are still accepted in them, please avoid using them.</para>
<para>Other changes are:</para>
<para><itemizedlist>
<listitem><para>Negated character classes, i.e. <computeroutput></computeroutput>[^....], now always match newline character, regardless of whether <ref refid="regex_8h_1afa231099d07583c3ed0981e0bb665f55a157ce1afe45e1f27218cc5e9e0a28454" kindref="member">wxRE_NEWLINE</ref> was used or not. The dot metacharacter still has the same meaning, i.e. it matches newline by default but not when <ref refid="regex_8h_1afa231099d07583c3ed0981e0bb665f55a157ce1afe45e1f27218cc5e9e0a28454" kindref="member">wxRE_NEWLINE</ref> is specified.</para>
</listitem><listitem><para>Previously POSIX-specified behaviour of handling unmatched right parenthesis <computeroutput>&apos;</computeroutput>)&apos; as a literal character was implemented, but now this is a (regex) compilation error.</para>
</listitem><listitem><para>Empty alternation branches were previously ignored, i.e. matching <computeroutput>a||b</computeroutput> worked the same as matching just <computeroutput>a|b</computeroutput>, but now actually matches an empty string. The new <ref refid="regex_8h_1a394b3903fbf00ba2b6243f60689a5a5fa9a2a67de1ec7d904ba6405b4648dff82" kindref="member">wxRE_NOTEMPTY</ref> flag can be used to disable empty matches.</para>
</listitem><listitem><para>Using <computeroutput>\U</computeroutput> to embed Unicode code points into the pattern is not supported any more, use the still supported <computeroutput>\u</computeroutput>, followed by exactly four hexadecimal digits, or <computeroutput>\x</computeroutput>, followed by exactly two hexadecimal digits, instead.</para>
</listitem><listitem><para>POSIX collating elements inside square brackets, i.e. <computeroutput></computeroutput>[.XXX.] and <computeroutput></computeroutput>[:XXXX:] are not supported by PCRE and result in regex compilation errors.</para>
</listitem><listitem><para>Backslash can be used to escape the character following it even inside square brackets now, while it loses its special meaning in POSIX regexes when it occurs inside square brackets. In particular, <computeroutput>&quot;\]&quot;</computeroutput> escapes the special meaning of the closing bracket, and so does <emphasis>not</emphasis> close the character class. Please use <computeroutput>&quot;\\\]&quot;</computeroutput> instead.</para>
</listitem><listitem><para>Closing parenthesis without a matching open parenthesis is now a syntax error instead of just being treated as a literal. To fix possible errors due to it, escape parenthesis that are supposed to be taken literally with a backslash, i.e. use <computeroutput>&quot;\)&quot;</computeroutput> in C strings.</para>
</listitem><listitem><para>For completeness, PCRE syntax which previously resulted in errors, e.g. <computeroutput>&quot;(?:...)&quot;</computeroutput> and similar constructs, are now accepted and behave as expected. Other regexes syntactically invalid according to POSIX are re-interpreted as sequences of literal characters with PCRE, e.g. <computeroutput>&quot;{1&quot;</computeroutput> is just a sequence of two literal characters now, where it previously was a compilation error. </para>
</listitem></itemizedlist>
</para>
</sect1>
    </detaileddescription>
    <location file="interface/wx/regex.h" line="205" column="1" bodyfile="interface/wx/regex.h" bodystart="206" bodyend="384"/>
    <listofallmembers>
      <member refid="classwx_reg_ex_1acd01c4ab52213184f89a1e9a36bc1a24" prot="public" virt="non-virtual"><scope>wxRegEx</scope><name>Compile</name></member>
      <member refid="classwx_reg_ex_1acba0d324501d7866a41a97c858a51dc2" prot="public" virt="non-virtual"><scope>wxRegEx</scope><name>ConvertFromBasic</name></member>
      <member refid="classwx_reg_ex_1a5f3d02d8a16f9337f9ce0d532adf78c2" prot="public" virt="non-virtual"><scope>wxRegEx</scope><name>GetLibraryVersionInfo</name></member>
      <member refid="classwx_reg_ex_1a2f0bff22dd31a7f762a677afce2e26b5" prot="public" virt="non-virtual"><scope>wxRegEx</scope><name>GetMatch</name></member>
      <member refid="classwx_reg_ex_1a704b4c45bbc1c74c0f21504ff228bed6" prot="public" virt="non-virtual"><scope>wxRegEx</scope><name>GetMatch</name></member>
      <member refid="classwx_reg_ex_1a19d487c04d6d555208a88c78528a260b" prot="public" virt="non-virtual"><scope>wxRegEx</scope><name>GetMatchCount</name></member>
      <member refid="classwx_reg_ex_1a4310be2cd3560fbed8a59dc2c051d6c1" prot="public" virt="non-virtual"><scope>wxRegEx</scope><name>IsValid</name></member>
      <member refid="classwx_reg_ex_1a0d513567bfbfed1e6aa9c77b3fee19ff" prot="public" virt="non-virtual"><scope>wxRegEx</scope><name>Matches</name></member>
      <member refid="classwx_reg_ex_1abb847625068a6f867786c9b6cddb9e82" prot="public" virt="non-virtual"><scope>wxRegEx</scope><name>Matches</name></member>
      <member refid="classwx_reg_ex_1adb9a749baf9c7b85523289b85d5e56b7" prot="public" virt="non-virtual"><scope>wxRegEx</scope><name>Matches</name></member>
      <member refid="classwx_reg_ex_1abe954141cbbeb6f92d19feb3f3550d28" prot="public" virt="non-virtual"><scope>wxRegEx</scope><name>QuoteMeta</name></member>
      <member refid="classwx_reg_ex_1abbc4036c94fff3fb1a1ddc2b2088ff9d" prot="public" virt="non-virtual"><scope>wxRegEx</scope><name>Replace</name></member>
      <member refid="classwx_reg_ex_1adc3adca7b7c76ccab718336675f17325" prot="public" virt="non-virtual"><scope>wxRegEx</scope><name>ReplaceAll</name></member>
      <member refid="classwx_reg_ex_1a5de12bf2b5873ec5b6ff9e3a378cabea" prot="public" virt="non-virtual"><scope>wxRegEx</scope><name>ReplaceFirst</name></member>
      <member refid="classwx_reg_ex_1a6e10e9fd01041501fa31c17bf133b09f" prot="public" virt="non-virtual"><scope>wxRegEx</scope><name>wxRegEx</name></member>
      <member refid="classwx_reg_ex_1a840f38773d86b3e8d6b02c120331c2cb" prot="public" virt="non-virtual"><scope>wxRegEx</scope><name>wxRegEx</name></member>
      <member refid="classwx_reg_ex_1aaf75e99c2dbe5fe8e798c64b1e510355" prot="public" virt="non-virtual"><scope>wxRegEx</scope><name>~wxRegEx</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
