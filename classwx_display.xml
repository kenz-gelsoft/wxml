<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="classwx_display" kind="class" language="C++" prot="public">
    <compoundname>wxDisplay</compoundname>
    <includes local="no">wx/display.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classwx_display_1a8455f1450af24319a5c434d9a1984437" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxDisplay::wxDisplay</definition>
        <argsstring>()</argsstring>
        <name>wxDisplay</name>
        <briefdescription>
<para>Default constructor creating <ref refid="classwx_display" kindref="compound">wxDisplay</ref> object representing the primary display. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/display.h" line="23" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classwx_display_1a3ff5e051699a4f9ab6ce984d9a8a8943" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxDisplay::wxDisplay</definition>
        <argsstring>(unsigned int index)</argsstring>
        <name>wxDisplay</name>
        <param>
          <type>unsigned int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Constructor, setting up a <ref refid="classwx_display" kindref="compound">wxDisplay</ref> instance with the specified display. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the display to use. This must be non-negative and lower than the value returned by <ref refid="classwx_display_1a6493e584d40a07c5f789f3027d8eea1d" kindref="member">GetCount()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/display.h" line="33" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_display_1a75dc6e0f101a1126269bb0de990b8599" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxDisplay::wxDisplay</definition>
        <argsstring>(const wxWindow *window)</argsstring>
        <name>wxDisplay</name>
        <param>
          <type>const <ref refid="classwx_window" kindref="compound">wxWindow</ref> *</type>
          <declname>window</declname>
        </param>
        <briefdescription>
<para>Constructor creating the display object associated with the given window. </para>
        </briefdescription>
        <detaileddescription>
<para>This is the most convenient way of finding the display on which the given window is shown while falling back to the default display if it is not shown at all or positioned outside of any display.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>window</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid, i.e. non-null, window.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classwx_display_1aaf13ecd5a870d5b8b10a6c6cd9710b7a" kindref="member">GetFromWindow()</ref></para>
</simplesect>
<simplesect kind="since"><para>3.1.2 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/display.h" line="50" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_display_1a2733feea0f7eb1f1822b6a332ba606bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxDisplay::~wxDisplay</definition>
        <argsstring>()</argsstring>
        <name>~wxDisplay</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/display.h" line="55" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classwx_display_1a43f3eb82f45be488c3829b4d97693e18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxDisplay::ChangeMode</definition>
        <argsstring>(const wxVideoMode &amp;mode=wxDefaultVideoMode)</argsstring>
        <name>ChangeMode</name>
        <param>
          <type>const <ref refid="structwx_video_mode" kindref="compound">wxVideoMode</ref> &amp;</type>
          <declname>mode</declname>
          <defval><ref refid="vidmode_8h_1a74100ed513b4a32487b0716a9e20642b" kindref="member">wxDefaultVideoMode</ref></defval>
        </param>
        <briefdescription>
<para>Changes the video mode of this display to the mode specified in the mode parameter. </para>
        </briefdescription>
        <detaileddescription>
<para>If wxDefaultVideoMode is passed in as the mode parameter, the defined behaviour is that <ref refid="classwx_display" kindref="compound">wxDisplay</ref> will reset the video mode to the default mode used by the display. On Windows, the behaviour is normal. However, there are differences on other platforms. On Unix variations using X11 extensions it should behave as defined, but some irregularities may occur. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/display.h" line="68" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_display_1a2964fc964a6badf63791bf3318eee0bf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_rect" kindref="compound">wxRect</ref></type>
        <definition>wxRect wxDisplay::GetClientArea</definition>
        <argsstring>() const</argsstring>
        <name>GetClientArea</name>
        <briefdescription>
<para>Returns the client area of the display. </para>
        </briefdescription>
        <detaileddescription>
<para>The client area is the part of the display available for the normal (non full screen) windows, usually it is the same as <ref refid="classwx_display_1ab60df0f4e854dda42b890916362b03f9" kindref="member">GetGeometry()</ref> but it could be less if there is a taskbar (or equivalent) on this display. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/display.h" line="76" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classwx_display_1acc3bb1d3c5826f8d6ad0b6efb791d069" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structwx_video_mode" kindref="compound">wxVideoMode</ref></type>
        <definition>wxVideoMode wxDisplay::GetCurrentMode</definition>
        <argsstring>() const</argsstring>
        <name>GetCurrentMode</name>
        <briefdescription>
<para>Returns the current video mode that this display is in. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/display.h" line="86" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classwx_display_1ab60df0f4e854dda42b890916362b03f9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_rect" kindref="compound">wxRect</ref></type>
        <definition>wxRect wxDisplay::GetGeometry</definition>
        <argsstring>() const</argsstring>
        <name>GetGeometry</name>
        <briefdescription>
<para>Returns the bounding rectangle of the display whose index was passed to the constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classwx_display_1a2964fc964a6badf63791bf3318eee0bf" kindref="member">GetClientArea()</ref>, <ref refid="gdicmn_8h_1a2a4dcac2c18c10f546e699ddba2fbfc8" kindref="member">wxDisplaySize()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/display.h" line="116" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classwx_display_1a0529033f7f4a09809dcbc0b4c7b03f76" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>wxArrayVideoModes</type>
        <definition>wxArrayVideoModes wxDisplay::GetModes</definition>
        <argsstring>(const wxVideoMode &amp;mode=wxDefaultVideoMode) const</argsstring>
        <name>GetModes</name>
        <param>
          <type>const <ref refid="structwx_video_mode" kindref="compound">wxVideoMode</ref> &amp;</type>
          <declname>mode</declname>
          <defval><ref refid="vidmode_8h_1a74100ed513b4a32487b0716a9e20642b" kindref="member">wxDefaultVideoMode</ref></defval>
        </param>
        <briefdescription>
<para>Fills and returns an array with all the video modes that are supported by this display, or video modes that are supported by this display and match the mode parameter (if mode is not wxDefaultVideoMode). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/display.h" line="123" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classwx_display_1a91e2b0cb473fcc4b58d53fcadcecb753" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>wxString wxDisplay::GetName</definition>
        <argsstring>() const</argsstring>
        <name>GetName</name>
        <briefdescription>
<para>Returns the display&apos;s name. </para>
        </briefdescription>
        <detaileddescription>
<para>The returned value is currently an empty string under all platforms except MSW. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/display.h" line="131" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_display_1ad086b5e0e9188e28b07f9acefef09695" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_size" kindref="compound">wxSize</ref></type>
        <definition>wxSize wxDisplay::GetPPI</definition>
        <argsstring>() const</argsstring>
        <name>GetPPI</name>
        <briefdescription>
<para>Returns display resolution in pixels per inch. </para>
        </briefdescription>
        <detaileddescription>
<para>Horizontal and vertical resolution are returned in <computeroutput>x</computeroutput> and <computeroutput>y</computeroutput> components of the <ref refid="classwx_size" kindref="compound">wxSize</ref> object respectively.</para>
<para>If the resolution information is not available, returns <programlisting><codeline><highlight class="normal"><sp/><ref refid="classwx_size" kindref="compound">wxSize</ref>(0,</highlight></codeline>
<codeline><highlight class="normal">0)<sp/></highlight></codeline>
</programlisting>.</para>
<para><simplesect kind="since"><para>3.1.2 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/display.h" line="144" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classwx_display_1a5df07db77453e7159136fd80361c15d2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double wxDisplay::GetScaleFactor</definition>
        <argsstring>() const</argsstring>
        <name>GetScaleFactor</name>
        <briefdescription>
<para>Returns scaling factor used by this display. </para>
        </briefdescription>
        <detaileddescription>
<para>The scaling factor is the ratio between <ref refid="classwx_display_1ad086b5e0e9188e28b07f9acefef09695" kindref="member">GetPPI()</ref> and <ref refid="classwx_display_1a63d5e95d09d137a02faa412a896a5e22" kindref="member">GetStdPPI()</ref> (it is implicitly assumed that this ratio is the same for both horizontal and vertical components).</para>
<para><simplesect kind="see"><para><ref refid="classwx_window_1a89cbf94bc15d4e8cb5b1e7db85225577" kindref="member">wxWindow::GetContentScaleFactor()</ref>, <ref refid="classwx_window_1a43bfd56d59b728157f95c838f981872c" kindref="member">wxWindow::GetDPIScaleFactor()</ref></para>
</simplesect>
<simplesect kind="since"><para>3.1.5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/display.h" line="157" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classwx_display_1ab4ffe57d03f5fb29e9b4adb43613033d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxDisplay::IsPrimary</definition>
        <argsstring>() const</argsstring>
        <name>IsPrimary</name>
        <briefdescription>
<para>Returns true if the display is the primary display. </para>
        </briefdescription>
        <detaileddescription>
<para>The primary display is the one whose index is 0. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/display.h" line="190" column="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classwx_display_1a6493e584d40a07c5f789f3027d8eea1d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>static unsigned int wxDisplay::GetCount</definition>
        <argsstring>()</argsstring>
        <name>GetCount</name>
        <briefdescription>
<para>Returns the number of connected displays. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/display.h" line="81" column="25"/>
      </memberdef>
      <memberdef kind="function" id="classwx_display_1ae3cebdb3bab01a12d3d3516af75d3728" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int wxDisplay::GetFromPoint</definition>
        <argsstring>(const wxPoint &amp;pt)</argsstring>
        <name>GetFromPoint</name>
        <param>
          <type>const <ref refid="classwx_point" kindref="compound">wxPoint</ref> &amp;</type>
          <declname>pt</declname>
        </param>
        <briefdescription>
<para>Returns the index of the display on which the given point lies, or <computeroutput>wxNOT_FOUND</computeroutput> if the point is not on any connected display. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pt</parametername>
</parameternamelist>
<parameterdescription>
<para>The point to locate. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/display.h" line="95" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classwx_display_1aaf13ecd5a870d5b8b10a6c6cd9710b7a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int wxDisplay::GetFromWindow</definition>
        <argsstring>(const wxWindow *win)</argsstring>
        <name>GetFromWindow</name>
        <param>
          <type>const <ref refid="classwx_window" kindref="compound">wxWindow</ref> *</type>
          <declname>win</declname>
        </param>
        <briefdescription>
<para>Returns the index of the display on which the given window lies. </para>
        </briefdescription>
        <detaileddescription>
<para>If the window is on more than one display it gets the display that overlaps the window the most.</para>
<para>Returns <computeroutput>wxNOT_FOUND</computeroutput> if the window is not on any connected display.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>win</parametername>
</parameternamelist>
<parameterdescription>
<para>The window to locate. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/display.h" line="108" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classwx_display_1a2d2cbd937759fd021cc4a80a81a54731" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int wxDisplay::GetStdPPIValue</definition>
        <argsstring>()</argsstring>
        <name>GetStdPPIValue</name>
        <briefdescription>
<para>Returns default display resolution for the current platform in pixels per inch. </para>
        </briefdescription>
        <detaileddescription>
<para>This function mostly used internally, use <ref refid="classwx_display_1ad086b5e0e9188e28b07f9acefef09695" kindref="member">GetPPI()</ref> to get the actual display resolution.</para>
<para>Currently the standard PPI is the same in both horizontal and vertical directions on all platforms and its value is 96 everywhere except under Apple devices (those running macOS, iOS, watchOS etc), where it is 72.</para>
<para><simplesect kind="see"><para><ref refid="classwx_display_1a63d5e95d09d137a02faa412a896a5e22" kindref="member">GetStdPPI()</ref></para>
</simplesect>
<simplesect kind="since"><para>3.1.5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/display.h" line="174" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classwx_display_1a63d5e95d09d137a02faa412a896a5e22" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_size" kindref="compound">wxSize</ref></type>
        <definition>static wxSize wxDisplay::GetStdPPI</definition>
        <argsstring>()</argsstring>
        <name>GetStdPPI</name>
        <briefdescription>
<para>Returns default display resolution for the current platform as <ref refid="classwx_size" kindref="compound">wxSize</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is equivalent to constructing <ref refid="classwx_size" kindref="compound">wxSize</ref> object with both components set to <ref refid="classwx_display_1a2d2cbd937759fd021cc4a80a81a54731" kindref="member">GetStdPPIValue()</ref>.</para>
<para><simplesect kind="since"><para>3.1.5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/display.h" line="184" column="19"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Determines the sizes and locations of displays connected to the system. </para>
    </briefdescription>
    <detaileddescription>
<para><heading level="2"></heading>
</para>
<para>Library:<nonbreakablespace/><nonbreakablespace/><ref refid="page_libs_1page_libs_wxcore" kindref="member">wxCore</ref> &lt;&gt;&lt; =&apos;&apos;&gt;:&lt;/&gt;&amp;;&amp;;&lt; =&apos;&apos;&gt;\ &lt;/&gt;&lt;/&gt; </para>
    </detaileddescription>
    <location file="interface/wx/display.h" line="16" column="1" bodyfile="interface/wx/display.h" bodystart="17" bodyend="191"/>
    <listofallmembers>
      <member refid="classwx_display_1a43f3eb82f45be488c3829b4d97693e18" prot="public" virt="non-virtual"><scope>wxDisplay</scope><name>ChangeMode</name></member>
      <member refid="classwx_display_1a2964fc964a6badf63791bf3318eee0bf" prot="public" virt="non-virtual"><scope>wxDisplay</scope><name>GetClientArea</name></member>
      <member refid="classwx_display_1a6493e584d40a07c5f789f3027d8eea1d" prot="public" virt="non-virtual"><scope>wxDisplay</scope><name>GetCount</name></member>
      <member refid="classwx_display_1acc3bb1d3c5826f8d6ad0b6efb791d069" prot="public" virt="non-virtual"><scope>wxDisplay</scope><name>GetCurrentMode</name></member>
      <member refid="classwx_display_1ae3cebdb3bab01a12d3d3516af75d3728" prot="public" virt="non-virtual"><scope>wxDisplay</scope><name>GetFromPoint</name></member>
      <member refid="classwx_display_1aaf13ecd5a870d5b8b10a6c6cd9710b7a" prot="public" virt="non-virtual"><scope>wxDisplay</scope><name>GetFromWindow</name></member>
      <member refid="classwx_display_1ab60df0f4e854dda42b890916362b03f9" prot="public" virt="non-virtual"><scope>wxDisplay</scope><name>GetGeometry</name></member>
      <member refid="classwx_display_1a0529033f7f4a09809dcbc0b4c7b03f76" prot="public" virt="non-virtual"><scope>wxDisplay</scope><name>GetModes</name></member>
      <member refid="classwx_display_1a91e2b0cb473fcc4b58d53fcadcecb753" prot="public" virt="non-virtual"><scope>wxDisplay</scope><name>GetName</name></member>
      <member refid="classwx_display_1ad086b5e0e9188e28b07f9acefef09695" prot="public" virt="non-virtual"><scope>wxDisplay</scope><name>GetPPI</name></member>
      <member refid="classwx_display_1a5df07db77453e7159136fd80361c15d2" prot="public" virt="non-virtual"><scope>wxDisplay</scope><name>GetScaleFactor</name></member>
      <member refid="classwx_display_1a63d5e95d09d137a02faa412a896a5e22" prot="public" virt="non-virtual"><scope>wxDisplay</scope><name>GetStdPPI</name></member>
      <member refid="classwx_display_1a2d2cbd937759fd021cc4a80a81a54731" prot="public" virt="non-virtual"><scope>wxDisplay</scope><name>GetStdPPIValue</name></member>
      <member refid="classwx_display_1ab4ffe57d03f5fb29e9b4adb43613033d" prot="public" virt="non-virtual"><scope>wxDisplay</scope><name>IsPrimary</name></member>
      <member refid="classwx_display_1a8455f1450af24319a5c434d9a1984437" prot="public" virt="non-virtual"><scope>wxDisplay</scope><name>wxDisplay</name></member>
      <member refid="classwx_display_1a3ff5e051699a4f9ab6ce984d9a8a8943" prot="public" virt="non-virtual"><scope>wxDisplay</scope><name>wxDisplay</name></member>
      <member refid="classwx_display_1a75dc6e0f101a1126269bb0de990b8599" prot="public" virt="non-virtual"><scope>wxDisplay</scope><name>wxDisplay</name></member>
      <member refid="classwx_display_1a2733feea0f7eb1f1822b6a332ba606bb" prot="public" virt="non-virtual"><scope>wxDisplay</scope><name>~wxDisplay</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
