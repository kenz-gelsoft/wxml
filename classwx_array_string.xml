<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="classwx_array_string" kind="class" language="C++" prot="public">
    <compoundname>wxArrayString</compoundname>
    <basecompoundref prot="public" virt="non-virtual">wxArray</basecompoundref>
    <derivedcompoundref refid="classwx_path_list" prot="public" virt="non-virtual">wxPathList</derivedcompoundref>
    <includes local="no">wx/arrstr.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classwx_array_string_1afba21000492b843ade57264ddd1b8618" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* wxArrayString::CompareFunction) (const wxString &amp;first, const wxString &amp;second)</definition>
        <argsstring>)(const wxString &amp;first, const wxString &amp;second)</argsstring>
        <name>CompareFunction</name>
        <briefdescription>
<para>The function type used with <ref refid="classwx_array_string_1af10a5c5c81001638f5a2b6dceaa74810" kindref="member">wxArrayString::Sort()</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the same conventions as the standard <computeroutput>qsort()</computeroutput> comparison function, that is it should return a negative value if the first argument is less than the second one, a positive value if the first argument is greater than the second one and 0 if the arguments are equal.</para>
<para><simplesect kind="since"><para>3.1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/arrstr.h" line="67" column="13" bodyfile="interface/wx/arrstr.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classwx_array_string_1a35fe0f0ee8452506f1ca39d3fd48c14e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxArrayString::wxArrayString</definition>
        <argsstring>()</argsstring>
        <name>wxArrayString</name>
        <briefdescription>
<para>Default constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/arrstr.h" line="72" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classwx_array_string_1a217ff3d3246ea5079bac9295ff36a237" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxArrayString::wxArrayString</definition>
        <argsstring>(const wxArrayString &amp;array)</argsstring>
        <name>wxArrayString</name>
        <param>
          <type>const <ref refid="classwx_array_string" kindref="compound">wxArrayString</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
<para>Copy constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/arrstr.h" line="77" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classwx_array_string_1a4df6e48276a8f2f12d018281eda1a618" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxArrayString::wxArrayString</definition>
        <argsstring>(size_t sz, const char **arr)</argsstring>
        <name>wxArrayString</name>
        <param>
          <type>size_t</type>
          <declname>sz</declname>
        </param>
        <param>
          <type>const char **</type>
          <declname>arr</declname>
        </param>
        <briefdescription>
<para>Constructor from a C string array. </para>
        </briefdescription>
        <detaileddescription>
<para>Pass a size <emphasis>sz</emphasis> and an array <emphasis>arr</emphasis>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/arrstr.h" line="83" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classwx_array_string_1a71f569b4bbe2a77a6f222a743dc9e44b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxArrayString::wxArrayString</definition>
        <argsstring>(size_t sz, const wchar_t **arr)</argsstring>
        <name>wxArrayString</name>
        <param>
          <type>size_t</type>
          <declname>sz</declname>
        </param>
        <param>
          <type>const wchar_t **</type>
          <declname>arr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/arrstr.h" line="84" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classwx_array_string_1aeb9c9e5cb3550098735f54a47c3d29b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxArrayString::wxArrayString</definition>
        <argsstring>(size_t sz, const wxString *arr)</argsstring>
        <name>wxArrayString</name>
        <param>
          <type>size_t</type>
          <declname>sz</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> *</type>
          <declname>arr</declname>
        </param>
        <briefdescription>
<para>Constructor from a <ref refid="classwx_string" kindref="compound">wxString</ref> array. </para>
        </briefdescription>
        <detaileddescription>
<para>Pass a size <emphasis>sz</emphasis> and array <emphasis>arr</emphasis>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/arrstr.h" line="90" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classwx_array_string_1a62c4453faf577c0196eac0b38701d710" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxArrayString::~wxArrayString</definition>
        <argsstring>()</argsstring>
        <name>~wxArrayString</name>
        <briefdescription>
<para>Destructor frees memory occupied by the array strings. </para>
        </briefdescription>
        <detaileddescription>
<para>For performance reasons it is not virtual, so this class should not be derived from. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/arrstr.h" line="96" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classwx_array_string_1af06b61455118d83a24183c3a9f6854b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t wxArrayString::Add</definition>
        <argsstring>(const wxString &amp;str, size_t copies=1)</argsstring>
        <name>Add</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>copies</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Appends the given number of <emphasis>copies</emphasis> of the new item <emphasis>str</emphasis> to the array and returns the index of the first new item in the array. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classwx_array_string_1a387e3c84e8d7f78d743383c7108754b3" kindref="member">Insert()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/arrstr.h" line="104" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classwx_array_string_1a7d399eb79ba4f7ad165af03909889894" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxArrayString::Alloc</definition>
        <argsstring>(size_t nCount)</argsstring>
        <name>Alloc</name>
        <param>
          <type>size_t</type>
          <declname>nCount</declname>
        </param>
        <briefdescription>
<para>Preallocates enough memory to store <emphasis>nCount</emphasis> items. </para>
        </briefdescription>
        <detaileddescription>
<para>This function may be used to improve array class performance before adding a known number of items consecutively. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/arrstr.h" line="112" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_array_string_1aad1c8fe1dd445b359a633cdd6c5940ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxArrayString::Clear</definition>
        <argsstring>()</argsstring>
        <name>Clear</name>
        <briefdescription>
<para>Clears the array contents and frees memory. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classwx_array_string_1ac23ff4a9b6a0f014c2c803361eee52f5" kindref="member">Empty()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/arrstr.h" line="119" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_array_string_1ac23ff4a9b6a0f014c2c803361eee52f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxArrayString::Empty</definition>
        <argsstring>()</argsstring>
        <name>Empty</name>
        <briefdescription>
<para>Empties the array: after a call to this function <ref refid="classwx_array_string_1af511acc3b90836bb5084468d40aaf2f8" kindref="member">GetCount()</ref> will return 0. </para>
        </briefdescription>
        <detaileddescription>
<para>However, this function does not free the memory used by the array and so should be used when the array is going to be reused for storing other strings. Otherwise, you should use <ref refid="classwx_array_string_1aad1c8fe1dd445b359a633cdd6c5940ce" kindref="member">Clear()</ref> to empty the array and free memory. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/arrstr.h" line="127" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_array_string_1af511acc3b90836bb5084468d40aaf2f8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t wxArrayString::GetCount</definition>
        <argsstring>() const</argsstring>
        <name>GetCount</name>
        <briefdescription>
<para>Returns the number of items in the array. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/arrstr.h" line="132" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classwx_array_string_1a17f9a83da09ec426fb4d885acf8fea78" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxArrayString::Index</definition>
        <argsstring>(const wxString &amp;str, bool bCase=true, bool bFromEnd=false) const</argsstring>
        <name>Index</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bCase</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>bFromEnd</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Searches the array for <emphasis>str</emphasis>, starting from the beginning if <emphasis>bFromEnd</emphasis> is false or from the end otherwise. </para>
        </briefdescription>
        <detaileddescription>
<para>If <emphasis>bCase</emphasis>, comparison is case sensitive (default), otherwise the case is ignored.</para>
<para>This function uses linear search for <ref refid="classwx_array_string" kindref="compound">wxArrayString</ref>. Returns the index of the first item matched or <computeroutput>wxNOT_FOUND</computeroutput> if there is no match. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/arrstr.h" line="142" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_array_string_1a387e3c84e8d7f78d743383c7108754b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxArrayString::Insert</definition>
        <argsstring>(const wxString &amp;str, size_t nIndex, size_t copies=1)</argsstring>
        <name>Insert</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nIndex</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>copies</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Inserts the given number of <emphasis>copies</emphasis> of <emphasis>str</emphasis> in the array before the array element at the position <emphasis>nIndex</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>Thus, for example, to insert the string in the beginning of the array you would write:</para>
<para><programlisting><codeline><highlight class="normal"><ref refid="classwx_array_string_1a387e3c84e8d7f78d743383c7108754b3" kindref="member">Insert</ref>(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">,<sp/>0);</highlight></codeline>
</programlisting></para>
<para>If <emphasis>nIndex</emphasis> is equal to <ref refid="classwx_array_string_1af511acc3b90836bb5084468d40aaf2f8" kindref="member">GetCount()</ref> this function behaves as <ref refid="classwx_array_string_1af06b61455118d83a24183c3a9f6854b1" kindref="member">Add()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/arrstr.h" line="155" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_array_string_1ac645644187aeb5890ddc5a36ff4763a0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxArrayString::IsEmpty</definition>
        <argsstring>() const</argsstring>
        <name>IsEmpty</name>
        <briefdescription>
<para>Returns true if the array is empty, false otherwise. </para>
        </briefdescription>
        <detaileddescription>
<para>This function returns the same result as <ref refid="classwx_array_string_1af511acc3b90836bb5084468d40aaf2f8" kindref="member">GetCount()</ref> == 0 but is probably easier to read. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/arrstr.h" line="161" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_array_string_1a65cc551682c1fbf86a8a31820e20ff09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
        <definition>wxString &amp; wxArrayString::Item</definition>
        <argsstring>(size_t nIndex)</argsstring>
        <name>Item</name>
        <param>
          <type>size_t</type>
          <declname>nIndex</declname>
        </param>
        <briefdescription>
<para>Return the array element at position <emphasis>nIndex</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>An assert failure will result from an attempt to access an element beyond the end of array in debug mode, but no check is done in release mode.</para>
<para><simplesect kind="see"><para>operator[] for the operator version. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/arrstr.h" line="171" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_array_string_1abb4eff488d5e2773d8872fcae03ab47f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
        <definition>const wxString &amp; wxArrayString::Item</definition>
        <argsstring>(size_t nIndex) const</argsstring>
        <name>Item</name>
        <param>
          <type>size_t</type>
          <declname>nIndex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/arrstr.h" line="172" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classwx_array_string_1a37c7719b2ba15944cab95bcad4cce6d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
        <definition>wxString &amp; wxArrayString::Last</definition>
        <argsstring>()</argsstring>
        <name>Last</name>
        <briefdescription>
<para>Returns the last element of the array. </para>
        </briefdescription>
        <detaileddescription>
<para>Attempt to access the last element of an empty array will result in assert failure in debug build, however no checks are done in release mode. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/arrstr.h" line="181" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_array_string_1a65be9ecf8b605dc96341fd6d75d76a9a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
        <definition>const wxString &amp; wxArrayString::Last</definition>
        <argsstring>() const</argsstring>
        <name>Last</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/arrstr.h" line="182" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classwx_array_string_1ae24a86de01c53488e84ce3c39582fbc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxArrayString::Remove</definition>
        <argsstring>(const wxString &amp;sz)</argsstring>
        <name>Remove</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>sz</declname>
        </param>
        <briefdescription>
<para>Removes the first item matching this value. </para>
        </briefdescription>
        <detaileddescription>
<para>An assert failure is provoked by an attempt to remove an element which does not exist in debug build.</para>
<para><simplesect kind="see"><para><ref refid="classwx_array_string_1a17f9a83da09ec426fb4d885acf8fea78" kindref="member">Index()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/arrstr.h" line="191" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_array_string_1a1374163a35ccb75adac977acfe8add96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxArrayString::RemoveAt</definition>
        <argsstring>(size_t nIndex, size_t count=1)</argsstring>
        <name>RemoveAt</name>
        <param>
          <type>size_t</type>
          <declname>nIndex</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Removes <emphasis>count</emphasis> items starting at position <emphasis>nIndex</emphasis> from the array. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/arrstr.h" line="196" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_array_string_1a598a1eba111e3c25ef760dcdcc0c7678" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxArrayString::Shrink</definition>
        <argsstring>()</argsstring>
        <name>Shrink</name>
        <briefdescription>
<para>Releases the extra memory allocated by the array. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is useful to minimize the array memory consumption.</para>
<para><simplesect kind="see"><para><ref refid="classwx_array_string_1a7d399eb79ba4f7ad165af03909889894" kindref="member">Alloc()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/arrstr.h" line="204" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_array_string_1af10a5c5c81001638f5a2b6dceaa74810" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxArrayString::Sort</definition>
        <argsstring>(bool reverseOrder=false)</argsstring>
        <name>Sort</name>
        <param>
          <type>bool</type>
          <declname>reverseOrder</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Sorts the array in alphabetical order or in reverse alphabetical order if <emphasis>reverseOrder</emphasis> is true. </para>
        </briefdescription>
        <detaileddescription>
<para>The sort is case-sensitive. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/arrstr.h" line="210" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_array_string_1a0403ae7f8702fdc5c21b700053e7af0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxArrayString::Sort</definition>
        <argsstring>(CompareFunction compareFunction)</argsstring>
        <name>Sort</name>
        <param>
          <type><ref refid="classwx_array_string_1afba21000492b843ade57264ddd1b8618" kindref="member">CompareFunction</ref></type>
          <declname>compareFunction</declname>
        </param>
        <briefdescription>
<para>Sorts the array using the specified <emphasis>compareFunction</emphasis> for item comparison. </para>
        </briefdescription>
        <detaileddescription>
<para><emphasis>CompareFunction</emphasis> is defined as a function taking two <emphasis>const <ref refid="classwx_string" kindref="compound">wxString</ref>&amp;</emphasis> parameters and returning an <emphasis>int</emphasis> value less than, equal to or greater than 0 if the first string is less than, equal to or greater than the second one.</para>
<para>Example: The following example sorts strings by their length.</para>
<para><programlisting><codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CompareStringLen(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classwx_string" kindref="compound">wxString</ref>&amp;<sp/>first,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classwx_string" kindref="compound">wxString</ref>&amp;<sp/>second)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>first.<ref refid="classwx_string_1ae4d27fb54ba938b6dcf76bfcf722eccd" kindref="member">length</ref>()<sp/>-<sp/>second.<ref refid="classwx_string_1ae4d27fb54ba938b6dcf76bfcf722eccd" kindref="member">length</ref>();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">wxArrayString<sp/>array;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">array.Add(</highlight><highlight class="stringliteral">&quot;one&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">array.Add(</highlight><highlight class="stringliteral">&quot;two&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">array.Add(</highlight><highlight class="stringliteral">&quot;three&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">array.Add(</highlight><highlight class="stringliteral">&quot;four&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">array.Sort(CompareStringLen);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/arrstr.h" line="240" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_array_string_1acb2db8332d0edf29a28d55d3933dba0e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxArrayString::operator!=</definition>
        <argsstring>(const wxArrayString &amp;array) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classwx_array_string" kindref="compound">wxArrayString</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
<para>Compares 2 arrays respecting the case. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns true if the arrays have different number of elements or if the elements don&apos;t match pairwise. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/arrstr.h" line="246" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_array_string_1aff74f1d90b325ad81c473a7bbf6ec178" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_array_string" kindref="compound">wxArrayString</ref> &amp;</type>
        <definition>wxArrayString &amp; wxArrayString::operator=</definition>
        <argsstring>(const wxArrayString &amp;)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classwx_array_string" kindref="compound">wxArrayString</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Assignment operator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/arrstr.h" line="251" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classwx_array_string_1a018ef7bb1c6a070499a2c2ed99be5beb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxArrayString::operator==</definition>
        <argsstring>(const wxArrayString &amp;array) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classwx_array_string" kindref="compound">wxArrayString</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
<para>Compares 2 arrays respecting the case. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns true only if the arrays have the same number of elements and the same strings in the same order. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/arrstr.h" line="257" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_array_string_1ae421fe508ee9e1b4a9b424da3f2f1ae0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
        <definition>wxString &amp; wxArrayString::operator[]</definition>
        <argsstring>(size_t nIndex) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>size_t</type>
          <declname>nIndex</declname>
        </param>
        <briefdescription>
<para>Returns the array element at position <emphasis>nIndex</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>An assert failure will result from an attempt to access an element beyond the end of array in debug mode, but no check is done in release mode.</para>
<para>This is the operator version of the <ref refid="classwx_array_string_1a65cc551682c1fbf86a8a31820e20ff09" kindref="member">Item()</ref> method. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/arrstr.h" line="266" column="14"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="classwx_array_string" kindref="compound">wxArrayString</ref> is an efficient container for storing <ref refid="classwx_string" kindref="compound">wxString</ref> objects. </para>
    </briefdescription>
    <detaileddescription>
<para>It has the same features as all wxArray classes, i.e. it dynamically expands when new items are added to it (so it is as easy to use as a linked list), but the access time to the elements is constant, instead of being linear in number of elements as in the case of linked lists. It is also very size efficient and doesn&apos;t take more space than a C array <emphasis><ref refid="classwx_string" kindref="compound">wxString</ref></emphasis>[] type (<ref refid="classwx_array_string" kindref="compound">wxArrayString</ref> uses its knowledge of internals of <ref refid="classwx_string" kindref="compound">wxString</ref> class to achieve this).</para>
<para>This class is used in the same way as other dynamic arrays(), except that no <ref refid="dynarray_8h_1aa9c653860ef656116ad6914e79e17340" kindref="member">WX_DEFINE_ARRAY</ref> declaration is needed for it. When a string is added or inserted in the array, a copy of the string is created, so the original string may be safely deleted (e.g. if it was a <emphasis>wxChar</emphasis> * pointer the memory it was using can be freed immediately after this). In general, there is no need to worry about string memory deallocation when using this class - it will always free the memory it uses itself.</para>
<para>The references returned by <ref refid="classwx_array_string_1a65cc551682c1fbf86a8a31820e20ff09" kindref="member">wxArrayString::Item</ref>, <ref refid="classwx_array_string_1a37c7719b2ba15944cab95bcad4cce6d5" kindref="member">wxArrayString::Last</ref> or <ref refid="classwx_array_string_1ae421fe508ee9e1b4a9b424da3f2f1ae0" kindref="member">wxArrayString::operator[]</ref> are not constant, so the array elements may be modified in place like this:</para>
<para><programlisting><codeline><highlight class="normal">array.Last().MakeUpper();</highlight></codeline>
</programlisting></para>
<para><simplesect kind="note"><para>None of the methods of <ref refid="classwx_array_string" kindref="compound">wxArrayString</ref> is virtual including its destructor, so this class should not be used as a base class.</para>
</simplesect>
Although this is not true strictly speaking, this class may be considered as a specialization of wxArray class for the <ref refid="classwx_string" kindref="compound">wxString</ref> member data: it is not implemented like this, but it does have all of the wxArray functions.</para>
<para>It also has the full set of <computeroutput>std::vector&lt;wxString&gt;</computeroutput> compatible methods, including nested <computeroutput>iterator</computeroutput> and <computeroutput>const_iterator</computeroutput> classes which should be used in the new code for forward compatibility with the future wxWidgets versions.</para>
<para><heading level="2"></heading>
</para>
<para>Library:<nonbreakablespace/><nonbreakablespace/><ref refid="page_libs_1page_libs_wxbase" kindref="member">wxBase</ref> &lt;&gt;&lt; =&apos;&apos;&gt;:&lt;/&gt;&amp;;&amp;;&lt; =&apos;&apos;&gt;\ &lt;/&gt;&lt;/&gt;</para>
<para><simplesect kind="see"><para><ref refid="classwx_sorted_array_string" kindref="compound">wxSortedArrayString</ref>, <ref refid="classwx_array_3_01_t_01_4" kindref="compound">wxArray&lt;T&gt;</ref>, <ref refid="classwx_string" kindref="compound">wxString</ref>, <ref refid="overview_string" kindref="compound">wxString Overview</ref> </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>wxArray</label>
      </node>
      <node id="1">
        <label>wxArrayString</label>
        <link refid="classwx_array_string"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>wxPathList</label>
        <link refid="classwx_path_list"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>wxArray</label>
      </node>
      <node id="1">
        <label>wxArrayString</label>
        <link refid="classwx_array_string"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="interface/wx/arrstr.h" line="53" column="1" bodyfile="interface/wx/arrstr.h" bodystart="54" bodyend="267"/>
    <listofallmembers>
      <member refid="classwx_array_string_1af06b61455118d83a24183c3a9f6854b1" prot="public" virt="non-virtual"><scope>wxArrayString</scope><name>Add</name></member>
      <member refid="classwx_array_string_1a7d399eb79ba4f7ad165af03909889894" prot="public" virt="non-virtual"><scope>wxArrayString</scope><name>Alloc</name></member>
      <member refid="classwx_array_string_1aad1c8fe1dd445b359a633cdd6c5940ce" prot="public" virt="non-virtual"><scope>wxArrayString</scope><name>Clear</name></member>
      <member refid="classwx_array_string_1afba21000492b843ade57264ddd1b8618" prot="public" virt="non-virtual"><scope>wxArrayString</scope><name>CompareFunction</name></member>
      <member refid="classwx_array_string_1ac23ff4a9b6a0f014c2c803361eee52f5" prot="public" virt="non-virtual"><scope>wxArrayString</scope><name>Empty</name></member>
      <member refid="classwx_array_string_1af511acc3b90836bb5084468d40aaf2f8" prot="public" virt="non-virtual"><scope>wxArrayString</scope><name>GetCount</name></member>
      <member refid="classwx_array_string_1a17f9a83da09ec426fb4d885acf8fea78" prot="public" virt="non-virtual"><scope>wxArrayString</scope><name>Index</name></member>
      <member refid="classwx_array_string_1a387e3c84e8d7f78d743383c7108754b3" prot="public" virt="non-virtual"><scope>wxArrayString</scope><name>Insert</name></member>
      <member refid="classwx_array_string_1ac645644187aeb5890ddc5a36ff4763a0" prot="public" virt="non-virtual"><scope>wxArrayString</scope><name>IsEmpty</name></member>
      <member refid="classwx_array_string_1a65cc551682c1fbf86a8a31820e20ff09" prot="public" virt="non-virtual"><scope>wxArrayString</scope><name>Item</name></member>
      <member refid="classwx_array_string_1abb4eff488d5e2773d8872fcae03ab47f" prot="public" virt="non-virtual"><scope>wxArrayString</scope><name>Item</name></member>
      <member refid="classwx_array_string_1a37c7719b2ba15944cab95bcad4cce6d5" prot="public" virt="non-virtual"><scope>wxArrayString</scope><name>Last</name></member>
      <member refid="classwx_array_string_1a65be9ecf8b605dc96341fd6d75d76a9a" prot="public" virt="non-virtual"><scope>wxArrayString</scope><name>Last</name></member>
      <member refid="classwx_array_string_1acb2db8332d0edf29a28d55d3933dba0e" prot="public" virt="non-virtual"><scope>wxArrayString</scope><name>operator!=</name></member>
      <member refid="classwx_array_string_1aff74f1d90b325ad81c473a7bbf6ec178" prot="public" virt="non-virtual"><scope>wxArrayString</scope><name>operator=</name></member>
      <member refid="classwx_array_string_1a018ef7bb1c6a070499a2c2ed99be5beb" prot="public" virt="non-virtual"><scope>wxArrayString</scope><name>operator==</name></member>
      <member refid="classwx_array_string_1ae421fe508ee9e1b4a9b424da3f2f1ae0" prot="public" virt="non-virtual"><scope>wxArrayString</scope><name>operator[]</name></member>
      <member refid="classwx_array_string_1ae24a86de01c53488e84ce3c39582fbc1" prot="public" virt="non-virtual"><scope>wxArrayString</scope><name>Remove</name></member>
      <member refid="classwx_array_string_1a1374163a35ccb75adac977acfe8add96" prot="public" virt="non-virtual"><scope>wxArrayString</scope><name>RemoveAt</name></member>
      <member refid="classwx_array_string_1a598a1eba111e3c25ef760dcdcc0c7678" prot="public" virt="non-virtual"><scope>wxArrayString</scope><name>Shrink</name></member>
      <member refid="classwx_array_string_1af10a5c5c81001638f5a2b6dceaa74810" prot="public" virt="non-virtual"><scope>wxArrayString</scope><name>Sort</name></member>
      <member refid="classwx_array_string_1a0403ae7f8702fdc5c21b700053e7af0c" prot="public" virt="non-virtual"><scope>wxArrayString</scope><name>Sort</name></member>
      <member refid="classwx_array_string_1a35fe0f0ee8452506f1ca39d3fd48c14e" prot="public" virt="non-virtual"><scope>wxArrayString</scope><name>wxArrayString</name></member>
      <member refid="classwx_array_string_1a217ff3d3246ea5079bac9295ff36a237" prot="public" virt="non-virtual"><scope>wxArrayString</scope><name>wxArrayString</name></member>
      <member refid="classwx_array_string_1a4df6e48276a8f2f12d018281eda1a618" prot="public" virt="non-virtual"><scope>wxArrayString</scope><name>wxArrayString</name></member>
      <member refid="classwx_array_string_1a71f569b4bbe2a77a6f222a743dc9e44b" prot="public" virt="non-virtual"><scope>wxArrayString</scope><name>wxArrayString</name></member>
      <member refid="classwx_array_string_1aeb9c9e5cb3550098735f54a47c3d29b4" prot="public" virt="non-virtual"><scope>wxArrayString</scope><name>wxArrayString</name></member>
      <member refid="classwx_array_string_1a62c4453faf577c0196eac0b38701d710" prot="public" virt="non-virtual"><scope>wxArrayString</scope><name>~wxArrayString</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
