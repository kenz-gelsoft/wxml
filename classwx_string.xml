<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="classwx_string" kind="class" language="C++" prot="public">
    <compoundname>wxString</compoundname>
    <derivedcompoundref refid="classwx_secret_string" prot="public" virt="non-virtual">wxSecretString</derivedcompoundref>
    <includes local="no">wx/string.h</includes>
      <sectiondef kind="user-defined">
      <header>Standard types</header>
      <description><para>Types used with <ref refid="classwx_string" kindref="compound">wxString</ref>. </para>
</description>
      <memberdef kind="typedef" id="classwx_string_1a6abd360d5072ed411f80eda16ed0bd99" prot="public" static="no">
        <type><ref refid="classwx_uni_char" kindref="compound">wxUniChar</ref></type>
        <definition>typedef wxUniChar wxString::value_type</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <qualifiedname>wxString::value_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="323" column="23" bodyfile="interface/wx/string.h" bodystart="323" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classwx_string_1a6d7f9c6d210daec80bb59763e3016516" prot="public" static="no">
        <type><ref refid="classwx_uni_char" kindref="compound">wxUniChar</ref></type>
        <definition>typedef wxUniChar wxString::char_type</definition>
        <argsstring></argsstring>
        <name>char_type</name>
        <qualifiedname>wxString::char_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="324" column="23" bodyfile="interface/wx/string.h" bodystart="324" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classwx_string_1a1d03e8507f5f2044d9776255cb5dfb04" prot="public" static="no">
        <type><ref refid="classwx_uni_char_ref" kindref="compound">wxUniCharRef</ref></type>
        <definition>typedef wxUniCharRef wxString::reference</definition>
        <argsstring></argsstring>
        <name>reference</name>
        <qualifiedname>wxString::reference</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="325" column="26" bodyfile="interface/wx/string.h" bodystart="325" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classwx_string_1a6d1498f58142e40d885b1bda1ec25c83" prot="public" static="no">
        <type><ref refid="chartype_8h_1ad42f64d8c82f1ce4ae58773a89b2d6a7" kindref="member">wxChar</ref> *</type>
        <definition>typedef wxChar* wxString::pointer</definition>
        <argsstring></argsstring>
        <name>pointer</name>
        <qualifiedname>wxString::pointer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="326" column="20" bodyfile="interface/wx/string.h" bodystart="326" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classwx_string_1a9c8b22db8c1446c53f1728c261d2d65b" prot="public" static="no">
        <type>const <ref refid="chartype_8h_1ad42f64d8c82f1ce4ae58773a89b2d6a7" kindref="member">wxChar</ref> *</type>
        <definition>typedef const wxChar* wxString::const_pointer</definition>
        <argsstring></argsstring>
        <name>const_pointer</name>
        <qualifiedname>wxString::const_pointer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="327" column="26" bodyfile="interface/wx/string.h" bodystart="327" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classwx_string_1afc144b1e31fffd1a9fc6ba8a551cc073" prot="public" static="no">
        <type>size_t</type>
        <definition>typedef size_t wxString::size_type</definition>
        <argsstring></argsstring>
        <name>size_type</name>
        <qualifiedname>wxString::size_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="328" column="20" bodyfile="interface/wx/string.h" bodystart="328" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classwx_string_1afd79e86aee78b7aab5e82483ab8d7a57" prot="public" static="no">
        <type><ref refid="classwx_uni_char" kindref="compound">wxUniChar</ref></type>
        <definition>typedef wxUniChar wxString::const_reference</definition>
        <argsstring></argsstring>
        <name>const_reference</name>
        <qualifiedname>wxString::const_reference</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="329" column="23" bodyfile="interface/wx/string.h" bodystart="329" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>STL interface</header>
      <description><para><anchor id="classwx_string_1stl"/></para>
<para>The supported STL functions are listed here.</para>
<para>Please see any STL reference (e.g. <ulink url="http://www.cppreference.com/wiki/string/start">http://www.cppreference.com/wiki/string/start</ulink>) for their documentation. </para>
</description>
      <memberdef kind="variable" id="classwx_string_1a7f7b5ab972b4be6703f9c779654af247" prot="public" static="yes" mutable="no">
        <type>const size_t</type>
        <definition>const size_t wxString::npos</definition>
        <argsstring></argsstring>
        <name>npos</name>
        <qualifiedname>wxString::npos</qualifiedname>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1783" column="25" bodyfile="interface/wx/string.h" bodystart="1783" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a7379692b7b4dc9e08a6b364d743b6117" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
        <definition>wxString &amp; wxString::append</definition>
        <argsstring>(const wxString &amp;str, size_t pos, size_t n)</argsstring>
        <name>append</name>
        <qualifiedname>wxString::append</qualifiedname>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1653" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a4b5494e0badba806b857a618fe16b651" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
        <definition>wxString &amp; wxString::append</definition>
        <argsstring>(const wxString &amp;str)</argsstring>
        <name>append</name>
        <qualifiedname>wxString::append</qualifiedname>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1654" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a119c5c9ed8f350fd32ea23440034b71e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
        <definition>wxString &amp; wxString::append</definition>
        <argsstring>(const char *sz, size_t n)</argsstring>
        <name>append</name>
        <qualifiedname>wxString::append</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>sz</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1655" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1ae69bd4059df5503b7bf092d72639aecf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
        <definition>wxString &amp; wxString::append</definition>
        <argsstring>(const wchar_t *sz, size_t n)</argsstring>
        <name>append</name>
        <qualifiedname>wxString::append</qualifiedname>
        <param>
          <type>const wchar_t *</type>
          <declname>sz</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1656" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a1d3fac5eeb28db445b5389288ac0aa2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
        <definition>wxString &amp; wxString::append</definition>
        <argsstring>(size_t n, wxUniChar ch)</argsstring>
        <name>append</name>
        <qualifiedname>wxString::append</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="classwx_uni_char" kindref="compound">wxUniChar</ref></type>
          <declname>ch</declname>
        </param>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1657" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1aaa034b9accafeaf80c031870ad0d90a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
        <definition>wxString &amp; wxString::append</definition>
        <argsstring>(const_iterator first, const_iterator last)</argsstring>
        <name>append</name>
        <qualifiedname>wxString::append</qualifiedname>
        <param>
          <type>const_iterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>const_iterator</type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1658" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a62b7a905a639c7927e6b1095bbfbe618" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
        <definition>wxString &amp; wxString::assign</definition>
        <argsstring>(const wxString &amp;str, size_t pos, size_t n)</argsstring>
        <name>assign</name>
        <qualifiedname>wxString::assign</qualifiedname>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1660" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a87bccf464b60bec99d08afe412f7bf0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
        <definition>wxString &amp; wxString::assign</definition>
        <argsstring>(const wxString &amp;str)</argsstring>
        <name>assign</name>
        <qualifiedname>wxString::assign</qualifiedname>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1661" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1ae9d484378d0abaa67e875099aba0136e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
        <definition>wxString &amp; wxString::assign</definition>
        <argsstring>(const char *sz, size_t n)</argsstring>
        <name>assign</name>
        <qualifiedname>wxString::assign</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>sz</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1662" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a576090a1471ae8d209041f9d140c005b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
        <definition>wxString &amp; wxString::assign</definition>
        <argsstring>(const wchar_t *sz, size_t n)</argsstring>
        <name>assign</name>
        <qualifiedname>wxString::assign</qualifiedname>
        <param>
          <type>const wchar_t *</type>
          <declname>sz</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1663" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a817636c3f2ce096d1dd580693864f626" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
        <definition>wxString &amp; wxString::assign</definition>
        <argsstring>(size_t n, wxUniChar ch)</argsstring>
        <name>assign</name>
        <qualifiedname>wxString::assign</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="classwx_uni_char" kindref="compound">wxUniChar</ref></type>
          <declname>ch</declname>
        </param>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1664" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1afae03224f376016558575a93c95bd6fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
        <definition>wxString &amp; wxString::assign</definition>
        <argsstring>(const_iterator first, const_iterator last)</argsstring>
        <name>assign</name>
        <qualifiedname>wxString::assign</qualifiedname>
        <param>
          <type>const_iterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>const_iterator</type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1665" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a26c2820f86f82c4a1b28dd27a8015deb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_uni_char" kindref="compound">wxUniChar</ref></type>
        <definition>wxUniChar wxString::at</definition>
        <argsstring>(size_t n) const</argsstring>
        <name>at</name>
        <qualifiedname>wxString::at</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1667" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1af2706738677db54403e91bfd824595f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_uni_char_ref" kindref="compound">wxUniCharRef</ref></type>
        <definition>wxUniCharRef wxString::at</definition>
        <argsstring>(size_t n)</argsstring>
        <name>at</name>
        <qualifiedname>wxString::at</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1668" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a4dcd0f3f0fe03ccddb85df2f3b18d665" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxString::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <qualifiedname>wxString::clear</qualifiedname>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1670" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a886800922277e46ae6488001b6995fcd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string_1afc144b1e31fffd1a9fc6ba8a551cc073" kindref="member">size_type</ref></type>
        <definition>size_type wxString::capacity</definition>
        <argsstring>() const</argsstring>
        <name>capacity</name>
        <qualifiedname>wxString::capacity</qualifiedname>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1672" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a00931c787708b651e0d58df76a15ab8d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxString::compare</definition>
        <argsstring>(const wxString &amp;str) const</argsstring>
        <name>compare</name>
        <qualifiedname>wxString::compare</qualifiedname>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1674" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1ac14b5c926a262e079d2733bda1fa8d0b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxString::compare</definition>
        <argsstring>(size_t nStart, size_t nLen, const wxString &amp;str) const</argsstring>
        <name>compare</name>
        <qualifiedname>wxString::compare</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>nStart</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nLen</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1675" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a52004ccc07160abb7f132e1747121d28" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxString::compare</definition>
        <argsstring>(size_t nStart, size_t nLen, const wxString &amp;str, size_t nStart2, size_t nLen2) const</argsstring>
        <name>compare</name>
        <qualifiedname>wxString::compare</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>nStart</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nLen</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nStart2</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nLen2</declname>
        </param>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1676" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1ac85892c003c27862a389a53d7467ae92" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxString::compare</definition>
        <argsstring>(size_t nStart, size_t nLen, const char *sz, size_t nCount=npos) const</argsstring>
        <name>compare</name>
        <qualifiedname>wxString::compare</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>nStart</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nLen</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>sz</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nCount</declname>
          <defval><ref refid="classwx_string_1a7f7b5ab972b4be6703f9c779654af247" kindref="member">npos</ref></defval>
        </param>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1678" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a7aab74b6ccfbb7e79aced78713a7a00b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxString::compare</definition>
        <argsstring>(size_t nStart, size_t nLen, const wchar_t *sz, size_t nCount=npos) const</argsstring>
        <name>compare</name>
        <qualifiedname>wxString::compare</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>nStart</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nLen</declname>
        </param>
        <param>
          <type>const wchar_t *</type>
          <declname>sz</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nCount</declname>
          <defval><ref refid="classwx_string_1a7f7b5ab972b4be6703f9c779654af247" kindref="member">npos</ref></defval>
        </param>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1680" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1af32f556964cde33f628a4136a3d181c8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>wxCStrData</type>
        <definition>wxCStrData wxString::data</definition>
        <argsstring>() const</argsstring>
        <name>data</name>
        <qualifiedname>wxString::data</qualifiedname>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1683" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a0da48f47fbe336c5b0a1a58a283b5112" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxString::empty</definition>
        <argsstring>() const</argsstring>
        <name>empty</name>
        <qualifiedname>wxString::empty</qualifiedname>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1685" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a06ebc28714c67f736020e24507782762" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
        <definition>wxString &amp; wxString::erase</definition>
        <argsstring>(size_type pos=0, size_type n=npos)</argsstring>
        <name>erase</name>
        <qualifiedname>wxString::erase</qualifiedname>
        <param>
          <type><ref refid="classwx_string_1afc144b1e31fffd1a9fc6ba8a551cc073" kindref="member">size_type</ref></type>
          <declname>pos</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="classwx_string_1afc144b1e31fffd1a9fc6ba8a551cc073" kindref="member">size_type</ref></type>
          <declname>n</declname>
          <defval><ref refid="classwx_string_1a7f7b5ab972b4be6703f9c779654af247" kindref="member">npos</ref></defval>
        </param>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1687" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a55b82ddfe4dae84a49ef9e175bdadd80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>iterator</type>
        <definition>iterator wxString::erase</definition>
        <argsstring>(iterator first, iterator last)</argsstring>
        <name>erase</name>
        <qualifiedname>wxString::erase</qualifiedname>
        <param>
          <type>iterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>iterator</type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1688" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1ada23f52354ca0625e520b84adfc41ce4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>iterator</type>
        <definition>iterator wxString::erase</definition>
        <argsstring>(iterator first)</argsstring>
        <name>erase</name>
        <qualifiedname>wxString::erase</qualifiedname>
        <param>
          <type>iterator</type>
          <declname>first</declname>
        </param>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1689" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a2774f4d4ddd392f89a70e3a63ffa7c13" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t wxString::find</definition>
        <argsstring>(const wxString &amp;str, size_t nStart=0) const</argsstring>
        <name>find</name>
        <qualifiedname>wxString::find</qualifiedname>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nStart</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1691" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a5d863e0afdb7fb57ec0048e2acdf625c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t wxString::find</definition>
        <argsstring>(const char *sz, size_t nStart=0, size_t n=npos) const</argsstring>
        <name>find</name>
        <qualifiedname>wxString::find</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>sz</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nStart</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
          <defval><ref refid="classwx_string_1a7f7b5ab972b4be6703f9c779654af247" kindref="member">npos</ref></defval>
        </param>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1692" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1af6e380addef0a57cf0abbac84ac26e54" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t wxString::find</definition>
        <argsstring>(const wchar_t *sz, size_t nStart=0, size_t n=npos) const</argsstring>
        <name>find</name>
        <qualifiedname>wxString::find</qualifiedname>
        <param>
          <type>const wchar_t *</type>
          <declname>sz</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nStart</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
          <defval><ref refid="classwx_string_1a7f7b5ab972b4be6703f9c779654af247" kindref="member">npos</ref></defval>
        </param>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1693" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1ab6e0c600bfccdf13b04c5bb7a8519a3b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t wxString::find</definition>
        <argsstring>(wxUniChar ch, size_t nStart=0) const</argsstring>
        <name>find</name>
        <qualifiedname>wxString::find</qualifiedname>
        <param>
          <type><ref refid="classwx_uni_char" kindref="compound">wxUniChar</ref></type>
          <declname>ch</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nStart</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1694" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a94af755d41fc9f186295ec9c8ac0d26b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t wxString::find_first_of</definition>
        <argsstring>(const char *sz, size_t nStart=0) const</argsstring>
        <name>find_first_of</name>
        <qualifiedname>wxString::find_first_of</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>sz</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nStart</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1695" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1adb8a7070df1764bae12a097b62b7e0a6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t wxString::find_first_of</definition>
        <argsstring>(const wchar_t *sz, size_t nStart=0) const</argsstring>
        <name>find_first_of</name>
        <qualifiedname>wxString::find_first_of</qualifiedname>
        <param>
          <type>const wchar_t *</type>
          <declname>sz</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nStart</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1696" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a23a0f30baa7a4a35f40f63e4ee84f68f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t wxString::find_first_of</definition>
        <argsstring>(const char *sz, size_t nStart, size_t n) const</argsstring>
        <name>find_first_of</name>
        <qualifiedname>wxString::find_first_of</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>sz</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nStart</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1697" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a2e21bf751c9b13cdc97c8777534186d2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t wxString::find_first_of</definition>
        <argsstring>(const wchar_t *sz, size_t nStart, size_t n) const</argsstring>
        <name>find_first_of</name>
        <qualifiedname>wxString::find_first_of</qualifiedname>
        <param>
          <type>const wchar_t *</type>
          <declname>sz</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nStart</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1698" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a08fd2bfdf1f6621637639f37a4a93125" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t wxString::find_first_of</definition>
        <argsstring>(wxUniChar c, size_t nStart=0) const</argsstring>
        <name>find_first_of</name>
        <qualifiedname>wxString::find_first_of</qualifiedname>
        <param>
          <type><ref refid="classwx_uni_char" kindref="compound">wxUniChar</ref></type>
          <declname>c</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nStart</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1699" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a0c28a039a658fe2e5106be5fd7034f51" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t wxString::find_last_of</definition>
        <argsstring>(const wxString &amp;str, size_t nStart=npos) const</argsstring>
        <name>find_last_of</name>
        <qualifiedname>wxString::find_last_of</qualifiedname>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nStart</declname>
          <defval><ref refid="classwx_string_1a7f7b5ab972b4be6703f9c779654af247" kindref="member">npos</ref></defval>
        </param>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1700" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a0d9338eec4caffb5ced53e5b3a1ab5dd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t wxString::find_last_of</definition>
        <argsstring>(const char *sz, size_t nStart=npos) const</argsstring>
        <name>find_last_of</name>
        <qualifiedname>wxString::find_last_of</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>sz</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nStart</declname>
          <defval><ref refid="classwx_string_1a7f7b5ab972b4be6703f9c779654af247" kindref="member">npos</ref></defval>
        </param>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1701" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a4af7bee24fabdc19ad463e97e2f5d28c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t wxString::find_last_of</definition>
        <argsstring>(const wchar_t *sz, size_t nStart=npos) const</argsstring>
        <name>find_last_of</name>
        <qualifiedname>wxString::find_last_of</qualifiedname>
        <param>
          <type>const wchar_t *</type>
          <declname>sz</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nStart</declname>
          <defval><ref refid="classwx_string_1a7f7b5ab972b4be6703f9c779654af247" kindref="member">npos</ref></defval>
        </param>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1702" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1aeb6a964bbc1dee68f0dbc663d74916ad" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t wxString::find_last_of</definition>
        <argsstring>(const char *sz, size_t nStart, size_t n) const</argsstring>
        <name>find_last_of</name>
        <qualifiedname>wxString::find_last_of</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>sz</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nStart</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1703" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a879ab6eb4454e8d89660e45a32fb67d8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t wxString::find_last_of</definition>
        <argsstring>(const wchar_t *sz, size_t nStart, size_t n) const</argsstring>
        <name>find_last_of</name>
        <qualifiedname>wxString::find_last_of</qualifiedname>
        <param>
          <type>const wchar_t *</type>
          <declname>sz</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nStart</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1704" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1af03cee1e04c50ed6c619f66602ef680a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t wxString::find_last_of</definition>
        <argsstring>(wxUniChar c, size_t nStart=npos) const</argsstring>
        <name>find_last_of</name>
        <qualifiedname>wxString::find_last_of</qualifiedname>
        <param>
          <type><ref refid="classwx_uni_char" kindref="compound">wxUniChar</ref></type>
          <declname>c</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nStart</declname>
          <defval><ref refid="classwx_string_1a7f7b5ab972b4be6703f9c779654af247" kindref="member">npos</ref></defval>
        </param>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1705" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a9f7974624d08b3c2997aad156f484134" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t wxString::find_first_not_of</definition>
        <argsstring>(const wxString &amp;str, size_t nStart=0) const</argsstring>
        <name>find_first_not_of</name>
        <qualifiedname>wxString::find_first_not_of</qualifiedname>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nStart</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1706" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a0a7bd26a30a97ac69218199c1b626bb1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t wxString::find_first_not_of</definition>
        <argsstring>(const char *sz, size_t nStart=0) const</argsstring>
        <name>find_first_not_of</name>
        <qualifiedname>wxString::find_first_not_of</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>sz</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nStart</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1707" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1af8e11c997d25e6a6154adc7729d36141" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t wxString::find_first_not_of</definition>
        <argsstring>(const wchar_t *sz, size_t nStart=0) const</argsstring>
        <name>find_first_not_of</name>
        <qualifiedname>wxString::find_first_not_of</qualifiedname>
        <param>
          <type>const wchar_t *</type>
          <declname>sz</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nStart</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1708" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a4f04430561215c91b580f2bb9e7aedbd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t wxString::find_first_not_of</definition>
        <argsstring>(const char *sz, size_t nStart, size_t n) const</argsstring>
        <name>find_first_not_of</name>
        <qualifiedname>wxString::find_first_not_of</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>sz</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nStart</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1709" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a58cc5f7b47c6ce7039f29f27ffd5800d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t wxString::find_first_not_of</definition>
        <argsstring>(const wchar_t *sz, size_t nStart, size_t n) const</argsstring>
        <name>find_first_not_of</name>
        <qualifiedname>wxString::find_first_not_of</qualifiedname>
        <param>
          <type>const wchar_t *</type>
          <declname>sz</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nStart</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1710" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1aec908c5bcb37036cd7581da8bcbb6f02" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t wxString::find_first_not_of</definition>
        <argsstring>(wxUniChar ch, size_t nStart=0) const</argsstring>
        <name>find_first_not_of</name>
        <qualifiedname>wxString::find_first_not_of</qualifiedname>
        <param>
          <type><ref refid="classwx_uni_char" kindref="compound">wxUniChar</ref></type>
          <declname>ch</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nStart</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1711" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a009852881be77f3534af0cf630735167" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t wxString::find_last_not_of</definition>
        <argsstring>(const wxString &amp;str, size_t nStart=npos) const</argsstring>
        <name>find_last_not_of</name>
        <qualifiedname>wxString::find_last_not_of</qualifiedname>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nStart</declname>
          <defval><ref refid="classwx_string_1a7f7b5ab972b4be6703f9c779654af247" kindref="member">npos</ref></defval>
        </param>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1712" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1afe0cad1ade1fa608a7234398502415f3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t wxString::find_last_not_of</definition>
        <argsstring>(const char *sz, size_t nStart=npos) const</argsstring>
        <name>find_last_not_of</name>
        <qualifiedname>wxString::find_last_not_of</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>sz</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nStart</declname>
          <defval><ref refid="classwx_string_1a7f7b5ab972b4be6703f9c779654af247" kindref="member">npos</ref></defval>
        </param>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1713" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a184918f8f916fd00739fa5c00657ee89" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t wxString::find_last_not_of</definition>
        <argsstring>(const wchar_t *sz, size_t nStart=npos) const</argsstring>
        <name>find_last_not_of</name>
        <qualifiedname>wxString::find_last_not_of</qualifiedname>
        <param>
          <type>const wchar_t *</type>
          <declname>sz</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nStart</declname>
          <defval><ref refid="classwx_string_1a7f7b5ab972b4be6703f9c779654af247" kindref="member">npos</ref></defval>
        </param>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1714" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a86057cffbde99b90083a72443daea595" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t wxString::find_last_not_of</definition>
        <argsstring>(const char *sz, size_t nStart, size_t n) const</argsstring>
        <name>find_last_not_of</name>
        <qualifiedname>wxString::find_last_not_of</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>sz</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nStart</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1715" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a1655b1d2b22edbc84eb9c5dda0aca507" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t wxString::find_last_not_of</definition>
        <argsstring>(const wchar_t *sz, size_t nStart, size_t n) const</argsstring>
        <name>find_last_not_of</name>
        <qualifiedname>wxString::find_last_not_of</qualifiedname>
        <param>
          <type>const wchar_t *</type>
          <declname>sz</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nStart</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1716" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a49f0c0bca0ab4ef521c5451aa5fdcde0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
        <definition>wxString &amp; wxString::insert</definition>
        <argsstring>(size_t nPos, const wxString &amp;str)</argsstring>
        <name>insert</name>
        <qualifiedname>wxString::insert</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>nPos</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1718" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a8c83b43d3b5a4ea6c9dbb3f7e8b46402" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
        <definition>wxString &amp; wxString::insert</definition>
        <argsstring>(size_t nPos, const wxString &amp;str, size_t nStart, size_t n)</argsstring>
        <name>insert</name>
        <qualifiedname>wxString::insert</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>nPos</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nStart</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1719" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1ae786da601b5526a60f78f6c90d7c720b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
        <definition>wxString &amp; wxString::insert</definition>
        <argsstring>(size_t nPos, const char *sz, size_t n)</argsstring>
        <name>insert</name>
        <qualifiedname>wxString::insert</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>nPos</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>sz</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1720" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a61b0a2b99953533aaa06938c55d12493" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
        <definition>wxString &amp; wxString::insert</definition>
        <argsstring>(size_t nPos, const wchar_t *sz, size_t n)</argsstring>
        <name>insert</name>
        <qualifiedname>wxString::insert</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>nPos</declname>
        </param>
        <param>
          <type>const wchar_t *</type>
          <declname>sz</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1721" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a014717749981bce220fe07896abc878e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
        <definition>wxString &amp; wxString::insert</definition>
        <argsstring>(size_t nPos, size_t n, wxUniChar ch)</argsstring>
        <name>insert</name>
        <qualifiedname>wxString::insert</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>nPos</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="classwx_uni_char" kindref="compound">wxUniChar</ref></type>
          <declname>ch</declname>
        </param>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1722" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a3ed61e4671e7b2e44224edf20d574681" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>iterator</type>
        <definition>iterator wxString::insert</definition>
        <argsstring>(iterator it, wxUniChar ch)</argsstring>
        <name>insert</name>
        <qualifiedname>wxString::insert</qualifiedname>
        <param>
          <type>iterator</type>
          <declname>it</declname>
        </param>
        <param>
          <type><ref refid="classwx_uni_char" kindref="compound">wxUniChar</ref></type>
          <declname>ch</declname>
        </param>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1723" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a8be75ab1d86b3944ad335663d78f4a52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxString::insert</definition>
        <argsstring>(iterator it, const_iterator first, const_iterator last)</argsstring>
        <name>insert</name>
        <qualifiedname>wxString::insert</qualifiedname>
        <param>
          <type>iterator</type>
          <declname>it</declname>
        </param>
        <param>
          <type>const_iterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>const_iterator</type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1724" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1afd91c9bc221c5311f3b6542bcacdbaa6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxString::insert</definition>
        <argsstring>(iterator it, size_type n, wxUniChar ch)</argsstring>
        <name>insert</name>
        <qualifiedname>wxString::insert</qualifiedname>
        <param>
          <type>iterator</type>
          <declname>it</declname>
        </param>
        <param>
          <type><ref refid="classwx_string_1afc144b1e31fffd1a9fc6ba8a551cc073" kindref="member">size_type</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="classwx_uni_char" kindref="compound">wxUniChar</ref></type>
          <declname>ch</declname>
        </param>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1725" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1ae4d27fb54ba938b6dcf76bfcf722eccd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t wxString::length</definition>
        <argsstring>() const</argsstring>
        <name>length</name>
        <qualifiedname>wxString::length</qualifiedname>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1727" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a3f642c981067b5f449cfbad84b91257c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string_1afc144b1e31fffd1a9fc6ba8a551cc073" kindref="member">size_type</ref></type>
        <definition>size_type wxString::max_size</definition>
        <argsstring>() const</argsstring>
        <name>max_size</name>
        <qualifiedname>wxString::max_size</qualifiedname>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1729" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a3fa50b251ca98e1e5d2aa8d73c688b57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxString::reserve</definition>
        <argsstring>(size_t sz)</argsstring>
        <name>reserve</name>
        <qualifiedname>wxString::reserve</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>sz</declname>
        </param>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1731" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1ac384f95725fb10097a3146d3c126e958" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxString::resize</definition>
        <argsstring>(size_t nSize, wxUniChar ch=&apos;\0&apos;)</argsstring>
        <name>resize</name>
        <qualifiedname>wxString::resize</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>nSize</declname>
        </param>
        <param>
          <type><ref refid="classwx_uni_char" kindref="compound">wxUniChar</ref></type>
          <declname>ch</declname>
          <defval>&apos;\0&apos;</defval>
        </param>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1732" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1af775c599d93dfd9a823c6e9325705140" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
        <definition>wxString &amp; wxString::replace</definition>
        <argsstring>(size_t nStart, size_t nLen, const wxString &amp;str)</argsstring>
        <name>replace</name>
        <qualifiedname>wxString::replace</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>nStart</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nLen</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1734" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a1b57daa87afac40e706978c430cb2ea7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
        <definition>wxString &amp; wxString::replace</definition>
        <argsstring>(size_t nStart, size_t nLen, size_t nCount, wxUniChar ch)</argsstring>
        <name>replace</name>
        <qualifiedname>wxString::replace</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>nStart</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nLen</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nCount</declname>
        </param>
        <param>
          <type><ref refid="classwx_uni_char" kindref="compound">wxUniChar</ref></type>
          <declname>ch</declname>
        </param>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1735" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a5ca42872ae6e682fe30c57b6f148fe6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
        <definition>wxString &amp; wxString::replace</definition>
        <argsstring>(size_t nStart, size_t nLen, const wxString &amp;str, size_t nStart2, size_t nLen2)</argsstring>
        <name>replace</name>
        <qualifiedname>wxString::replace</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>nStart</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nLen</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nStart2</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nLen2</declname>
        </param>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1736" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1add78a50a6dc5ecb3218d392e8b789483" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
        <definition>wxString &amp; wxString::replace</definition>
        <argsstring>(size_t nStart, size_t nLen, const char *sz, size_t nCount)</argsstring>
        <name>replace</name>
        <qualifiedname>wxString::replace</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>nStart</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nLen</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>sz</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nCount</declname>
        </param>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1738" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1ae6601d849477f7cbf11e67f30b01c9e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
        <definition>wxString &amp; wxString::replace</definition>
        <argsstring>(size_t nStart, size_t nLen, const wchar_t *sz, size_t nCount)</argsstring>
        <name>replace</name>
        <qualifiedname>wxString::replace</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>nStart</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nLen</declname>
        </param>
        <param>
          <type>const wchar_t *</type>
          <declname>sz</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nCount</declname>
        </param>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1740" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1ae2d0a7c7513f2ddc28fd6579370847c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
        <definition>wxString &amp; wxString::replace</definition>
        <argsstring>(size_t nStart, size_t nLen, const wxString &amp;s, size_t nCount)</argsstring>
        <name>replace</name>
        <qualifiedname>wxString::replace</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>nStart</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nLen</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nCount</declname>
        </param>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1742" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1ac29fe2d13a0b040282767c1170478b52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
        <definition>wxString &amp; wxString::replace</definition>
        <argsstring>(iterator first, iterator last, const wxString &amp;s)</argsstring>
        <name>replace</name>
        <qualifiedname>wxString::replace</qualifiedname>
        <param>
          <type>iterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>iterator</type>
          <declname>last</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1744" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1aa8c3fd89b232ef62649a55e1ad9c1688" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
        <definition>wxString &amp; wxString::replace</definition>
        <argsstring>(iterator first, iterator last, const char *s, size_type n)</argsstring>
        <name>replace</name>
        <qualifiedname>wxString::replace</qualifiedname>
        <param>
          <type>iterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>iterator</type>
          <declname>last</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="classwx_string_1afc144b1e31fffd1a9fc6ba8a551cc073" kindref="member">size_type</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1745" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1ac01f01cd441ac5459f79cb4bb3a3d21f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
        <definition>wxString &amp; wxString::replace</definition>
        <argsstring>(iterator first, iterator last, const wchar_t *s, size_type n)</argsstring>
        <name>replace</name>
        <qualifiedname>wxString::replace</qualifiedname>
        <param>
          <type>iterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>iterator</type>
          <declname>last</declname>
        </param>
        <param>
          <type>const wchar_t *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="classwx_string_1afc144b1e31fffd1a9fc6ba8a551cc073" kindref="member">size_type</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1746" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1ae728e7c453fb62ac1a95d2f47e3ced68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
        <definition>wxString &amp; wxString::replace</definition>
        <argsstring>(iterator first, iterator last, size_type n, wxUniChar ch)</argsstring>
        <name>replace</name>
        <qualifiedname>wxString::replace</qualifiedname>
        <param>
          <type>iterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>iterator</type>
          <declname>last</declname>
        </param>
        <param>
          <type><ref refid="classwx_string_1afc144b1e31fffd1a9fc6ba8a551cc073" kindref="member">size_type</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="classwx_uni_char" kindref="compound">wxUniChar</ref></type>
          <declname>ch</declname>
        </param>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1747" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1aee6ce55e7968215c666353dfe8a84b85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
        <definition>wxString &amp; wxString::replace</definition>
        <argsstring>(iterator first, iterator last, const_iterator first1, const_iterator last1)</argsstring>
        <name>replace</name>
        <qualifiedname>wxString::replace</qualifiedname>
        <param>
          <type>iterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>iterator</type>
          <declname>last</declname>
        </param>
        <param>
          <type>const_iterator</type>
          <declname>first1</declname>
        </param>
        <param>
          <type>const_iterator</type>
          <declname>last1</declname>
        </param>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1748" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a0d244891d808e0be263ba24b8017feb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
        <definition>wxString &amp; wxString::replace</definition>
        <argsstring>(iterator first, iterator last, const char *first1, const char *last1)</argsstring>
        <name>replace</name>
        <qualifiedname>wxString::replace</qualifiedname>
        <param>
          <type>iterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>iterator</type>
          <declname>last</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>first1</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>last1</declname>
        </param>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1750" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1ae81fdf564633d3daf267f2a3781360f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
        <definition>wxString &amp; wxString::replace</definition>
        <argsstring>(iterator first, iterator last, const wchar_t *first1, const wchar_t *last1)</argsstring>
        <name>replace</name>
        <qualifiedname>wxString::replace</qualifiedname>
        <param>
          <type>iterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>iterator</type>
          <declname>last</declname>
        </param>
        <param>
          <type>const wchar_t *</type>
          <declname>first1</declname>
        </param>
        <param>
          <type>const wchar_t *</type>
          <declname>last1</declname>
        </param>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1752" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1aa303318801ba97f04ea23c0991b729cd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t wxString::rfind</definition>
        <argsstring>(const wxString &amp;str, size_t nStart=npos) const</argsstring>
        <name>rfind</name>
        <qualifiedname>wxString::rfind</qualifiedname>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nStart</declname>
          <defval><ref refid="classwx_string_1a7f7b5ab972b4be6703f9c779654af247" kindref="member">npos</ref></defval>
        </param>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1755" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a0674033636626f13765fee8f568cfbfc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t wxString::rfind</definition>
        <argsstring>(const char *sz, size_t nStart=npos, size_t n=npos) const</argsstring>
        <name>rfind</name>
        <qualifiedname>wxString::rfind</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>sz</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nStart</declname>
          <defval><ref refid="classwx_string_1a7f7b5ab972b4be6703f9c779654af247" kindref="member">npos</ref></defval>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
          <defval><ref refid="classwx_string_1a7f7b5ab972b4be6703f9c779654af247" kindref="member">npos</ref></defval>
        </param>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1756" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a65427edf1eb4ef6b218c3c9a362603e7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t wxString::rfind</definition>
        <argsstring>(const wchar_t *sz, size_t nStart=npos, size_t n=npos) const</argsstring>
        <name>rfind</name>
        <qualifiedname>wxString::rfind</qualifiedname>
        <param>
          <type>const wchar_t *</type>
          <declname>sz</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nStart</declname>
          <defval><ref refid="classwx_string_1a7f7b5ab972b4be6703f9c779654af247" kindref="member">npos</ref></defval>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
          <defval><ref refid="classwx_string_1a7f7b5ab972b4be6703f9c779654af247" kindref="member">npos</ref></defval>
        </param>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1757" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a4ab0ac7e96f84b85cd0872d221090717" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t wxString::rfind</definition>
        <argsstring>(wxUniChar ch, size_t nStart=npos) const</argsstring>
        <name>rfind</name>
        <qualifiedname>wxString::rfind</qualifiedname>
        <param>
          <type><ref refid="classwx_uni_char" kindref="compound">wxUniChar</ref></type>
          <declname>ch</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nStart</declname>
          <defval><ref refid="classwx_string_1a7f7b5ab972b4be6703f9c779654af247" kindref="member">npos</ref></defval>
        </param>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1758" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1ad0118f24d9258584dee04213700e76c9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string_1afc144b1e31fffd1a9fc6ba8a551cc073" kindref="member">size_type</ref></type>
        <definition>size_type wxString::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <qualifiedname>wxString::size</qualifiedname>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1760" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a86892c081560a9dec01224be3f30ede3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>wxString wxString::substr</definition>
        <argsstring>(size_t nStart=0, size_t nLen=npos) const</argsstring>
        <name>substr</name>
        <qualifiedname>wxString::substr</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>nStart</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>size_t</type>
          <declname>nLen</declname>
          <defval><ref refid="classwx_string_1a7f7b5ab972b4be6703f9c779654af247" kindref="member">npos</ref></defval>
        </param>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1761" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a11a06a7638bdfe254ff07f5e1fb073b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxString::swap</definition>
        <argsstring>(wxString &amp;str)</argsstring>
        <name>swap</name>
        <qualifiedname>wxString::swap</qualifiedname>
        <param>
          <type><ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1762" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a22f4aa8b22c53c6b06ef7c3e10054880" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxString::starts_with</definition>
        <argsstring>(const wxString &amp;str) const</argsstring>
        <name>starts_with</name>
        <qualifiedname>wxString::starts_with</qualifiedname>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1764" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1aaea25d3eedc8d3b0c8c31d6e9d32613d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxString::starts_with</definition>
        <argsstring>(const char *sz) const</argsstring>
        <name>starts_with</name>
        <qualifiedname>wxString::starts_with</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>sz</declname>
        </param>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1765" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a4a9e278ffb4bc71c993a23b0e815c861" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxString::starts_with</definition>
        <argsstring>(const wchar_t *sz) const</argsstring>
        <name>starts_with</name>
        <qualifiedname>wxString::starts_with</qualifiedname>
        <param>
          <type>const wchar_t *</type>
          <declname>sz</declname>
        </param>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1766" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a0fb6282a6ec609eaa5c4c12b6f441cc6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxString::ends_with</definition>
        <argsstring>(const wxString &amp;str) const</argsstring>
        <name>ends_with</name>
        <qualifiedname>wxString::ends_with</qualifiedname>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1768" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1ac22e4c070ba96217a8935e69d37292c6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxString::ends_with</definition>
        <argsstring>(const char *sz) const</argsstring>
        <name>ends_with</name>
        <qualifiedname>wxString::ends_with</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>sz</declname>
        </param>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1769" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1aab4457856671ee88fa3f01de611e20b4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxString::ends_with</definition>
        <argsstring>(const wchar_t *sz) const</argsstring>
        <name>ends_with</name>
        <qualifiedname>wxString::ends_with</qualifiedname>
        <param>
          <type>const wchar_t *</type>
          <declname>sz</declname>
        </param>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1770" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1addd9ccfa3ae2b7ab2d66bcbf034d0be0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>static wxString wxString::Format</definition>
        <argsstring>(const wxString &amp;format,...)</argsstring>
        <name>Format</name>
        <qualifiedname>wxString::Format</qualifiedname>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>format</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>This static function returns the string containing the result of calling <ref refid="classwx_string_1a9588b7f2684b9a6a924dc3746a2b2f8d" kindref="member">Printf()</ref> with the passed parameters on it. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classwx_string_1aa7bc330dcb0248bb8e886d27c4983ef5" kindref="member">FormatV()</ref>, <ref refid="classwx_string_1a9588b7f2684b9a6a924dc3746a2b2f8d" kindref="member">Printf()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1791" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1aa7bc330dcb0248bb8e886d27c4983ef5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>static wxString wxString::FormatV</definition>
        <argsstring>(const wxString &amp;format, va_list argptr)</argsstring>
        <name>FormatV</name>
        <qualifiedname>wxString::FormatV</qualifiedname>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>format</declname>
        </param>
        <param>
          <type>va_list</type>
          <declname>argptr</declname>
        </param>
        <briefdescription>
<para>This static function returns the string containing the result of calling <ref refid="classwx_string_1a5670779cbafb35c454a6d7664b6a6064" kindref="member">PrintfV()</ref> with the passed parameters on it. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classwx_string_1addd9ccfa3ae2b7ab2d66bcbf034d0be0" kindref="member">Format()</ref>, <ref refid="classwx_string_1a5670779cbafb35c454a6d7664b6a6064" kindref="member">PrintfV()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1799" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a5aedc23e9cc2774237d99148d0622661" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>static wxString wxString::From8BitData</definition>
        <argsstring>(const char *buf, size_t len)</argsstring>
        <name>From8BitData</name>
        <qualifiedname>wxString::From8BitData</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Converts given buffer of binary data from 8-bit string to <ref refid="classwx_string" kindref="compound">wxString</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>In Unicode build, the string is interpreted as being in ISO-8859-1 encoding. The version without <emphasis>len</emphasis> parameter takes NUL-terminated data.</para>
<para>This is a convenience method useful when storing binary data in <ref refid="classwx_string" kindref="compound">wxString</ref>. It should be used <emphasis>only</emphasis> for that purpose and only in conjunction with <ref refid="classwx_string_1a4e4cb74bffe1c95602b865fd63c70bc8" kindref="member">To8BitData()</ref>. Use <ref refid="classwx_string_1a4e0a115d6b98abacc9a5365f3e988135" kindref="member">mb_str()</ref> for conversion of character data to known encoding.</para>
<para><simplesect kind="since"><para>2.8.4</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classwx_string_1a4e4cb74bffe1c95602b865fd63c70bc8" kindref="member">wxString::To8BitData()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1817" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1aeb82fe2331039ceb32838c814ae36d89" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>static wxString wxString::From8BitData</definition>
        <argsstring>(const char *buf)</argsstring>
        <name>From8BitData</name>
        <qualifiedname>wxString::From8BitData</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1818" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a717327d279426293270c16b980d6d6aa" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>static wxString wxString::FromAscii</definition>
        <argsstring>(const char *s)</argsstring>
        <name>FromAscii</name>
        <qualifiedname>wxString::FromAscii</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Converts the string or character from an ASCII, 7-bit form to the native <ref refid="classwx_string" kindref="compound">wxString</ref> representation. </para>
        </briefdescription>
        <detaileddescription>
<para>Input must consist only of 7-bit (i.e. less than 128) ASCII characters, the behaviour in presence of non-ASCII characters is undefined but will result in assert failures.</para>
<para><simplesect kind="see"><para><ref refid="interface_2wx_2string_8h_1ad314d3f0fac89f2f672a075231802e30" kindref="member">wxASCII_STR()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1832" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a70c1974b9bfa75ecf4eee50341b65625" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>static wxString wxString::FromAscii</definition>
        <argsstring>(const unsigned char *s)</argsstring>
        <name>FromAscii</name>
        <qualifiedname>wxString::FromAscii</qualifiedname>
        <param>
          <type>const unsigned char *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1833" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a600c7b770a1fca1c4a48337d42854c99" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>static wxString wxString::FromAscii</definition>
        <argsstring>(const char *s, size_t len)</argsstring>
        <name>FromAscii</name>
        <qualifiedname>wxString::FromAscii</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1834" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1aad58ba080272e8540ff39a8b023ad841" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>static wxString wxString::FromAscii</definition>
        <argsstring>(const unsigned char *s, size_t len)</argsstring>
        <name>FromAscii</name>
        <qualifiedname>wxString::FromAscii</qualifiedname>
        <param>
          <type>const unsigned char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1835" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1ae101c2c62370da0014d36c8987fc6586" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>static wxString wxString::FromAscii</definition>
        <argsstring>(char c)</argsstring>
        <name>FromAscii</name>
        <qualifiedname>wxString::FromAscii</qualifiedname>
        <param>
          <type>char</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1836" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a12be0249db64b0c53339cb79dcaa2add" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>static wxString wxString::FromCDouble</definition>
        <argsstring>(double val, int precision=-1)</argsstring>
        <name>FromCDouble</name>
        <qualifiedname>wxString::FromCDouble</qualifiedname>
        <param>
          <type>double</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int</type>
          <declname>precision</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
<para>Returns a string with the textual representation of the number in C locale. </para>
        </briefdescription>
        <detaileddescription>
<para>Unlike <ref refid="classwx_string_1abe1f539ff2e9d46a80849fc758f51dc3" kindref="member">FromDouble()</ref> the string returned by this function always uses the period character as decimal separator, independently of the current locale. Otherwise its behaviour is identical to the other function.</para>
<para><simplesect kind="since"><para>2.9.1</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classwx_string_1a51469f8fd0373785566002872bedd23a" kindref="member">ToCDouble()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1851" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1abe1f539ff2e9d46a80849fc758f51dc3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>static wxString wxString::FromDouble</definition>
        <argsstring>(double val, int precision=-1)</argsstring>
        <name>FromDouble</name>
        <qualifiedname>wxString::FromDouble</qualifiedname>
        <param>
          <type>double</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int</type>
          <declname>precision</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
<para>Returns a string with the textual representation of the number. </para>
        </briefdescription>
        <detaileddescription>
<para>For the default value of <emphasis>precision</emphasis>, this function behaves as a simple wrapper for <programlisting><codeline><highlight class="normal"><ref refid="classwx_string_1addd9ccfa3ae2b7ab2d66bcbf034d0be0" kindref="member">wxString::Format</ref>(</highlight><highlight class="stringliteral">&quot;%g&quot;</highlight><highlight class="normal">,<sp/>val)<sp/></highlight></codeline>
</programlisting>. If <emphasis>precision</emphasis> is positive (or zero), the <computeroutput>%</computeroutput>.Nf format is used with the given precision value.</para>
<para>Notice that the string returned by this function uses the decimal separator appropriate for the current locale, e.g. <computeroutput>&quot;,&quot;</computeroutput> and not a period in French locale. Use <ref refid="classwx_string_1a12be0249db64b0c53339cb79dcaa2add" kindref="member">FromCDouble()</ref> if this is unwanted.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to format. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>precision</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of fractional digits to use in or -1 to use the most appropriate format. This parameter is new in wxWidgets 2.9.2.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>2.9.1</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classwx_string_1a0c719082ab8cde8323ea15f2ed9fb25d" kindref="member">ToDouble()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1875" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a2ddc1b7c8e1eb9adbf5874dead5b180b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>static wxString wxString::FromUTF8</definition>
        <argsstring>(const char *s)</argsstring>
        <name>FromUTF8</name>
        <qualifiedname>wxString::FromUTF8</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Converts C string encoded in UTF-8 to <ref refid="classwx_string" kindref="compound">wxString</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>If <emphasis>s</emphasis> is not a valid UTF-8 string, an empty string is returned.</para>
<para>Notice that when using UTF-8 wxWidgets build there is a more efficient alternative to this function called <ref refid="classwx_string_1a629b194b84749fc86662c728975e6ba4" kindref="member">FromUTF8Unchecked()</ref> which, unlike this one, doesn&apos;t check that the input string is valid.</para>
<para>The overload taking <computeroutput>std::string</computeroutput> is only available starting with wxWidgets 3.1.1.</para>
<para><simplesect kind="since"><para>2.8.4 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1892" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a1a91d42a0166f38752265afd68881990" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>static wxString wxString::FromUTF8</definition>
        <argsstring>(const char *s, size_t len)</argsstring>
        <name>FromUTF8</name>
        <qualifiedname>wxString::FromUTF8</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1893" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a6b1f6534399f4586d8c06f97db12cad4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>static wxString wxString::FromUTF8</definition>
        <argsstring>(const std::string &amp;s)</argsstring>
        <name>FromUTF8</name>
        <qualifiedname>wxString::FromUTF8</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1894" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a629b194b84749fc86662c728975e6ba4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>static wxString wxString::FromUTF8Unchecked</definition>
        <argsstring>(const char *s)</argsstring>
        <name>FromUTF8Unchecked</name>
        <qualifiedname>wxString::FromUTF8Unchecked</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Converts C string encoded in UTF-8 to <ref refid="classwx_string" kindref="compound">wxString</ref> without checking its validity. </para>
        </briefdescription>
        <detaileddescription>
<para>This method assumes that <emphasis>s</emphasis> is a valid UTF-8 sequence and doesn&apos;t do any validation (although an assert failure is triggered in debug builds if the string is invalid). Only use it if you are absolutely sure that <emphasis>s</emphasis> is a correct UTF-8 string (e.g. because it comes from another library using UTF-8) and if the performance matters, otherwise use slower (in UTF-8 build) but safer <ref refid="classwx_string_1a2ddc1b7c8e1eb9adbf5874dead5b180b" kindref="member">FromUTF8()</ref>. Passing a bad UTF-8 string to this function will result in creating a corrupted <ref refid="classwx_string" kindref="compound">wxString</ref> and all the subsequent operations on it will be undefined.</para>
<para>The overload taking <computeroutput>std::string</computeroutput> is only available starting with wxWidgets 3.1.1.</para>
<para><simplesect kind="since"><para>2.8.9 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1916" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a23583b46c05d6c953aaaace6410599f5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>static wxString wxString::FromUTF8Unchecked</definition>
        <argsstring>(const char *s, size_t len)</argsstring>
        <name>FromUTF8Unchecked</name>
        <qualifiedname>wxString::FromUTF8Unchecked</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1917" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a02d953981bfbebe86ee0d058174eaf14" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>static wxString wxString::FromUTF8Unchecked</definition>
        <argsstring>(const std::string &amp;s)</argsstring>
        <name>FromUTF8Unchecked</name>
        <qualifiedname>wxString::FromUTF8Unchecked</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>An &apos;invalid&apos; value for string index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1918" column="21"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Constructors and assignment operators</header>
      <description><para><anchor id="classwx_styled_text_ctrl_1ctor"/></para>
<para>A string may be constructed either from a C string, (some number of copies of) a single character or a wide (Unicode) string. For all constructors (except the default which creates an empty string) there is also a corresponding assignment operator.</para>
<para>See also the <ref refid="classwx_string_1a62b7a905a639c7927e6b1095bbfbe618" kindref="member">assign()</ref> STL-like function. </para>
</description>
      <memberdef kind="function" id="classwx_string_1a55431c6ae13bf65166c5ebf499d3c135" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxString::wxString</definition>
        <argsstring>()</argsstring>
        <name>wxString</name>
        <qualifiedname>wxString::wxString</qualifiedname>
        <briefdescription>
<para>Default constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="348" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1aa4133e804efc7d6a7615f1720697d2f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxString::wxString</definition>
        <argsstring>(const wxString &amp;stringSrc)</argsstring>
        <name>wxString</name>
        <qualifiedname>wxString::wxString</qualifiedname>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>stringSrc</declname>
        </param>
        <briefdescription>
<para>Creates a string from another string. </para>
        </briefdescription>
        <detaileddescription>
<para>Just increases the ref count by 1. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="354" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a791f5885a0950a41ee76eddc2534a5f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxString::wxString</definition>
        <argsstring>(wxUniChar ch, size_t nRepeat=1)</argsstring>
        <name>wxString</name>
        <qualifiedname>wxString::wxString</qualifiedname>
        <param>
          <type><ref refid="classwx_uni_char" kindref="compound">wxUniChar</ref></type>
          <declname>ch</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nRepeat</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Construct a string consisting of <emphasis>nRepeat</emphasis> copies of ch. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="359" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a1d31831eeb309c5d673a97aa9f1568d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxString::wxString</definition>
        <argsstring>(wxUniCharRef ch, size_t nRepeat=1)</argsstring>
        <name>wxString</name>
        <qualifiedname>wxString::wxString</qualifiedname>
        <param>
          <type><ref refid="classwx_uni_char_ref" kindref="compound">wxUniCharRef</ref></type>
          <declname>ch</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nRepeat</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Construct a string consisting of <emphasis>nRepeat</emphasis> copies of ch. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="364" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a1afc83d848d12750b539e579624df9fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxString::wxString</definition>
        <argsstring>(char ch, size_t nRepeat=1)</argsstring>
        <name>wxString</name>
        <qualifiedname>wxString::wxString</qualifiedname>
        <param>
          <type>char</type>
          <declname>ch</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nRepeat</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Construct a string consisting of <emphasis>nRepeat</emphasis> copies of ch converted to Unicode using the current locale encoding. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="370" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1ae92c9031a0143807f1d72fd2b75cfcb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxString::wxString</definition>
        <argsstring>(wchar_t ch, size_t nRepeat=1)</argsstring>
        <name>wxString</name>
        <qualifiedname>wxString::wxString</qualifiedname>
        <param>
          <type>wchar_t</type>
          <declname>ch</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nRepeat</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Construct a string consisting of <emphasis>nRepeat</emphasis> copies of ch. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="375" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a0ec94790ea7b08344537f5cf893476f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxString::wxString</definition>
        <argsstring>(const char *psz)</argsstring>
        <name>wxString</name>
        <qualifiedname>wxString::wxString</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>psz</declname>
        </param>
        <briefdescription>
<para>Constructs a string from the string literal <emphasis>psz</emphasis> using the current locale encoding to convert it to Unicode (wxConvLibc). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="381" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a96d8fedae47a282c685c6af0dfa3728c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxString::wxString</definition>
        <argsstring>(const char *psz, const wxMBConv &amp;conv)</argsstring>
        <name>wxString</name>
        <qualifiedname>wxString::wxString</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>psz</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_m_b_conv" kindref="compound">wxMBConv</ref> &amp;</type>
          <declname>conv</declname>
        </param>
        <briefdescription>
<para>Constructs a string from the string literal <emphasis>psz</emphasis> using <emphasis>conv</emphasis> to convert it Unicode. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="387" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a18eac98263a8ecc3d565b9e6627a14b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxString::wxString</definition>
        <argsstring>(const char *psz, size_t nLength)</argsstring>
        <name>wxString</name>
        <qualifiedname>wxString::wxString</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>psz</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nLength</declname>
        </param>
        <briefdescription>
<para>Constructs a string from the first <emphasis>nLength</emphasis> bytes of the string literal <emphasis>psz</emphasis> using the current locale encoding to convert it to Unicode (wxConvLibc). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="393" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a86a2ec232912c97ed44ba34651d98123" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxString::wxString</definition>
        <argsstring>(const char *psz, const wxMBConv &amp;conv, size_t nLength)</argsstring>
        <name>wxString</name>
        <qualifiedname>wxString::wxString</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>psz</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_m_b_conv" kindref="compound">wxMBConv</ref> &amp;</type>
          <declname>conv</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nLength</declname>
        </param>
        <briefdescription>
<para>Constructs a string from the first <emphasis>nLength</emphasis> bytes of the string literal <emphasis>psz</emphasis> using <emphasis>conv</emphasis> to convert it Unicode. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="399" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1ae1fcf718262b69078417a15bde646668" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxString::wxString</definition>
        <argsstring>(const wchar_t *pwz)</argsstring>
        <name>wxString</name>
        <qualifiedname>wxString::wxString</qualifiedname>
        <param>
          <type>const wchar_t *</type>
          <declname>pwz</declname>
        </param>
        <briefdescription>
<para>Constructs a string from the string literal <emphasis>pwz</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="404" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a8b1f7dc26eb881f228fd7be26885dbe7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxString::wxString</definition>
        <argsstring>(const wchar_t *pwz, size_t nLength)</argsstring>
        <name>wxString</name>
        <qualifiedname>wxString::wxString</qualifiedname>
        <param>
          <type>const wchar_t *</type>
          <declname>pwz</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nLength</declname>
        </param>
        <briefdescription>
<para>Constructs a string from the first <emphasis>nLength</emphasis> characters of the string literal <emphasis>pwz</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="409" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1afb25e4a2670786aa360792fe40eb6d31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxString::wxString</definition>
        <argsstring>(const wxCharBuffer &amp;buf)</argsstring>
        <name>wxString</name>
        <qualifiedname>wxString::wxString</qualifiedname>
        <param>
          <type>const <ref refid="classwx_char_buffer" kindref="compound">wxCharBuffer</ref> &amp;</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Constructs a string from <emphasis>buf</emphasis> using the using the current locale encoding to convert it to Unicode. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="415" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a6fdc82f6b7412bc8617a9194580024ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxString::wxString</definition>
        <argsstring>(const wxWCharBuffer &amp;buf)</argsstring>
        <name>wxString</name>
        <qualifiedname>wxString::wxString</qualifiedname>
        <param>
          <type>const <ref refid="classwx_w_char_buffer" kindref="compound">wxWCharBuffer</ref> &amp;</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Constructs a string from <emphasis>buf</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="420" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1adbc5f0b4efc63b775da5e9571841928a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxString::wxString</definition>
        <argsstring>(const std::string &amp;str)</argsstring>
        <name>wxString</name>
        <qualifiedname>wxString::wxString</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Constructs a string from <emphasis>str</emphasis> using the using the current locale encoding to convert it to Unicode (wxConvLibc). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classwx_string_1a0cdcd5cf94be8686ed6b11248e99fbb2" kindref="member">ToStdString()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="428" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1adf6220517c6b2e2305c9af3c5e932afb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxString::wxString</definition>
        <argsstring>(const std::wstring &amp;str)</argsstring>
        <name>wxString</name>
        <qualifiedname>wxString::wxString</qualifiedname>
        <param>
          <type>const std::wstring &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Constructs a string from <emphasis>str</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classwx_string_1abb20ba3a70eee6d27ae98926b9fd8c50" kindref="member">ToStdWstring()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="435" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1ad25109eb98a464712a6f28939e5adbdd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxString::~wxString</definition>
        <argsstring>()</argsstring>
        <name>~wxString</name>
        <qualifiedname>wxString::~wxString</qualifiedname>
        <briefdescription>
<para>String destructor. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that this is not virtual, so <ref refid="classwx_string" kindref="compound">wxString</ref> must not be inherited from. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="442" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a3ba262755ed0b1b1b4b547ff5092b285" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>wxString wxString::operator=</definition>
        <argsstring>(const wxString &amp;str)</argsstring>
        <name>operator=</name>
        <qualifiedname>wxString::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Assignment: see the relative <ref refid="classwx_string" kindref="compound">wxString</ref> constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="447" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1ae72a297b5ec14564a21569ff2cb540d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>wxString wxString::operator=</definition>
        <argsstring>(wxUniChar c)</argsstring>
        <name>operator=</name>
        <qualifiedname>wxString::operator=</qualifiedname>
        <param>
          <type><ref refid="classwx_uni_char" kindref="compound">wxUniChar</ref></type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Assignment: see the relative <ref refid="classwx_string" kindref="compound">wxString</ref> constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="452" column="14"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>String length</header>
      <description><para><anchor id="classwx_string_1length"/></para>
<para>These functions return the string length and/or check whether the string is empty.</para>
<para>See also the <ref refid="classwx_string_1ae4d27fb54ba938b6dcf76bfcf722eccd" kindref="member">length()</ref>, <ref refid="classwx_string_1ad0118f24d9258584dee04213700e76c9" kindref="member">size()</ref> or <ref refid="classwx_string_1a0da48f47fbe336c5b0a1a58a283b5112" kindref="member">empty()</ref> STL-like functions. </para>
</description>
      <memberdef kind="function" id="classwx_string_1a6ba7cb0d5a1bbaae3b6090eef657f153" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t wxString::Len</definition>
        <argsstring>() const</argsstring>
        <name>Len</name>
        <qualifiedname>wxString::Len</qualifiedname>
        <briefdescription>
<para>Returns the length of the string. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="472" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a90e79470e43e40704c783b60d3d7795a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t wxString::Length</definition>
        <argsstring>() const</argsstring>
        <name>Length</name>
        <qualifiedname>wxString::Length</qualifiedname>
        <briefdescription>
<para>Returns the length of the string (same as Len). </para>
        </briefdescription>
        <detaileddescription>
<para>This is a wxWidgets 1.xx compatibility function; you should not use it in new code. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="479" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a4d754999c547a2aa3e49bcefeaec975b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxString::IsEmpty</definition>
        <argsstring>() const</argsstring>
        <name>IsEmpty</name>
        <qualifiedname>wxString::IsEmpty</qualifiedname>
        <briefdescription>
<para>Returns true if the string is empty. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="484" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a22052f951f8b3fa688a84c0761e601da" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxString::IsNull</definition>
        <argsstring>() const</argsstring>
        <name>IsNull</name>
        <qualifiedname>wxString::IsNull</qualifiedname>
        <briefdescription>
<para>Returns true if the string is empty (same as <ref refid="classwx_string_1a4d754999c547a2aa3e49bcefeaec975b" kindref="member">wxString::IsEmpty</ref>). </para>
        </briefdescription>
        <detaileddescription>
<para>This is a wxWidgets 1.xx compatibility function; you should not use it in new code. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="491" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a458e1ddea5e970d7c5a34e8820dbe757" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxString::operator!</definition>
        <argsstring>() const</argsstring>
        <name>operator!</name>
        <qualifiedname>wxString::operator!</qualifiedname>
        <briefdescription>
<para>Empty string is false, so !string will only return true if the string is empty. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classwx_string_1a4d754999c547a2aa3e49bcefeaec975b" kindref="member">IsEmpty()</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="499" column="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Character access</header>
      <description><para><anchor id="classwx_string_1ch_access"/></para>
<para>Many functions below take a character index in the string. As with C strings and arrays, the indices start from 0, so the first character of a string is string[0]. An attempt to access a character beyond the end of the string (which may even be 0 if the string is empty) will provoke an assert failure in <ref refid="overview_debugging" kindref="compound">debug builds</ref>, but no checks are done in release builds. </para>
</description>
      <memberdef kind="function" id="classwx_string_1ab0a50fea32db57302b92c5226b73a6b2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_uni_char" kindref="compound">wxUniChar</ref></type>
        <definition>wxUniChar wxString::GetChar</definition>
        <argsstring>(size_t n) const</argsstring>
        <name>GetChar</name>
        <qualifiedname>wxString::GetChar</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Returns the character at position <emphasis>n</emphasis> (read-only). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="520" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a08c79af0802aa0bca83b882d736b0239" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const wxCStrData</type>
        <definition>const wxCStrData wxString::GetData</definition>
        <argsstring>() const</argsstring>
        <name>GetData</name>
        <qualifiedname>wxString::GetData</qualifiedname>
        <briefdescription>
<para>wxWidgets compatibility conversion. </para>
        </briefdescription>
        <detaileddescription>
<para>Same as <ref refid="classwx_string_1a5db49c775c09e77fe0acde2a928bbf8f" kindref="member">c_str()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="525" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a8b30e786e96beed161b30cf6d6e1c7d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_uni_char_ref" kindref="compound">wxUniCharRef</ref></type>
        <definition>wxUniCharRef wxString::GetWritableChar</definition>
        <argsstring>(size_t n)</argsstring>
        <name>GetWritableChar</name>
        <qualifiedname>wxString::GetWritableChar</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Returns a reference to the character at position <emphasis>n</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="530" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a8ff68c5cde68072f4712317d9480c3a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="chartype_8h_1af558f1d34fbf3cf5e3258e42a40875fd" kindref="member">wxStringCharType</ref> *</type>
        <definition>wxStringCharType * wxString::GetWriteBuf</definition>
        <argsstring>(size_t len)</argsstring>
        <name>GetWriteBuf</name>
        <qualifiedname>wxString::GetWriteBuf</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Returns a writable buffer of at least <emphasis>len</emphasis> bytes. </para>
        </briefdescription>
        <detaileddescription>
<para>It returns a pointer to a new memory block, and the existing data will not be copied. Call <ref refid="classwx_string_1a3783b441b540bac783a8e5a2cceaae7d" kindref="member">UngetWriteBuf()</ref> as soon as possible to put the string back into a reasonable state.</para>
<para>This method is deprecated, please use <ref refid="classwx_string_buffer" kindref="compound">wxStringBuffer</ref> or <ref refid="classwx_string_buffer_length" kindref="compound">wxStringBufferLength</ref> instead. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="540" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a3783b441b540bac783a8e5a2cceaae7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxString::UngetWriteBuf</definition>
        <argsstring>()</argsstring>
        <name>UngetWriteBuf</name>
        <qualifiedname>wxString::UngetWriteBuf</qualifiedname>
        <briefdescription>
<para>Puts the string back into a reasonable state (in which it can be used normally), after <ref refid="classwx_string_1a8ff68c5cde68072f4712317d9480c3a9" kindref="member">GetWriteBuf()</ref> was called. </para>
        </briefdescription>
        <detaileddescription>
<para>The version of the function without the <emphasis>len</emphasis> parameter will calculate the new string length itself assuming that the string is terminated by the first <computeroutput>NUL</computeroutput> character in it while the second one will use the specified length and thus is the only version which should be used with the strings with embedded <computeroutput>NULs</computeroutput> (it is also slightly more efficient as <computeroutput>strlen()</computeroutput> doesn&apos;t have to be called).</para>
<para>This method is deprecated, please use <ref refid="classwx_string_buffer" kindref="compound">wxStringBuffer</ref> or <ref refid="classwx_string_buffer_length" kindref="compound">wxStringBufferLength</ref> instead. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="555" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1aa4ff7bfb39cdac3a8322cd4932216eb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxString::UngetWriteBuf</definition>
        <argsstring>(size_t len)</argsstring>
        <name>UngetWriteBuf</name>
        <qualifiedname>wxString::UngetWriteBuf</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="560" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1ad1a022058f58773d2feb072ae10a1408" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxString::SetChar</definition>
        <argsstring>(size_t n, wxUniChar ch)</argsstring>
        <name>SetChar</name>
        <qualifiedname>wxString::SetChar</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="classwx_uni_char" kindref="compound">wxUniChar</ref></type>
          <declname>ch</declname>
        </param>
        <briefdescription>
<para>Sets the character at position <emphasis>n</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="565" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a1da078938d688e65f3846b2dd4416d62" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_uni_char" kindref="compound">wxUniChar</ref></type>
        <definition>wxUniChar wxString::Last</definition>
        <argsstring>() const</argsstring>
        <name>Last</name>
        <qualifiedname>wxString::Last</qualifiedname>
        <briefdescription>
<para>Returns the last character. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a wxWidgets 1.xx compatibility function; you should not use it in new code. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="573" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a93aaa3f92c1c13d7af2a590387340988" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_uni_char_ref" kindref="compound">wxUniCharRef</ref></type>
        <definition>wxUniCharRef wxString::Last</definition>
        <argsstring>()</argsstring>
        <name>Last</name>
        <qualifiedname>wxString::Last</qualifiedname>
        <briefdescription>
<para>Returns a reference to the last character (writable). </para>
        </briefdescription>
        <detaileddescription>
<para>This is a wxWidgets 1.xx compatibility function; you should not use it in new code. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="581" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a8924cd659c378a9b29d0f553bd1d5ff1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_uni_char" kindref="compound">wxUniChar</ref></type>
        <definition>wxUniChar wxString::operator[]</definition>
        <argsstring>(size_t i) const</argsstring>
        <name>operator[]</name>
        <qualifiedname>wxString::operator[]</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Returns the <emphasis>i-th</emphasis> character of the string. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="586" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a015fbd8666790e967c9c581fa3601bac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_uni_char_ref" kindref="compound">wxUniCharRef</ref></type>
        <definition>wxUniCharRef wxString::operator[]</definition>
        <argsstring>(size_t i)</argsstring>
        <name>operator[]</name>
        <qualifiedname>wxString::operator[]</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Returns a writable reference to the <emphasis>i-th</emphasis> character of the string. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="591" column="18"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Conversions</header>
      <description><para><anchor id="classwx_string_1conv"/></para>
<para>This section contains both implicit and explicit conversions to C style strings. Although implicit conversion is quite convenient, you are advised to use <ref refid="classwx_string_1aa17b9e38640fd3f22b5235173e910c9b" kindref="member">wc_str()</ref> for the sake of clarity. </para>
</description>
      <memberdef kind="function" id="classwx_string_1a5db49c775c09e77fe0acde2a928bbf8f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>wxCStrData</type>
        <definition>wxCStrData wxString::c_str</definition>
        <argsstring>() const</argsstring>
        <name>c_str</name>
        <qualifiedname>wxString::c_str</qualifiedname>
        <briefdescription>
<para>Returns a lightweight intermediate class which is in turn implicitly convertible to both <computeroutput>const</computeroutput> <computeroutput>char*</computeroutput> and to <computeroutput>const</computeroutput> <computeroutput>wchar_t*</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Given this ambiguity it is mostly better to use <ref refid="classwx_string_1aa17b9e38640fd3f22b5235173e910c9b" kindref="member">wc_str()</ref>, <ref refid="classwx_string_1a4e0a115d6b98abacc9a5365f3e988135" kindref="member">mb_str()</ref> or <ref refid="classwx_string_1a1e3f959e6841c6958bc391246ba7f747" kindref="member">utf8_str()</ref> instead.</para>
<para>Please see the <ref refid="overview_unicode" kindref="compound">Unicode Support in wxWidgets</ref> for more information about it.</para>
<para>Note that the returned value is not convertible to <computeroutput>char*</computeroutput> or <computeroutput>wchar_t*</computeroutput>, use <ref refid="classwx_string_1a1110649ec649251516db659e94cd7692" kindref="member">char_str()</ref> or <ref refid="classwx_string_1a4d289161c8079f5af7b762904f1610c5" kindref="member">wchar_str()</ref> if you need to pass string value to a function expecting non-const pointer.</para>
<para><simplesect kind="see"><para><ref refid="classwx_string_1aa17b9e38640fd3f22b5235173e910c9b" kindref="member">wc_str()</ref>, <ref refid="classwx_string_1a1e3f959e6841c6958bc391246ba7f747" kindref="member">utf8_str()</ref>, <ref refid="classwx_string_1a5db49c775c09e77fe0acde2a928bbf8f" kindref="member">c_str()</ref>, <ref refid="classwx_string_1a4e0a115d6b98abacc9a5365f3e988135" kindref="member">mb_str()</ref>, <ref refid="classwx_string_1a7004705101a69577445fdec68f59ba42" kindref="member">fn_str()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="619" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a1110649ec649251516db659e94cd7692" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>wxWritableCharBuffer</type>
        <definition>wxWritableCharBuffer wxString::char_str</definition>
        <argsstring>(const wxMBConv &amp;conv=wxConvLibc) const</argsstring>
        <name>char_str</name>
        <qualifiedname>wxString::char_str</qualifiedname>
        <param>
          <type>const <ref refid="classwx_m_b_conv" kindref="compound">wxMBConv</ref> &amp;</type>
          <declname>conv</declname>
          <defval>wxConvLibc</defval>
        </param>
        <briefdescription>
<para>Returns an object with string data that is implicitly convertible to <computeroutput>char*</computeroutput> pointer. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that any change to the returned buffer is lost and so this function is only usable for passing strings to legacy libraries that don&apos;t have const-correct API. Use <ref refid="classwx_string_buffer" kindref="compound">wxStringBuffer</ref> if you want to modify the string.</para>
<para><simplesect kind="see"><para><ref refid="classwx_string_1a5db49c775c09e77fe0acde2a928bbf8f" kindref="member">c_str()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="630" column="26"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a6a1adf05e5cde63a792a6989aa20357a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classwx_char_type_buffer" kindref="compound">wxCharTypeBuffer</ref>&lt; T &gt;</type>
        <definition>wxCharTypeBuffer&lt; T &gt; wxString::tchar_str</definition>
        <argsstring>(size_t *len=NULL) const</argsstring>
        <name>tchar_str</name>
        <qualifiedname>wxString::tchar_str</qualifiedname>
        <param>
          <type>size_t *</type>
          <declname>len</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Returns buffer of the specified type containing the string data. </para>
        </briefdescription>
        <detaileddescription>
<para>This method is only useful in template code, otherwise you should directly call <ref refid="classwx_string_1a4e0a115d6b98abacc9a5365f3e988135" kindref="member">mb_str()</ref> or <ref refid="classwx_string_1aa17b9e38640fd3f22b5235173e910c9b" kindref="member">wc_str()</ref> if you need to retrieve a narrow or wide string from this <ref refid="classwx_string" kindref="compound">wxString</ref>. The template parameter <emphasis>t</emphasis> should be either <computeroutput>char</computeroutput> or <computeroutput>wchar_t</computeroutput>.</para>
<para>Notice that retrieving a char buffer in UTF-8 build will return the internal string representation in UTF-8 while in wchar_t build the char buffer will contain the conversion of the string to the encoding of the current locale (and so can fail).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>If non-NULL, filled with the length of the returned buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>buffer containing the string contents in the specified type, notice that it may be NULL if the conversion failed (e.g. Unicode string couldn&apos;t be converted to the current encoding when <emphasis>T</emphasis> is <computeroutput>char</computeroutput>). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="655" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a7004705101a69577445fdec68f59ba42" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const TYPE</type>
        <definition>const TYPE wxString::fn_str</definition>
        <argsstring>() const</argsstring>
        <name>fn_str</name>
        <qualifiedname>wxString::fn_str</qualifiedname>
        <briefdescription>
<para>Returns a string representation suitable for passing to OS&apos; functions for file handling. </para>
        </briefdescription>
        <detaileddescription>
<para>Depending on OS and configuration, TYPE is either <computeroutput>wchar_t*</computeroutput>, <computeroutput>char*</computeroutput>, or <ref refid="classwx_char_buffer" kindref="compound">wxCharBuffer</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="664" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a4e0a115d6b98abacc9a5365f3e988135" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classwx_char_buffer" kindref="compound">wxCharBuffer</ref></type>
        <definition>const wxCharBuffer wxString::mb_str</definition>
        <argsstring>(const wxMBConv &amp;conv=wxConvLibc) const</argsstring>
        <name>mb_str</name>
        <qualifiedname>wxString::mb_str</qualifiedname>
        <param>
          <type>const <ref refid="classwx_m_b_conv" kindref="compound">wxMBConv</ref> &amp;</type>
          <declname>conv</declname>
          <defval>wxConvLibc</defval>
        </param>
        <briefdescription>
<para>Returns the multibyte (C string) representation of the string using <emphasis>conv&apos;s</emphasis> <ref refid="classwx_m_b_conv_1a0d975de5e4fdc75433cbbeb8eccca794" kindref="member">wxMBConv::cWC2MB</ref> method and returns <ref refid="classwx_char_buffer" kindref="compound">wxCharBuffer</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classwx_string_1aa17b9e38640fd3f22b5235173e910c9b" kindref="member">wc_str()</ref>, <ref refid="classwx_string_1a1e3f959e6841c6958bc391246ba7f747" kindref="member">utf8_str()</ref>, <ref refid="classwx_string_1a5db49c775c09e77fe0acde2a928bbf8f" kindref="member">c_str()</ref>, <ref refid="classwx_m_b_conv" kindref="compound">wxMBConv</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="672" column="24"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a1e3f959e6841c6958bc391246ba7f747" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="buffer_8h_1a76c552ab140910c2abd59a2a6a69a724" kindref="member">wxScopedCharBuffer</ref></type>
        <definition>const wxScopedCharBuffer wxString::utf8_str</definition>
        <argsstring>() const</argsstring>
        <name>utf8_str</name>
        <qualifiedname>wxString::utf8_str</qualifiedname>
        <briefdescription>
<para>Converts the strings contents to UTF-8 and returns it either as a temporary <ref refid="classwx_char_buffer" kindref="compound">wxCharBuffer</ref> object or as a pointer to the internal string contents in UTF-8 build. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classwx_string_1aa17b9e38640fd3f22b5235173e910c9b" kindref="member">wc_str()</ref>, <ref refid="classwx_string_1a5db49c775c09e77fe0acde2a928bbf8f" kindref="member">c_str()</ref>, <ref refid="classwx_string_1a4e0a115d6b98abacc9a5365f3e988135" kindref="member">mb_str()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="681" column="30"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a5689d0c457a386f130b8a8f6529db61d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string</type>
        <definition>const std::string wxString::utf8_string</definition>
        <argsstring>() const</argsstring>
        <name>utf8_string</name>
        <qualifiedname>wxString::utf8_string</qualifiedname>
        <briefdescription>
<para>Return the string as an std::string using UTF-8 encoding. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a shorter and more readable equivalent of calling <ref refid="classwx_string_1a0cdcd5cf94be8686ed6b11248e99fbb2" kindref="member">ToStdString()</ref> with <computeroutput>wxConvUTF8</computeroutput> argument.</para>
<para><simplesect kind="since"><para>3.1.5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="691" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1aa17b9e38640fd3f22b5235173e910c9b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const TYPE</type>
        <definition>const TYPE wxString::wc_str</definition>
        <argsstring>() const</argsstring>
        <name>wc_str</name>
        <qualifiedname>wxString::wc_str</qualifiedname>
        <briefdescription>
<para>Converts the strings contents to the wide character representation and returns it as a temporary <ref refid="classwx_w_char_buffer" kindref="compound">wxWCharBuffer</ref> object (Unix and macOS) or returns a pointer to the internal string contents in wide character mode (Windows). </para>
        </briefdescription>
        <detaileddescription>
<para>Depending on OS and configuration, TYPE is either <computeroutput>wchar_t*</computeroutput> or <ref refid="classwx_char_buffer" kindref="compound">wxCharBuffer</ref>.</para>
<para>The macro wxWX2WCbuf is defined as the correct return type (without const).</para>
<para><simplesect kind="see"><para><ref refid="classwx_string_1a1e3f959e6841c6958bc391246ba7f747" kindref="member">utf8_str()</ref>, <ref refid="classwx_string_1a5db49c775c09e77fe0acde2a928bbf8f" kindref="member">c_str()</ref>, <ref refid="classwx_string_1a4e0a115d6b98abacc9a5365f3e988135" kindref="member">mb_str()</ref>, <ref refid="classwx_string_1a7004705101a69577445fdec68f59ba42" kindref="member">fn_str()</ref>, <ref refid="classwx_string_1a4d289161c8079f5af7b762904f1610c5" kindref="member">wchar_str()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="706" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a4d289161c8079f5af7b762904f1610c5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>wxWritableWCharBuffer</type>
        <definition>wxWritableWCharBuffer wxString::wchar_str</definition>
        <argsstring>() const</argsstring>
        <name>wchar_str</name>
        <qualifiedname>wxString::wchar_str</qualifiedname>
        <briefdescription>
<para>Returns an object with string data that is implicitly convertible to <computeroutput>char*</computeroutput> pointer. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that changes to the returned buffer may or may not be lost (depending on the build) and so this function is only usable for passing strings to legacy libraries that don&apos;t have const-correct API. Use <ref refid="classwx_string_buffer" kindref="compound">wxStringBuffer</ref> if you want to modify the string.</para>
<para><simplesect kind="see"><para><ref refid="classwx_string_1a4e0a115d6b98abacc9a5365f3e988135" kindref="member">mb_str()</ref>, <ref refid="classwx_string_1aa17b9e38640fd3f22b5235173e910c9b" kindref="member">wc_str()</ref>, <ref refid="classwx_string_1a7004705101a69577445fdec68f59ba42" kindref="member">fn_str()</ref>, <ref refid="classwx_string_1a5db49c775c09e77fe0acde2a928bbf8f" kindref="member">c_str()</ref>, <ref refid="classwx_string_1a1110649ec649251516db659e94cd7692" kindref="member">char_str()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="717" column="27"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a2af910142512c5bbef6268a3fc78a957" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="chartype_8h_1af558f1d34fbf3cf5e3258e42a40875fd" kindref="member">wxStringCharType</ref> *</type>
        <definition>const wxStringCharType * wxString::wx_str</definition>
        <argsstring>() const</argsstring>
        <name>wx_str</name>
        <qualifiedname>wxString::wx_str</qualifiedname>
        <briefdescription>
<para>Explicit conversion to C string in the internal representation (either wchar_t* or UTF-8-encoded char*, depending on the build). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="723" column="28"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a4e4cb74bffe1c95602b865fd63c70bc8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="buffer_8h_1a76c552ab140910c2abd59a2a6a69a724" kindref="member">wxScopedCharBuffer</ref></type>
        <definition>const wxScopedCharBuffer wxString::To8BitData</definition>
        <argsstring>() const</argsstring>
        <name>To8BitData</name>
        <qualifiedname>wxString::To8BitData</qualifiedname>
        <briefdescription>
<para>Converts the string to an 8-bit string in ISO-8859-1 encoding in the form of a <ref refid="classwx_char_buffer" kindref="compound">wxCharBuffer</ref> (Unicode builds only). </para>
        </briefdescription>
        <detaileddescription>
<para>This is a convenience method useful when storing binary data in <ref refid="classwx_string" kindref="compound">wxString</ref>. It should be used <emphasis>only</emphasis> for this purpose. It is only valid to call this method on strings created using <ref refid="classwx_string_1a5aedc23e9cc2774237d99148d0622661" kindref="member">From8BitData()</ref>.</para>
<para><simplesect kind="since"><para>2.8.4</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classwx_string_1a5aedc23e9cc2774237d99148d0622661" kindref="member">wxString::From8BitData()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="737" column="30"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a99d4b351863373589f58554ea0f65067" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const TYPE</type>
        <definition>const TYPE wxString::ToAscii</definition>
        <argsstring>(char replaceWith=&apos;_&apos;) const</argsstring>
        <name>ToAscii</name>
        <qualifiedname>wxString::ToAscii</qualifiedname>
        <param>
          <type>char</type>
          <declname>replaceWith</declname>
          <defval>&apos;<ref refid="translation_8h_1a63ac344fa98fcb51cef18e5a9b8a916d" kindref="member">_</ref>&apos;</defval>
        </param>
        <briefdescription>
<para>Converts the string to an ASCII, 7-bit string in the form of a <ref refid="classwx_char_buffer" kindref="compound">wxCharBuffer</ref> (Unicode builds only) or a C string (ANSI builds). </para>
        </briefdescription>
        <detaileddescription>
<para>Note that this conversion is only lossless if the string contains only ASCII characters as all the non-ASCII ones are replaced with the (same) provided replacement character.</para>
<para>Use <ref refid="classwx_string_1a4e0a115d6b98abacc9a5365f3e988135" kindref="member">mb_str()</ref> or <ref refid="classwx_string_1a1e3f959e6841c6958bc391246ba7f747" kindref="member">utf8_str()</ref> to convert to other encodings.</para>
<para>Depending on OS and configuration, TYPE is either <computeroutput>char*</computeroutput> or <ref refid="classwx_char_buffer" kindref="compound">wxCharBuffer</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>replaceWith</parametername>
</parameternamelist>
<parameterdescription>
<para>The character used to replace any non-ASCII characters, default to underscore (<computeroutput>&quot;_&quot;</computeroutput>). This parameter is new since wxWidgets 3.1.0. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="756" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a0cdcd5cf94be8686ed6b11248e99fbb2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string wxString::ToStdString</definition>
        <argsstring>(const wxMBConv &amp;conv=wxConvLibc) const</argsstring>
        <name>ToStdString</name>
        <qualifiedname>wxString::ToStdString</qualifiedname>
        <param>
          <type>const <ref refid="classwx_m_b_conv" kindref="compound">wxMBConv</ref> &amp;</type>
          <declname>conv</declname>
          <defval>wxConvLibc</defval>
        </param>
        <briefdescription>
<para>Return the string as a std::string using <emphasis>conv&apos;s</emphasis> <ref refid="classwx_m_b_conv_1a0d975de5e4fdc75433cbbeb8eccca794" kindref="member">wxMBConv::cWC2MB</ref> method. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that if the conversion of (Unicode) string contents using <emphasis>conv</emphasis> fails, the return string will be empty. Be sure to check for this to avoid silent data loss. Alternatively, pass <computeroutput>wxConvUTF8</computeroutput> as <emphasis>conv</emphasis> or use <ref refid="classwx_string_1a5689d0c457a386f130b8a8f6529db61d" kindref="member">utf8_string()</ref> to always use UTF-8 encoding, rather than the current one.</para>
<para>Instead of using this function it&apos;s also possible to write <programlisting><codeline><highlight class="normal">std::string<sp/>s;</highlight></codeline>
<codeline><highlight class="normal"><ref refid="classwx_string" kindref="compound">wxString</ref><sp/>wxs;</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal">s<sp/>=<sp/>std::string(wxs);</highlight></codeline>
</programlisting> but using <ref refid="classwx_string_1a0cdcd5cf94be8686ed6b11248e99fbb2" kindref="member">ToStdString()</ref> may make the code more clear.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conv</parametername>
</parameternamelist>
<parameterdescription>
<para>The converter to be used. This parameter is new in wxWidgets 3.1.1.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>2.9.1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="781" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1abb20ba3a70eee6d27ae98926b9fd8c50" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::wstring</type>
        <definition>std::wstring wxString::ToStdWstring</definition>
        <argsstring>() const</argsstring>
        <name>ToStdWstring</name>
        <qualifiedname>wxString::ToStdWstring</qualifiedname>
        <briefdescription>
<para>Return the string as a std::wstring. </para>
        </briefdescription>
        <detaileddescription>
<para>Unlike <ref refid="classwx_string_1a0cdcd5cf94be8686ed6b11248e99fbb2" kindref="member">ToStdString()</ref>, there is no danger of data loss when using this function.</para>
<para><simplesect kind="since"><para>2.9.1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="791" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a62b0fe097622f442f3ec0282f45c32d0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="buffer_8h_1a76c552ab140910c2abd59a2a6a69a724" kindref="member">wxScopedCharBuffer</ref></type>
        <definition>const wxScopedCharBuffer wxString::ToUTF8</definition>
        <argsstring>() const</argsstring>
        <name>ToUTF8</name>
        <qualifiedname>wxString::ToUTF8</qualifiedname>
        <briefdescription>
<para>Same as <ref refid="classwx_string_1a1e3f959e6841c6958bc391246ba7f747" kindref="member">utf8_str()</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="796" column="30"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Concatenation</header>
      <description><para><anchor id="classwx_string_1concat"/></para>
<para>Almost anything may be concatenated (appended to) with a string!</para>
<para>Note that the various <ref refid="classwx_string_1a4f2c1fa26b2d9488095c1c37f630d667" kindref="member">operator&lt;&lt;()</ref> overloads work as C++ stream insertion operators. They insert the given value into the string. Precision and format cannot be set using them. Use <ref refid="classwx_string_1a9588b7f2684b9a6a924dc3746a2b2f8d" kindref="member">Printf()</ref> instead.</para>
<para>See also the <ref refid="classwx_string_1a49f0c0bca0ab4ef521c5451aa5fdcde0" kindref="member">insert()</ref> and <ref refid="classwx_string_1a7379692b7b4dc9e08a6b364d743b6117" kindref="member">append()</ref> STL-like functions. </para>
</description>
      <memberdef kind="function" id="classwx_string_1a8d9df5d704ea6561fe56b5950d15268c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
        <definition>wxString &amp; wxString::Append</definition>
        <argsstring>(const char *psz)</argsstring>
        <name>Append</name>
        <qualifiedname>wxString::Append</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>psz</declname>
        </param>
        <briefdescription>
<para>Appends the string literal <emphasis>psz</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="817" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a72b9c09550083147184ec0efa802755f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
        <definition>wxString &amp; wxString::Append</definition>
        <argsstring>(const wchar_t *pwz)</argsstring>
        <name>Append</name>
        <qualifiedname>wxString::Append</qualifiedname>
        <param>
          <type>const wchar_t *</type>
          <declname>pwz</declname>
        </param>
        <briefdescription>
<para>Appends the wide string literal <emphasis>pwz</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="822" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a05547aff5e8d363e8c5e1f9c82dab4f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
        <definition>wxString &amp; wxString::Append</definition>
        <argsstring>(const char *psz, size_t nLen)</argsstring>
        <name>Append</name>
        <qualifiedname>wxString::Append</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>psz</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nLen</declname>
        </param>
        <briefdescription>
<para>Appends the string literal <emphasis>psz</emphasis> with max length <emphasis>nLen</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="827" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a2e2798f899af5fa1a1255153cc5766ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
        <definition>wxString &amp; wxString::Append</definition>
        <argsstring>(const wchar_t *pwz, size_t nLen)</argsstring>
        <name>Append</name>
        <qualifiedname>wxString::Append</qualifiedname>
        <param>
          <type>const wchar_t *</type>
          <declname>pwz</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nLen</declname>
        </param>
        <briefdescription>
<para>Appends the wide string literal <emphasis>psz</emphasis> with max length <emphasis>nLen</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="832" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a704da6760672a3813101a80a39de92b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
        <definition>wxString &amp; wxString::Append</definition>
        <argsstring>(const wxString &amp;s)</argsstring>
        <name>Append</name>
        <qualifiedname>wxString::Append</qualifiedname>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Appends the string <emphasis>s</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="837" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1afbe89abb2d390f1dd629546f45f0cbeb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
        <definition>wxString &amp; wxString::Append</definition>
        <argsstring>(wxUniChar ch, size_t count=1u)</argsstring>
        <name>Append</name>
        <qualifiedname>wxString::Append</qualifiedname>
        <param>
          <type><ref refid="classwx_uni_char" kindref="compound">wxUniChar</ref></type>
          <declname>ch</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
          <defval>1u</defval>
        </param>
        <briefdescription>
<para>Appends the character <emphasis>ch</emphasis> <emphasis>count</emphasis> times. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="842" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a1c425aa8eed17e27cfae62e4107ffc62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
        <definition>wxString &amp; wxString::Prepend</definition>
        <argsstring>(const wxString &amp;str)</argsstring>
        <name>Prepend</name>
        <qualifiedname>wxString::Prepend</qualifiedname>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Prepends <emphasis>str</emphasis> to this string, returning a reference to this string. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="847" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a742b91e784f7baaef808b4ffb073ec53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>wxString wxString::operator+</definition>
        <argsstring>(const wxString &amp;x, const wxString &amp;y)</argsstring>
        <name>operator+</name>
        <qualifiedname>wxString::operator+</qualifiedname>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Concatenation: returns a new string equal to the concatenation of the operands. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="852" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1ac6b0d07b904597a70fea888c33f165cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>wxString wxString::operator+</definition>
        <argsstring>(const wxString &amp;x, wxUniChar y)</argsstring>
        <name>operator+</name>
        <qualifiedname>wxString::operator+</qualifiedname>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classwx_uni_char" kindref="compound">wxUniChar</ref></type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="857" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a4f2c1fa26b2d9488095c1c37f630d667" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
        <definition>wxString &amp; wxString::operator&lt;&lt;</definition>
        <argsstring>(const wxString &amp;s)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>wxString::operator&lt;&lt;</qualifiedname>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Appends the string literal <emphasis>psz</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="859" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1af184e3d8ace5937aa1a31d1149223217" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
        <definition>wxString &amp; wxString::operator&lt;&lt;</definition>
        <argsstring>(const char *psz)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>wxString::operator&lt;&lt;</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>psz</declname>
        </param>
        <briefdescription>
<para>Appends the string literal <emphasis>psz</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="860" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a7cb5c09dbad7fcac72185a704b66bf0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
        <definition>wxString &amp; wxString::operator&lt;&lt;</definition>
        <argsstring>(const wchar_t *pwz)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>wxString::operator&lt;&lt;</qualifiedname>
        <param>
          <type>const wchar_t *</type>
          <declname>pwz</declname>
        </param>
        <briefdescription>
<para>Appends the string literal <emphasis>psz</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="861" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a75a58c002062d314fa363478541bd0c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
        <definition>wxString &amp; wxString::operator&lt;&lt;</definition>
        <argsstring>(const wxCStrData &amp;psz)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>wxString::operator&lt;&lt;</qualifiedname>
        <param>
          <type>const wxCStrData &amp;</type>
          <declname>psz</declname>
        </param>
        <briefdescription>
<para>Appends the string literal <emphasis>psz</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="862" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1ad832539abd0902295efb641db16aa31f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
        <definition>wxString &amp; wxString::operator&lt;&lt;</definition>
        <argsstring>(char ch)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>wxString::operator&lt;&lt;</qualifiedname>
        <param>
          <type>char</type>
          <declname>ch</declname>
        </param>
        <briefdescription>
<para>Appends the string literal <emphasis>psz</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="863" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a86af4a29f2436f67c33db61b1be87aaf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
        <definition>wxString &amp; wxString::operator&lt;&lt;</definition>
        <argsstring>(unsigned char ch)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>wxString::operator&lt;&lt;</qualifiedname>
        <param>
          <type>unsigned char</type>
          <declname>ch</declname>
        </param>
        <briefdescription>
<para>Appends the string literal <emphasis>psz</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="864" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a5ea61559366584903472874cf994027a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
        <definition>wxString &amp; wxString::operator&lt;&lt;</definition>
        <argsstring>(wchar_t ch)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>wxString::operator&lt;&lt;</qualifiedname>
        <param>
          <type>wchar_t</type>
          <declname>ch</declname>
        </param>
        <briefdescription>
<para>Appends the string literal <emphasis>psz</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="865" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a36aa76584cc47fc9b1912853b9a5fd74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
        <definition>wxString &amp; wxString::operator&lt;&lt;</definition>
        <argsstring>(const wxCharBuffer &amp;s)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>wxString::operator&lt;&lt;</qualifiedname>
        <param>
          <type>const <ref refid="classwx_char_buffer" kindref="compound">wxCharBuffer</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Appends the string literal <emphasis>psz</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="866" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a37787965f2669f4ab0bc25483dd2157f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
        <definition>wxString &amp; wxString::operator&lt;&lt;</definition>
        <argsstring>(const wxWCharBuffer &amp;s)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>wxString::operator&lt;&lt;</qualifiedname>
        <param>
          <type>const <ref refid="classwx_w_char_buffer" kindref="compound">wxWCharBuffer</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Appends the string literal <emphasis>psz</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="867" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a3a0e893fcb55da731775bdb69a444656" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
        <definition>wxString &amp; wxString::operator&lt;&lt;</definition>
        <argsstring>(wxUniChar ch)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>wxString::operator&lt;&lt;</qualifiedname>
        <param>
          <type><ref refid="classwx_uni_char" kindref="compound">wxUniChar</ref></type>
          <declname>ch</declname>
        </param>
        <briefdescription>
<para>Appends the string literal <emphasis>psz</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="868" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a18379021984fd71992d253dc53d775a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
        <definition>wxString &amp; wxString::operator&lt;&lt;</definition>
        <argsstring>(wxUniCharRef ch)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>wxString::operator&lt;&lt;</qualifiedname>
        <param>
          <type><ref refid="classwx_uni_char_ref" kindref="compound">wxUniCharRef</ref></type>
          <declname>ch</declname>
        </param>
        <briefdescription>
<para>Appends the string literal <emphasis>psz</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="869" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a5eacb8e1b213d60236d8b96c8e6ee037" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
        <definition>wxString &amp; wxString::operator&lt;&lt;</definition>
        <argsstring>(unsigned int ui)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>wxString::operator&lt;&lt;</qualifiedname>
        <param>
          <type>unsigned int</type>
          <declname>ui</declname>
        </param>
        <briefdescription>
<para>Appends the string literal <emphasis>psz</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="870" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a36fde5296c664614745e7b9f20899a64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
        <definition>wxString &amp; wxString::operator&lt;&lt;</definition>
        <argsstring>(long l)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>wxString::operator&lt;&lt;</qualifiedname>
        <param>
          <type>long</type>
          <declname>l</declname>
        </param>
        <briefdescription>
<para>Appends the string literal <emphasis>psz</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="871" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a100ef164a3b77bb59007ccd56a0b16f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
        <definition>wxString &amp; wxString::operator&lt;&lt;</definition>
        <argsstring>(unsigned long ul)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>wxString::operator&lt;&lt;</qualifiedname>
        <param>
          <type>unsigned long</type>
          <declname>ul</declname>
        </param>
        <briefdescription>
<para>Appends the string literal <emphasis>psz</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="872" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a2046fe40d7e29d24a9f85f71166af9ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
        <definition>wxString &amp; wxString::operator&lt;&lt;</definition>
        <argsstring>(wxLongLong_t ll)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>wxString::operator&lt;&lt;</qualifiedname>
        <param>
          <type>wxLongLong_t</type>
          <declname>ll</declname>
        </param>
        <briefdescription>
<para>Appends the string literal <emphasis>psz</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="873" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a4347d5d11a68f72078d08c6690e58e90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
        <definition>wxString &amp; wxString::operator&lt;&lt;</definition>
        <argsstring>(wxULongLong_t ul)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>wxString::operator&lt;&lt;</qualifiedname>
        <param>
          <type>wxULongLong_t</type>
          <declname>ul</declname>
        </param>
        <briefdescription>
<para>Appends the string literal <emphasis>psz</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="874" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1aced1de7ac678a0f16871b6a0e3bb02a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
        <definition>wxString &amp; wxString::operator&lt;&lt;</definition>
        <argsstring>(float f)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>wxString::operator&lt;&lt;</qualifiedname>
        <param>
          <type>float</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Appends the string literal <emphasis>psz</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="875" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a0f943fd3c77e97d478445c1f47345236" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
        <definition>wxString &amp; wxString::operator&lt;&lt;</definition>
        <argsstring>(double d)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>wxString::operator&lt;&lt;</qualifiedname>
        <param>
          <type>double</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>Appends the string literal <emphasis>psz</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="876" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1ab82d9888319f8639cb3310d18b7640a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxString::operator+=</definition>
        <argsstring>(const wxString &amp;str)</argsstring>
        <name>operator+=</name>
        <qualifiedname>wxString::operator+=</qualifiedname>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Concatenation in place: the argument is appended to the string. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="881" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a26c983e1489887af0ec14bbacef962ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxString::operator+=</definition>
        <argsstring>(wxUniChar c)</argsstring>
        <name>operator+=</name>
        <qualifiedname>wxString::operator+=</qualifiedname>
        <param>
          <type><ref refid="classwx_uni_char" kindref="compound">wxUniChar</ref></type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="886" column="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Comparison</header>
      <description><para><anchor id="classwx_string_1cmp"/></para>
<para>The default comparison function <ref refid="classwx_string_1aa26d0a7115dc1d56a1486d449be184da" kindref="member">Cmp()</ref> is case-sensitive and so is the default version of <ref refid="classwx_string_1afed859668263a9b59ac3e6c8e6d1850d" kindref="member">IsSameAs()</ref>. For case insensitive comparisons you should use <ref refid="classwx_string_1afe57c327ae857c2b256e38c8c653158f" kindref="member">CmpNoCase()</ref> or give a second parameter to <ref refid="classwx_string_1afed859668263a9b59ac3e6c8e6d1850d" kindref="member">IsSameAs()</ref>. This last function is maybe more convenient if only equality of the strings matters because it returns a boolean true value if the strings are the same and not 0 (which is usually false in C) as <ref refid="classwx_string_1aa26d0a7115dc1d56a1486d449be184da" kindref="member">Cmp()</ref> does.</para>
<para><ref refid="classwx_string_1a5db4a7917ce5462dbb199342421620d5" kindref="member">Matches()</ref> is a poor man&apos;s regular expression matcher: it only understands &apos;*&apos; and &apos;?&apos; metacharacters in the sense of DOS command line interpreter.</para>
<para><ref refid="classwx_string_1acc80f973953489a15a601fccead0936f" kindref="member">StartsWith()</ref> is helpful when parsing a line of text which should start with some predefined prefix and is more efficient than doing direct string comparison as you would also have to precalculate the length of the prefix.</para>
<para>See also the <ref refid="classwx_string_1a00931c787708b651e0d58df76a15ab8d" kindref="member">compare()</ref> STL-like function. </para>
</description>
      <memberdef kind="function" id="classwx_string_1aa26d0a7115dc1d56a1486d449be184da" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxString::Cmp</definition>
        <argsstring>(const wxString &amp;s) const</argsstring>
        <name>Cmp</name>
        <qualifiedname>wxString::Cmp</qualifiedname>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Case-sensitive comparison. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns a positive value if the string is greater than the argument, zero if it is equal to it or a negative value if it is less than the argument (same semantics as the standard <computeroutput>strcmp()</computeroutput> function).</para>
<para><simplesect kind="see"><para><ref refid="classwx_string_1afe57c327ae857c2b256e38c8c653158f" kindref="member">CmpNoCase()</ref>, <ref refid="classwx_string_1afed859668263a9b59ac3e6c8e6d1850d" kindref="member">IsSameAs()</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="920" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1afe57c327ae857c2b256e38c8c653158f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxString::CmpNoCase</definition>
        <argsstring>(const wxString &amp;s) const</argsstring>
        <name>CmpNoCase</name>
        <qualifiedname>wxString::CmpNoCase</qualifiedname>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Case-insensitive comparison. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns a positive value if the string is greater than the argument, zero if it is equal to it or a negative value if it is less than the argument (same semantics as the standard <computeroutput>strcmp()</computeroutput> function).</para>
<para><simplesect kind="see"><para><ref refid="classwx_string_1aa26d0a7115dc1d56a1486d449be184da" kindref="member">Cmp()</ref>, <ref refid="classwx_string_1afed859668263a9b59ac3e6c8e6d1850d" kindref="member">IsSameAs()</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="930" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1afed859668263a9b59ac3e6c8e6d1850d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxString::IsSameAs</definition>
        <argsstring>(const wxString &amp;s, bool caseSensitive=true) const</argsstring>
        <name>IsSameAs</name>
        <qualifiedname>wxString::IsSameAs</qualifiedname>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>caseSensitive</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Test whether the string is equal to another string <emphasis>s</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>The test is case-sensitive if <emphasis>caseSensitive</emphasis> is true (default) or not if it is false.</para>
<para><simplesect kind="return"><para>true if the string is equal to the other one, false otherwise.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classwx_string_1aa26d0a7115dc1d56a1486d449be184da" kindref="member">Cmp()</ref>, <ref refid="classwx_string_1afe57c327ae857c2b256e38c8c653158f" kindref="member">CmpNoCase()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="942" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1aa962f1e3b898bd0956f6f516bbcb27a0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxString::IsSameAs</definition>
        <argsstring>(wxUniChar ch, bool caseSensitive=true) const</argsstring>
        <name>IsSameAs</name>
        <qualifiedname>wxString::IsSameAs</qualifiedname>
        <param>
          <type><ref refid="classwx_uni_char" kindref="compound">wxUniChar</ref></type>
          <declname>ch</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>caseSensitive</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Test whether the string is equal to the single character <emphasis>ch</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>The test is case-sensitive if <emphasis>caseSensitive</emphasis> is true (default) or not if it is false.</para>
<para><simplesect kind="return"><para>true if the string is equal to this character, false otherwise.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classwx_string_1aa26d0a7115dc1d56a1486d449be184da" kindref="member">Cmp()</ref>, <ref refid="classwx_string_1afe57c327ae857c2b256e38c8c653158f" kindref="member">CmpNoCase()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="954" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a5db4a7917ce5462dbb199342421620d5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxString::Matches</definition>
        <argsstring>(const wxString &amp;mask) const</argsstring>
        <name>Matches</name>
        <qualifiedname>wxString::Matches</qualifiedname>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Returns true if the string contents matches a mask containing &apos;*&apos; and &apos;?&apos;. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="959" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1acc80f973953489a15a601fccead0936f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxString::StartsWith</definition>
        <argsstring>(const wxString &amp;prefix, wxString *rest=NULL) const</argsstring>
        <name>StartsWith</name>
        <qualifiedname>wxString::StartsWith</qualifiedname>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>prefix</declname>
        </param>
        <param>
          <type><ref refid="classwx_string" kindref="compound">wxString</ref> *</type>
          <declname>rest</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>This function can be used to test if the string starts with the specified <emphasis>prefix</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>If it does, the function will return true and put the rest of the string (i.e. after the prefix) into <emphasis>rest</emphasis> string if it is not NULL. Otherwise, the function returns false and doesn&apos;t modify the <emphasis>rest</emphasis>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="969" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a0674ad20d50668cba2ebae3ec5de4e6c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxString::EndsWith</definition>
        <argsstring>(const wxString &amp;suffix, wxString *rest=NULL) const</argsstring>
        <name>EndsWith</name>
        <qualifiedname>wxString::EndsWith</qualifiedname>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>suffix</declname>
        </param>
        <param>
          <type><ref refid="classwx_string" kindref="compound">wxString</ref> *</type>
          <declname>rest</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>This function can be used to test if the string ends with the specified <emphasis>suffix</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>If it does, the function will return true and put the beginning of the string before the suffix into <emphasis>rest</emphasis> string if it is not NULL. Otherwise, the function returns false and doesn&apos;t modify the <emphasis>rest</emphasis>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="978" column="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Substring extraction</header>
      <description><para><anchor id="classwx_string_1substring"/></para>
<para>These functions allow you to extract a substring from the string. The original string is not modified and the function returns the extracted substring.</para>
<para>See also the <ref refid="classwx_string_1a26c2820f86f82c4a1b28dd27a8015deb" kindref="member">at()</ref> and the <ref refid="classwx_string_1a86892c081560a9dec01224be3f30ede3" kindref="member">substr()</ref> STL-like functions. </para>
</description>
      <memberdef kind="function" id="classwx_string_1ae28d32ca35ae00e3225fc25496a77f93" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>wxString wxString::Mid</definition>
        <argsstring>(size_t first, size_t nCount=wxString::npos) const</argsstring>
        <name>Mid</name>
        <qualifiedname>wxString::Mid</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>first</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nCount</declname>
          <defval><ref refid="classwx_string_1a7f7b5ab972b4be6703f9c779654af247" kindref="member">wxString::npos</ref></defval>
        </param>
        <briefdescription>
<para>Returns a substring starting at <emphasis>first</emphasis>, with length <emphasis>count</emphasis>, or the rest of the string if <emphasis>count</emphasis> is the default value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="997" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1aac4abe6f7f91a10830946d366577bbc7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>wxString wxString::SubString</definition>
        <argsstring>(size_t from, size_t to) const</argsstring>
        <name>SubString</name>
        <qualifiedname>wxString::SubString</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>from</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>to</declname>
        </param>
        <briefdescription>
<para>Returns the part of the string between the indices <emphasis>from</emphasis> and <emphasis>to</emphasis> inclusive. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a wxWidgets 1.xx compatibility function, use <ref refid="classwx_string_1ae28d32ca35ae00e3225fc25496a77f93" kindref="member">Mid()</ref> instead (but note that parameters have different meaning). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1006" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a206ce7ba0bc894c3cc7cad28b4d0888e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>wxString wxString::operator()</definition>
        <argsstring>(size_t start, size_t len) const</argsstring>
        <name>operator()</name>
        <qualifiedname>wxString::operator()</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>start</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Same as <ref refid="classwx_string_1ae28d32ca35ae00e3225fc25496a77f93" kindref="member">Mid()</ref> (substring extraction). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1011" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a8af862b2601c465fb6fd053729725d32" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>wxString wxString::Left</definition>
        <argsstring>(size_t count) const</argsstring>
        <name>Left</name>
        <qualifiedname>wxString::Left</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Returns the first <emphasis>count</emphasis> characters of the string. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1016" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a67490dc52e54c709ed6e4dfc8a3d8389" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>wxString wxString::Right</definition>
        <argsstring>(size_t count) const</argsstring>
        <name>Right</name>
        <qualifiedname>wxString::Right</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Returns the last <emphasis>count</emphasis> characters. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1021" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1ae905d6ca938ab547dd3a640bd68eade3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>wxString wxString::AfterFirst</definition>
        <argsstring>(wxUniChar ch) const</argsstring>
        <name>AfterFirst</name>
        <qualifiedname>wxString::AfterFirst</qualifiedname>
        <param>
          <type><ref refid="classwx_uni_char" kindref="compound">wxUniChar</ref></type>
          <declname>ch</declname>
        </param>
        <briefdescription>
<para>Gets all the characters after the first occurrence of <emphasis>ch</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns the empty string if <emphasis>ch</emphasis> is not found. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1027" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a921e7ad822525c310f9378931609552d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>wxString wxString::AfterLast</definition>
        <argsstring>(wxUniChar ch) const</argsstring>
        <name>AfterLast</name>
        <qualifiedname>wxString::AfterLast</qualifiedname>
        <param>
          <type><ref refid="classwx_uni_char" kindref="compound">wxUniChar</ref></type>
          <declname>ch</declname>
        </param>
        <briefdescription>
<para>Gets all the characters after the last occurrence of <emphasis>ch</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns the whole string if <emphasis>ch</emphasis> is not found. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1033" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1ac7175df8f51528fe2cc6a00f63ab9f24" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>wxString wxString::BeforeFirst</definition>
        <argsstring>(wxUniChar ch, wxString *rest=NULL) const</argsstring>
        <name>BeforeFirst</name>
        <qualifiedname>wxString::BeforeFirst</qualifiedname>
        <param>
          <type><ref refid="classwx_uni_char" kindref="compound">wxUniChar</ref></type>
          <declname>ch</declname>
        </param>
        <param>
          <type><ref refid="classwx_string" kindref="compound">wxString</ref> *</type>
          <declname>rest</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Gets all characters before the first occurrence of <emphasis>ch</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns the whole string if <emphasis>ch</emphasis> is not found.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ch</parametername>
</parameternamelist>
<parameterdescription>
<para>The character to look for. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rest</parametername>
</parameternamelist>
<parameterdescription>
<para>Filled with the part of the string following the first occurrence of <emphasis>ch</emphasis> or cleared if it was not found. The same string is returned by <ref refid="classwx_string_1ae905d6ca938ab547dd3a640bd68eade3" kindref="member">AfterFirst()</ref> but it is more efficient to use this output parameter if both the &quot;before&quot; and &quot;after&quot; parts are needed than calling both functions one after the other. This parameter is available in wxWidgets version 2.9.2 and later only. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Part of the string before the first occurrence of <emphasis>ch</emphasis>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1048" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1ae7538d32a43f35e065736750d4b169de" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>wxString wxString::BeforeLast</definition>
        <argsstring>(wxUniChar ch, wxString *rest=NULL) const</argsstring>
        <name>BeforeLast</name>
        <qualifiedname>wxString::BeforeLast</qualifiedname>
        <param>
          <type><ref refid="classwx_uni_char" kindref="compound">wxUniChar</ref></type>
          <declname>ch</declname>
        </param>
        <param>
          <type><ref refid="classwx_string" kindref="compound">wxString</ref> *</type>
          <declname>rest</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Gets all characters before the last occurrence of <emphasis>ch</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns the empty string if <emphasis>ch</emphasis> is not found.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ch</parametername>
</parameternamelist>
<parameterdescription>
<para>The character to look for. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rest</parametername>
</parameternamelist>
<parameterdescription>
<para>Filled with the part of the string following the last occurrence of <emphasis>ch</emphasis> or the copy of this string if it was not found. The same string is returned by <ref refid="classwx_string_1a921e7ad822525c310f9378931609552d" kindref="member">AfterLast()</ref> but it is more efficient to use this output parameter if both the &quot;before&quot; and &quot;after&quot; parts are needed than calling both functions one after the other. This parameter is available in wxWidgets version 2.9.2 and later only. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Part of the string before the last occurrence of <emphasis>ch</emphasis>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1063" column="14"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Case conversion</header>
      <description><para><anchor id="classwx_string_1caseconv"/></para>
<para>The MakeXXX() variants modify the string in place, while the other functions return a new string which contains the original text converted to the upper or lower case and leave the original string unchanged. </para>
</description>
      <memberdef kind="function" id="classwx_string_1a5e054318f0333f62f2e5e3857ef3f359" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>wxString wxString::Capitalize</definition>
        <argsstring>() const</argsstring>
        <name>Capitalize</name>
        <qualifiedname>wxString::Capitalize</qualifiedname>
        <briefdescription>
<para>Return the copy of the string with the first string character in the upper case and the subsequent ones in the lower case. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>2.9.0</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classwx_string_1afd7e60e3cb6c9bd2618f119a6f074874" kindref="member">MakeCapitalized()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1085" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a7f5a092a70a7d3f42e8cb8b46f4663fb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>wxString wxString::Lower</definition>
        <argsstring>() const</argsstring>
        <name>Lower</name>
        <qualifiedname>wxString::Lower</qualifiedname>
        <briefdescription>
<para>Returns this string converted to the lower case. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classwx_string_1a61e77fced34320925b5e849d074354ab" kindref="member">MakeLower()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1092" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a2eddc0d38ba0090d5f3af1d66c4c702e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxString::LowerCase</definition>
        <argsstring>()</argsstring>
        <name>LowerCase</name>
        <qualifiedname>wxString::LowerCase</qualifiedname>
        <briefdescription>
<para>Same as MakeLower. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a wxWidgets 1.xx compatibility function; you should not use it in new code. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1099" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1afd7e60e3cb6c9bd2618f119a6f074874" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
        <definition>wxString &amp; wxString::MakeCapitalized</definition>
        <argsstring>()</argsstring>
        <name>MakeCapitalized</name>
        <qualifiedname>wxString::MakeCapitalized</qualifiedname>
        <briefdescription>
<para>Converts the first characters of the string to the upper case and all the subsequent ones to the lower case and returns the result. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>2.9.0</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classwx_string_1a5e054318f0333f62f2e5e3857ef3f359" kindref="member">Capitalize()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1109" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a61e77fced34320925b5e849d074354ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
        <definition>wxString &amp; wxString::MakeLower</definition>
        <argsstring>()</argsstring>
        <name>MakeLower</name>
        <qualifiedname>wxString::MakeLower</qualifiedname>
        <briefdescription>
<para>Converts all characters to lower case and returns the reference to the modified string. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classwx_string_1a7f5a092a70a7d3f42e8cb8b46f4663fb" kindref="member">Lower()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1117" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1ad2c92aab8b3fc526ad46860f27586f92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
        <definition>wxString &amp; wxString::MakeUpper</definition>
        <argsstring>()</argsstring>
        <name>MakeUpper</name>
        <qualifiedname>wxString::MakeUpper</qualifiedname>
        <briefdescription>
<para>Converts all characters to upper case and returns the reference to the modified string. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classwx_string_1a99b272edade4a8fbcbb8aeddd733594f" kindref="member">Upper()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1125" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a99b272edade4a8fbcbb8aeddd733594f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>wxString wxString::Upper</definition>
        <argsstring>() const</argsstring>
        <name>Upper</name>
        <qualifiedname>wxString::Upper</qualifiedname>
        <briefdescription>
<para>Returns this string converted to upper case. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classwx_string_1ad2c92aab8b3fc526ad46860f27586f92" kindref="member">MakeUpper()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1132" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1ab708a3eb6b01704bc0019f1cf0de5b4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxString::UpperCase</definition>
        <argsstring>()</argsstring>
        <name>UpperCase</name>
        <qualifiedname>wxString::UpperCase</qualifiedname>
        <briefdescription>
<para>The same as <ref refid="classwx_string_1ad2c92aab8b3fc526ad46860f27586f92" kindref="member">MakeUpper()</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a wxWidgets 1.xx compatibility function; you should not use it in new code. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1140" column="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Searching and replacing</header>
      <description><para><anchor id="classwx_string_1search"/></para>
<para>These functions replace the standard <computeroutput>strchr()</computeroutput> and <computeroutput>strstr()</computeroutput> functions.</para>
<para>See also the <ref refid="classwx_string_1a2774f4d4ddd392f89a70e3a63ffa7c13" kindref="member">find()</ref>, <ref refid="classwx_string_1aa303318801ba97f04ea23c0991b729cd" kindref="member">rfind()</ref>, <ref refid="classwx_string_1af775c599d93dfd9a823c6e9325705140" kindref="member">replace()</ref> STL-like functions. </para>
</description>
      <memberdef kind="function" id="classwx_string_1a55e5015f2ba4b8d93bf39bf1cc1cfbf5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxString::Find</definition>
        <argsstring>(wxUniChar ch, bool fromEnd=false) const</argsstring>
        <name>Find</name>
        <qualifiedname>wxString::Find</qualifiedname>
        <param>
          <type><ref refid="classwx_uni_char" kindref="compound">wxUniChar</ref></type>
          <declname>ch</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>fromEnd</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Searches for the given character <emphasis>ch</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns the position or <computeroutput>wxNOT_FOUND</computeroutput> if not found. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1159" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1afbaf744521cf3a850fa2cfae682eb29e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxString::Find</definition>
        <argsstring>(const wxString &amp;sub) const</argsstring>
        <name>Find</name>
        <qualifiedname>wxString::Find</qualifiedname>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>sub</declname>
        </param>
        <briefdescription>
<para>Searches for the given string <emphasis>sub</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns the starting position or <computeroutput>wxNOT_FOUND</computeroutput> if not found. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1165" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a81f3784062dd83101e1ad103abca0596" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxString::First</definition>
        <argsstring>(wxUniChar ch) const</argsstring>
        <name>First</name>
        <qualifiedname>wxString::First</qualifiedname>
        <param>
          <type><ref refid="classwx_uni_char" kindref="compound">wxUniChar</ref></type>
          <declname>ch</declname>
        </param>
        <briefdescription>
<para>Same as <ref refid="classwx_string_1a55e5015f2ba4b8d93bf39bf1cc1cfbf5" kindref="member">Find()</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a wxWidgets 1.xx compatibility function; you should not use it in new code. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1173" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1af775569c0e9ef7197e405ea56baa31f0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxString::First</definition>
        <argsstring>(const wxString &amp;str) const</argsstring>
        <name>First</name>
        <qualifiedname>wxString::First</qualifiedname>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Same as <ref refid="classwx_string_1a55e5015f2ba4b8d93bf39bf1cc1cfbf5" kindref="member">Find()</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a wxWidgets 1.xx compatibility function; you should not use it in new code. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1181" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a5517e2b01e8da1a7a92400028f1a8344" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t wxString::Replace</definition>
        <argsstring>(const wxString &amp;strOld, const wxString &amp;strNew, bool replaceAll=true)</argsstring>
        <name>Replace</name>
        <qualifiedname>wxString::Replace</qualifiedname>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>strOld</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>strNew</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>replaceAll</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Replace first (or all) occurrences of substring with another one. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>strOld</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to search for replacing. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>strNew</parametername>
</parameternamelist>
<parameterdescription>
<para>The substitution string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>replaceAll</parametername>
</parameternamelist>
<parameterdescription>
<para>If true a global replace will be done (default), otherwise only the first occurrence will be replaced.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Returns the number of replacements made. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1196" column="12"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Conversion to numbers</header>
      <description><para><anchor id="classwx_string_1numconv"/></para>
<para>The string provides functions for conversion to signed and unsigned integer and floating point numbers.</para>
<para>All functions take a pointer to the variable to put the numeric value in and return true if the <bold>entire</bold> string could be converted to a number. Notice if there is a valid number in the beginning of the string, it is returned in the output parameter even if the function returns false because there is more text following it. </para>
</description>
      <memberdef kind="function" id="classwx_string_1a0c719082ab8cde8323ea15f2ed9fb25d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxString::ToDouble</definition>
        <argsstring>(double *val) const</argsstring>
        <name>ToDouble</name>
        <qualifiedname>wxString::ToDouble</qualifiedname>
        <param>
          <type>double *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Attempts to convert the string to a floating point number. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns true on success (the number is stored in the location pointed to by <emphasis>val</emphasis>) or false if the string does not represent such number (the value of <emphasis>val</emphasis> may still be modified in this case).</para>
<para>Note that unlike <ref refid="classwx_string_1a51469f8fd0373785566002872bedd23a" kindref="member">ToCDouble()</ref> this function uses a localized version of <computeroutput><ref refid="wxcrt_8h_1aa904f5454b161f546bc27faa9d4e29b4" kindref="member">wxStrtod()</ref></computeroutput> and thus needs as decimal point (and thousands separator) the locale-specific decimal point. Thus you should use this function only when you are sure that this string contains a floating point number formatted with the rules of the locale currently in use (see <ref refid="classwx_locale" kindref="compound">wxLocale</ref>).</para>
<para>Also notice that even this function is locale-specific it does not support strings with thousands separators in them, even if the current locale uses digits grouping. You may use <ref refid="classwx_number_formatter_1aad539451a9ac91198141eead3be4e743" kindref="member">wxNumberFormatter::FromString()</ref> to parse such strings.</para>
<para>Please refer to the documentation of the standard function <computeroutput>strtod()</computeroutput> for more details about the supported syntax.</para>
<para><simplesect kind="see"><para><ref refid="classwx_string_1a51469f8fd0373785566002872bedd23a" kindref="member">ToCDouble()</ref>, <ref refid="classwx_string_1ad142803e239ff1ba9725b9abed29efc0" kindref="member">ToLong()</ref>, <ref refid="classwx_string_1abc52044a54499153dc493fb1d7ac9b53" kindref="member">ToULong()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1240" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a51469f8fd0373785566002872bedd23a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxString::ToCDouble</definition>
        <argsstring>(double *val) const</argsstring>
        <name>ToCDouble</name>
        <qualifiedname>wxString::ToCDouble</qualifiedname>
        <param>
          <type>double *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Variant of <ref refid="classwx_string_1a0c719082ab8cde8323ea15f2ed9fb25d" kindref="member">ToDouble()</ref>, always working in &quot;C&quot; locale. </para>
        </briefdescription>
        <detaileddescription>
<para>Works like <ref refid="classwx_string_1a0c719082ab8cde8323ea15f2ed9fb25d" kindref="member">ToDouble()</ref>, but this function expects the floating point number to be formatted always with the rules dictated by the &quot;C&quot; locale (in particular, the decimal point must be a dot), independently from the current application-wide locale (see <ref refid="classwx_locale" kindref="compound">wxLocale</ref>).</para>
<para><programlisting><codeline><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>val(0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Will<sp/>extract<sp/>2.2<sp/>from<sp/>the<sp/>string,<sp/>but<sp/>returns</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>false<sp/>because<sp/>the<sp/>&quot;lbs&quot;<sp/>section<sp/>of<sp/>the<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>was<sp/>not<sp/>part<sp/>of<sp/>the<sp/>conversion.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="classwx_string" kindref="compound">wxString</ref><sp/>str(</highlight><highlight class="stringliteral">&quot;2.2lbs&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fullStringConverted<sp/>=<sp/>str.ToCDouble(&amp;val);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Will<sp/>also<sp/>extract<sp/>2.2,<sp/>but<sp/>returns<sp/>true<sp/>because</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>entirety<sp/>of<sp/>the<sp/>string<sp/>was<sp/>converted<sp/>to<sp/>a<sp/>double.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">str.assign(</highlight><highlight class="stringliteral">&quot;2.2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">fullStringConverted<sp/>=<sp/>str.ToCDouble(&amp;val);</highlight></codeline>
</programlisting></para>
<para><simplesect kind="see"><para><ref refid="classwx_string_1a0c719082ab8cde8323ea15f2ed9fb25d" kindref="member">ToDouble()</ref>, <ref refid="classwx_string_1ad142803e239ff1ba9725b9abed29efc0" kindref="member">ToLong()</ref>, <ref refid="classwx_string_1abc52044a54499153dc493fb1d7ac9b53" kindref="member">ToULong()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1267" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1ab5b89e7f43276ff4c7e36b473768cafb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxString::ToInt</definition>
        <argsstring>(int *val, int base=10) const</argsstring>
        <name>ToInt</name>
        <qualifiedname>wxString::ToInt</qualifiedname>
        <param>
          <type>int *</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int</type>
          <declname>base</declname>
          <defval>10</defval>
        </param>
        <briefdescription>
<para>Works like <ref refid="classwx_string_1ad142803e239ff1ba9725b9abed29efc0" kindref="member">ToLong()</ref> but for signed integers. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classwx_string_1ad142803e239ff1ba9725b9abed29efc0" kindref="member">ToLong()</ref>, <ref refid="classwx_string_1aa5cde0002c67925757b9127846f90519" kindref="member">ToUInt()</ref>, <ref refid="classwx_string_1a0c719082ab8cde8323ea15f2ed9fb25d" kindref="member">ToDouble()</ref></para>
</simplesect>
<simplesect kind="since"><para>3.1.6 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1276" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1aa5cde0002c67925757b9127846f90519" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxString::ToUInt</definition>
        <argsstring>(unsigned int *val, int base=10) const</argsstring>
        <name>ToUInt</name>
        <qualifiedname>wxString::ToUInt</qualifiedname>
        <param>
          <type>unsigned int *</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int</type>
          <declname>base</declname>
          <defval>10</defval>
        </param>
        <briefdescription>
<para>Works like <ref refid="classwx_string_1abc52044a54499153dc493fb1d7ac9b53" kindref="member">ToULong()</ref> but for unsigned integers. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classwx_string_1ab5b89e7f43276ff4c7e36b473768cafb" kindref="member">ToInt()</ref>, <ref refid="classwx_string_1abc52044a54499153dc493fb1d7ac9b53" kindref="member">ToULong()</ref>, <ref refid="classwx_string_1a0c719082ab8cde8323ea15f2ed9fb25d" kindref="member">ToDouble()</ref></para>
</simplesect>
<simplesect kind="since"><para>3.1.6 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1285" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1ad142803e239ff1ba9725b9abed29efc0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxString::ToLong</definition>
        <argsstring>(long *val, int base=10) const</argsstring>
        <name>ToLong</name>
        <qualifiedname>wxString::ToLong</qualifiedname>
        <param>
          <type>long *</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int</type>
          <declname>base</declname>
          <defval>10</defval>
        </param>
        <briefdescription>
<para>Attempts to convert the string to a signed integer in base <emphasis>base</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns true on success in which case the number is stored in the location pointed to by <emphasis>val</emphasis> or false if the string does not represent a valid number in the given base (the value of <emphasis>val</emphasis> may still be modified in this case).</para>
<para>The value of <emphasis>base</emphasis> must be comprised between 2 and 36, inclusive, or be a special value 0 which means that the usual rules of <computeroutput>C</computeroutput> numbers are applied: if the number starts with <computeroutput>0x</computeroutput> it is considered to be in base 16, if it starts with <computeroutput>0</computeroutput> - in base 8 and in base 10 otherwise. Note that you may not want to specify the base 0 if you are parsing the numbers which may have leading zeroes as they can yield unexpected (to the user not familiar with C) results.</para>
<para>Note that unlike <ref refid="classwx_string_1a0a7d2dcd77a0b11a70d9841ad21d168a" kindref="member">ToCLong()</ref> this function uses a localized version of <computeroutput>wxStrtol()</computeroutput>. Thus you should use this function only when you are sure that this string contains an integer number formatted with the rules of the locale currently in use (see <ref refid="classwx_locale" kindref="compound">wxLocale</ref>).</para>
<para>As with <ref refid="classwx_string_1a0c719082ab8cde8323ea15f2ed9fb25d" kindref="member">ToDouble()</ref>, this function does not support strings containing thousands separators even if the current locale uses digits grouping. You may use <ref refid="classwx_number_formatter_1aad539451a9ac91198141eead3be4e743" kindref="member">wxNumberFormatter::FromString()</ref> to parse such strings.</para>
<para>Please refer to the documentation of the standard function <computeroutput>strtol()</computeroutput> for more details about the supported syntax.</para>
<para><simplesect kind="see"><para><ref refid="classwx_string_1a51469f8fd0373785566002872bedd23a" kindref="member">ToCDouble()</ref>, <ref refid="classwx_string_1a0c719082ab8cde8323ea15f2ed9fb25d" kindref="member">ToDouble()</ref>, <ref refid="classwx_string_1abc52044a54499153dc493fb1d7ac9b53" kindref="member">ToULong()</ref>, <ref refid="classwx_string_1ab5b89e7f43276ff4c7e36b473768cafb" kindref="member">ToInt()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1317" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a0a7d2dcd77a0b11a70d9841ad21d168a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxString::ToCLong</definition>
        <argsstring>(long *val, int base=10) const</argsstring>
        <name>ToCLong</name>
        <qualifiedname>wxString::ToCLong</qualifiedname>
        <param>
          <type>long *</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int</type>
          <declname>base</declname>
          <defval>10</defval>
        </param>
        <briefdescription>
<para>Variant of <ref refid="classwx_string_1ad142803e239ff1ba9725b9abed29efc0" kindref="member">ToLong()</ref> always working in &quot;C&quot; locale. </para>
        </briefdescription>
        <detaileddescription>
<para>Works like <ref refid="classwx_string_1ad142803e239ff1ba9725b9abed29efc0" kindref="member">ToLong()</ref> but unlike it this function expects the integer number to be formatted always with the rules dictated by the &quot;C&quot; locale, independently from the current application-wide locale (see <ref refid="classwx_locale" kindref="compound">wxLocale</ref>).</para>
<para><simplesect kind="see"><para><ref refid="classwx_string_1a0c719082ab8cde8323ea15f2ed9fb25d" kindref="member">ToDouble()</ref>, <ref refid="classwx_string_1ad142803e239ff1ba9725b9abed29efc0" kindref="member">ToLong()</ref>, <ref refid="classwx_string_1abc52044a54499153dc493fb1d7ac9b53" kindref="member">ToULong()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1328" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1af7344b65af7eaed045c4e3ba82275fdc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxString::ToLongLong</definition>
        <argsstring>(wxLongLong_t *val, int base=10) const</argsstring>
        <name>ToLongLong</name>
        <qualifiedname>wxString::ToLongLong</qualifiedname>
        <param>
          <type>wxLongLong_t *</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int</type>
          <declname>base</declname>
          <defval>10</defval>
        </param>
        <briefdescription>
<para>This is exactly the same as <ref refid="classwx_string_1ad142803e239ff1ba9725b9abed29efc0" kindref="member">ToLong()</ref> but works with 64 bit integer numbers. </para>
        </briefdescription>
        <detaileddescription>
<para>Notice that currently it doesn&apos;t work (always returns false) if parsing of 64 bit numbers is not supported by the underlying C run-time library. Compilers with C99 support and Microsoft Visual C++ version 7 and higher do support this.</para>
<para><simplesect kind="see"><para><ref refid="classwx_string_1ad142803e239ff1ba9725b9abed29efc0" kindref="member">ToLong()</ref>, <ref refid="classwx_string_1a200096add10bbadacb4143dc06f2b353" kindref="member">ToULongLong()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1339" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1abc52044a54499153dc493fb1d7ac9b53" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxString::ToULong</definition>
        <argsstring>(unsigned long *val, int base=10) const</argsstring>
        <name>ToULong</name>
        <qualifiedname>wxString::ToULong</qualifiedname>
        <param>
          <type>unsigned long *</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int</type>
          <declname>base</declname>
          <defval>10</defval>
        </param>
        <briefdescription>
<para>Attempts to convert the string to an unsigned integer in base <emphasis>base</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns true on success in which case the number is stored in the location pointed to by <emphasis>val</emphasis> or false if the string does not represent a valid number in the given base (the value of <emphasis>val</emphasis> may still be modified in this case).</para>
<para>Please notice that this function behaves in the same way as the standard <computeroutput>strtoul()</computeroutput> and so it simply converts negative numbers to unsigned representation instead of rejecting them (e.g. -1 is returned as <computeroutput>ULONG_MAX</computeroutput>).</para>
<para>See <ref refid="classwx_string_1ad142803e239ff1ba9725b9abed29efc0" kindref="member">ToLong()</ref> for the more detailed description of the <emphasis>base</emphasis> parameter (and of the locale-specific behaviour of this function).</para>
<para><simplesect kind="see"><para><ref refid="classwx_string_1a01d30dfea86c9f0c92d36f9b3f5fd6fb" kindref="member">ToCULong()</ref>, <ref refid="classwx_string_1a0c719082ab8cde8323ea15f2ed9fb25d" kindref="member">ToDouble()</ref>, <ref refid="classwx_string_1ad142803e239ff1ba9725b9abed29efc0" kindref="member">ToLong()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1358" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a01d30dfea86c9f0c92d36f9b3f5fd6fb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxString::ToCULong</definition>
        <argsstring>(unsigned long *val, int base=10) const</argsstring>
        <name>ToCULong</name>
        <qualifiedname>wxString::ToCULong</qualifiedname>
        <param>
          <type>unsigned long *</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int</type>
          <declname>base</declname>
          <defval>10</defval>
        </param>
        <briefdescription>
<para>Variant of <ref refid="classwx_string_1abc52044a54499153dc493fb1d7ac9b53" kindref="member">ToULong()</ref> always working in &quot;C&quot; locale. </para>
        </briefdescription>
        <detaileddescription>
<para>Works like <ref refid="classwx_string_1abc52044a54499153dc493fb1d7ac9b53" kindref="member">ToULong()</ref> but unlike it this function expects the integer number to be formatted always with the rules dictated by the &quot;C&quot; locale, independently from the current application-wide locale (see <ref refid="classwx_locale" kindref="compound">wxLocale</ref>).</para>
<para><simplesect kind="see"><para><ref refid="classwx_string_1a0c719082ab8cde8323ea15f2ed9fb25d" kindref="member">ToDouble()</ref>, <ref refid="classwx_string_1ad142803e239ff1ba9725b9abed29efc0" kindref="member">ToLong()</ref>, <ref refid="classwx_string_1abc52044a54499153dc493fb1d7ac9b53" kindref="member">ToULong()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1369" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a200096add10bbadacb4143dc06f2b353" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxString::ToULongLong</definition>
        <argsstring>(wxULongLong_t *val, int base=10) const</argsstring>
        <name>ToULongLong</name>
        <qualifiedname>wxString::ToULongLong</qualifiedname>
        <param>
          <type>wxULongLong_t *</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int</type>
          <declname>base</declname>
          <defval>10</defval>
        </param>
        <briefdescription>
<para>This is exactly the same as <ref refid="classwx_string_1abc52044a54499153dc493fb1d7ac9b53" kindref="member">ToULong()</ref> but works with 64 bit integer numbers. </para>
        </briefdescription>
        <detaileddescription>
<para>Please see <ref refid="classwx_string_1af7344b65af7eaed045c4e3ba82275fdc" kindref="member">ToLongLong()</ref> for additional remarks. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1377" column="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Formatting and printing</header>
      <description><para><anchor id="classwx_string_1fmt"/></para>
<para>Both formatted versions (Printf/() and stream-like insertion operators exist (for basic types only).</para>
<para>See also the static <ref refid="classwx_string_1addd9ccfa3ae2b7ab2d66bcbf034d0be0" kindref="member">Format()</ref> and <ref refid="classwx_string_1aa7bc330dcb0248bb8e886d27c4983ef5" kindref="member">FormatV()</ref> functions. </para>
</description>
      <memberdef kind="function" id="classwx_string_1a9588b7f2684b9a6a924dc3746a2b2f8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxString::Printf</definition>
        <argsstring>(const wxString &amp;pszFormat,...)</argsstring>
        <name>Printf</name>
        <qualifiedname>wxString::Printf</qualifiedname>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>pszFormat</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Similar to the standard function <emphasis>sprintf()</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns the number of characters written, or an integer less than zero on error. Note that if <computeroutput>wxUSE_PRINTF_POS_PARAMS</computeroutput> is set to 1, then this function supports Unix98-style positional parameters:</para>
<para><programlisting><codeline><highlight class="normal"><ref refid="classwx_string" kindref="compound">wxString</ref><sp/>str;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">str.<ref refid="classwx_string_1a9588b7f2684b9a6a924dc3746a2b2f8d" kindref="member">Printf</ref>(<ref refid="chartype_8h_1a437ea6ba615b75dac8603e96ec864160" kindref="member">wxT</ref>(</highlight><highlight class="stringliteral">&quot;%d<sp/>%d<sp/>%d&quot;</highlight><highlight class="normal">),<sp/>1,<sp/>2,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>str<sp/>now<sp/>contains<sp/>&quot;1<sp/>2<sp/>3&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">str.<ref refid="classwx_string_1a9588b7f2684b9a6a924dc3746a2b2f8d" kindref="member">Printf</ref>(<ref refid="chartype_8h_1a437ea6ba615b75dac8603e96ec864160" kindref="member">wxT</ref>(</highlight><highlight class="stringliteral">&quot;%2$d<sp/>%3$d<sp/>%1$d&quot;</highlight><highlight class="normal">),<sp/>1,<sp/>2,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>str<sp/>now<sp/>contains<sp/>&quot;2<sp/>3<sp/>1&quot;</highlight></codeline>
</programlisting></para>
<para><simplesect kind="note"><para>This function will use a safe version of <emphasis>vsprintf()</emphasis> (usually called <emphasis>vsnprintf()</emphasis>) whenever available to always allocate the buffer of correct size. Unfortunately, this function is not available on all platforms and the dangerous <emphasis>vsprintf()</emphasis> will be used then which may lead to buffer overflows. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1413" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a5670779cbafb35c454a6d7664b6a6064" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxString::PrintfV</definition>
        <argsstring>(const wxString &amp;pszFormat, va_list argPtr)</argsstring>
        <name>PrintfV</name>
        <qualifiedname>wxString::PrintfV</qualifiedname>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>pszFormat</declname>
        </param>
        <param>
          <type>va_list</type>
          <declname>argPtr</declname>
        </param>
        <briefdescription>
<para>Similar to vprintf. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns the number of characters written, or an integer less than zero on error. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1420" column="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Memory management</header>
      <description><para><anchor id="classwx_string_1mem"/></para>
<para>The following are &quot;advanced&quot; functions and they will be needed rarely. <ref refid="classwx_string_1a87e614d9924a1b5524334aac3fc96d38" kindref="member">Alloc()</ref> and <ref refid="classwx_string_1ae81a1f0b72aa33325f922aa50579de59" kindref="member">Shrink()</ref> are only interesting for optimization purposes. <ref refid="classwx_string_buffer" kindref="compound">wxStringBuffer</ref> and <ref refid="classwx_string_buffer_length" kindref="compound">wxStringBufferLength</ref> classes may be very useful when working with some external API which requires the caller to provide a writable buffer.</para>
<para>See also the <ref refid="classwx_string_1a3fa50b251ca98e1e5d2aa8d73c688b57" kindref="member">reserve()</ref> and <ref refid="classwx_string_1ac384f95725fb10097a3146d3c126e958" kindref="member">resize()</ref> STL-like functions. </para>
</description>
      <memberdef kind="function" id="classwx_string_1a87e614d9924a1b5524334aac3fc96d38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxString::Alloc</definition>
        <argsstring>(size_t nLen)</argsstring>
        <name>Alloc</name>
        <qualifiedname>wxString::Alloc</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>nLen</declname>
        </param>
        <briefdescription>
<para>Preallocate enough space for <ref refid="classwx_string" kindref="compound">wxString</ref> to store <emphasis>nLen</emphasis> characters. </para>
        </briefdescription>
        <detaileddescription>
<para>Please note that this method does the same thing as the standard <ref refid="classwx_string_1a3fa50b251ca98e1e5d2aa8d73c688b57" kindref="member">reserve()</ref> one and shouldn&apos;t be used in new code.</para>
<para>This function may be used to increase speed when the string is constructed by repeated concatenation as in</para>
<para><programlisting><codeline><highlight class="comment">//<sp/>delete<sp/>all<sp/>vowels<sp/>from<sp/>the<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="classwx_string" kindref="compound">wxString</ref><sp/>DeleteAllVowels(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classwx_string" kindref="compound">wxString</ref>&amp;<sp/>original)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classwx_string" kindref="compound">wxString</ref><sp/>result;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len<sp/>=<sp/>original.<ref refid="classwx_string_1ae4d27fb54ba938b6dcf76bfcf722eccd" kindref="member">length</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>result.<ref refid="classwx_string_1a87e614d9924a1b5524334aac3fc96d38" kindref="member">Alloc</ref>(len);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;<sp/>n<sp/>&lt;<sp/>len;<sp/>n++<sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>strchr(</highlight><highlight class="stringliteral">&quot;aeuio&quot;</highlight><highlight class="normal">,<sp/>tolower(original[n]))<sp/>==<sp/>NULL<sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>original[n];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>because it will avoid the need to reallocate string memory many times (in case of long strings). Note that it does not set the maximal length of a string <ndash/> it will still expand if more than <emphasis>nLen</emphasis> characters are stored in it. Also, it does not truncate the existing string (use <ref refid="classwx_string_1a78478a64b23a99d884b2c64ee1d487fd" kindref="member">Truncate()</ref> for this) even if its current length is greater than <emphasis>nLen</emphasis>.</para>
<para><simplesect kind="return"><para>true if memory was successfully allocated, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1474" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1ae81a1f0b72aa33325f922aa50579de59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxString::Shrink</definition>
        <argsstring>()</argsstring>
        <name>Shrink</name>
        <qualifiedname>wxString::Shrink</qualifiedname>
        <briefdescription>
<para>Minimizes the string&apos;s memory. </para>
        </briefdescription>
        <detaileddescription>
<para>This can be useful after a call to <ref refid="classwx_string_1a87e614d9924a1b5524334aac3fc96d38" kindref="member">Alloc()</ref> if too much memory were preallocated.</para>
<para><simplesect kind="return"><para>Always returns true </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1484" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1ad06ca05b668ac21a2c8df91813ede34d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>wxString wxString::Clone</definition>
        <argsstring>() const</argsstring>
        <name>Clone</name>
        <qualifiedname>wxString::Clone</qualifiedname>
        <briefdescription>
<para>Returns a deep copy of the string. </para>
        </briefdescription>
        <detaileddescription>
<para>That is, the returned string is guaranteed to not share data with this string when using reference-counted <ref refid="classwx_string" kindref="compound">wxString</ref> implementation.</para>
<para>This method is primarily useful for passing strings between threads (because <ref refid="classwx_string" kindref="compound">wxString</ref> is not thread-safe). Unlike creating a copy using <computeroutput><ref refid="classwx_string" kindref="compound">wxString(c_str())</ref></computeroutput>, <ref refid="classwx_string_1ad06ca05b668ac21a2c8df91813ede34d" kindref="member">Clone()</ref> handles embedded NULs correctly.</para>
<para><simplesect kind="since"><para>2.9.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1498" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a39f5e308eb0192cac2e338bedb377ee0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxString::Clear</definition>
        <argsstring>()</argsstring>
        <name>Clear</name>
        <qualifiedname>wxString::Clear</qualifiedname>
        <briefdescription>
<para>Empties the string and frees memory occupied by it. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classwx_string_1a07b0dcc83872b23833a7335b2b931c42" kindref="member">Empty()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1505" column="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Miscellaneous</header>
      <description><para><anchor id="classwx_string_1misc"/></para>
<para>Miscellaneous other string functions. </para>
</description>
      <memberdef kind="function" id="classwx_string_1a2867f9d92bb662f705c4e515552e8018" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxString::Contains</definition>
        <argsstring>(const wxString &amp;str) const</argsstring>
        <name>Contains</name>
        <qualifiedname>wxString::Contains</qualifiedname>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Returns true if target appears anywhere in <ref refid="classwx_string" kindref="compound">wxString</ref>; else false. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a wxWidgets 1.xx compatibility function; you should not use it in new code. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1523" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a07b0dcc83872b23833a7335b2b931c42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxString::Empty</definition>
        <argsstring>()</argsstring>
        <name>Empty</name>
        <qualifiedname>wxString::Empty</qualifiedname>
        <briefdescription>
<para>Makes the string empty, but doesn&apos;t free memory occupied by the string. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classwx_string_1a39f5e308eb0192cac2e338bedb377ee0" kindref="member">Clear()</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1530" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1aa6fa701ce212cf7100bf3898df0ab494" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxString::Freq</definition>
        <argsstring>(wxUniChar ch) const</argsstring>
        <name>Freq</name>
        <qualifiedname>wxString::Freq</qualifiedname>
        <param>
          <type><ref refid="classwx_uni_char" kindref="compound">wxUniChar</ref></type>
          <declname>ch</declname>
        </param>
        <briefdescription>
<para>Returns the number of occurrences of <emphasis>ch</emphasis> in the string. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a wxWidgets 1.xx compatibility function; you should not use it in new code. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1537" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a7a9ee1fe0ab4d308bb8b106becc733b2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxString::IsAscii</definition>
        <argsstring>() const</argsstring>
        <name>IsAscii</name>
        <qualifiedname>wxString::IsAscii</qualifiedname>
        <briefdescription>
<para>Returns true if the string contains only ASCII characters. </para>
        </briefdescription>
        <detaileddescription>
<para>See <ref refid="classwx_uni_char_1aef4b078bfc9673067528ebc21fb00133" kindref="member">wxUniChar::IsAscii</ref> for more details.</para>
<para>This is a wxWidgets 1.xx compatibility function; you should not use it in new code. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1546" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1af0fbeac2928b29fcba1dcd35532dd8e0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxString::IsNumber</definition>
        <argsstring>() const</argsstring>
        <name>IsNumber</name>
        <qualifiedname>wxString::IsNumber</qualifiedname>
        <briefdescription>
<para>Returns true if the string is an integer (with possible sign). </para>
        </briefdescription>
        <detaileddescription>
<para>This is a wxWidgets 1.xx compatibility function; you should not use it in new code. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1553" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1ac8cf602191fc6c644841b5a2c37b2e2f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxString::IsWord</definition>
        <argsstring>() const</argsstring>
        <name>IsWord</name>
        <qualifiedname>wxString::IsWord</qualifiedname>
        <briefdescription>
<para>Returns true if the string is a word. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a wxWidgets 1.xx compatibility function; you should not use it in new code. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1560" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1ae0828056b4da71772d9bf45a34e0ed27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
        <definition>wxString &amp; wxString::Pad</definition>
        <argsstring>(size_t count, wxUniChar chPad=&apos; &apos;, bool fromRight=true)</argsstring>
        <name>Pad</name>
        <qualifiedname>wxString::Pad</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type><ref refid="classwx_uni_char" kindref="compound">wxUniChar</ref></type>
          <declname>chPad</declname>
          <defval>&apos; &apos;</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>fromRight</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Adds <emphasis>count</emphasis> copies of <emphasis>chPad</emphasis> to the beginning, or to the end of the string (the default). </para>
        </briefdescription>
        <detaileddescription>
<para>Removes spaces from the left or from the right (default). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1568" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1aa8dfdf0f97627d29c1408d4405705b70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
        <definition>wxString &amp; wxString::Remove</definition>
        <argsstring>(size_t pos)</argsstring>
        <name>Remove</name>
        <qualifiedname>wxString::Remove</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
<para>Removes all characters from the string starting at <emphasis>pos</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>Use <ref refid="classwx_string_1a78478a64b23a99d884b2c64ee1d487fd" kindref="member">Truncate()</ref> as a more readable alternative.</para>
<para>This is a wxWidgets 1.xx compatibility function; you should not use it in new code. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1576" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a6b9d17f6c058e86b9b0e9977079698a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
        <definition>wxString &amp; wxString::Remove</definition>
        <argsstring>(size_t pos, size_t len)</argsstring>
        <name>Remove</name>
        <qualifiedname>wxString::Remove</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Removes <emphasis>len</emphasis> characters from the string, starting at <emphasis>pos</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a wxWidgets 1.xx compatibility function; you should not use it in new code. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1583" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a705cbd177edabccfbd30554992d853d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
        <definition>wxString &amp; wxString::RemoveLast</definition>
        <argsstring>(size_t n=1)</argsstring>
        <name>RemoveLast</name>
        <qualifiedname>wxString::RemoveLast</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>n</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Removes the last character. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1588" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a6c03270ec594535e46d0c5c8f79617ce" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>wxString wxString::Strip</definition>
        <argsstring>(stripType s=trailing) const</argsstring>
        <name>Strip</name>
        <qualifiedname>wxString::Strip</qualifiedname>
        <param>
          <type>stripType</type>
          <declname>s</declname>
          <defval>trailing</defval>
        </param>
        <briefdescription>
<para>Strip characters at the front and/or end. </para>
        </briefdescription>
        <detaileddescription>
<para>This is the same as <ref refid="classwx_string_1aa25efdadf804c0818175dbe6f5671eac" kindref="member">Trim()</ref> except that it doesn&apos;t change this string.</para>
<para>This is a wxWidgets 1.xx compatibility function; you should not use it in new code. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1597" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1aa25efdadf804c0818175dbe6f5671eac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
        <definition>wxString &amp; wxString::Trim</definition>
        <argsstring>(bool fromRight=true)</argsstring>
        <name>Trim</name>
        <qualifiedname>wxString::Trim</qualifiedname>
        <param>
          <type>bool</type>
          <declname>fromRight</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Removes white-space (space, tabs, form feed, newline and carriage return) from the left or from the right end of the string (right is default). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1603" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a78478a64b23a99d884b2c64ee1d487fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
        <definition>wxString &amp; wxString::Truncate</definition>
        <argsstring>(size_t len)</argsstring>
        <name>Truncate</name>
        <qualifiedname>wxString::Truncate</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Truncate the string to the given length. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1608" column="14"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Iterator interface</header>
      <description><para><anchor id="classwx_string_1iter"/></para>
<para>These methods return iterators to the beginning or end of the string.</para>
<para>Please see any STL reference (e.g. <ulink url="http://www.cppreference.com/wiki/string/start">http://www.cppreference.com/wiki/string/start</ulink>) for their documentation. </para>
</description>
      <memberdef kind="function" id="classwx_string_1a7711f8aa5e08cbd73d31a39b0a90bca6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const_iterator</type>
        <definition>const_iterator wxString::begin</definition>
        <argsstring>() const</argsstring>
        <name>begin</name>
        <qualifiedname>wxString::begin</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1625" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1ab2b671a75b59a8c6c1af4d6d647f9902" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>iterator</type>
        <definition>iterator wxString::begin</definition>
        <argsstring>()</argsstring>
        <name>begin</name>
        <qualifiedname>wxString::begin</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1626" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a9d6593e1e54d23bf5253fe26b6d8706a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const_iterator</type>
        <definition>const_iterator wxString::cbegin</definition>
        <argsstring>() const</argsstring>
        <name>cbegin</name>
        <qualifiedname>wxString::cbegin</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1627" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1ab4b284efb46b5f5fe9235a3144e12f39" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const_iterator</type>
        <definition>const_iterator wxString::end</definition>
        <argsstring>() const</argsstring>
        <name>end</name>
        <qualifiedname>wxString::end</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1628" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a14fb759ca1074e9fbab66f9579bd7b25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>iterator</type>
        <definition>iterator wxString::end</definition>
        <argsstring>()</argsstring>
        <name>end</name>
        <qualifiedname>wxString::end</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1629" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1aaa0e9e587f807e719336748a7c43dc36" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const_iterator</type>
        <definition>const_iterator wxString::cend</definition>
        <argsstring>() const</argsstring>
        <name>cend</name>
        <qualifiedname>wxString::cend</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1630" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a545b7ede1d4f1b1fa3166685d67a1594" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const_reverse_iterator</type>
        <definition>const_reverse_iterator wxString::rbegin</definition>
        <argsstring>() const</argsstring>
        <name>rbegin</name>
        <qualifiedname>wxString::rbegin</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1632" column="28"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1ae63061f3a0c0f91224e91daf988af434" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>reverse_iterator</type>
        <definition>reverse_iterator wxString::rbegin</definition>
        <argsstring>()</argsstring>
        <name>rbegin</name>
        <qualifiedname>wxString::rbegin</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1633" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a6afd088cfb9ff465d723520bb27aa516" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const_reverse_iterator</type>
        <definition>const_reverse_iterator wxString::crbegin</definition>
        <argsstring>() const</argsstring>
        <name>crbegin</name>
        <qualifiedname>wxString::crbegin</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1634" column="28"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1adf38133c1e7b6d600f4747f52d2828aa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const_reverse_iterator</type>
        <definition>const_reverse_iterator wxString::rend</definition>
        <argsstring>() const</argsstring>
        <name>rend</name>
        <qualifiedname>wxString::rend</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1635" column="28"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1a114b4b3a040be56dfda6b5983d822cd9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>reverse_iterator</type>
        <definition>reverse_iterator wxString::rend</definition>
        <argsstring>()</argsstring>
        <name>rend</name>
        <qualifiedname>wxString::rend</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1636" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_1aff0cc7f67cdf46881895285aa26c4d7f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const_reverse_iterator</type>
        <definition>const_reverse_iterator wxString::crend</definition>
        <argsstring>() const</argsstring>
        <name>crend</name>
        <qualifiedname>wxString::crend</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1637" column="28"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>String class for passing textual data to or receiving it from wxWidgets. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="note"><para>While the use of <ref refid="classwx_string" kindref="compound">wxString</ref> is unavoidable in wxWidgets programs, you are encouraged to use the standard string classes <computeroutput>std::string</computeroutput> or <computeroutput>std::wstring</computeroutput> in your applications and convert them to and from <ref refid="classwx_string" kindref="compound">wxString</ref> only when interacting with wxWidgets.</para>
</simplesect>
<ref refid="classwx_string" kindref="compound">wxString</ref> is a class representing a Unicode character string but with methods taking or returning both <computeroutput>wchar_t</computeroutput> wide characters and <computeroutput>wchar_t*</computeroutput> wide strings and traditional <computeroutput>char</computeroutput> characters and <computeroutput>char*</computeroutput> strings. The dual nature of <ref refid="classwx_string" kindref="compound">wxString</ref> API makes it simple to use in all cases and, importantly, allows the code written for either ANSI or Unicode builds of the previous wxWidgets versions to compile and work correctly with the single unified Unicode build of wxWidgets 3.0. It is also mostly transparent when using <ref refid="classwx_string" kindref="compound">wxString</ref> with the few exceptions described below.</para>
<sect1 id="classwx_string_1string_api">
<title>API overview</title>
<para><ref refid="classwx_string" kindref="compound">wxString</ref> tries to be similar to both <computeroutput>std::string</computeroutput> and <computeroutput>std::wstring</computeroutput> and can mostly be used as either class. It provides practically all of the methods of these classes, which behave exactly the same as in the standard C++, and so are not documented here (please see any standard library documentation, for example <ulink url="http://en.cppreference.com/w/cpp/string">http://en.cppreference.com/w/cpp/string</ulink> for more details).</para>
<para>In addition to these standard methods, <ref refid="classwx_string" kindref="compound">wxString</ref> adds functions dealing with the conversions between different string encodings, described below, as well as many extra helpers such as functions for formatted output (<ref refid="classwx_string_1a9588b7f2684b9a6a924dc3746a2b2f8d" kindref="member">Printf()</ref>, <ref refid="classwx_string_1addd9ccfa3ae2b7ab2d66bcbf034d0be0" kindref="member">Format()</ref>, ...), case conversion (<ref refid="classwx_string_1ad2c92aab8b3fc526ad46860f27586f92" kindref="member">MakeUpper()</ref>, <ref refid="classwx_string_1a5e054318f0333f62f2e5e3857ef3f359" kindref="member">Capitalize()</ref>, ...) and various others (<ref refid="classwx_string_1aa25efdadf804c0818175dbe6f5671eac" kindref="member">Trim()</ref>, <ref refid="classwx_string_1acc80f973953489a15a601fccead0936f" kindref="member">StartsWith()</ref>, <ref refid="classwx_string_1a5db4a7917ce5462dbb199342421620d5" kindref="member">Matches()</ref>, ...). All of the non-standard methods follow wxWidgets &quot;CamelCase&quot; naming convention and are documented here.</para>
<para>Notice that some <ref refid="classwx_string" kindref="compound">wxString</ref> methods exist in several versions for compatibility reasons. For example all of <ref refid="classwx_string_1ae4d27fb54ba938b6dcf76bfcf722eccd" kindref="member">length()</ref>, <ref refid="classwx_string_1a90e79470e43e40704c783b60d3d7795a" kindref="member">Length()</ref> and <ref refid="classwx_string_1a6ba7cb0d5a1bbaae3b6090eef657f153" kindref="member">Len()</ref> are provided. In such cases it is recommended to use the standard string-like method, i.e. <ref refid="classwx_string_1ae4d27fb54ba938b6dcf76bfcf722eccd" kindref="member">length()</ref> in this case.</para>
</sect1>
<sect1 id="classwx_string_1string_conv">
<title>Converting to and from wxString</title>
<para><ref refid="classwx_string" kindref="compound">wxString</ref> can be created from:<itemizedlist>
<listitem><para>ASCII string guaranteed to contain only 7 bit characters using <ref refid="classwx_string_1a717327d279426293270c16b980d6d6aa" kindref="member">wxString::FromAscii()</ref>.</para>
</listitem><listitem><para>Narrow <computeroutput>char*</computeroutput> string in the current locale encoding using implicit <ref refid="classwx_string_1a0ec94790ea7b08344537f5cf893476f8" kindref="member">wxString::wxString(const char*)</ref> constructor.</para>
</listitem><listitem><para>Narrow <computeroutput>char*</computeroutput> string in UTF-8 encoding using <ref refid="classwx_string_1a2ddc1b7c8e1eb9adbf5874dead5b180b" kindref="member">wxString::FromUTF8()</ref>.</para>
</listitem><listitem><para>Narrow <computeroutput>char*</computeroutput> string in the given encoding using <ref refid="classwx_string_1a96d8fedae47a282c685c6af0dfa3728c" kindref="member">wxString::wxString(const char*, const wxMBConv&amp;)</ref> constructor passing a <ref refid="classwx_c_s_conv" kindref="compound">wxCSConv</ref> corresponding to the encoding as the second argument.</para>
</listitem><listitem><para>Standard <computeroutput>std::string</computeroutput> using implicit <ref refid="classwx_string_1adbc5f0b4efc63b775da5e9571841928a" kindref="member">wxString::wxString(const
    std::string&amp;)</ref> constructor. Notice that this constructor supposes that the string contains data in the current locale encoding, use <ref refid="classwx_string_1a2ddc1b7c8e1eb9adbf5874dead5b180b" kindref="member">FromUTF8()</ref> or the constructor taking <ref refid="classwx_m_b_conv" kindref="compound">wxMBConv</ref> if this is not the case.</para>
</listitem><listitem><para>Wide <computeroutput>wchar_t*</computeroutput> string using implicit <ref refid="classwx_string_1ae1fcf718262b69078417a15bde646668" kindref="member">wxString::wxString(const
    wchar_t*)</ref> constructor.</para>
</listitem><listitem><para>Standard <computeroutput>std::wstring</computeroutput> using implicit <ref refid="classwx_string_1adf6220517c6b2e2305c9af3c5e932afb" kindref="member">wxString::wxString(const
    std::wstring&amp;)</ref> constructor.</para>
</listitem></itemizedlist>
</para>
<para>Notice that many of the constructors are implicit, meaning that you don&apos;t even need to write them at all to pass the existing string to some wxWidgets function taking a <ref refid="classwx_string" kindref="compound">wxString</ref>.</para>
<para>Similarly, <ref refid="classwx_string" kindref="compound">wxString</ref> can be converted to:<itemizedlist>
<listitem><para>ASCII string using <ref refid="classwx_string_1a99d4b351863373589f58554ea0f65067" kindref="member">wxString::ToAscii()</ref>. This is a potentially destructive operation as all non-ASCII string characters are replaced with a placeholder character.</para>
</listitem><listitem><para>String in the current locale encoding implicitly or using <ref refid="classwx_string_1a5db49c775c09e77fe0acde2a928bbf8f" kindref="member">c_str()</ref> or <ref refid="classwx_string_1a4e0a115d6b98abacc9a5365f3e988135" kindref="member">mb_str()</ref> methods. This is a potentially destructive operation as an <emphasis>empty</emphasis> string is returned if the conversion fails.</para>
</listitem><listitem><para>String in UTF-8 encoding using <ref refid="classwx_string_1a1e3f959e6841c6958bc391246ba7f747" kindref="member">wxString::utf8_str()</ref>.</para>
</listitem><listitem><para>String in any given encoding using <ref refid="classwx_string_1a4e0a115d6b98abacc9a5365f3e988135" kindref="member">mb_str()</ref> with the appropriate <ref refid="classwx_m_b_conv" kindref="compound">wxMBConv</ref> object. This is also a potentially destructive operation.</para>
</listitem><listitem><para>Standard <computeroutput>std::string</computeroutput> using <ref refid="classwx_string_1a0cdcd5cf94be8686ed6b11248e99fbb2" kindref="member">wxString::ToStdString()</ref>. The encoding of the returned string is specified with a <ref refid="classwx_m_b_conv" kindref="compound">wxMBConv</ref> object, so this conversion is potentially destructive as well. To ensure that there is no data loss, use <computeroutput>wxConvUTF8</computeroutput> conversion or <ref refid="classwx_string_1a5689d0c457a386f130b8a8f6529db61d" kindref="member">wxString::utf8_string()</ref>.</para>
</listitem><listitem><para>Wide C string using <ref refid="classwx_string_1aa17b9e38640fd3f22b5235173e910c9b" kindref="member">wxString::wc_str()</ref>.</para>
</listitem><listitem><para>Standard <computeroutput>std::wstring</computeroutput> using <ref refid="classwx_string_1abb20ba3a70eee6d27ae98926b9fd8c50" kindref="member">wxString::ToStdWstring()</ref>.</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="note"><para>If you built wxWidgets with <computeroutput>wxUSE_STL</computeroutput> set to 1, the implicit conversions to both narrow and wide C strings are disabled and replaced with implicit conversions to <computeroutput>std::string</computeroutput> and <computeroutput>std::wstring</computeroutput>.</para>
</simplesect>
Please notice that the conversions marked as &quot;potentially destructive&quot; above can result in loss of data if their result is not checked, so you need to verify that converting the contents of a non-empty Unicode string to a non-UTF-8 multibyte encoding results in non-empty string. The simplest and best way to ensure that the conversion never fails is to always use UTF-8.</para>
</sect1>
<sect1 id="classwx_string_1string_gotchas">
<title>Traps for the unwary</title>
<para>As mentioned above, <ref refid="classwx_string" kindref="compound">wxString</ref> tries to be compatible with both narrow and wide standard string classes and mostly does it transparently, but there are some exceptions.</para>
<sect2 id="classwx_string_1string_gotchas_element">
<title>String element access</title>
<para>Some problems are caused by <ref refid="classwx_string_1a8924cd659c378a9b29d0f553bd1d5ff1" kindref="member">wxString::operator[]()</ref> which returns an object of a special proxy class allowing to assign either a simple <computeroutput>char</computeroutput> or a <computeroutput>wchar_t</computeroutput> to the given index. Because of this, the return type of this operator is neither <computeroutput>char</computeroutput> nor <computeroutput>wchar_t</computeroutput> nor a reference to one of these types but <ref refid="classwx_uni_char_ref" kindref="compound">wxUniCharRef</ref> which is not a primitive type and hence can&apos;t be used in the <computeroutput>switch</computeroutput> statement. So the following code does <emphasis>not</emphasis> compile <programlisting><codeline><highlight class="normal"><ref refid="classwx_string" kindref="compound">wxString</ref><sp/>s(...);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(<sp/>s[n]<sp/>)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> and you need to use <programlisting><codeline><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(<sp/>s[n].GetValue()<sp/>)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> instead. Alternatively, you can use an explicit cast: <programlisting><codeline><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(s[n])<sp/>)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> but notice that this will result in an assert failure if the character at the given position is not representable as a single <computeroutput>char</computeroutput> in the current encoding, so you may want to cast to <computeroutput>int</computeroutput> instead if non-ASCII values can be used.</para>
<para>Another consequence of this unusual return type arises when it is used with template deduction or C++11 <computeroutput>auto</computeroutput> keyword. Unlike with the normal references which are deduced to be of the referenced type, the deduced type for <ref refid="classwx_uni_char_ref" kindref="compound">wxUniCharRef</ref> is <ref refid="classwx_uni_char_ref" kindref="compound">wxUniCharRef</ref> itself. This results in potentially unexpected behaviour, for example: <programlisting><codeline><highlight class="normal"><ref refid="classwx_string" kindref="compound">wxString</ref><sp/>s(</highlight><highlight class="stringliteral">&quot;abc&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>s[0];</highlight></codeline>
<codeline><highlight class="normal">c<sp/>=<sp/></highlight><highlight class="charliteral">&apos;x&apos;</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Modifies<sp/>the<sp/>string!</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="debug_8h_1a204cc264ee560b67e6c6467ba8ffee5f" kindref="member">wxASSERT</ref>(<sp/>s<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;xbc&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
</programlisting> Due to this, either explicitly specify the variable type: <programlisting><codeline><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>s[0];</highlight></codeline>
<codeline><highlight class="normal">c<sp/>=<sp/></highlight><highlight class="charliteral">&apos;x&apos;</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Doesn&apos;t<sp/>modify<sp/>the<sp/>string<sp/>any<sp/>more.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="debug_8h_1a204cc264ee560b67e6c6467ba8ffee5f" kindref="member">wxASSERT</ref>(<sp/>s<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;abc&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
</programlisting> or explicitly convert the return value: <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>s[0].GetValue();</highlight></codeline>
<codeline><highlight class="normal">c<sp/>=<sp/></highlight><highlight class="charliteral">&apos;x&apos;</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Doesn&apos;t<sp/>modify<sp/>the<sp/>string<sp/>neither.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="debug_8h_1a204cc264ee560b67e6c6467ba8ffee5f" kindref="member">wxASSERT</ref>(<sp/>s<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;abc&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="classwx_string_1string_gotchas_conv">
<title>Conversion to C string</title>
<para>A different class of problems happens due to the dual nature of the return value of <ref refid="classwx_string_1a5db49c775c09e77fe0acde2a928bbf8f" kindref="member">wxString::c_str()</ref> method, which is also used for implicit conversions. The result of calls to this method is convertible to either narrow <computeroutput>char*</computeroutput> string or wide <computeroutput>wchar_t*</computeroutput> string and so, again, has neither the former nor the latter type. Usually, the correct type will be chosen depending on how you use the result but sometimes the compiler can&apos;t choose it because of an ambiguity, e.g.: <programlisting><codeline><highlight class="comment">//<sp/>Some<sp/>non-wxWidgets<sp/>functions<sp/>existing<sp/>for<sp/>both<sp/>narrow<sp/>and<sp/>wide</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>strings:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>dump_text(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>text);<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Version<sp/>(1)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>dump_text(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>text);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Version<sp/>(2)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="classwx_string" kindref="compound">wxString</ref><sp/>s(...);</highlight></codeline>
<codeline><highlight class="normal">dump_text(s);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ERROR:<sp/>ambiguity.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">dump_text(s.c_str());<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ERROR:<sp/>still<sp/>ambiguous.</highlight></codeline>
</programlisting> In this case you need to explicitly convert to the type that you need to use or use a different, non-ambiguous, conversion function (which is usually the best choice): <programlisting><codeline><highlight class="normal">dump_text(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(s));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>OK,<sp/>calls<sp/>(1)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">dump_text(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(s.c_str()));<sp/></highlight><highlight class="comment">//<sp/>OK,<sp/>calls<sp/>(2)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">dump_text(s.mb_str());<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>OK,<sp/>calls<sp/>(1)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">dump_text(s.wc_str());<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>OK,<sp/>calls<sp/>(2)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">dump_text(s.wx_str());<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>OK,<sp/>calls<sp/>???</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="classwx_string_1string_vararg">
<title>Using wxString with vararg functions</title>
<para>A special subclass of the problems arising due to the polymorphic nature of <ref refid="classwx_string_1a5db49c775c09e77fe0acde2a928bbf8f" kindref="member">wxString::c_str()</ref> result type happens when using functions taking an arbitrary number of arguments, such as the standard <computeroutput>printf()</computeroutput>. Due to the rules of the C++ language, the types for the &quot;variable&quot; arguments of such functions are not specified and hence the compiler cannot convert <ref refid="classwx_string" kindref="compound">wxString</ref> objects, or the objects returned by <ref refid="classwx_string_1a5db49c775c09e77fe0acde2a928bbf8f" kindref="member">wxString::c_str()</ref>, to these unknown types automatically. Hence neither <ref refid="classwx_string" kindref="compound">wxString</ref> objects nor the results of most of the conversion functions can be passed as vararg arguments: <programlisting><codeline><highlight class="comment">//<sp/>ALL<sp/>EXAMPLES<sp/>HERE<sp/>DO<sp/>NOT<sp/>WORK,<sp/>DO<sp/>NOT<sp/>USE<sp/>THEM!</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">printf(</highlight><highlight class="stringliteral">&quot;Don&apos;t<sp/>do<sp/>this:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>s);</highlight></codeline>
<codeline><highlight class="normal">printf(</highlight><highlight class="stringliteral">&quot;Don&apos;t<sp/>do<sp/>that:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>s.c_str());</highlight></codeline>
<codeline><highlight class="normal">printf(</highlight><highlight class="stringliteral">&quot;Nor<sp/>even<sp/>this:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>s.mb_str());</highlight></codeline>
<codeline><highlight class="normal">wprintf(</highlight><highlight class="stringliteral">&quot;And<sp/>even<sp/>not<sp/>always<sp/>this:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>s.wc_str());</highlight></codeline>
</programlisting> Instead you need to either explicitly cast to the needed type: <programlisting><codeline><highlight class="comment">//<sp/>These<sp/>examples<sp/>work<sp/>but<sp/>are<sp/>not<sp/>the<sp/>best<sp/>solution,<sp/>see<sp/>below.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">printf(</highlight><highlight class="stringliteral">&quot;You<sp/>can<sp/>do<sp/>this:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(s));</highlight></codeline>
<codeline><highlight class="normal">printf(</highlight><highlight class="stringliteral">&quot;Or<sp/>this:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(s.c_str()));</highlight></codeline>
<codeline><highlight class="normal">printf(</highlight><highlight class="stringliteral">&quot;And<sp/>this:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(s.mb_str()));</highlight></codeline>
<codeline><highlight class="normal">wprintf(</highlight><highlight class="stringliteral">&quot;Or<sp/>this:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(s.wc_str()));</highlight></codeline>
</programlisting> But a better solution is to use wxWidgets-provided functions, if possible, as is the case for <computeroutput>printf</computeroutput> family of functions: <programlisting><codeline><highlight class="comment">//<sp/>This<sp/>is<sp/>the<sp/>recommended<sp/>way.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">wxPrintf(</highlight><highlight class="stringliteral">&quot;You<sp/>can<sp/>do<sp/>just<sp/>this:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>s);</highlight></codeline>
<codeline><highlight class="normal">wxPrintf(</highlight><highlight class="stringliteral">&quot;And<sp/>this<sp/>(but<sp/>it<sp/>is<sp/>redundant):<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>s.c_str());</highlight></codeline>
<codeline><highlight class="normal">wxPrintf(</highlight><highlight class="stringliteral">&quot;And<sp/>this<sp/>(not<sp/>using<sp/>Unicode):<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>s.mb_str());</highlight></codeline>
<codeline><highlight class="normal">wxPrintf(</highlight><highlight class="stringliteral">&quot;And<sp/>this<sp/>(always<sp/>Unicode):<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>s.wc_str());</highlight></codeline>
</programlisting> Notice that wxPrintf() replaces both <computeroutput>printf()</computeroutput> and <computeroutput>wprintf()</computeroutput> and accepts <ref refid="classwx_string" kindref="compound">wxString</ref> objects, results of <ref refid="classwx_string_1a5db49c775c09e77fe0acde2a928bbf8f" kindref="member">c_str()</ref> calls but also <computeroutput>char*</computeroutput> and <computeroutput>wchar_t*</computeroutput> strings directly.</para>
<para>wxWidgets provides wx-prefixed equivalents to all the standard vararg functions and a few more, notably <ref refid="classwx_string_1addd9ccfa3ae2b7ab2d66bcbf034d0be0" kindref="member">wxString::Format()</ref>, <ref refid="interface_2wx_2log_8h_1a249358701f3c2d410088ddf7a61d8564" kindref="member">wxLogMessage()</ref>, <ref refid="interface_2wx_2log_8h_1a0dd3c633f990f794e76065c9a7af4c87" kindref="member">wxLogError()</ref> and other log functions. But if you can&apos;t use one of those functions and need to pass <ref refid="classwx_string" kindref="compound">wxString</ref> objects to non-wx vararg functions, you need to use the explicit casts as explained above.</para>
</sect2>
</sect1>
<sect1 id="classwx_string_1string_performance">
<title>Performance characteristics</title>
<para><ref refid="classwx_string" kindref="compound">wxString</ref> uses <computeroutput>std::basic_string</computeroutput> internally to store its content (unless this is not supported by the compiler or disabled specifically when building wxWidgets) and it therefore inherits many features from <computeroutput>std::basic_string</computeroutput>. In particular, most modern implementations of <computeroutput>std::basic_string</computeroutput> are thread-safe and don&apos;t use reference counting (making copying large strings potentially expensive) and so <ref refid="classwx_string" kindref="compound">wxString</ref> has the same characteristics.</para>
<para>By default, <ref refid="classwx_string" kindref="compound">wxString</ref> uses <computeroutput>std::basic_string</computeroutput> specialized for the platform-dependent <computeroutput>wchar_t</computeroutput> type, meaning that it is not memory-efficient for ASCII strings, especially under Unix platforms where every ASCII character, normally fitting in a byte, is represented by a 4 byte <computeroutput>wchar_t</computeroutput>.</para>
<para>It is possible to build wxWidgets with <computeroutput>wxUSE_UNICODE_UTF8</computeroutput> set to 1 in which case an UTF-8-encoded string representation is stored in <computeroutput>std::basic_string</computeroutput> specialized for <computeroutput>char</computeroutput>, i.e. the usual <computeroutput>std::string</computeroutput>. In this case the memory efficiency problem mentioned above doesn&apos;t arise but run-time performance of many <ref refid="classwx_string" kindref="compound">wxString</ref> methods changes dramatically, in particular accessing the N-th character of the string becomes an operation taking O(N) time instead of O(1), i.e. constant, time by default. Thus, if you do use this so called UTF-8 build, you should avoid using indices to access the strings whenever possible and use the iterators instead. As an example, traversing the string using iterators is an O(N), where N is the string length, operation in both the normal (&quot;wchar_t&quot;) and UTF-8 builds but doing it using indices becomes O(N^2) in UTF-8 case meaning that simply checking every character of a reasonably long (e.g. a couple of millions elements) string can take an unreasonably long time.</para>
<para>However, if you do use iterators, UTF-8 build can be a better choice than the default build, especially for the memory-constrained embedded systems. Notice also that GTK+ and DirectFB use UTF-8 internally, so using this build not only saves memory for ASCII strings but also avoids conversions between wxWidgets and the underlying toolkit.</para>
</sect1>
<sect1 id="classwx_string_1string_index">
<title>Index of the member groups</title>
<para>Links for quick access to the various categories of <ref refid="classwx_string" kindref="compound">wxString</ref> functions:<itemizedlist>
<listitem><para><ulink url="#ctor">Constructors and assignment operators</ulink></para>
</listitem><listitem><para><ulink url="#length">Length functions</ulink></para>
</listitem><listitem><para><ulink url="#ch_access">Character access functions</ulink></para>
</listitem><listitem><para><ulink url="#conv">Conversions functions</ulink></para>
</listitem><listitem><para><ulink url="#concat">Concatenation functions</ulink></para>
</listitem><listitem><para><ulink url="#cmp">Comparison functions</ulink></para>
</listitem><listitem><para><ulink url="#substring">Substring extraction functions</ulink></para>
</listitem><listitem><para><ulink url="#caseconv">Case conversion functions</ulink></para>
</listitem><listitem><para><ulink url="#search">Searching and replacing functions</ulink></para>
</listitem><listitem><para><ulink url="#numconv">Conversion to numbers functions</ulink></para>
</listitem><listitem><para><ulink url="#fmt">Formatting and printing functions</ulink></para>
</listitem><listitem><para><ulink url="#mem">Memory management functions</ulink></para>
</listitem><listitem><para><ulink url="#misc">Miscellaneous functions</ulink></para>
</listitem><listitem><para><ulink url="#iter">Iterator interface functions</ulink></para>
</listitem><listitem><para><ulink url="#stl">STL interface functions</ulink></para>
</listitem></itemizedlist>
</para>
<para><heading level="2"></heading>
</para>
<para>Library:<nonbreakablespace/><nonbreakablespace/><ref refid="page_libs_1page_libs_wxbase" kindref="member">wxBase</ref></para>
<para>Category:<nonbreakablespace/><nonbreakablespace/><ref refid="group__group__class__data" kindref="compound">Data Structures</ref></para>
<para>Predefined objects/pointers: <ref refid="interface_2wx_2string_8h_1a9a321d587166a30017b608dd2d234033" kindref="member">wxEmptyString</ref></para>
<para><simplesect kind="see"><para><ref refid="overview_string" kindref="compound">wxString Overview</ref>, <ref refid="overview_unicode" kindref="compound">Unicode Support in wxWidgets</ref>, <ref refid="group__group__funcmacro__string" kindref="compound">String-related functions</ref>, <ref refid="classwx_u_string" kindref="compound">wxUString</ref>, <ref refid="classwx_char_buffer" kindref="compound">wxCharBuffer</ref>, <ref refid="classwx_uni_char" kindref="compound">wxUniChar</ref>, <ref refid="classwx_string_tokenizer" kindref="compound">wxStringTokenizer</ref>, <ref refid="classwx_string_buffer" kindref="compound">wxStringBuffer</ref>, <ref refid="classwx_string_buffer_length" kindref="compound">wxStringBufferLength</ref> </para>
</simplesect>
</para>
</sect1>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>wxSecretString</label>
        <link refid="classwx_secret_string"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>wxString</label>
        <link refid="classwx_string"/>
      </node>
    </inheritancegraph>
    <location file="interface/wx/string.h" line="314" column="1" bodyfile="interface/wx/string.h" bodystart="315" bodyend="1920"/>
    <listofallmembers>
      <member refid="classwx_string_1ae905d6ca938ab547dd3a640bd68eade3" prot="public" virt="non-virtual"><scope>wxString</scope><name>AfterFirst</name></member>
      <member refid="classwx_string_1a921e7ad822525c310f9378931609552d" prot="public" virt="non-virtual"><scope>wxString</scope><name>AfterLast</name></member>
      <member refid="classwx_string_1a87e614d9924a1b5524334aac3fc96d38" prot="public" virt="non-virtual"><scope>wxString</scope><name>Alloc</name></member>
      <member refid="classwx_string_1a8d9df5d704ea6561fe56b5950d15268c" prot="public" virt="non-virtual"><scope>wxString</scope><name>Append</name></member>
      <member refid="classwx_string_1a72b9c09550083147184ec0efa802755f" prot="public" virt="non-virtual"><scope>wxString</scope><name>Append</name></member>
      <member refid="classwx_string_1a05547aff5e8d363e8c5e1f9c82dab4f0" prot="public" virt="non-virtual"><scope>wxString</scope><name>Append</name></member>
      <member refid="classwx_string_1a2e2798f899af5fa1a1255153cc5766ee" prot="public" virt="non-virtual"><scope>wxString</scope><name>Append</name></member>
      <member refid="classwx_string_1a704da6760672a3813101a80a39de92b4" prot="public" virt="non-virtual"><scope>wxString</scope><name>Append</name></member>
      <member refid="classwx_string_1afbe89abb2d390f1dd629546f45f0cbeb" prot="public" virt="non-virtual"><scope>wxString</scope><name>Append</name></member>
      <member refid="classwx_string_1a7379692b7b4dc9e08a6b364d743b6117" prot="public" virt="non-virtual"><scope>wxString</scope><name>append</name></member>
      <member refid="classwx_string_1a4b5494e0badba806b857a618fe16b651" prot="public" virt="non-virtual"><scope>wxString</scope><name>append</name></member>
      <member refid="classwx_string_1a119c5c9ed8f350fd32ea23440034b71e" prot="public" virt="non-virtual"><scope>wxString</scope><name>append</name></member>
      <member refid="classwx_string_1ae69bd4059df5503b7bf092d72639aecf" prot="public" virt="non-virtual"><scope>wxString</scope><name>append</name></member>
      <member refid="classwx_string_1a1d3fac5eeb28db445b5389288ac0aa2b" prot="public" virt="non-virtual"><scope>wxString</scope><name>append</name></member>
      <member refid="classwx_string_1aaa034b9accafeaf80c031870ad0d90a0" prot="public" virt="non-virtual"><scope>wxString</scope><name>append</name></member>
      <member refid="classwx_string_1a62b7a905a639c7927e6b1095bbfbe618" prot="public" virt="non-virtual"><scope>wxString</scope><name>assign</name></member>
      <member refid="classwx_string_1a87bccf464b60bec99d08afe412f7bf0c" prot="public" virt="non-virtual"><scope>wxString</scope><name>assign</name></member>
      <member refid="classwx_string_1ae9d484378d0abaa67e875099aba0136e" prot="public" virt="non-virtual"><scope>wxString</scope><name>assign</name></member>
      <member refid="classwx_string_1a576090a1471ae8d209041f9d140c005b" prot="public" virt="non-virtual"><scope>wxString</scope><name>assign</name></member>
      <member refid="classwx_string_1a817636c3f2ce096d1dd580693864f626" prot="public" virt="non-virtual"><scope>wxString</scope><name>assign</name></member>
      <member refid="classwx_string_1afae03224f376016558575a93c95bd6fe" prot="public" virt="non-virtual"><scope>wxString</scope><name>assign</name></member>
      <member refid="classwx_string_1a26c2820f86f82c4a1b28dd27a8015deb" prot="public" virt="non-virtual"><scope>wxString</scope><name>at</name></member>
      <member refid="classwx_string_1af2706738677db54403e91bfd824595f5" prot="public" virt="non-virtual"><scope>wxString</scope><name>at</name></member>
      <member refid="classwx_string_1ac7175df8f51528fe2cc6a00f63ab9f24" prot="public" virt="non-virtual"><scope>wxString</scope><name>BeforeFirst</name></member>
      <member refid="classwx_string_1ae7538d32a43f35e065736750d4b169de" prot="public" virt="non-virtual"><scope>wxString</scope><name>BeforeLast</name></member>
      <member refid="classwx_string_1a7711f8aa5e08cbd73d31a39b0a90bca6" prot="public" virt="non-virtual"><scope>wxString</scope><name>begin</name></member>
      <member refid="classwx_string_1ab2b671a75b59a8c6c1af4d6d647f9902" prot="public" virt="non-virtual"><scope>wxString</scope><name>begin</name></member>
      <member refid="classwx_string_1a5db49c775c09e77fe0acde2a928bbf8f" prot="public" virt="non-virtual"><scope>wxString</scope><name>c_str</name></member>
      <member refid="classwx_string_1a886800922277e46ae6488001b6995fcd" prot="public" virt="non-virtual"><scope>wxString</scope><name>capacity</name></member>
      <member refid="classwx_string_1a5e054318f0333f62f2e5e3857ef3f359" prot="public" virt="non-virtual"><scope>wxString</scope><name>Capitalize</name></member>
      <member refid="classwx_string_1a9d6593e1e54d23bf5253fe26b6d8706a" prot="public" virt="non-virtual"><scope>wxString</scope><name>cbegin</name></member>
      <member refid="classwx_string_1aaa0e9e587f807e719336748a7c43dc36" prot="public" virt="non-virtual"><scope>wxString</scope><name>cend</name></member>
      <member refid="classwx_string_1a1110649ec649251516db659e94cd7692" prot="public" virt="non-virtual"><scope>wxString</scope><name>char_str</name></member>
      <member refid="classwx_string_1a6d7f9c6d210daec80bb59763e3016516" prot="public" virt="non-virtual"><scope>wxString</scope><name>char_type</name></member>
      <member refid="classwx_string_1a39f5e308eb0192cac2e338bedb377ee0" prot="public" virt="non-virtual"><scope>wxString</scope><name>Clear</name></member>
      <member refid="classwx_string_1a4dcd0f3f0fe03ccddb85df2f3b18d665" prot="public" virt="non-virtual"><scope>wxString</scope><name>clear</name></member>
      <member refid="classwx_string_1ad06ca05b668ac21a2c8df91813ede34d" prot="public" virt="non-virtual"><scope>wxString</scope><name>Clone</name></member>
      <member refid="classwx_string_1aa26d0a7115dc1d56a1486d449be184da" prot="public" virt="non-virtual"><scope>wxString</scope><name>Cmp</name></member>
      <member refid="classwx_string_1afe57c327ae857c2b256e38c8c653158f" prot="public" virt="non-virtual"><scope>wxString</scope><name>CmpNoCase</name></member>
      <member refid="classwx_string_1a00931c787708b651e0d58df76a15ab8d" prot="public" virt="non-virtual"><scope>wxString</scope><name>compare</name></member>
      <member refid="classwx_string_1ac14b5c926a262e079d2733bda1fa8d0b" prot="public" virt="non-virtual"><scope>wxString</scope><name>compare</name></member>
      <member refid="classwx_string_1a52004ccc07160abb7f132e1747121d28" prot="public" virt="non-virtual"><scope>wxString</scope><name>compare</name></member>
      <member refid="classwx_string_1ac85892c003c27862a389a53d7467ae92" prot="public" virt="non-virtual"><scope>wxString</scope><name>compare</name></member>
      <member refid="classwx_string_1a7aab74b6ccfbb7e79aced78713a7a00b" prot="public" virt="non-virtual"><scope>wxString</scope><name>compare</name></member>
      <member refid="classwx_string_1a9c8b22db8c1446c53f1728c261d2d65b" prot="public" virt="non-virtual"><scope>wxString</scope><name>const_pointer</name></member>
      <member refid="classwx_string_1afd79e86aee78b7aab5e82483ab8d7a57" prot="public" virt="non-virtual"><scope>wxString</scope><name>const_reference</name></member>
      <member refid="classwx_string_1a2867f9d92bb662f705c4e515552e8018" prot="public" virt="non-virtual"><scope>wxString</scope><name>Contains</name></member>
      <member refid="classwx_string_1a6afd088cfb9ff465d723520bb27aa516" prot="public" virt="non-virtual"><scope>wxString</scope><name>crbegin</name></member>
      <member refid="classwx_string_1aff0cc7f67cdf46881895285aa26c4d7f" prot="public" virt="non-virtual"><scope>wxString</scope><name>crend</name></member>
      <member refid="classwx_string_1af32f556964cde33f628a4136a3d181c8" prot="public" virt="non-virtual"><scope>wxString</scope><name>data</name></member>
      <member refid="classwx_string_1a0da48f47fbe336c5b0a1a58a283b5112" prot="public" virt="non-virtual"><scope>wxString</scope><name>empty</name></member>
      <member refid="classwx_string_1a07b0dcc83872b23833a7335b2b931c42" prot="public" virt="non-virtual"><scope>wxString</scope><name>Empty</name></member>
      <member refid="classwx_string_1ab4b284efb46b5f5fe9235a3144e12f39" prot="public" virt="non-virtual"><scope>wxString</scope><name>end</name></member>
      <member refid="classwx_string_1a14fb759ca1074e9fbab66f9579bd7b25" prot="public" virt="non-virtual"><scope>wxString</scope><name>end</name></member>
      <member refid="classwx_string_1a0fb6282a6ec609eaa5c4c12b6f441cc6" prot="public" virt="non-virtual"><scope>wxString</scope><name>ends_with</name></member>
      <member refid="classwx_string_1ac22e4c070ba96217a8935e69d37292c6" prot="public" virt="non-virtual"><scope>wxString</scope><name>ends_with</name></member>
      <member refid="classwx_string_1aab4457856671ee88fa3f01de611e20b4" prot="public" virt="non-virtual"><scope>wxString</scope><name>ends_with</name></member>
      <member refid="classwx_string_1a0674ad20d50668cba2ebae3ec5de4e6c" prot="public" virt="non-virtual"><scope>wxString</scope><name>EndsWith</name></member>
      <member refid="classwx_string_1a06ebc28714c67f736020e24507782762" prot="public" virt="non-virtual"><scope>wxString</scope><name>erase</name></member>
      <member refid="classwx_string_1a55b82ddfe4dae84a49ef9e175bdadd80" prot="public" virt="non-virtual"><scope>wxString</scope><name>erase</name></member>
      <member refid="classwx_string_1ada23f52354ca0625e520b84adfc41ce4" prot="public" virt="non-virtual"><scope>wxString</scope><name>erase</name></member>
      <member refid="classwx_string_1a2774f4d4ddd392f89a70e3a63ffa7c13" prot="public" virt="non-virtual"><scope>wxString</scope><name>find</name></member>
      <member refid="classwx_string_1a5d863e0afdb7fb57ec0048e2acdf625c" prot="public" virt="non-virtual"><scope>wxString</scope><name>find</name></member>
      <member refid="classwx_string_1af6e380addef0a57cf0abbac84ac26e54" prot="public" virt="non-virtual"><scope>wxString</scope><name>find</name></member>
      <member refid="classwx_string_1ab6e0c600bfccdf13b04c5bb7a8519a3b" prot="public" virt="non-virtual"><scope>wxString</scope><name>find</name></member>
      <member refid="classwx_string_1a55e5015f2ba4b8d93bf39bf1cc1cfbf5" prot="public" virt="non-virtual"><scope>wxString</scope><name>Find</name></member>
      <member refid="classwx_string_1afbaf744521cf3a850fa2cfae682eb29e" prot="public" virt="non-virtual"><scope>wxString</scope><name>Find</name></member>
      <member refid="classwx_string_1a9f7974624d08b3c2997aad156f484134" prot="public" virt="non-virtual"><scope>wxString</scope><name>find_first_not_of</name></member>
      <member refid="classwx_string_1a0a7bd26a30a97ac69218199c1b626bb1" prot="public" virt="non-virtual"><scope>wxString</scope><name>find_first_not_of</name></member>
      <member refid="classwx_string_1af8e11c997d25e6a6154adc7729d36141" prot="public" virt="non-virtual"><scope>wxString</scope><name>find_first_not_of</name></member>
      <member refid="classwx_string_1a4f04430561215c91b580f2bb9e7aedbd" prot="public" virt="non-virtual"><scope>wxString</scope><name>find_first_not_of</name></member>
      <member refid="classwx_string_1a58cc5f7b47c6ce7039f29f27ffd5800d" prot="public" virt="non-virtual"><scope>wxString</scope><name>find_first_not_of</name></member>
      <member refid="classwx_string_1aec908c5bcb37036cd7581da8bcbb6f02" prot="public" virt="non-virtual"><scope>wxString</scope><name>find_first_not_of</name></member>
      <member refid="classwx_string_1a94af755d41fc9f186295ec9c8ac0d26b" prot="public" virt="non-virtual"><scope>wxString</scope><name>find_first_of</name></member>
      <member refid="classwx_string_1adb8a7070df1764bae12a097b62b7e0a6" prot="public" virt="non-virtual"><scope>wxString</scope><name>find_first_of</name></member>
      <member refid="classwx_string_1a23a0f30baa7a4a35f40f63e4ee84f68f" prot="public" virt="non-virtual"><scope>wxString</scope><name>find_first_of</name></member>
      <member refid="classwx_string_1a2e21bf751c9b13cdc97c8777534186d2" prot="public" virt="non-virtual"><scope>wxString</scope><name>find_first_of</name></member>
      <member refid="classwx_string_1a08fd2bfdf1f6621637639f37a4a93125" prot="public" virt="non-virtual"><scope>wxString</scope><name>find_first_of</name></member>
      <member refid="classwx_string_1a009852881be77f3534af0cf630735167" prot="public" virt="non-virtual"><scope>wxString</scope><name>find_last_not_of</name></member>
      <member refid="classwx_string_1afe0cad1ade1fa608a7234398502415f3" prot="public" virt="non-virtual"><scope>wxString</scope><name>find_last_not_of</name></member>
      <member refid="classwx_string_1a184918f8f916fd00739fa5c00657ee89" prot="public" virt="non-virtual"><scope>wxString</scope><name>find_last_not_of</name></member>
      <member refid="classwx_string_1a86057cffbde99b90083a72443daea595" prot="public" virt="non-virtual"><scope>wxString</scope><name>find_last_not_of</name></member>
      <member refid="classwx_string_1a1655b1d2b22edbc84eb9c5dda0aca507" prot="public" virt="non-virtual"><scope>wxString</scope><name>find_last_not_of</name></member>
      <member refid="classwx_string_1a0c28a039a658fe2e5106be5fd7034f51" prot="public" virt="non-virtual"><scope>wxString</scope><name>find_last_of</name></member>
      <member refid="classwx_string_1a0d9338eec4caffb5ced53e5b3a1ab5dd" prot="public" virt="non-virtual"><scope>wxString</scope><name>find_last_of</name></member>
      <member refid="classwx_string_1a4af7bee24fabdc19ad463e97e2f5d28c" prot="public" virt="non-virtual"><scope>wxString</scope><name>find_last_of</name></member>
      <member refid="classwx_string_1aeb6a964bbc1dee68f0dbc663d74916ad" prot="public" virt="non-virtual"><scope>wxString</scope><name>find_last_of</name></member>
      <member refid="classwx_string_1a879ab6eb4454e8d89660e45a32fb67d8" prot="public" virt="non-virtual"><scope>wxString</scope><name>find_last_of</name></member>
      <member refid="classwx_string_1af03cee1e04c50ed6c619f66602ef680a" prot="public" virt="non-virtual"><scope>wxString</scope><name>find_last_of</name></member>
      <member refid="classwx_string_1a81f3784062dd83101e1ad103abca0596" prot="public" virt="non-virtual"><scope>wxString</scope><name>First</name></member>
      <member refid="classwx_string_1af775569c0e9ef7197e405ea56baa31f0" prot="public" virt="non-virtual"><scope>wxString</scope><name>First</name></member>
      <member refid="classwx_string_1a7004705101a69577445fdec68f59ba42" prot="public" virt="non-virtual"><scope>wxString</scope><name>fn_str</name></member>
      <member refid="classwx_string_1addd9ccfa3ae2b7ab2d66bcbf034d0be0" prot="public" virt="non-virtual"><scope>wxString</scope><name>Format</name></member>
      <member refid="classwx_string_1aa7bc330dcb0248bb8e886d27c4983ef5" prot="public" virt="non-virtual"><scope>wxString</scope><name>FormatV</name></member>
      <member refid="classwx_string_1aa6fa701ce212cf7100bf3898df0ab494" prot="public" virt="non-virtual"><scope>wxString</scope><name>Freq</name></member>
      <member refid="classwx_string_1a5aedc23e9cc2774237d99148d0622661" prot="public" virt="non-virtual"><scope>wxString</scope><name>From8BitData</name></member>
      <member refid="classwx_string_1aeb82fe2331039ceb32838c814ae36d89" prot="public" virt="non-virtual"><scope>wxString</scope><name>From8BitData</name></member>
      <member refid="classwx_string_1a717327d279426293270c16b980d6d6aa" prot="public" virt="non-virtual"><scope>wxString</scope><name>FromAscii</name></member>
      <member refid="classwx_string_1a70c1974b9bfa75ecf4eee50341b65625" prot="public" virt="non-virtual"><scope>wxString</scope><name>FromAscii</name></member>
      <member refid="classwx_string_1a600c7b770a1fca1c4a48337d42854c99" prot="public" virt="non-virtual"><scope>wxString</scope><name>FromAscii</name></member>
      <member refid="classwx_string_1aad58ba080272e8540ff39a8b023ad841" prot="public" virt="non-virtual"><scope>wxString</scope><name>FromAscii</name></member>
      <member refid="classwx_string_1ae101c2c62370da0014d36c8987fc6586" prot="public" virt="non-virtual"><scope>wxString</scope><name>FromAscii</name></member>
      <member refid="classwx_string_1a12be0249db64b0c53339cb79dcaa2add" prot="public" virt="non-virtual"><scope>wxString</scope><name>FromCDouble</name></member>
      <member refid="classwx_string_1abe1f539ff2e9d46a80849fc758f51dc3" prot="public" virt="non-virtual"><scope>wxString</scope><name>FromDouble</name></member>
      <member refid="classwx_string_1a2ddc1b7c8e1eb9adbf5874dead5b180b" prot="public" virt="non-virtual"><scope>wxString</scope><name>FromUTF8</name></member>
      <member refid="classwx_string_1a1a91d42a0166f38752265afd68881990" prot="public" virt="non-virtual"><scope>wxString</scope><name>FromUTF8</name></member>
      <member refid="classwx_string_1a6b1f6534399f4586d8c06f97db12cad4" prot="public" virt="non-virtual"><scope>wxString</scope><name>FromUTF8</name></member>
      <member refid="classwx_string_1a629b194b84749fc86662c728975e6ba4" prot="public" virt="non-virtual"><scope>wxString</scope><name>FromUTF8Unchecked</name></member>
      <member refid="classwx_string_1a23583b46c05d6c953aaaace6410599f5" prot="public" virt="non-virtual"><scope>wxString</scope><name>FromUTF8Unchecked</name></member>
      <member refid="classwx_string_1a02d953981bfbebe86ee0d058174eaf14" prot="public" virt="non-virtual"><scope>wxString</scope><name>FromUTF8Unchecked</name></member>
      <member refid="classwx_string_1ab0a50fea32db57302b92c5226b73a6b2" prot="public" virt="non-virtual"><scope>wxString</scope><name>GetChar</name></member>
      <member refid="classwx_string_1a08c79af0802aa0bca83b882d736b0239" prot="public" virt="non-virtual"><scope>wxString</scope><name>GetData</name></member>
      <member refid="classwx_string_1a8b30e786e96beed161b30cf6d6e1c7d5" prot="public" virt="non-virtual"><scope>wxString</scope><name>GetWritableChar</name></member>
      <member refid="classwx_string_1a8ff68c5cde68072f4712317d9480c3a9" prot="public" virt="non-virtual"><scope>wxString</scope><name>GetWriteBuf</name></member>
      <member refid="classwx_string_1a49f0c0bca0ab4ef521c5451aa5fdcde0" prot="public" virt="non-virtual"><scope>wxString</scope><name>insert</name></member>
      <member refid="classwx_string_1a8c83b43d3b5a4ea6c9dbb3f7e8b46402" prot="public" virt="non-virtual"><scope>wxString</scope><name>insert</name></member>
      <member refid="classwx_string_1ae786da601b5526a60f78f6c90d7c720b" prot="public" virt="non-virtual"><scope>wxString</scope><name>insert</name></member>
      <member refid="classwx_string_1a61b0a2b99953533aaa06938c55d12493" prot="public" virt="non-virtual"><scope>wxString</scope><name>insert</name></member>
      <member refid="classwx_string_1a014717749981bce220fe07896abc878e" prot="public" virt="non-virtual"><scope>wxString</scope><name>insert</name></member>
      <member refid="classwx_string_1a3ed61e4671e7b2e44224edf20d574681" prot="public" virt="non-virtual"><scope>wxString</scope><name>insert</name></member>
      <member refid="classwx_string_1a8be75ab1d86b3944ad335663d78f4a52" prot="public" virt="non-virtual"><scope>wxString</scope><name>insert</name></member>
      <member refid="classwx_string_1afd91c9bc221c5311f3b6542bcacdbaa6" prot="public" virt="non-virtual"><scope>wxString</scope><name>insert</name></member>
      <member refid="classwx_string_1a7a9ee1fe0ab4d308bb8b106becc733b2" prot="public" virt="non-virtual"><scope>wxString</scope><name>IsAscii</name></member>
      <member refid="classwx_string_1a4d754999c547a2aa3e49bcefeaec975b" prot="public" virt="non-virtual"><scope>wxString</scope><name>IsEmpty</name></member>
      <member refid="classwx_string_1a22052f951f8b3fa688a84c0761e601da" prot="public" virt="non-virtual"><scope>wxString</scope><name>IsNull</name></member>
      <member refid="classwx_string_1af0fbeac2928b29fcba1dcd35532dd8e0" prot="public" virt="non-virtual"><scope>wxString</scope><name>IsNumber</name></member>
      <member refid="classwx_string_1afed859668263a9b59ac3e6c8e6d1850d" prot="public" virt="non-virtual"><scope>wxString</scope><name>IsSameAs</name></member>
      <member refid="classwx_string_1aa962f1e3b898bd0956f6f516bbcb27a0" prot="public" virt="non-virtual"><scope>wxString</scope><name>IsSameAs</name></member>
      <member refid="classwx_string_1ac8cf602191fc6c644841b5a2c37b2e2f" prot="public" virt="non-virtual"><scope>wxString</scope><name>IsWord</name></member>
      <member refid="classwx_string_1a1da078938d688e65f3846b2dd4416d62" prot="public" virt="non-virtual"><scope>wxString</scope><name>Last</name></member>
      <member refid="classwx_string_1a93aaa3f92c1c13d7af2a590387340988" prot="public" virt="non-virtual"><scope>wxString</scope><name>Last</name></member>
      <member refid="classwx_string_1a8af862b2601c465fb6fd053729725d32" prot="public" virt="non-virtual"><scope>wxString</scope><name>Left</name></member>
      <member refid="classwx_string_1a6ba7cb0d5a1bbaae3b6090eef657f153" prot="public" virt="non-virtual"><scope>wxString</scope><name>Len</name></member>
      <member refid="classwx_string_1ae4d27fb54ba938b6dcf76bfcf722eccd" prot="public" virt="non-virtual"><scope>wxString</scope><name>length</name></member>
      <member refid="classwx_string_1a90e79470e43e40704c783b60d3d7795a" prot="public" virt="non-virtual"><scope>wxString</scope><name>Length</name></member>
      <member refid="classwx_string_1a7f5a092a70a7d3f42e8cb8b46f4663fb" prot="public" virt="non-virtual"><scope>wxString</scope><name>Lower</name></member>
      <member refid="classwx_string_1a2eddc0d38ba0090d5f3af1d66c4c702e" prot="public" virt="non-virtual"><scope>wxString</scope><name>LowerCase</name></member>
      <member refid="classwx_string_1afd7e60e3cb6c9bd2618f119a6f074874" prot="public" virt="non-virtual"><scope>wxString</scope><name>MakeCapitalized</name></member>
      <member refid="classwx_string_1a61e77fced34320925b5e849d074354ab" prot="public" virt="non-virtual"><scope>wxString</scope><name>MakeLower</name></member>
      <member refid="classwx_string_1ad2c92aab8b3fc526ad46860f27586f92" prot="public" virt="non-virtual"><scope>wxString</scope><name>MakeUpper</name></member>
      <member refid="classwx_string_1a5db4a7917ce5462dbb199342421620d5" prot="public" virt="non-virtual"><scope>wxString</scope><name>Matches</name></member>
      <member refid="classwx_string_1a3f642c981067b5f449cfbad84b91257c" prot="public" virt="non-virtual"><scope>wxString</scope><name>max_size</name></member>
      <member refid="classwx_string_1a4e0a115d6b98abacc9a5365f3e988135" prot="public" virt="non-virtual"><scope>wxString</scope><name>mb_str</name></member>
      <member refid="classwx_string_1ae28d32ca35ae00e3225fc25496a77f93" prot="public" virt="non-virtual"><scope>wxString</scope><name>Mid</name></member>
      <member refid="classwx_string_1a7f7b5ab972b4be6703f9c779654af247" prot="public" virt="non-virtual"><scope>wxString</scope><name>npos</name></member>
      <member refid="classwx_string_1a458e1ddea5e970d7c5a34e8820dbe757" prot="public" virt="non-virtual"><scope>wxString</scope><name>operator!</name></member>
      <member refid="classwx_string_1a206ce7ba0bc894c3cc7cad28b4d0888e" prot="public" virt="non-virtual"><scope>wxString</scope><name>operator()</name></member>
      <member refid="classwx_string_1a742b91e784f7baaef808b4ffb073ec53" prot="public" virt="non-virtual"><scope>wxString</scope><name>operator+</name></member>
      <member refid="classwx_string_1ac6b0d07b904597a70fea888c33f165cc" prot="public" virt="non-virtual"><scope>wxString</scope><name>operator+</name></member>
      <member refid="classwx_string_1ab82d9888319f8639cb3310d18b7640a3" prot="public" virt="non-virtual"><scope>wxString</scope><name>operator+=</name></member>
      <member refid="classwx_string_1a26c983e1489887af0ec14bbacef962ed" prot="public" virt="non-virtual"><scope>wxString</scope><name>operator+=</name></member>
      <member refid="classwx_string_1a4f2c1fa26b2d9488095c1c37f630d667" prot="public" virt="non-virtual"><scope>wxString</scope><name>operator&lt;&lt;</name></member>
      <member refid="classwx_string_1af184e3d8ace5937aa1a31d1149223217" prot="public" virt="non-virtual"><scope>wxString</scope><name>operator&lt;&lt;</name></member>
      <member refid="classwx_string_1a7cb5c09dbad7fcac72185a704b66bf0c" prot="public" virt="non-virtual"><scope>wxString</scope><name>operator&lt;&lt;</name></member>
      <member refid="classwx_string_1a75a58c002062d314fa363478541bd0c0" prot="public" virt="non-virtual"><scope>wxString</scope><name>operator&lt;&lt;</name></member>
      <member refid="classwx_string_1ad832539abd0902295efb641db16aa31f" prot="public" virt="non-virtual"><scope>wxString</scope><name>operator&lt;&lt;</name></member>
      <member refid="classwx_string_1a86af4a29f2436f67c33db61b1be87aaf" prot="public" virt="non-virtual"><scope>wxString</scope><name>operator&lt;&lt;</name></member>
      <member refid="classwx_string_1a5ea61559366584903472874cf994027a" prot="public" virt="non-virtual"><scope>wxString</scope><name>operator&lt;&lt;</name></member>
      <member refid="classwx_string_1a36aa76584cc47fc9b1912853b9a5fd74" prot="public" virt="non-virtual"><scope>wxString</scope><name>operator&lt;&lt;</name></member>
      <member refid="classwx_string_1a37787965f2669f4ab0bc25483dd2157f" prot="public" virt="non-virtual"><scope>wxString</scope><name>operator&lt;&lt;</name></member>
      <member refid="classwx_string_1a3a0e893fcb55da731775bdb69a444656" prot="public" virt="non-virtual"><scope>wxString</scope><name>operator&lt;&lt;</name></member>
      <member refid="classwx_string_1a18379021984fd71992d253dc53d775a0" prot="public" virt="non-virtual"><scope>wxString</scope><name>operator&lt;&lt;</name></member>
      <member refid="classwx_string_1a5eacb8e1b213d60236d8b96c8e6ee037" prot="public" virt="non-virtual"><scope>wxString</scope><name>operator&lt;&lt;</name></member>
      <member refid="classwx_string_1a36fde5296c664614745e7b9f20899a64" prot="public" virt="non-virtual"><scope>wxString</scope><name>operator&lt;&lt;</name></member>
      <member refid="classwx_string_1a100ef164a3b77bb59007ccd56a0b16f3" prot="public" virt="non-virtual"><scope>wxString</scope><name>operator&lt;&lt;</name></member>
      <member refid="classwx_string_1a2046fe40d7e29d24a9f85f71166af9ca" prot="public" virt="non-virtual"><scope>wxString</scope><name>operator&lt;&lt;</name></member>
      <member refid="classwx_string_1a4347d5d11a68f72078d08c6690e58e90" prot="public" virt="non-virtual"><scope>wxString</scope><name>operator&lt;&lt;</name></member>
      <member refid="classwx_string_1aced1de7ac678a0f16871b6a0e3bb02a2" prot="public" virt="non-virtual"><scope>wxString</scope><name>operator&lt;&lt;</name></member>
      <member refid="classwx_string_1a0f943fd3c77e97d478445c1f47345236" prot="public" virt="non-virtual"><scope>wxString</scope><name>operator&lt;&lt;</name></member>
      <member refid="classwx_string_1a3ba262755ed0b1b1b4b547ff5092b285" prot="public" virt="non-virtual"><scope>wxString</scope><name>operator=</name></member>
      <member refid="classwx_string_1ae72a297b5ec14564a21569ff2cb540d5" prot="public" virt="non-virtual"><scope>wxString</scope><name>operator=</name></member>
      <member refid="classwx_string_1a8924cd659c378a9b29d0f553bd1d5ff1" prot="public" virt="non-virtual"><scope>wxString</scope><name>operator[]</name></member>
      <member refid="classwx_string_1a015fbd8666790e967c9c581fa3601bac" prot="public" virt="non-virtual"><scope>wxString</scope><name>operator[]</name></member>
      <member refid="classwx_string_1ae0828056b4da71772d9bf45a34e0ed27" prot="public" virt="non-virtual"><scope>wxString</scope><name>Pad</name></member>
      <member refid="classwx_string_1a6d1498f58142e40d885b1bda1ec25c83" prot="public" virt="non-virtual"><scope>wxString</scope><name>pointer</name></member>
      <member refid="classwx_string_1a1c425aa8eed17e27cfae62e4107ffc62" prot="public" virt="non-virtual"><scope>wxString</scope><name>Prepend</name></member>
      <member refid="classwx_string_1a9588b7f2684b9a6a924dc3746a2b2f8d" prot="public" virt="non-virtual"><scope>wxString</scope><name>Printf</name></member>
      <member refid="classwx_string_1a5670779cbafb35c454a6d7664b6a6064" prot="public" virt="non-virtual"><scope>wxString</scope><name>PrintfV</name></member>
      <member refid="classwx_string_1a545b7ede1d4f1b1fa3166685d67a1594" prot="public" virt="non-virtual"><scope>wxString</scope><name>rbegin</name></member>
      <member refid="classwx_string_1ae63061f3a0c0f91224e91daf988af434" prot="public" virt="non-virtual"><scope>wxString</scope><name>rbegin</name></member>
      <member refid="classwx_string_1a1d03e8507f5f2044d9776255cb5dfb04" prot="public" virt="non-virtual"><scope>wxString</scope><name>reference</name></member>
      <member refid="classwx_string_1aa8dfdf0f97627d29c1408d4405705b70" prot="public" virt="non-virtual"><scope>wxString</scope><name>Remove</name></member>
      <member refid="classwx_string_1a6b9d17f6c058e86b9b0e9977079698a9" prot="public" virt="non-virtual"><scope>wxString</scope><name>Remove</name></member>
      <member refid="classwx_string_1a705cbd177edabccfbd30554992d853d9" prot="public" virt="non-virtual"><scope>wxString</scope><name>RemoveLast</name></member>
      <member refid="classwx_string_1adf38133c1e7b6d600f4747f52d2828aa" prot="public" virt="non-virtual"><scope>wxString</scope><name>rend</name></member>
      <member refid="classwx_string_1a114b4b3a040be56dfda6b5983d822cd9" prot="public" virt="non-virtual"><scope>wxString</scope><name>rend</name></member>
      <member refid="classwx_string_1a5517e2b01e8da1a7a92400028f1a8344" prot="public" virt="non-virtual"><scope>wxString</scope><name>Replace</name></member>
      <member refid="classwx_string_1af775c599d93dfd9a823c6e9325705140" prot="public" virt="non-virtual"><scope>wxString</scope><name>replace</name></member>
      <member refid="classwx_string_1a1b57daa87afac40e706978c430cb2ea7" prot="public" virt="non-virtual"><scope>wxString</scope><name>replace</name></member>
      <member refid="classwx_string_1a5ca42872ae6e682fe30c57b6f148fe6f" prot="public" virt="non-virtual"><scope>wxString</scope><name>replace</name></member>
      <member refid="classwx_string_1add78a50a6dc5ecb3218d392e8b789483" prot="public" virt="non-virtual"><scope>wxString</scope><name>replace</name></member>
      <member refid="classwx_string_1ae6601d849477f7cbf11e67f30b01c9e2" prot="public" virt="non-virtual"><scope>wxString</scope><name>replace</name></member>
      <member refid="classwx_string_1ae2d0a7c7513f2ddc28fd6579370847c6" prot="public" virt="non-virtual"><scope>wxString</scope><name>replace</name></member>
      <member refid="classwx_string_1ac29fe2d13a0b040282767c1170478b52" prot="public" virt="non-virtual"><scope>wxString</scope><name>replace</name></member>
      <member refid="classwx_string_1aa8c3fd89b232ef62649a55e1ad9c1688" prot="public" virt="non-virtual"><scope>wxString</scope><name>replace</name></member>
      <member refid="classwx_string_1ac01f01cd441ac5459f79cb4bb3a3d21f" prot="public" virt="non-virtual"><scope>wxString</scope><name>replace</name></member>
      <member refid="classwx_string_1ae728e7c453fb62ac1a95d2f47e3ced68" prot="public" virt="non-virtual"><scope>wxString</scope><name>replace</name></member>
      <member refid="classwx_string_1aee6ce55e7968215c666353dfe8a84b85" prot="public" virt="non-virtual"><scope>wxString</scope><name>replace</name></member>
      <member refid="classwx_string_1a0d244891d808e0be263ba24b8017feb5" prot="public" virt="non-virtual"><scope>wxString</scope><name>replace</name></member>
      <member refid="classwx_string_1ae81fdf564633d3daf267f2a3781360f1" prot="public" virt="non-virtual"><scope>wxString</scope><name>replace</name></member>
      <member refid="classwx_string_1a3fa50b251ca98e1e5d2aa8d73c688b57" prot="public" virt="non-virtual"><scope>wxString</scope><name>reserve</name></member>
      <member refid="classwx_string_1ac384f95725fb10097a3146d3c126e958" prot="public" virt="non-virtual"><scope>wxString</scope><name>resize</name></member>
      <member refid="classwx_string_1aa303318801ba97f04ea23c0991b729cd" prot="public" virt="non-virtual"><scope>wxString</scope><name>rfind</name></member>
      <member refid="classwx_string_1a0674033636626f13765fee8f568cfbfc" prot="public" virt="non-virtual"><scope>wxString</scope><name>rfind</name></member>
      <member refid="classwx_string_1a65427edf1eb4ef6b218c3c9a362603e7" prot="public" virt="non-virtual"><scope>wxString</scope><name>rfind</name></member>
      <member refid="classwx_string_1a4ab0ac7e96f84b85cd0872d221090717" prot="public" virt="non-virtual"><scope>wxString</scope><name>rfind</name></member>
      <member refid="classwx_string_1a67490dc52e54c709ed6e4dfc8a3d8389" prot="public" virt="non-virtual"><scope>wxString</scope><name>Right</name></member>
      <member refid="classwx_string_1ad1a022058f58773d2feb072ae10a1408" prot="public" virt="non-virtual"><scope>wxString</scope><name>SetChar</name></member>
      <member refid="classwx_string_1ae81a1f0b72aa33325f922aa50579de59" prot="public" virt="non-virtual"><scope>wxString</scope><name>Shrink</name></member>
      <member refid="classwx_string_1ad0118f24d9258584dee04213700e76c9" prot="public" virt="non-virtual"><scope>wxString</scope><name>size</name></member>
      <member refid="classwx_string_1afc144b1e31fffd1a9fc6ba8a551cc073" prot="public" virt="non-virtual"><scope>wxString</scope><name>size_type</name></member>
      <member refid="classwx_string_1a22f4aa8b22c53c6b06ef7c3e10054880" prot="public" virt="non-virtual"><scope>wxString</scope><name>starts_with</name></member>
      <member refid="classwx_string_1aaea25d3eedc8d3b0c8c31d6e9d32613d" prot="public" virt="non-virtual"><scope>wxString</scope><name>starts_with</name></member>
      <member refid="classwx_string_1a4a9e278ffb4bc71c993a23b0e815c861" prot="public" virt="non-virtual"><scope>wxString</scope><name>starts_with</name></member>
      <member refid="classwx_string_1acc80f973953489a15a601fccead0936f" prot="public" virt="non-virtual"><scope>wxString</scope><name>StartsWith</name></member>
      <member refid="classwx_string_1a6c03270ec594535e46d0c5c8f79617ce" prot="public" virt="non-virtual"><scope>wxString</scope><name>Strip</name></member>
      <member refid="classwx_string_1a86892c081560a9dec01224be3f30ede3" prot="public" virt="non-virtual"><scope>wxString</scope><name>substr</name></member>
      <member refid="classwx_string_1aac4abe6f7f91a10830946d366577bbc7" prot="public" virt="non-virtual"><scope>wxString</scope><name>SubString</name></member>
      <member refid="classwx_string_1a11a06a7638bdfe254ff07f5e1fb073b0" prot="public" virt="non-virtual"><scope>wxString</scope><name>swap</name></member>
      <member refid="classwx_string_1a6a1adf05e5cde63a792a6989aa20357a" prot="public" virt="non-virtual"><scope>wxString</scope><name>tchar_str</name></member>
      <member refid="classwx_string_1a4e4cb74bffe1c95602b865fd63c70bc8" prot="public" virt="non-virtual"><scope>wxString</scope><name>To8BitData</name></member>
      <member refid="classwx_string_1a99d4b351863373589f58554ea0f65067" prot="public" virt="non-virtual"><scope>wxString</scope><name>ToAscii</name></member>
      <member refid="classwx_string_1a51469f8fd0373785566002872bedd23a" prot="public" virt="non-virtual"><scope>wxString</scope><name>ToCDouble</name></member>
      <member refid="classwx_string_1a0a7d2dcd77a0b11a70d9841ad21d168a" prot="public" virt="non-virtual"><scope>wxString</scope><name>ToCLong</name></member>
      <member refid="classwx_string_1a01d30dfea86c9f0c92d36f9b3f5fd6fb" prot="public" virt="non-virtual"><scope>wxString</scope><name>ToCULong</name></member>
      <member refid="classwx_string_1a0c719082ab8cde8323ea15f2ed9fb25d" prot="public" virt="non-virtual"><scope>wxString</scope><name>ToDouble</name></member>
      <member refid="classwx_string_1ab5b89e7f43276ff4c7e36b473768cafb" prot="public" virt="non-virtual"><scope>wxString</scope><name>ToInt</name></member>
      <member refid="classwx_string_1ad142803e239ff1ba9725b9abed29efc0" prot="public" virt="non-virtual"><scope>wxString</scope><name>ToLong</name></member>
      <member refid="classwx_string_1af7344b65af7eaed045c4e3ba82275fdc" prot="public" virt="non-virtual"><scope>wxString</scope><name>ToLongLong</name></member>
      <member refid="classwx_string_1a0cdcd5cf94be8686ed6b11248e99fbb2" prot="public" virt="non-virtual"><scope>wxString</scope><name>ToStdString</name></member>
      <member refid="classwx_string_1abb20ba3a70eee6d27ae98926b9fd8c50" prot="public" virt="non-virtual"><scope>wxString</scope><name>ToStdWstring</name></member>
      <member refid="classwx_string_1aa5cde0002c67925757b9127846f90519" prot="public" virt="non-virtual"><scope>wxString</scope><name>ToUInt</name></member>
      <member refid="classwx_string_1abc52044a54499153dc493fb1d7ac9b53" prot="public" virt="non-virtual"><scope>wxString</scope><name>ToULong</name></member>
      <member refid="classwx_string_1a200096add10bbadacb4143dc06f2b353" prot="public" virt="non-virtual"><scope>wxString</scope><name>ToULongLong</name></member>
      <member refid="classwx_string_1a62b0fe097622f442f3ec0282f45c32d0" prot="public" virt="non-virtual"><scope>wxString</scope><name>ToUTF8</name></member>
      <member refid="classwx_string_1aa25efdadf804c0818175dbe6f5671eac" prot="public" virt="non-virtual"><scope>wxString</scope><name>Trim</name></member>
      <member refid="classwx_string_1a78478a64b23a99d884b2c64ee1d487fd" prot="public" virt="non-virtual"><scope>wxString</scope><name>Truncate</name></member>
      <member refid="classwx_string_1a3783b441b540bac783a8e5a2cceaae7d" prot="public" virt="non-virtual"><scope>wxString</scope><name>UngetWriteBuf</name></member>
      <member refid="classwx_string_1aa4ff7bfb39cdac3a8322cd4932216eb0" prot="public" virt="non-virtual"><scope>wxString</scope><name>UngetWriteBuf</name></member>
      <member refid="classwx_string_1a99b272edade4a8fbcbb8aeddd733594f" prot="public" virt="non-virtual"><scope>wxString</scope><name>Upper</name></member>
      <member refid="classwx_string_1ab708a3eb6b01704bc0019f1cf0de5b4f" prot="public" virt="non-virtual"><scope>wxString</scope><name>UpperCase</name></member>
      <member refid="classwx_string_1a1e3f959e6841c6958bc391246ba7f747" prot="public" virt="non-virtual"><scope>wxString</scope><name>utf8_str</name></member>
      <member refid="classwx_string_1a5689d0c457a386f130b8a8f6529db61d" prot="public" virt="non-virtual"><scope>wxString</scope><name>utf8_string</name></member>
      <member refid="classwx_string_1a6abd360d5072ed411f80eda16ed0bd99" prot="public" virt="non-virtual"><scope>wxString</scope><name>value_type</name></member>
      <member refid="classwx_string_1aa17b9e38640fd3f22b5235173e910c9b" prot="public" virt="non-virtual"><scope>wxString</scope><name>wc_str</name></member>
      <member refid="classwx_string_1a4d289161c8079f5af7b762904f1610c5" prot="public" virt="non-virtual"><scope>wxString</scope><name>wchar_str</name></member>
      <member refid="classwx_string_1a2af910142512c5bbef6268a3fc78a957" prot="public" virt="non-virtual"><scope>wxString</scope><name>wx_str</name></member>
      <member refid="classwx_string_1a55431c6ae13bf65166c5ebf499d3c135" prot="public" virt="non-virtual"><scope>wxString</scope><name>wxString</name></member>
      <member refid="classwx_string_1aa4133e804efc7d6a7615f1720697d2f0" prot="public" virt="non-virtual"><scope>wxString</scope><name>wxString</name></member>
      <member refid="classwx_string_1a791f5885a0950a41ee76eddc2534a5f3" prot="public" virt="non-virtual"><scope>wxString</scope><name>wxString</name></member>
      <member refid="classwx_string_1a1d31831eeb309c5d673a97aa9f1568d3" prot="public" virt="non-virtual"><scope>wxString</scope><name>wxString</name></member>
      <member refid="classwx_string_1a1afc83d848d12750b539e579624df9fa" prot="public" virt="non-virtual"><scope>wxString</scope><name>wxString</name></member>
      <member refid="classwx_string_1ae92c9031a0143807f1d72fd2b75cfcb4" prot="public" virt="non-virtual"><scope>wxString</scope><name>wxString</name></member>
      <member refid="classwx_string_1a0ec94790ea7b08344537f5cf893476f8" prot="public" virt="non-virtual"><scope>wxString</scope><name>wxString</name></member>
      <member refid="classwx_string_1a96d8fedae47a282c685c6af0dfa3728c" prot="public" virt="non-virtual"><scope>wxString</scope><name>wxString</name></member>
      <member refid="classwx_string_1a18eac98263a8ecc3d565b9e6627a14b9" prot="public" virt="non-virtual"><scope>wxString</scope><name>wxString</name></member>
      <member refid="classwx_string_1a86a2ec232912c97ed44ba34651d98123" prot="public" virt="non-virtual"><scope>wxString</scope><name>wxString</name></member>
      <member refid="classwx_string_1ae1fcf718262b69078417a15bde646668" prot="public" virt="non-virtual"><scope>wxString</scope><name>wxString</name></member>
      <member refid="classwx_string_1a8b1f7dc26eb881f228fd7be26885dbe7" prot="public" virt="non-virtual"><scope>wxString</scope><name>wxString</name></member>
      <member refid="classwx_string_1afb25e4a2670786aa360792fe40eb6d31" prot="public" virt="non-virtual"><scope>wxString</scope><name>wxString</name></member>
      <member refid="classwx_string_1a6fdc82f6b7412bc8617a9194580024ae" prot="public" virt="non-virtual"><scope>wxString</scope><name>wxString</name></member>
      <member refid="classwx_string_1adbc5f0b4efc63b775da5e9571841928a" prot="public" virt="non-virtual"><scope>wxString</scope><name>wxString</name></member>
      <member refid="classwx_string_1adf6220517c6b2e2305c9af3c5e932afb" prot="public" virt="non-virtual"><scope>wxString</scope><name>wxString</name></member>
      <member refid="classwx_string_1ad25109eb98a464712a6f28939e5adbdd" prot="public" virt="non-virtual"><scope>wxString</scope><name>~wxString</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
