<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="plat_gtk_install" kind="page">
    <compoundname>plat_gtk_install</compoundname>
    <title>wxWidgets for GTK installation</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><anchor id="plat_gtk_install_1md_docs_gtk_install"/></para>
<sect1 id="plat_gtk_install_1gtk_install">
<title>Installation</title>
<sect2 id="plat_gtk_install_1gtk_simple">
<title>The simplest case</title>
<para>If you compile wxWidgets on Linux for the first time and don&apos;t like to read install instructions just do the following in wxWidgets directory: <verbatim>&gt; mkdir buildgtk
&gt; cd buildgtk
&gt; ../configure --with-gtk
&gt; make
&gt; su &lt;type root password&gt;
&gt; make install
&gt; ldconfig
</verbatim> [if you get &quot;ldconfig: command not found&quot;, try using &quot;/sbin/ldconfig&quot;]</para>
<para>If you don&apos;t do the &apos;make install&apos; part, you can still use the libraries from the buildgtk directory, but they may not be available to other users.</para>
<para>If you want to remove wxWidgets on Unix you can do this: <verbatim>&gt; su &lt;type root password&gt;
&gt; make uninstall
&gt; ldconfig
</verbatim> Note that by default, GTK 3 is used. GTK 2 can be specified with <ndash/>with-gtk=2.</para>
<para>If you use CMake, please see <ref refid="overview_cmake" kindref="compound">CMake Overview</ref> for building wxWidgets using it.</para>
</sect2>
<sect2 id="plat_gtk_install_1gtk_errors_simple">
<title>Troubleshooting</title>
<para>IMPORTANT NOTE:</para>
<para>When sending bug reports tell us what version of wxWidgets you are using (including the beta) and what compiler on what system. One example: wxGTK 3.0.5, GCC 9.3.1, Fedora 31.</para>
<para>For any configure errors: please look at <computeroutput>config.log</computeroutput> file which was generated during configure run, it usually contains some useful information.</para>
<para>If configure reports that you don&apos;t have GTK installed, please check that the appropriate <emphasis>development</emphasis> package is available on your system and not just the GTK libraries themselves. You can use <computeroutput>pkg-config --modversion gtk+-3.0</computeroutput> (or <computeroutput>2.0</computeroutput>) to check that this is the case.</para>
<para>You get errors from make: please use GNU make instead of the native make program. Currently wxWidgets can be built only with GNU make, BSD make and Solaris make. Other versions might work or not.</para>
<para>You get immediate crashes when starting any sample or application: This may be due to having compiled the library with different flags or compiler options than your program or using the headers from a different version of the library that is being used during run-time. If you have multiple versions of wxWidgets installed, please try uninstalling the ones you don&apos;t need and rebuilding.</para>
</sect2>
<sect2 id="plat_gtk_install_1gtk_simple_app">
<title>The simplest program</title>
<para>Now create your super-application myfoo.cpp and compile anywhere with <verbatim>g++ myfoo.cpp `wx-config --libs --cxxflags` -o myfoo
</verbatim></para>
</sect2>
<sect2 id="plat_gtk_install_1gtk_cygwin">
<title>Building wxGTK on Cygwin</title>
<para>The normal build instructions should work fine on Cygwin. The one difference with Cygwin is that when using the &quot;--enable-shared&quot; configure option (which is the default) the API is exported explicitly using <computeroutput>__declspec(dllexport)</computeroutput> rather than all global symbols being available.</para>
<para>This shouldn&apos;t make a difference using the library and should be a little more efficient. However if an export attribute has been missed somewhere you will see linking errors. If this happens then you can work around the problem by setting <computeroutput>LDFLAGS=-Wl,--export-all-symbols</computeroutput>. Please also let us know about it on the wx-dev mailing list.</para>
</sect2>
<sect2 id="plat_gtk_install_1gtk_options">
<title>Configure options</title>
<para>This section documents some of the most important configure options. It is not exhaustive, please refer to <computeroutput>configure --help</computeroutput> for the full list of options.</para>
<para>Note that the options documented below are given in the form indicating how to change the default behaviour, i.e. if it says &quot;--disable-optimise&quot; it means that optimizations are enabled by default.</para>
<para>All standard configure options are supported, e.g. you can choose <computeroutput>--prefix</computeroutput> to select the directory to install the libraries to. Also note that cross-compiling is fully supported, just specify the <computeroutput>--host</computeroutput> option as usual (please refer to autoconf manual for more information).</para>
<para>The following options can be used to specify the kind and number of libraries to build: <verbatim>--disable-shared        Do not create shared libraries, but
                        build static libraries instead.

--enable-monolithic     Build wxWidgets as single library instead
                        of as several smaller libraries (which is
                        the default since wxWidgets 2.5.0).
</verbatim> Options for third party dependencies: wxWidgets may use other libraries present on the current system. For some of these libraries, wxWidgets also provides built-in versions, that can be linked into wx libraries themselves, which can be useful to minimize external dependencies. <verbatim>--disable-sys-libs      Don&apos;t use system libraries when there is
                        a built-in version included in wxWidgets.
                        Note that other system libraries can,
                        and typically will, still be used if
                        found.

--without-libpng        Disables PNG image format code.
                        Don&apos;t use libpng (although GTK
                        itself still uses it).

--without-libjpeg       Disables JPEG image format code.
                        Don&apos;t use libjpeg.

--without-libtiff       Disables TIFF image format code.
                        Don&apos;t use libtiff.

--without-expat         Disable XML classes based on Expat parser.
                        Don&apos;t use expat library.

--without-liblzma       Disable LZMA compression support.
                        Don&apos;t use liblzma.

--without-libcurl       Don&apos;t use libcurl even if it&apos;s available.
                        Disables wxWebRequest.

--without-opengl        Disable OpenGL integration with wxGLCanvas.
                        Don&apos;t use OpenGL or EGL libraries.

--disable-glcanvasegl   Disable EGL support even if it is available
                        (it would be used if it is, by default).

--disable-mediactrl     Disable wxMediaCtrl.
                        Don&apos;t use GStreamer libraries.

--disable-webview       Disable wxWebView.
                        Don&apos;t use webkit2gtk and its multiple
                        dependencies.
</verbatim> Normally, you won&apos;t have to choose a toolkit, because configure defaults to wxGTK anyhow. However you need to use this option to explicitly specify the version of GTK to use, e.g.: <verbatim>--with-gtk=3            Use GTK 3. Default.
--with-gtk=2            Use GTK 2.
--with-gtk=1            Use GTK 1.2. Obsolete.
</verbatim> Some other general compilation options: <verbatim>--disable-optimise      Do not optimise the code. Can be useful
                        for debugging but shouldn&apos;t be used
                        for production builds.

--disable-unicode       Disable Unicode support. Not recommended.

--enable-no_rtti        Enable compilation without creation of
                        C++ RTTI information in object files.
                        This will speed-up compilation and reduce
                        binary size.

--enable-no_exceptions  Enable compilation without creation of
                        C++ exception information in object files.
                        This will speed-up compilation and reduce
                        binary size.

--enable-debug_info     Add debug info to object files and
                        executables for use with debuggers
                        such as gdb (or its many frontends).

--enable-debug_flag     Define __DEBUG__ and __WXDEBUG__ when
                        compiling. This enable wxWidgets&apos; very
                        useful internal debugging tricks (such
                        as automatically reporting illegal calls)
                        to work. Note that program and library
                        must be compiled with the same debug
                        options.

--enable-debug          Same as --enable-debug_info and
                        --enable-debug_flag together. Unless you have
                        some very specific needs, you should use this
                        option instead of --enable-debug_info/flag ones
                        separately.
</verbatim> To reduce the final libraries (or executables, when linking statically) size, many wxWidgets features may be disabled. Here is a list of some of them: <verbatim>--disable-pnm           Disables PNM image format code.

--disable-gif           Disables GIF image format code.

--disable-pcx           Disables PCX image format code.

--disable-iff           Disables IFF image format code.

--disable-resources     Disables the use of *.wxr type resources.

--disable-threads       Disables threads. Will also disable sockets.

--disable-sockets       Disables sockets.

--disable-dnd           Disables Drag&apos;n&apos;Drop.

--disable-clipboard     Disables Clipboard.

--disable-streams       Disables the wxStream classes.

--disable-file          Disables the wxFile class.

--disable-textfile      Disables the wxTextFile class.

--disable-intl          Disables the internationalisation.

--disable-validators    Disables validators.
</verbatim> Please remember that the full list of options can be seen in <computeroutput>configure --help</computeroutput> output.</para>
</sect2>
<sect2 id="plat_gtk_install_1gtk_compling">
<title>Building the libraries</title>
<para>After running configure, just run <computeroutput>make</computeroutput> from the same directory. Building can take some time and it&apos;s strongly recommended to use <computeroutput>--jobs</computeroutput> option with GNU make, e.g. <computeroutput>make -j8</computeroutput> if you have 8 logical CPU cores.</para>
<para>Then you may install the library and its header files under <computeroutput>/usr/local/include/wx</computeroutput> and <computeroutput>/usr/local/lib</computeroutput> respectively. You have to perform the following command as root, using either <computeroutput>su</computeroutput> or <computeroutput>sudo</computeroutput>: <verbatim>    make install
</verbatim> After installing, you can run <computeroutput>make clean</computeroutput> in the original directory or just remove it entirely if you don&apos;t plan to build wxWidgets again in the near future.</para>
<para>Note that installing the library is <emphasis>not</emphasis> required and it can also be used from the build directory by simply specifying the full path to <computeroutput>wx-config</computeroutput> script located in it when building your application.</para>
</sect2>
<sect2 id="plat_gtk_install_1gtk_new_project">
<title>Building your project</title>
<para>You need to use the compilation flags returned by <computeroutput>wx-config --cxxflags</computeroutput> and linking flags returned by <computeroutput>wx-config --libs</computeroutput>, which may be combined into a single invocation: <verbatim>    g++ myfoo.cpp `wx-config --cxxflags --libs` -o myfoo
</verbatim> A simple makefile for a program using wxWidgets could be written in the following way (note that if you are copying and pasting this into your makefile, the leading spaces must be replaced by a <computeroutput>TAB</computeroutput> character):</para>
<para><programlisting filename=".make"><codeline><highlight class="normal">program:<sp/>program.o</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>$(CXX)<sp/>-o<sp/>program<sp/>program.o<sp/>`wx-config<sp/>--libs`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">program.o:<sp/>program.cpp</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>$(CXX)<sp/>`wx-config<sp/>--cxxflags`<sp/>-c<sp/>program.cpp<sp/>-o<sp/>program.o</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">clean:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>$(RM)<sp/>program.o<sp/>program</highlight></codeline>
<codeline><highlight class="normal">.PHONY:<sp/>clean</highlight></codeline>
</programlisting></para>
<para>If your application uses only some of wxWidgets libraries, you can specify required libraries when running wx-config. For example, <computeroutput>wx-config --libs=html,core</computeroutput> will only output link command to link with libraries required by core GUI classes and wxHTML classes. See the manual for more information on the libraries. </para>
</sect2>
</sect1>
    </detaileddescription>
    <location file="docs/gtk/install.md"/>
  </compounddef>
</doxygen>
