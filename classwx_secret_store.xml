<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="classwx_secret_store" kind="class" language="C++" prot="public">
    <compoundname>wxSecretStore</compoundname>
    <includes local="no">wx/secretstore.h</includes>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classwx_secret_store_1aa37e4264c3fe116194c6b86c9cfc0d22" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_secret_store" kindref="compound">wxSecretStore</ref></type>
        <definition>static wxSecretStore wxSecretStore::GetDefault</definition>
        <argsstring>()</argsstring>
        <name>GetDefault</name>
        <qualifiedname>wxSecretStore::GetDefault</qualifiedname>
        <briefdescription>
<para>Returns the default secrets collection to use. </para>
        </briefdescription>
        <detaileddescription>
<para>Call <ref refid="classwx_secret_store_1abc49e6cd3e3ffde58d106e379e13fec4" kindref="member">IsOk()</ref> on the returned object to check if this method succeeded.</para>
<para>Note that this method may show a dialog to the user under some platforms, so it can take an arbitrarily long time to return. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/secretstore.h" line="248" column="26"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classwx_secret_store_1abc49e6cd3e3ffde58d106e379e13fec4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxSecretStore::IsOk</definition>
        <argsstring>(wxString *errmsg=NULL) const</argsstring>
        <name>IsOk</name>
        <qualifiedname>wxSecretStore::IsOk</qualifiedname>
        <param>
          <type><ref refid="classwx_string" kindref="compound">wxString</ref> *</type>
          <declname>errmsg</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Check if this object can actually be used. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>errmsg</parametername>
</parameternamelist>
<parameterdescription>
<para>If not NULL, this parameter is filled with a user-readable error message explaining why the secret store can&apos;t be used (this argument is new since wxWidgets 3.1.4) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/secretstore.h" line="257" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_secret_store_1a6c667fdac4052e9afc75b3d491a2073d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxSecretStore::Save</definition>
        <argsstring>(const wxString &amp;service, const wxString &amp;username, const wxSecretValue &amp;password)</argsstring>
        <name>Save</name>
        <qualifiedname>wxSecretStore::Save</qualifiedname>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>service</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>username</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_secret_value" kindref="compound">wxSecretValue</ref> &amp;</type>
          <declname>password</declname>
        </param>
        <briefdescription>
<para>Store a username/password combination. </para>
        </briefdescription>
        <detaileddescription>
<para>The service name should be user readable and unique.</para>
<para>If a secret with the same service name already exists, it will be overwritten with the new value. In particular, notice that it is not currently allowed to store passwords for different usernames for the same service, even if the underlying platform API supports this (as is the case for macOS but not MSW).</para>
<para>Returns false after logging an error message if an error occurs, otherwise returns true indicating that the secret has been stored and can be retrieved by calling <ref refid="classwx_secret_store_1a642bb258b41827428b10fc44a9189864" kindref="member">Load()</ref> later. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/secretstore.h" line="274" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_secret_store_1a642bb258b41827428b10fc44a9189864" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxSecretStore::Load</definition>
        <argsstring>(const wxString &amp;service, wxString &amp;username, wxSecretValue &amp;password) const</argsstring>
        <name>Load</name>
        <qualifiedname>wxSecretStore::Load</qualifiedname>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>service</declname>
        </param>
        <param>
          <type><ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>username</declname>
        </param>
        <param>
          <type><ref refid="classwx_secret_value" kindref="compound">wxSecretValue</ref> &amp;</type>
          <declname>password</declname>
        </param>
        <briefdescription>
<para>Look up the username/password for the given service. </para>
        </briefdescription>
        <detaileddescription>
<para>If no username/password is found for the given service, false is returned.</para>
<para>Otherwise the function returns true and updates the provided <emphasis>username</emphasis> and <emphasis>password</emphasis> arguments. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/secretstore.h" line="287" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classwx_secret_store_1a4f374358518416fafffbc1cc59dec6e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxSecretStore::Delete</definition>
        <argsstring>(const wxString &amp;service)</argsstring>
        <name>Delete</name>
        <qualifiedname>wxSecretStore::Delete</qualifiedname>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>service</declname>
        </param>
        <briefdescription>
<para>Delete a previously stored username/password combination. </para>
        </briefdescription>
        <detaileddescription>
<para>If anything was deleted, returns true. Otherwise returns false and logs an error if any error other than not finding any matches occurred. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/secretstore.h" line="297" column="10"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A collection of secrets, sometimes called a key chain. </para>
    </briefdescription>
    <detaileddescription>
<para>This class provides access to the secrets stored in the OS-provided facility, e.g. credentials manager under MSW, keychain under macOS or Freedesktop-compliant password storage mechanism such as GNOME keyring under Unix systems.</para>
<para>Currently only the access to the default keychain/ring is provided using <ref refid="classwx_secret_store_1aa37e4264c3fe116194c6b86c9cfc0d22" kindref="member">GetDefault()</ref> method, support for other ones could be added in the future. After calling this method just call <ref refid="classwx_secret_store_1a6c667fdac4052e9afc75b3d491a2073d" kindref="member">Save()</ref> to store a password entered by user and then call <ref refid="classwx_secret_store_1a642bb258b41827428b10fc44a9189864" kindref="member">Load()</ref> to retrieve it during next program execution. See <ref refid="page_samples_1page_samples_secretstore" kindref="member">Secret Store Sample</ref> for an example of using this class.</para>
<para>The <computeroutput>service</computeroutput> parameter of the methods in this class should describe the purpose of the password and be unique to your program, e.g. it could be &quot;MyCompany/MyProgram/SomeServer&quot;. Note that the server name must be included in the string to allow storing passwords for more than one server.</para>
<para>Notice that this class is always available under MSW (except when using MinGW32 which doesn&apos;t provide the required <computeroutput>wincred.h</computeroutput> header) and macOS but requires libsecret (see <ulink url="https://developer.gnome.org/libsecret/">https://developer.gnome.org/libsecret/</ulink>) under Unix and may not be compiled in if it wasn&apos;t found. You can check <computeroutput>wxUSE_SECRETSTORE</computeroutput> to test for this. Moreover, retrieving the default secret store may also fail under Unix during run-time if the desktop environment doesn&apos;t provide one, so don&apos;t forget to call <ref refid="classwx_secret_store_1abc49e6cd3e3ffde58d106e379e13fec4" kindref="member">IsOk()</ref> to check for this too.</para>
<para>Example of storing credentials using this class: <programlisting><codeline><highlight class="normal"><ref refid="classwx_secret_store" kindref="compound">wxSecretStore</ref><sp/>store<sp/>=<sp/><ref refid="classwx_secret_store_1aa37e4264c3fe116194c6b86c9cfc0d22" kindref="member">wxSecretStore::GetDefault</ref>();</highlight></codeline>
<codeline><highlight class="normal"><ref refid="classwx_string" kindref="compound">wxString</ref><sp/>errmsg;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>store.<ref refid="classwx_secret_store_1abc49e6cd3e3ffde58d106e379e13fec4" kindref="member">IsOk</ref>(&amp;errmsg)<sp/>)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!store.<ref refid="classwx_secret_store_1a6c667fdac4052e9afc75b3d491a2073d" kindref="member">Save</ref>(</highlight><highlight class="stringliteral">&quot;MyApp/MyService&quot;</highlight><highlight class="normal">,<sp/>username,<sp/>password)<sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="interface_2wx_2log_8h_1a0c2b19580ef6721508e6d69534b10e90" kindref="member">wxLogWarning</ref>(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>save<sp/>credentials<sp/>to<sp/>the<sp/>system<sp/>secret<sp/>store.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="interface_2wx_2log_8h_1a0c2b19580ef6721508e6d69534b10e90" kindref="member">wxLogWarning</ref>(</highlight><highlight class="stringliteral">&quot;This<sp/>system<sp/>doesn&apos;t<sp/>support<sp/>storing<sp/>passwords<sp/>securely<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;(%s).&quot;</highlight><highlight class="normal">,<sp/>errmsg);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>And to load it back: <programlisting><codeline><highlight class="normal"><ref refid="classwx_secret_store" kindref="compound">wxSecretStore</ref><sp/>store<sp/>=<sp/><ref refid="classwx_secret_store_1aa37e4264c3fe116194c6b86c9cfc0d22" kindref="member">wxSecretStore::GetDefault</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>store.<ref refid="classwx_secret_store_1abc49e6cd3e3ffde58d106e379e13fec4" kindref="member">IsOk</ref>()<sp/>)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classwx_string" kindref="compound">wxString</ref><sp/>username;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classwx_secret_value" kindref="compound">wxSecretValue</ref><sp/>password;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>store.<ref refid="classwx_secret_store_1a642bb258b41827428b10fc44a9189864" kindref="member">Load</ref>(</highlight><highlight class="stringliteral">&quot;MyApp/MyService&quot;</highlight><highlight class="normal">,<sp/>username,<sp/>password)<sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...<sp/>use<sp/>the<sp/>password<sp/>...</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><heading level="2"></heading>
</para>
<para>Library:<nonbreakablespace/><nonbreakablespace/><ref refid="page_libs_1page_libs_wxbase" kindref="member">wxBase</ref></para>
<para>Category:<nonbreakablespace/><nonbreakablespace/><ref refid="group__group__class__misc" kindref="compound">Miscellaneous</ref></para>
<para><simplesect kind="since"><para>3.1.1 </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="interface/wx/secretstore.h" line="237" column="1" bodyfile="interface/wx/secretstore.h" bodystart="238" bodyend="298"/>
    <listofallmembers>
      <member refid="classwx_secret_store_1a4f374358518416fafffbc1cc59dec6e9" prot="public" virt="non-virtual"><scope>wxSecretStore</scope><name>Delete</name></member>
      <member refid="classwx_secret_store_1aa37e4264c3fe116194c6b86c9cfc0d22" prot="public" virt="non-virtual"><scope>wxSecretStore</scope><name>GetDefault</name></member>
      <member refid="classwx_secret_store_1abc49e6cd3e3ffde58d106e379e13fec4" prot="public" virt="non-virtual"><scope>wxSecretStore</scope><name>IsOk</name></member>
      <member refid="classwx_secret_store_1a642bb258b41827428b10fc44a9189864" prot="public" virt="non-virtual"><scope>wxSecretStore</scope><name>Load</name></member>
      <member refid="classwx_secret_store_1a6c667fdac4052e9afc75b3d491a2073d" prot="public" virt="non-virtual"><scope>wxSecretStore</scope><name>Save</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
